{"version":3,"file":"stimulus-library.umd.js","sources":["../src/base_controller.ts","../src/appearance_controller.ts","../src/async_block_controller.ts","../src/auto_submit_form_controller.ts","../node_modules/stimulus-use/dist/support/index.js","../node_modules/stimulus-use/dist/use-intersection/use-intersection.js","../node_modules/stimulus-use/dist/use-click-outside/use-click-outside.js","../node_modules/stimulus-use/dist/stimulus_use.js","../node_modules/stimulus-use/dist/use-hover/use-hover.js","../node_modules/stimulus-use/dist/use-mutation/use-mutation.js","../node_modules/stimulus-use/dist/use-window-resize/use-window-resize.js","../node_modules/stimulus-use/dist/use-debounce/use-debounce.js","../src/autosize_controller.ts","../src/char_count_controller.ts","../src/checkbox_select_all_controller.ts","../src/clipboard_controller.ts","../src/utilities/elements.ts","../src/confirm_controller.ts","../src/confirm_navigation_controller.ts","../src/debug_controller.ts","../src/detect_dirty_controller.ts","../src/disable_inputs_controller.ts","../src/dismissable_controller.ts","../src/empty_dom_controller.ts","../src/enable_inputs_controller.ts","../src/fallback_image_controller.ts","../src/form_save_controller.ts","../src/intersection_controller.ts","../src/utilities/scroll.ts","../src/lazy_block_controller.ts","../src/lightbox_image_controller.ts","../src/limited_selection_checkboxes_controller.ts","../src/nested_form_controller.ts","../src/password_confirm_controller.ts","../src/password_peek_controller.ts","../src/responsive_iframe_controller.ts","../src/utilities/ephemeral_controller.ts","../src/scroll_into_focus_controller.ts","../src/scroll_to_bottom_controller.ts","../src/scroll_to_controller.ts","../src/scroll_to_top_controller.ts","../src/self_destruct_controller.ts","../src/sticky_controller.ts","../src/teleport_controller.ts","../src/toggle_class_controller.ts","../src/turbo_frame_rc_controller.ts","../src/utilities/turbo.ts","../src/word_count_controller.ts"],"sourcesContent":["import {Context, Controller} from \"stimulus\";\r\n\r\nexport class BaseController extends Controller {\r\n\r\n  constructor(context: Context) {\r\n    super(context);\r\n    return new Proxy(this, {\r\n      get: (obj, prop) => {\r\n        let returnVal = Reflect.get(obj, prop);\r\n        let self = this;\r\n        if (logProperty(prop.toString())) {\r\n          if (typeof returnVal == \"function\") {\r\n            return new Proxy(returnVal, {\r\n              apply(target: any, thisArg: any, argArray?: any): any {\r\n                self.log(prop.toString(), {\r\n                  args: argArray,\r\n                });\r\n                return Reflect.apply(target, thisArg, argArray);\r\n              },\r\n            });\r\n          } else {\r\n            this.log(prop.toString());\r\n          }\r\n        }\r\n        return returnVal;\r\n      },\r\n    });\r\n  }\r\n\r\n  dispatch(element: HTMLElement, eventName: string, options: CustomEventInit = {bubbles: true, cancelable: true, detail: {target: element}}) {\r\n    let event = new CustomEvent(eventName, options);\r\n    element.dispatchEvent(event);\r\n  }\r\n\r\n  log(functionName: string, args: {} = {}): void {\r\n    // @ts-ignore\r\n    if (!this.application.debug) {\r\n      return;\r\n    }\r\n    let logger = console;\r\n    logger.groupCollapsed(`%c${this.identifier} %c#${functionName}`, \"color: #3B82F6\", \"color: unset\");\r\n    logger.log({\r\n      element: this.element,\r\n      ...args,\r\n    });\r\n    logger.groupEnd();\r\n  }\r\n\r\n}\r\n\r\nfunction logProperty(prop: string): boolean {\r\n  switch (prop) {\r\n    case \"application\":\r\n    case \"element\":\r\n    case \"constructor\":\r\n    case \"initialize\":\r\n    case \"log\":\r\n    case \"data\":\r\n    case \"valueDescriptorMap\":\r\n    case \"identifier\":\r\n      return false;\r\n  }\r\n\r\n  if (/^_.*?$/.test(prop)) {\r\n    return false;\r\n  }\r\n  if (/^.*?Target(s)?$/.test(prop)) {\r\n    return false;\r\n  }\r\n  if (/^.*?Value$/.test(prop)) {\r\n    return false;\r\n  }\r\n  if (/^.*?ValueChanged$/.test(prop)) {\r\n    return false;\r\n  }\r\n  if (/^.*?Class$/.test(prop)) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class AppearanceController extends BaseController {\r\n\r\n  initialize() {\r\n    this._handleVisibility = this._handleVisibility.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    window.addEventListener(\"focus\", this._handleVisibility);\r\n    window.addEventListener(\"blur\", this._handleVisibility);\r\n    document.addEventListener(\"visibilitychange\", this._handleVisibility);\r\n    this._handleVisibility();\r\n  }\r\n\r\n  disconnect() {\r\n    window.removeEventListener(\"focus\", this._handleVisibility);\r\n    window.removeEventListener(\"blur\", this._handleVisibility);\r\n    document.removeEventListener(\"visibilitychange\", this._handleVisibility);\r\n  }\r\n\r\n  appear() {\r\n    this.dispatch(this.element as HTMLElement, \"appearance:appear\");\r\n  }\r\n\r\n  away() {\r\n    this.dispatch(this.element as HTMLElement, \"appearance:away\");\r\n  }\r\n\r\n  _handleVisibility(): any {\r\n    this._documentIsActive() ? this.appear() : this.away();\r\n  }\r\n\r\n  _documentIsActive() {\r\n    return document.visibilityState == \"visible\" && document.hasFocus();\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\n\nexport class AsyncBlockController extends BaseController {\n  static targets = [\"replace\"];\n  static values = {endpoint: String};\n\n  declare readonly replaceTarget: HTMLElement;\n  declare readonly hasReplaceTarget: boolean;\n  declare readonly endpointValue: string;\n\n\n  // This is a simple controller to load a block of content when the page loads.\n  // It should be used to give a quick initial response before calling out to an\n  // an AJAX endpoint to do some expensive work.\n  connect() {\n    this.loadContent();\n  }\n\n  loadContent() {\n    let el = (this.hasReplaceTarget ? this.replaceTarget : this.element) as HTMLElement;\n    fetch(this.endpointValue)\n    .then((response) => response.text())\n    .then((html) => {\n      let newEl = document.createElement(\"div\");\n      newEl.innerHTML = html;\n      el.replaceWith(newEl);\n\n      // Trigger event to show block has loaded\n      let event = new CustomEvent(\"ajax:success\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    })\n    .catch(err => {\n      el.replaceWith(\"Sorry, this content failed to load\");\n\n      let event = new CustomEvent(\"ajax:error\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    })\n    .finally(() => {\n      let event = new CustomEvent(\"ajax:complete\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    });\n  }\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class AutoSubmitFormController extends BaseController {\n\n  private boundHandler = this.handler.bind(this);\n\n  connect() {\n    (this.element as HTMLElement).querySelectorAll(\"input, select, textarea\").forEach(el => el.addEventListener(\"change\", this.boundHandler));\n  }\n\n  disconnect() {\n    (this.element as HTMLElement).querySelectorAll(\"input, select, textarea\").forEach(el => el.removeEventListener(\"change\", this.boundHandler));\n  }\n\n  private handler(e: Event) {\n    // this.element.submit()\n    // Moved to this to support remote forms and CSRF properly\n    this.element.dispatchEvent(\n      new CustomEvent(\"submit\", {\n        bubbles: true,\n        cancelable: true,\n      }),\n    );\n  }\n}\n","export const method = (controller, methodName) => {\n    const method = controller[methodName];\n    if (typeof method == 'function') {\n        return method;\n    }\n    else {\n        return (...args) => { };\n    }\n};\nexport const composeEventName = (name, controller, eventPrefix) => {\n    let composedName = name;\n    if (eventPrefix === true) {\n        composedName = `${controller.identifier}:${name}`;\n    }\n    else if (typeof eventPrefix === 'string') {\n        composedName = `${eventPrefix}:${name}`;\n    }\n    return composedName;\n};\nexport const extendedEvent = (type, event, detail) => {\n    const { bubbles, cancelable, composed } = event || { bubbles: true, cancelable: true, composed: true };\n    if (event) {\n        Object.assign(detail, { originalEvent: event });\n    }\n    const customEvent = new CustomEvent(type, {\n        bubbles,\n        cancelable,\n        composed,\n        detail,\n    });\n    return customEvent;\n};\nexport function isElementInViewport(el) {\n    const rect = el.getBoundingClientRect();\n    const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n    const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n    const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n    const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) >= 0);\n    return (vertInView && horInView);\n}\n//# sourceMappingURL=index.js.map","import { method, extendedEvent, composeEventName } from '../support/index';\nconst defaultOptions = {\n    dispatchEvent: true,\n    eventPrefix: true,\n};\nexport const useIntersection = (controller, options = {}) => {\n    const { dispatchEvent, eventPrefix } = Object.assign({}, defaultOptions, options);\n    const targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n    const callback = (entries) => {\n        const [entry] = entries;\n        if (entry.isIntersecting) {\n            dispatchAppear(entry);\n        }\n        else if (controller.isVisible) {\n            dispatchDisappear(entry);\n        }\n    };\n    const dispatchAppear = (entry) => {\n        controller.isVisible = true;\n        method(controller, 'appear').call(controller, entry);\n        // emit a custom \"appear\" event\n        if (dispatchEvent) {\n            const eventName = composeEventName('appear', controller, eventPrefix);\n            const appearEvent = extendedEvent(eventName, null, { controller, entry });\n            targetElement.dispatchEvent(appearEvent);\n        }\n    };\n    const dispatchDisappear = (entry) => {\n        controller.isVisible = false;\n        method(controller, 'disappear').call(controller, entry);\n        // emit a custom \"disappear\" event\n        if (dispatchEvent) {\n            const eventName = composeEventName('disappear', controller, eventPrefix);\n            const disappearEvent = extendedEvent(eventName, null, { controller, entry });\n            targetElement.dispatchEvent(disappearEvent);\n        }\n    };\n    // keep a copy of the current disconnect() function of the controller\n    // to support composing several behaviors\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    const observer = new IntersectionObserver(callback, options);\n    const observe = () => {\n        observer.observe(targetElement);\n    };\n    const unobserve = () => {\n        observer.unobserve(targetElement);\n    };\n    Object.assign(controller, {\n        isVisible: false,\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-intersection.js.map","import { composeEventName, extendedEvent, isElementInViewport } from '../support/index';\nconst defaultOptions = {\n    events: ['click', 'touchend'],\n    onlyVisible: true,\n    dispatchEvent: true,\n    eventPrefix: true,\n};\nexport const useClickOutside = (controller, options = {}) => {\n    const { onlyVisible, dispatchEvent, events, eventPrefix } = Object.assign({}, defaultOptions, options);\n    const onEvent = (event) => {\n        const targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        if (targetElement.contains(event.target) || (!isElementInViewport(targetElement) && onlyVisible)) {\n            return;\n        }\n        // call the clickOutside method of the Stimulus controller\n        if (controller.clickOutside) {\n            controller.clickOutside(event);\n        }\n        // emit a custom event\n        if (dispatchEvent) {\n            const eventName = composeEventName('click:outside', controller, eventPrefix);\n            const clickOutsideEvent = extendedEvent(eventName, event, { controller });\n            targetElement.dispatchEvent(clickOutsideEvent);\n        }\n    };\n    const observe = () => {\n        events === null || events === void 0 ? void 0 : events.forEach(event => {\n            window.addEventListener(event, onEvent, false);\n        });\n    };\n    const unobserve = () => {\n        events === null || events === void 0 ? void 0 : events.forEach(event => {\n            window.removeEventListener(event, onEvent, false);\n        });\n    };\n    // keep a copy of the current disconnect() function of the controller\n    // to support composing several behaviors\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    Object.assign(controller, {\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-click-outside.js.map","const defaultOptions = {\n    debug: false,\n    logger: console\n};\nexport class StimulusUse {\n    constructor(controller, options = {}) {\n        var _a, _b, _c;\n        this.log = (functionName, args) => {\n            if (!this.debug)\n                return;\n            this.logger.groupCollapsed(`%c${this.controller.identifier} %c#${functionName}`, 'color: #3B82F6', 'color: unset');\n            this.logger.log(Object.assign({ controllerId: this.controllerId }, args));\n            this.logger.groupEnd();\n        };\n        this.debug = (_b = (_a = options === null || options === void 0 ? void 0 : options.debug) !== null && _a !== void 0 ? _a : controller.application.stimulusUseDebug) !== null && _b !== void 0 ? _b : defaultOptions.debug;\n        this.logger = (_c = options === null || options === void 0 ? void 0 : options.logger) !== null && _c !== void 0 ? _c : defaultOptions.logger;\n        this.controller = controller;\n        this.controllerId = controller.element.id || controller.element.dataset.id;\n        // make copies of lifecycle functions\n        this.controllerInitialize = controller.initialize.bind(controller);\n        this.controllerConnect = controller.connect.bind(controller);\n        this.controllerDisconnect = controller.disconnect.bind(controller);\n    }\n}\n//# sourceMappingURL=stimulus_use.js.map","import { StimulusUse } from '../stimulus_use';\nimport { method } from '../support/index';\nexport class UseHover extends StimulusUse {\n    constructor(controller, options = {}) {\n        super(controller, options);\n        this.observe = () => {\n            this.targetElement.addEventListener('mouseenter', this.onEnter);\n            this.targetElement.addEventListener('mouseleave', this.onLeave);\n        };\n        this.unobserve = () => {\n            this.targetElement.removeEventListener('mouseenter', this.onEnter);\n            this.targetElement.removeEventListener('mouseleave', this.onLeave);\n        };\n        this.onEnter = () => {\n            method(this.controller, 'mouseEnter').call(this.controller);\n            this.log('mouseEnter', { hover: true });\n        };\n        this.onLeave = () => {\n            method(this.controller, 'mouseLeave').call(this.controller);\n            this.log('mouseLeave', { hover: false });\n        };\n        this.targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        this.controller = controller;\n        this.enhanceController();\n        this.observe();\n    }\n    enhanceController() {\n        const controllerDisconnect = this.controller.disconnect.bind(this.controller);\n        const disconnect = () => {\n            this.unobserve();\n            controllerDisconnect();\n        };\n        Object.assign(this.controller, { disconnect });\n    }\n}\nexport const useHover = (controller, options = {}) => {\n    const observer = new UseHover(controller, options);\n    return [observer.observe, observer.unobserve];\n};\n//# sourceMappingURL=use-hover.js.map","import { StimulusUse } from '../stimulus_use';\nimport { method } from '../support/index';\nexport class UseMutation extends StimulusUse {\n    constructor(controller, options = {}) {\n        super(controller, options);\n        this.observe = () => {\n            try {\n                this.observer.observe(this.targetElement, this.options);\n            }\n            catch (error) {\n                this.controller.application.handleError(error, \"At a minimum, one of childList, attributes, and/or characterData must be true\", {});\n            }\n        };\n        this.unobserve = () => {\n            this.observer.disconnect();\n        };\n        this.mutation = (entries) => {\n            method(this.controller, 'mutate').call(this.controller, entries);\n            this.log('mutate', { entries });\n        };\n        this.targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        this.controller = controller;\n        this.options = options;\n        this.observer = new MutationObserver(this.mutation);\n        this.enhanceController();\n        this.observe();\n    }\n    enhanceController() {\n        const controllerDisconnect = this.controller.disconnect.bind(this.controller);\n        const disconnect = () => {\n            this.unobserve();\n            controllerDisconnect();\n        };\n        Object.assign(this.controller, { disconnect });\n    }\n}\nexport const useMutation = (controller, options = {}) => {\n    const observer = new UseMutation(controller, options);\n    return [observer.observe, observer.unobserve];\n};\n//# sourceMappingURL=use-mutation.js.map","import { method } from '../support/index';\nexport const useWindowResize = (controller) => {\n    const callback = (event) => {\n        const { innerWidth, innerHeight } = window;\n        const payload = {\n            height: innerHeight || Infinity,\n            width: innerWidth || Infinity,\n            event\n        };\n        method(controller, 'windowResize').call(controller, payload);\n    };\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    const observe = () => {\n        window.addEventListener('resize', callback);\n        callback();\n    };\n    const unobserve = () => {\n        window.removeEventListener('resize', callback);\n    };\n    Object.assign(controller, {\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-window-resize.js.map","import { Controller } from 'stimulus';\nclass DebounceController extends Controller {\n}\nDebounceController.debounces = [];\nconst defaultWait = 200;\nconst debounce = (fn, wait = defaultWait) => {\n    let timeoutId = null;\n    return function () {\n        const args = arguments;\n        const context = this;\n        const callback = () => fn.apply(context, args);\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(callback, wait);\n    };\n};\nexport const useDebounce = (controller, options) => {\n    var _a;\n    const constructor = controller.constructor;\n    (_a = constructor.debounces) === null || _a === void 0 ? void 0 : _a.forEach((func) => {\n        if (typeof func === \"string\") {\n            controller[func] = debounce(controller[func], options === null || options === void 0 ? void 0 : options.wait);\n        }\n        if (typeof func === \"object\") {\n            const { name, wait } = func;\n            if (!name)\n                return;\n            controller[name] = debounce(controller[name], wait || (options === null || options === void 0 ? void 0 : options.wait));\n        }\n    });\n};\n//# sourceMappingURL=use-debounce.js.map","import {useWindowResize} from \"stimulus-use\";\nimport {BaseController} from \"./base_controller\";\n\nexport class AutosizeController extends BaseController {\n\n  private boundHandler = this.handler.bind(this);\n\n  connect() {\n    let target = this.element as HTMLTextAreaElement;\n    target.style.resize = \"none\";\n    target.style.boxSizing = \"border-box\";\n    target.addEventListener(\"input\", this.boundHandler);\n    target.addEventListener(\"focus\", this.boundHandler);\n    useWindowResize(this);\n    requestAnimationFrame(this.boundHandler);\n  }\n\n  windowResize() {\n    this.handler();\n  }\n\n  private handler() {\n    this.autosize(this.element as HTMLTextAreaElement);\n  };\n\n  private autosize(element: HTMLTextAreaElement) {\n    let offset = element.offsetHeight - element.clientHeight;\n    element.style.height = \"auto\";\n    element.style.height = element.scrollHeight + offset + \"px\";\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class CharCountController extends BaseController {\r\n\r\n  static targets = [\"input\", \"output\"];\r\n  static values = {min: Number, max: Number};\r\n  static classes = [\"error\"];\r\n\r\n  declare readonly inputTarget: HTMLInputElement | HTMLTextAreaElement;\r\n  declare readonly outputTarget: HTMLElement;\r\n  declare minValue: number;\r\n  declare hasMinValue: boolean;\r\n  declare maxValue: number;\r\n  declare hasMaxValue: boolean;\r\n  declare errorClass: string;\r\n  declare hasErrorClass: boolean;\r\n\r\n  boundHandler = this.updateCharCount.bind(this);\r\n\r\n  connect() {\r\n    this.updateCharCount();\r\n    this.inputTarget.addEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  disconnect() {\r\n    this.inputTarget.removeEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  updateCharCount() {\r\n    let charCount = this.inputTarget.value.length;\r\n    this.outputTarget.innerText = charCount.toString();\r\n    if (this.hasErrorClass) {\r\n      if (this.isValidCount(charCount)) {\r\n        this.outputTarget.classList.remove(this.errorClass);\r\n      } else {\r\n        this.outputTarget.classList.add(this.errorClass);\r\n      }\r\n    }\r\n  }\r\n\r\n  isValidCount(count: number) {\r\n    let min = 0;\r\n    let max = 99999;\r\n\r\n    if (this.hasMinValue) {\r\n      min = this.minValue;\r\n    }\r\n\r\n    if (this.hasMaxValue) {\r\n      max = this.maxValue;\r\n    }\r\n\r\n    return count >= min && count <= max;\r\n  }\r\n\r\n}\r\n","import {BaseController} from './base_controller';\n\nexport class CheckboxSelectAllController extends BaseController {\n  static targets = ['selectAll', 'checkbox'];\n\n  declare readonly hasSelectAllTarget: boolean;\n  declare readonly selectAllTarget: HTMLInputElement;\n  declare readonly checkboxTargets: HTMLInputElement[];\n\n  private get checked() {\n    return this.checkboxTargets.filter(checkbox => checkbox.checked);\n  }\n\n  private get unchecked() {\n    return this.checkboxTargets.filter(checkbox => !checkbox.checked);\n  }\n\n  initialize() {\n    this.toggle = this.toggle.bind(this);\n    this.refresh = this.refresh.bind(this);\n  }\n\n  connect() {\n    requestAnimationFrame(() => {\n      if (!this.hasSelectAllTarget) {\n        return;\n      }\n\n      this.selectAllTarget.addEventListener('change', this.toggle);\n      this.checkboxTargets.forEach(checkbox => checkbox.addEventListener('change', this.refresh));\n      this.refresh();\n    });\n  }\n\n  disconnect() {\n    if (!this.hasSelectAllTarget) {\n      return;\n    }\n\n    this.selectAllTarget.removeEventListener('change', this.toggle);\n    this.checkboxTargets.forEach((checkbox) => checkbox.removeEventListener('change', this.refresh));\n  }\n\n  private toggle(event: Event) {\n    event.preventDefault();\n    let target = event.target as HTMLInputElement;\n    this.checkboxTargets.forEach((checkbox) => checkbox.checked = target.checked);\n  }\n\n  private refresh() {\n    const checkboxesCount = this.checkboxTargets.length;\n    const checkboxesCheckedCount = this.checked.length;\n\n    this.selectAllTarget.checked = checkboxesCheckedCount > 0;\n    this.selectAllTarget.indeterminate = checkboxesCheckedCount > 0 && checkboxesCheckedCount < checkboxesCount;\n  }\n}","import {BaseController} from \"./base_controller\";\r\n\r\nexport class ClipboardController extends BaseController {\r\n\r\n  static targets = [\"button\", \"copy\", \"fallback\"];\r\n  static values = {removeUnused: Boolean};\r\n\r\n  declare readonly sourceTarget: HTMLElement;\r\n  declare readonly copyTarget: HTMLElement;\r\n  declare readonly hasCopyTarget: boolean;\r\n  declare readonly fallbackTarget: HTMLElement;\r\n  declare readonly hasFallbackTarget: boolean;\r\n\r\n  declare readonly hasRemoveUnusedValue: boolean;\r\n  declare readonly removeUnusedValue: boolean;\r\n\r\n  supported = false;\r\n\r\n  connect() {\r\n    this.supported = document.queryCommandSupported(\"copy\");\r\n\r\n    if (this.hasRemoveUnusedValue && this.removeUnusedValue) {\r\n      if (this.supported && this.hasFallbackTarget) {\r\n        this.fallbackTarget.remove();\r\n      } else if (this.hasCopyTarget) {\r\n        this.copyTarget.remove();\r\n      }\r\n    }\r\n  }\r\n\r\n  select(event: MouseEvent) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    (this.sourceTarget as HTMLInputElement | HTMLTextAreaElement).select();\r\n  }\r\n\r\n  copy(event: ClipboardEvent) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    (this.sourceTarget as HTMLInputElement | HTMLTextAreaElement).select();\r\n    if (this.supported) {\r\n      document.execCommand(\"copy\");\r\n    }\r\n  }\r\n}\r\n","export function isHTMLLinkElement(element: Element): element is HTMLLinkElement {\n  return element.nodeName == \"A\";\n}\n\nexport function isHTMLFormElement(element: Element): element is HTMLFormElement {\n  return element.nodeName == \"FORM\";\n}\n\nexport function isHTMLInputElement(element: Element): element is HTMLInputElement {\n  return element.nodeName == \"INPUT\";\n}\n\nexport function isHTMLImageElement(element: Element): element is HTMLImageElement {\n  return element.nodeName == \"IMG\";\n}\n\n","import {BaseController} from './base_controller';\r\nimport {isHTMLFormElement, isHTMLLinkElement} from \"./utilities/elements\";\r\n\r\nexport class ConfirmController extends BaseController {\r\n\r\n  static values = {\r\n    message: String,\r\n  };\r\n\r\n  declare readonly messageValue: string;\r\n  declare readonly hasMessageValue: boolean;\r\n\r\n  get message(): string {\r\n    return this.hasMessageValue ? this.messageValue : 'Are you sure?';\r\n  }\r\n\r\n  initialize() {\r\n    this.confirm = this.confirm.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      let element = this.element as HTMLElement;\r\n      if (isHTMLFormElement(element)) {\r\n        element.addEventListener(\"submit\", this.confirm);\r\n      } else if (isHTMLLinkElement(element)) {\r\n        element.addEventListener(\"click\", this.confirm);\r\n      } else {\r\n        throw new Error(\"Can't handle confirmation on attached element\");\r\n      }\r\n    });\r\n  }\r\n\r\n  confirm(event: Event) {\r\n    if (!(window.confirm(this.message))) {\r\n      event.preventDefault();\r\n      this.dispatch(this.element as HTMLElement, \"confirm:cancelled\");\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\n\nexport class ConfirmNavigationController extends BaseController {\n\n  static values = {message: String};\n\n  declare readonly messageValue: string;\n\n  connect() {\n    let confirmMessage = this.messageValue;\n    window.onbeforeunload = () => (confirmMessage == null ? true : confirmMessage);\n    window.addEventListener(\"popstate\", this.handlePopstate);\n    window.addEventListener(\"submit\", () => {\n      window.removeEventListener(\"popstate\", this.handlePopstate);\n      window.onbeforeunload = null;\n    });\n    // TODO: Turbo navigation events\n  }\n\n  handlePopstate(event: PopStateEvent) {\n    return false;\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class DebugController extends BaseController {\n\n  static targets = [\"test\"];\n  declare testTargets: HTMLElement[];\n\n  connect() {\n    console.log(\"Debug Controller\", this, this.testTargets);\n  }\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class DetectDirtyController extends BaseController {\r\n\r\n  initialValue: string | boolean | null = null;\r\n\r\n  boundHandler = this.handler.bind(this);\r\n\r\n  connect() {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    if (this.isInputElement(element) && this.isCheckable(element)) {\r\n      this.initialValue = element.checked;\r\n    } else {\r\n      this.initialValue = element.value;\r\n    }\r\n    element.addEventListener(\"input\", this.boundHandler);\r\n    element.addEventListener(\"change\", this.boundHandler);\r\n  }\r\n\r\n  disconnect() {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    element.removeEventListener(\"input\", this.boundHandler);\r\n    element.removeEventListener(\"change\", this.boundHandler);\r\n  }\r\n\r\n  restore() {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    if (this.isInputElement(element) && this.isCheckable(element)) {\r\n      element.checked = this.initialValue as boolean;\r\n    } else {\r\n      element.value = this.initialValue as string;\r\n    }\r\n  }\r\n\r\n  private handler(event?: Event) {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n\r\n    if (this.initialValue !== element.value) {\r\n      element.setAttribute(\"data-dirty\", \"true\");\r\n    } else {\r\n      element.removeAttribute(\"data-dirty\");\r\n    }\r\n  }\r\n\r\n  private isCheckable(element: HTMLInputElement): boolean {\r\n    return (element.type === \"radio\" || element.type === \"checkbox\");\r\n  }\r\n\r\n  private isInputElement(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement): element is HTMLInputElement {\r\n    return element.tagName === \"INPUT\";\r\n  }\r\n\r\n}\r\n\r\nexport function isDirty(element: HTMLElement) {\r\n  return element.hasAttribute(\"data-dirty\");\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class DisableInputsController extends BaseController {\r\n\r\n  static targets = [\"disabler\", \"disable\"];\r\n\r\n  static values = {\r\n    clear: Boolean,\r\n  };\r\n\r\n  declare readonly hasDisablerTarget: boolean;\r\n  declare readonly disablerTarget: HTMLInputElement;\r\n  declare readonly disableTargets: Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\r\n  declare readonly clearValue: boolean;\r\n  declare readonly hasClearValue: boolean;\r\n\r\n  connect() {\r\n    this.toggle();\r\n  }\r\n\r\n  toggle() {\r\n    if (this.hasDisablerTarget && this.disablerTarget.checked) {\r\n      this.disableInputs();\r\n    } else {\r\n      this.enableInputs();\r\n    }\r\n  }\r\n\r\n  disableInputs() {\r\n    let shouldClear = this.hasClearValue && this.clearValue;\r\n    this.disableTargets.forEach((el, _) => {\r\n      if (shouldClear) {\r\n        el.value = \"\";\r\n      }\r\n      el.disabled = true;\r\n    });\r\n  }\r\n\r\n  enableInputs() {\r\n    this.disableTargets.forEach((el, _) => {\r\n      el.disabled = false;\r\n    });\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class DismissableController extends BaseController {\r\n\r\n\r\n  dismiss() {\r\n    this.element.remove();\r\n  }\r\n\r\n}\r\n","import {useMutation} from \"stimulus-use\";\r\nimport {BaseController} from \"./base_controller\";\r\n\r\nexport class EmptyDomController extends BaseController {\r\n\r\n  static classes = [\"empty\", \"notEmpty\"];\r\n  static values = {scopeSelector: String};\r\n\r\n  declare hasEmptyClass: boolean;\r\n  declare emptyClass: string;\r\n  declare hasNotEmptyClass: boolean;\r\n  declare notEmptyClass: string;\r\n\r\n  declare hasScopeSelectorValue: boolean;\r\n  declare scopeSelectorValue: string;\r\n\r\n  connect() {\r\n    useMutation(this, {element: this.element, childList: true});\r\n    this.checkEmpty();\r\n  }\r\n\r\n  mutate(entries: MutationRecord[]) {\r\n    this.checkEmpty();\r\n  }\r\n\r\n  checkEmpty() {\r\n    let children;\r\n    if (this.hasScopeSelectorValue) {\r\n      children = this.element.querySelectorAll(this.scopeSelectorValue);\r\n    } else {\r\n      children = this.element.children;\r\n    }\r\n\r\n    if (children.length === 0) {\r\n      if (this.hasNotEmptyClass) {\r\n        let classes = this.notEmptyClass.split(\" \");\r\n        classes.forEach(klass => this.element.classList.remove(klass));\r\n      }\r\n      if (this.hasEmptyClass) {\r\n        let classes = this.emptyClass.split(\" \");\r\n        classes.forEach(klass => this.element.classList.add(klass));\r\n      }\r\n      this.element.dispatchEvent(\r\n        new CustomEvent(\"dom:empty\", {\r\n          bubbles: true,\r\n          cancelable: true,\r\n        }),\r\n      );\r\n    } else {\r\n      if (this.hasNotEmptyClass) {\r\n        let classes = this.notEmptyClass.split(\" \");\r\n        classes.forEach(klass => this.element.classList.add(klass));\r\n      }\r\n      if (this.hasEmptyClass) {\r\n        let classes = this.emptyClass.split(\" \");\r\n        classes.forEach(klass => this.element.classList.remove(klass));\r\n      }\r\n      this.element.dispatchEvent(\r\n        new CustomEvent(\"dom:not-empty\", {\r\n          bubbles: true,\r\n          cancelable: true,\r\n          detail: {\r\n            count: children.length,\r\n          },\r\n        }),\r\n      );\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class EnableInputsController extends BaseController {\r\n\r\n  static targets = [\"enabler\", \"enable\"];\r\n\r\n  static values = {\r\n    clear: Boolean,\r\n  };\r\n\r\n  declare readonly hasEnablerTarget: boolean;\r\n  declare readonly enablerTarget: HTMLInputElement;\r\n  declare readonly enableTargets: Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\r\n  declare readonly clearValue: boolean;\r\n  declare readonly hasClearValue: boolean;\r\n\r\n  connect() {\r\n    this.toggle();\r\n  }\r\n\r\n  toggle() {\r\n    if (this.hasEnablerTarget && this.enablerTarget.checked) {\r\n      this.enableInputs();\r\n    } else {\r\n      this.disableInputs();\r\n    }\r\n  }\r\n\r\n  disableInputs() {\r\n    let shouldClear = this.hasClearValue && this.clearValue;\r\n    this.enableTargets.forEach((el, _) => {\r\n      if (shouldClear) {\r\n        el.value = \"\";\r\n      }\r\n      el.disabled = true;\r\n    });\r\n  }\r\n\r\n  enableInputs() {\r\n    this.enableTargets.forEach((el, _) => {\r\n      el.disabled = false;\r\n    });\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class FallbackImageController extends BaseController {\r\n\r\n  static values = {placeholder: String};\r\n\r\n  declare readonly placeholderValue: string;\r\n  declare readonly hasPlaceholderValue: boolean;\r\n\r\n  connect() {\r\n    let element = this.element as HTMLImageElement;\r\n\r\n    element.onerror = () => {\r\n      if (this.hasPlaceholderValue) {\r\n        element.src = this.placeholderValue;\r\n      } else {\r\n        element.style.display = \"none\";\r\n      }\r\n    };\r\n  }\r\n\r\n}\r\n","import {BaseController} from './base_controller';\r\nimport {isHTMLFormElement, isHTMLInputElement} from \"./utilities/elements\";\r\n\r\ninterface FormSavePayload {\r\n  [idx: string]: {\r\n    [idx: string]: string | boolean\r\n  }\r\n}\r\n\r\nexport class FormSaveController extends BaseController {\r\n\r\n  static values = {\r\n    id: String,\r\n    restoreOnLoad: Boolean,\r\n    clearOnSubmit: Boolean,\r\n  };\r\n\r\n  declare readonly idValue: string;\r\n  declare readonly hasIdValue: boolean;\r\n  declare readonly restoreOnLoadValue: boolean;\r\n  declare readonly hasRestoreOnLoadValue: boolean;\r\n  declare readonly clearOnSubmitValue: boolean;\r\n  declare readonly hasClearOnSubmitValue: boolean;\r\n\r\n  get formID() {\r\n    if (this.hasIdValue) {\r\n      return this.idValue;\r\n    }\r\n    let elementID = (this.element as HTMLFormElement).id;\r\n\r\n    if (elementID !== \"\") {\r\n      return elementID;\r\n    } else {\r\n      throw new Error(`No ID value to uniquely identify this form. Please either specify data-${this.identifier}-id-value or give this form an 'id' attribute. `);\r\n    }\r\n  }\r\n\r\n  get formIdentifier() {\r\n    const url = location.href;\r\n    return `${url} ${this.formID}`;\r\n  }\r\n\r\n  get formElements() {\r\n    return (this.element as HTMLFormElement).elements;\r\n  }\r\n\r\n  get formData(): FormSavePayload {\r\n    let data: FormSavePayload = {[this.formIdentifier]: {}};\r\n    for (const element of this.formElements) {\r\n      let el = element as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\r\n      if (el.name.length > 0) {\r\n        if (isHTMLInputElement(el) && el.type == \"checkbox\") {\r\n          data[this.formIdentifier][el.name] = el.checked;\r\n        } else if (isHTMLInputElement(el) && el.type == \"radio\") {\r\n          if (el.checked) {\r\n            data[this.formIdentifier][el.name] = el.value;\r\n          }\r\n        } else {\r\n          data[this.formIdentifier][el.name] = el.value;\r\n        }\r\n      }\r\n    }\r\n    return data;\r\n  }\r\n\r\n  get restoreOnLoad() {\r\n    return this.hasRestoreOnLoadValue ? this.restoreOnLoadValue : true;\r\n  }\r\n\r\n  get clearOnSubmit() {\r\n    return this.hasClearOnSubmitValue ? this.clearOnSubmitValue : true;\r\n  }\r\n\r\n  initialize() {\r\n    this._clear = this._clear.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      let element = this.element;\r\n      if (!isHTMLFormElement(element)) {\r\n        throw new Error('Expected controller to be mounted on a form element.');\r\n      }\r\n\r\n      if (this.restoreOnLoad) {\r\n        this.restore();\r\n      }\r\n      if (this.clearOnSubmit) {\r\n        this.element.addEventListener('submit', this._clear);\r\n      }\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.clearOnSubmit) {\r\n      this.element.removeEventListener('submit', this._clear);\r\n    }\r\n  }\r\n\r\n  _clear() {\r\n    localStorage.removeItem(this.formIdentifier);\r\n    this.dispatch(this.element as HTMLElement, `form-save:cleared`);\r\n  }\r\n\r\n  clear(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    this._clear();\r\n  }\r\n\r\n  save(event: Event) {\r\n    event.preventDefault();\r\n    let data = this.formData;\r\n    localStorage.setItem(this.formIdentifier, JSON.stringify(data[this.formIdentifier]));\r\n    this.dispatch(this.element as HTMLElement, `form-save:save:success`);\r\n  }\r\n\r\n  restore(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    if (localStorage.getItem(this.formIdentifier)) {\r\n      const savedData = JSON.parse(localStorage.getItem(this.formIdentifier)!); // get and parse the saved data from localStorage\r\n      for (const element of this.formElements) {\r\n        let el = element as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\r\n        if (el.name in savedData) {\r\n          if (isHTMLInputElement(el) && el.type == \"checkbox\") {\r\n            el.checked = savedData[el.name];\r\n          } else if (isHTMLInputElement(el) && el.type == \"radio\") {\r\n            if (el.value == savedData[el.name]) {\r\n              el.checked = true;\r\n            }\r\n          } else {\r\n            el.value = savedData[el.name];\r\n          }\r\n        }\r\n      }\r\n      this.dispatch(this.element as HTMLElement, `form-save:restore:success`);\r\n    } else {\r\n      this.dispatch(this.element as HTMLElement, `form-save:restore:empty`);\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\nimport {useIntersection} from \"stimulus-use\";\r\n\r\nexport class IntersectionController extends BaseController {\r\n\r\n  static values = {threshold: String};\r\n\r\n  declare readonly isVisible: boolean;\r\n  declare readonly thresholdValue: string;\r\n  declare readonly hasThresholdValue: boolean;\r\n\r\n  get threshold(): number[] {\r\n    if (this.hasThresholdValue) {\r\n      return this.thresholdValue.split(',').map(val => Number.parseFloat(val.trim())).filter(val => val >= 0 && val <= 1);\r\n    } else {\r\n      return [0, 1];\r\n    }\r\n  }\r\n\r\n  connect() {\r\n    useIntersection(this, {\r\n      threshold: this.threshold,\r\n      element: this.element,\r\n    });\r\n  }\r\n\r\n  appear(entry: IntersectionObserverEntry) {\r\n    this.dispatch(\r\n      this.element as HTMLElement,\r\n      \"intersection:appear\",\r\n      {\r\n        cancelable: true,\r\n        bubbles: true,\r\n        detail: {\r\n          element: this.element,\r\n        },\r\n      },\r\n    );\r\n  };\r\n\r\n  disappear(entry: IntersectionObserverEntry) {\r\n    this.dispatch(\r\n      this.element as HTMLElement,\r\n      \"intersection:disappear\",\r\n      {\r\n        cancelable: true,\r\n        bubbles: true,\r\n        detail: {\r\n          element: this.element,\r\n        },\r\n      },\r\n    );\r\n  };\r\n\r\n}\r\n","const smoothSupported = \"scrollBehavior\" in document.documentElement.style;\r\nlet smoothPolyfilled: boolean;\r\n\r\nexport async function scrollToElement(element: Element, {behavior = \"smooth\", block = \"start\", inline = \"nearest\"}: ScrollIntoViewOptions = {}) {\r\n  if (behavior == \"smooth\" && !smoothSupported) {\r\n    await polyfillSmooth();\r\n  }\r\n  element.scrollIntoView({behavior, block, inline});\r\n}\r\n\r\nasync function polyfillSmooth() {\r\n  const {polyfill} = await import(/* webpackChunkName: \"smoothscroll-polyfill\" */ \"smoothscroll-polyfill\");\r\n  if (smoothPolyfilled) {\r\n    return;\r\n  }\r\n  smoothPolyfilled = true;\r\n  polyfill();\r\n}\r\n\r\nexport function getScrollParent(node: HTMLElement | null): HTMLElement | null {\r\n  if (!node) {\r\n    return null;\r\n  }\r\n  const overflowY = getComputedStyle(node).overflowY;\r\n  const isScrollable = overflowY !== \"visible\" && overflowY !== \"hidden\";\r\n\r\n  if (isScrollable && node.scrollHeight >= node.clientHeight) {\r\n    return node;\r\n  }\r\n\r\n  return getScrollParent(node.parentElement) || document.body;\r\n}\r\n","import {useIntersection} from \"stimulus-use\";\nimport {IntersectionOptions} from \"stimulus-use/dist/use-intersection/use-intersection\";\nimport {AsyncBlockController} from \"./async_block_controller\";\n\nexport class LazyBlockController extends AsyncBlockController {\n\n  declare observe: () => void;\n  declare unobserve: () => void;\n  declare options: IntersectionOptions;\n  declare isVisible: boolean;\n  declare disappear: () => void;\n\n  connect() {\n    let element = this.element;\n    this.options = {element, threshold: 0.3};\n\n    if (\"IntersectionObserver\" in window) {\n      [this.observe, this.unobserve] = useIntersection(this, this.options);\n    } else {\n      // Client doesn't support intersection observer, fallback to pre-loading\n      this.loadContent();\n    }\n  }\n\n  appear(entry: IntersectionObserverEntry) {\n    let element = this.element as HTMLImageElement;\n    if (element.src !== \"\") {\n      return;\n    }\n    if (entry.target === element && entry.isIntersecting) {\n      this.loadContent();\n      if (this.unobserve) {\n        this.unobserve();\n      }\n    }\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\r\nimport {scrollToElement} from \"./utilities/scroll\";\r\nimport dialogPolyfill from \"dialog-polyfill\";\r\n\r\nexport class LightboxImageController extends BaseController {\r\n\r\n  static values = {\r\n    src: String,\r\n    srcSet: String,\r\n    sizes: String,\r\n  };\r\n  static classes = [\"modal\", \"image\"];\r\n\r\n  declare readonly hasModalClass: boolean;\r\n  declare readonly modalClass: string;\r\n  declare readonly hasImageClass: boolean;\r\n  declare readonly imageClass: string;\r\n  declare readonly hasSrcValue: boolean;\r\n  declare readonly srcValue: string;\r\n  declare readonly hasSrcSetValue: boolean;\r\n  declare readonly srcSetValue: string;\r\n  declare readonly hasSizesValue: boolean;\r\n  declare readonly sizesValue: string;\r\n  _dialog: HTMLDialogElement | null = null;\r\n\r\n  get src(): string {\r\n    return this.hasSrcValue ? this.srcValue : (this.element as HTMLImageElement).src;\r\n  }\r\n\r\n  get srcSet(): string {\r\n    return this.hasSrcSetValue ? this.srcSetValue : (this.element as HTMLImageElement).srcset;\r\n  }\r\n\r\n  get sizes(): string {\r\n    return this.hasSizesValue ? this.sizesValue : (this.element as HTMLImageElement).sizes;\r\n  }\r\n\r\n  get modalClassName() {\r\n    return this.hasModalClass ? this.modalClass : \"image-lightbox-dialog\";\r\n  }\r\n\r\n  get imageClassName() {\r\n    return this.hasImageClass ? this.imageClass : \"image-lightbox-image\";\r\n  }\r\n\r\n  initialize() {\r\n    this.open = this.open.bind(this);\r\n    this.close = this.close.bind(this);\r\n  }\r\n\r\n  connect() {\r\n  }\r\n\r\n  open() {\r\n    let element = this.element as HTMLImageElement;\r\n    if (this._dialog) {\r\n      return;\r\n    }\r\n    this._dialog = document.createElement(\"dialog\");\r\n\r\n    let image = document.createElement(\"img\") as HTMLImageElement;\r\n    image.className = this.imageClassName;\r\n    image.src = this.src;\r\n    image.srcset = this.srcSet;\r\n    image.sizes = this.sizes;\r\n    this._dialog.appendChild(image);\r\n\r\n    element.insertAdjacentElement(\"afterend\", this._dialog);\r\n    dialogPolyfill.registerDialog(this._dialog);\r\n    this._dialog.className = this.modalClassName;\r\n    this._dialog.showModal();\r\n    scrollToElement(this._dialog, {behavior: \"smooth\", block: \"end\"}).catch(() => this._dialog!.scrollIntoView(false));\r\n    this._dialog.addEventListener(\"click\", this.close);\r\n    this._dialog.addEventListener(\"cancel\", this.close);\r\n    this._dialog.addEventListener(\"close\", this.close);\r\n  }\r\n\r\n  close() {\r\n    if (this._dialog) {\r\n      this._dialog.close();\r\n      this._dialog.remove();\r\n      this._dialog = null;\r\n      scrollToElement(this.element, {behavior: \"smooth\", block: \"end\"}).catch(() => this.element.scrollIntoView(false));\r\n    }\r\n  }\r\n\r\n} ","import {BaseController} from \"./base_controller\";\r\n\r\nexport class LimitedSelectionCheckboxesController extends BaseController {\r\n\r\n  static targets = [\"input\", \"error\"];\r\n  static values = {max: Number, message: String};\r\n\r\n  declare readonly hasErrorTarget: boolean;\r\n  declare readonly errorTarget: HTMLElement;\r\n  declare readonly inputTargets: HTMLInputElement[];\r\n  declare readonly maxValue: number;\r\n  declare readonly messageValue: string;\r\n\r\n  maxSelections = 0;\r\n\r\n  boundHandleInputs = this.handleInputs.bind(this);\r\n\r\n  connect() {\r\n    this.inputTargets.forEach((el) => el.addEventListener(\"change\", this.boundHandleInputs));\r\n  }\r\n\r\n  disconnect() {\r\n    this.inputTargets.forEach((el) => el.removeEventListener(\"change\", this.boundHandleInputs));\r\n  }\r\n\r\n  handleInputs(event: Event) {\r\n    let tickedInputs = this.inputTargets.reduce((previousValue, el) => el.checked ? previousValue + 1 : previousValue, 0);\r\n    let target = event.target as HTMLInputElement;\r\n    if (tickedInputs > this.maxSelections) {\r\n      event.preventDefault();\r\n      target.checked = false;\r\n      target.dispatchEvent(new CustomEvent(\"change\", {bubbles: true, cancelable: true}));\r\n      target.dispatchEvent(new CustomEvent(\"limited-selection:too-many\", {bubbles: true, cancelable: true, detail: {target}}));\r\n      if (this.hasErrorTarget) {\r\n        this.errorTarget.innerHTML = this.messageValue;\r\n      }\r\n    } else {\r\n      target.dispatchEvent(new CustomEvent(\"limited-selection:selection\", {bubbles: true, cancelable: true, detail: {target}}));\r\n      if (this.hasErrorTarget) {\r\n        this.errorTarget.innerHTML = \"\";\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class NestedFormController extends BaseController {\r\n  static targets = ['target', 'template'];\r\n  static values = {\r\n    insertMode: String,\r\n    wrapperClass: String,\r\n  };\r\n\r\n  declare readonly targetTarget: HTMLElement;\r\n  declare readonly templateTarget: HTMLTemplateElement | HTMLScriptElement;\r\n\r\n  declare readonly wrapperClassValue: string;\r\n  declare readonly hasWrapperSelectorValue: boolean;\r\n  declare readonly insertModeValue: InsertPosition;\r\n  declare readonly hasInsertModeValue: boolean;\r\n\r\n  get wrapperClass() {\r\n    return this.hasWrapperSelectorValue ? this.wrapperClassValue : 'nested-fields';\r\n  }\r\n\r\n  get insertMode(): InsertPosition {\r\n    return this.hasInsertModeValue ? this.insertModeValue : 'beforeend';\r\n  }\r\n\r\n  connect() {\r\n    this.checkStructure();\r\n  }\r\n\r\n  add(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    const content = this.templateTarget.innerHTML.replace(/NEW_RECORD/g, this.generateID());\r\n    this.targetTarget.insertAdjacentHTML(this.insertMode, content);\r\n  }\r\n\r\n  remove(event: Event) {\r\n    event.preventDefault();\r\n    const wrapper: HTMLElement | null = (event.target as HTMLElement).closest(`.${this.wrapperClass}`);\r\n    if (wrapper == null) {\r\n      throw new Error(`#remove was clicked from outside of a child record. Could not find an ancestor with class .${this.wrapperClass}`);\r\n    }\r\n\r\n    if (wrapper.dataset.newRecord === 'true') {\r\n      wrapper.remove();\r\n    } else {\r\n      wrapper.style.display = 'none';\r\n      let destroyInput = wrapper.querySelector(\"input[name*='_destroy']\") as HTMLInputElement | null;\r\n      if (destroyInput == null) {\r\n        throw new Error(`Could not find a hidden input with name '_destroy'. NestedForm cannot remove an already persisted record without it.`);\r\n      }\r\n\r\n      destroyInput.value = \"1\";\r\n    }\r\n  }\r\n\r\n  generateID(): string {\r\n    return new Date().getTime().toString() + Math.random();\r\n  }\r\n\r\n  private checkStructure() {\r\n    let template = this.templateTarget.innerHTML;\r\n\r\n    if (template.indexOf('NEW_RECORD')) {\r\n      throw new Error(\"Could not find 'NEW_RECORD' in the provided template. Please make sure you've passed `child_index: 'NEW_RECORD'` to `fields_for`\")\r\n    }\r\n  }\r\n}","import {BaseController} from \"./base_controller\";\r\n\r\nexport class PasswordConfirmController extends BaseController {\r\n\r\n  static targets = [\"password\"];\r\n  static classes = [\"error\"];\r\n\r\n  declare readonly passwordTargets: HTMLInputElement[];\r\n\r\n  declare readonly errorClass: string;\r\n  declare readonly hasErrorClass: boolean;\r\n\r\n  private boundCheckPasswordsMatch = this.checkPasswordsMatch.bind(this);\r\n\r\n  connect() {\r\n    this.passwordTargets.forEach((el) => el.addEventListener(\"change\", this.boundCheckPasswordsMatch));\r\n  }\r\n\r\n  disconnect() {\r\n    this.passwordTargets.forEach((el) => el.removeEventListener(\"change\", this.boundCheckPasswordsMatch));\r\n  }\r\n\r\n  private allPasswordsMatch() {\r\n    let values = new Set(this.passwordTargets.map(el => el.value));  // Create a unique set of the password values\r\n    return values.has(\"\") || values.size == 1; // If any of the passwords are still blank, or there is only one distinct password value (i.e. they all are the same)\r\n  }\r\n\r\n  private checkPasswordsMatch() {\r\n    if (this.allPasswordsMatch()) {\r\n      this.element.dispatchEvent(new CustomEvent(\"password-confirm:match\"));\r\n      if (this.hasErrorClass) {\r\n        this.passwordTargets.forEach(el => el.classList.remove(this.errorClass));\r\n      }\r\n    } else {\r\n      this.element.dispatchEvent(new CustomEvent(\"password-confirm:no-match\"));\r\n      if (this.hasErrorClass) {\r\n        this.passwordTargets.forEach(el => el.classList.add(this.errorClass));\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class PasswordPeekController extends BaseController {\r\n\r\n  static targets = [\"password\"];\r\n\r\n  declare readonly passwordTarget: HTMLInputElement;\r\n\r\n\r\n  peak(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    this.passwordTarget.type = \"text\";\r\n  }\r\n\r\n  hide(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    this.passwordTarget.type = \"password\";\r\n  }\r\n\r\n  toggle(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    if (this.passwordTarget.type === \"password\") {\r\n      this.peak();\r\n    } else {\r\n      this.hide();\r\n    }\r\n  }\r\n}\r\n","import {useDebounce, useWindowResize} from \"stimulus-use\";\nimport {WindowResizePayload} from \"stimulus-use/dist/use-window-resize/use-window-resize\";\nimport {BaseController} from \"./base_controller\";\n\ninterface ResponsiveIframeMessage {\n  name: string,\n  height: number,\n}\n\nexport class ResponsiveIframeWrapperController extends BaseController {\n\n  boundMessageReceived = this.messageReceived.bind(this);\n\n  connect() {\n    window.addEventListener(\"message\", this.boundMessageReceived);\n  }\n\n  disconnect() {\n    window.removeEventListener(\"message\", this.boundMessageReceived);\n  }\n\n  messageReceived(message: MessageEvent<ResponsiveIframeMessage>) {\n    let data = message.data;\n    if (data.hasOwnProperty(\"name\") && data.name === \"iframe-body\" && data.hasOwnProperty(\"height\")) {\n      this.resize(data.height);\n    }\n  }\n\n  resize(height: number) {\n    (this.element as HTMLIFrameElement).style.height = `${height}px`;\n  }\n\n}\n\nexport class ResponsiveIframeBodyController extends BaseController {\n\n  static debounces = [\"postUpdate\"];\n\n  declare observe: () => void;\n  declare unobserve: () => void;\n\n  connect() {\n    // If this Window is inside a frame\n    if (window.self !== window.top) {\n      useWindowResize(this);\n      useDebounce(this, {});\n      this.postUpdate();\n    } else {\n      // Not an iframe\n    }\n  }\n\n  windowResize(payload: WindowResizePayload) {\n    this.postUpdate();\n  };\n\n  postUpdate() {\n    let payload: ResponsiveIframeMessage = {name: \"iframe-body\", height: this.getHeight()};\n    window.parent.postMessage(\n      payload,\n      \"*\",\n    );\n  }\n\n  getHeight(): number {\n    const body = document.body;\n    const html = document.documentElement;\n\n    // Get the largest height out of body and html's various height measurements\n    return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n  }\n\n}\n","import camelCase from \"lodash/camelCase\";\r\nimport {BaseController} from \"../base_controller\";\r\n\r\nexport class EphemeralController extends BaseController {\r\n\r\n  cleanupSelf() {\r\n    this.cleanup(this.element as HTMLElement);\r\n  }\r\n\r\n  cleanup(element: HTMLElement) {\r\n    element.dataset.controller = element.dataset.controller?.replaceAll(new RegExp(`(\\s|^)${this.identifier}(\\s|$)`, \"g\"), \"\") || \"\";\r\n    if (element.dataset.controller == \"\") {\r\n      // If there are no controllers left, remove the attribute\r\n      delete element.dataset.controller;\r\n    }\r\n\r\n    let substringIdentifierValueRegex = new RegExp(`(\\s|^)${this.identifier}\\\\..+?(\\s|$)`, \"g\");\r\n    element.dataset.target = element.dataset.target?.replaceAll(substringIdentifierValueRegex, \"\") || \"\";\r\n    delete element.dataset[camelCase(`${this.identifier}-target`)];\r\n    if (element.dataset.target == \"\") {\r\n      // If there are no targets left, remove the attribute\r\n      delete element.dataset.target;\r\n    }\r\n\r\n    element.dataset.action = element.dataset.target?.replaceAll(substringIdentifierValueRegex, \"\") || \"\";\r\n    delete element.dataset[camelCase(`${this.identifier}-action`)];\r\n    if (element.dataset.action == \"\") {\r\n      // If there are no actions left, remove the attribute\r\n      delete element.dataset.action;\r\n    }\r\n\r\n    // @ts-ignore\r\n    let values = this.constructor.values;\r\n    if (values) {\r\n      Object.keys(values).forEach(val => delete element.dataset[camelCase(`${this.identifier}-${val}-value`)]);\r\n    }\r\n\r\n    // @ts-ignore\r\n    let classes = this.constructor.classes;\r\n    if (classes) {\r\n      Object.keys(classes).forEach(val => delete element.dataset[camelCase(`${this.identifier}-${val}-class`)]);\r\n    }\r\n  }\r\n\r\n}\r\n","import {EphemeralController} from \"./utilities/ephemeral_controller\";\r\nimport {scrollToElement} from \"./utilities/scroll\";\r\n\r\nexport class ScrollIntoFocusController extends EphemeralController {\r\n\r\n  static values = {\r\n    behavior: String,\r\n    block: String,\r\n    inline: String,\r\n  };\r\n\r\n  declare behaviorValue: ScrollBehavior;\r\n  declare hasBehaviorValue: boolean;\r\n  declare blockValue: ScrollLogicalPosition;\r\n  declare hasBlockValue: boolean;\r\n  declare inlineValue: ScrollLogicalPosition;\r\n  declare hasInlineValue: boolean;\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      // Attempt smooth scrolling, with polyfill\r\n      scrollToElement(\r\n        this.element,\r\n        {\r\n          behavior: this.hasBehaviorValue ? this.behaviorValue : \"smooth\",\r\n          block: this.hasBlockValue ? this.blockValue : \"center\",\r\n          inline: this.hasInlineValue ? this.inlineValue : \"center\",\r\n        },\r\n      ).catch(() => this.element.scrollIntoView()); // Fallback to snap-scrolling\r\n      this.cleanupSelf();\r\n    });\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\nimport {getScrollParent, scrollToElement} from \"./utilities/scroll\";\r\n\r\nexport class ScrollToBottomController extends BaseController {\r\n\r\n  static values = {\r\n    mode: String,\r\n  };\r\n\r\n  declare modeValue: \"nearest\" | \"document\";\r\n  declare hasModeValue: boolean;\r\n\r\n\r\n  scroll(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    let mode = this.hasModeValue ? this.modeValue : \"document\";\r\n    let target: null | HTMLElement;\r\n    if (mode == \"document\") {\r\n      target = document.body;\r\n    } else {\r\n      target = getScrollParent(this.element as HTMLElement);\r\n    }\r\n    if (target == null) {\r\n      return;\r\n    }\r\n    scrollToElement(target!, {behavior: \"smooth\", block: \"end\"}).catch(() => target!.scrollIntoView(false));\r\n  }\r\n\r\n}\r\n\r\n","import {BaseController} from \"./base_controller\";\r\nimport {scrollToElement} from \"./utilities/scroll\";\r\n\r\nexport class ScrollToController extends BaseController {\r\n\r\n  static values = {\r\n    selector: String,\r\n    behavior: String,\r\n    block: String,\r\n    inline: String,\r\n  };\r\n\r\n  declare selectorValue: string;\r\n  declare behaviorValue: ScrollBehavior;\r\n  declare hasBehaviorValue: boolean;\r\n  declare blockValue: ScrollLogicalPosition;\r\n  declare hasBlockValue: boolean;\r\n  declare inlineValue: ScrollLogicalPosition;\r\n  declare hasInlineValue: boolean;\r\n\r\n\r\n  scroll() {\r\n    let target = document.querySelector(this.selectorValue);\r\n    if (!target) {\r\n      console.warn(`Could not find target for '${this.selectorValue}'`);\r\n      return;\r\n    }\r\n\r\n    scrollToElement(\r\n      target!,\r\n      {\r\n        behavior: this.hasBehaviorValue ? this.behaviorValue : \"smooth\",\r\n        block: this.hasBlockValue ? this.blockValue : \"center\",\r\n        inline: this.hasInlineValue ? this.inlineValue : \"center\",\r\n      },\r\n    ).catch(() => target!.scrollIntoView()); // Fallback to snap-scrolling\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\nimport {getScrollParent, scrollToElement} from \"./utilities/scroll\";\n\nexport class ScrollToTopController extends BaseController {\n\n  static values = {\n    mode: String,\n  };\n\n  declare modeValue: \"nearest\" | \"document\";\n  declare hasModeValue: boolean;\n\n\n  scroll(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    let mode = this.hasModeValue ? this.modeValue : \"document\";\n    let target: null | HTMLElement;\n    if (mode == \"document\") {\n      target = document.body;\n    } else {\n      target = getScrollParent(this.element as HTMLElement);\n    }\n    if (target == null) {\n      return;\n    }\n    scrollToElement(target!, {behavior: \"smooth\", block: \"start\"}).catch(() => target!.scrollIntoView(false));\n  }\n\n}\n\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class SelfDestructController extends BaseController {\r\n\r\n  static values = {seconds: Number};\r\n\r\n  declare readonly secondsValue: number;\r\n  timeout: null | ReturnType<typeof setTimeout> = null;\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      // Only start countdown on first paint\r\n      this.timeout = setTimeout(() => this.element.remove(), this.secondsValue * 1000);\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.timeout) {\r\n      clearTimeout(this.timeout);\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class StickyController extends BaseController {\r\n\r\n  static classes = [\"stuck\"];\r\n  static values = {\r\n    mode: String,\r\n  };\r\n\r\n  declare readonly hasStuckClass: boolean;\r\n  declare readonly stuckClass: string;\r\n  declare readonly hasModeValue: \"top\" | \"bottom\";\r\n  declare readonly modeValue: \"top\" | \"bottom\";\r\n\r\n  _magicElement: HTMLDivElement | null = null;\r\n\r\n  get _mode(): \"top\" | \"bottom\" {\r\n    return this.hasModeValue ? this.modeValue : \"top\";\r\n  }\r\n\r\n  createMagicElement() {\r\n    // Magic element placed next to the sticky el that acts as an external border.\r\n    // When the magic element is off the page, we know that the sticky el is \"stuck\"\r\n    if (this._magicElement !== null) {\r\n      return;\r\n    }\r\n\r\n    this._magicElement = document.createElement(\"div\");\r\n    switch (this._mode) {\r\n      case \"top\":\r\n        this.element.insertAdjacentElement(\"beforebegin\", this._magicElement);\r\n        break;\r\n      case \"bottom\":\r\n        this.element.insertAdjacentElement(\"afterend\", this._magicElement);\r\n        break;\r\n    }\r\n  }\r\n\r\n  connect() {\r\n    let element = this.element as HTMLElement;\r\n    this.createMagicElement();\r\n\r\n    const observer = new IntersectionObserver(entries => {\r\n      entries.forEach(entry => {\r\n        if (entry.target !== this._magicElement) {\r\n          return;\r\n        }\r\n        if (entry.intersectionRatio === 0) {\r\n          element.classList.add(this.hasStuckClass ? this.stuckClass : \"stuck\");\r\n        } else if (entry.intersectionRatio === 1) {\r\n          element.classList.remove(this.hasStuckClass ? this.stuckClass : \"stuck\");\r\n        }\r\n      });\r\n\r\n    }, {\r\n      threshold: [0, 1],\r\n    });\r\n    observer.observe(this._magicElement!);\r\n  }\r\n\r\n}\r\n","import {EphemeralController} from \"./utilities/ephemeral_controller\";\r\n\r\nexport class TeleportController extends EphemeralController {\r\n\r\n  static values = {target: String, insert: String, immediate: Boolean};\r\n\r\n  declare readonly immediateValue: boolean;\r\n  declare readonly hasImmediateValue: boolean;\r\n  declare readonly targetValue: string;\r\n  declare readonly hasInsertValue: boolean;\r\n  declare readonly insertValue: InsertPosition | \"replaceOuter\" | \"replaceInner\" | \"prepend\" | \"append\";\r\n\r\n  connect() {\r\n    if (!this.hasInsertValue) {\r\n      throw new Error(\"`insert` value was not specified\");\r\n    }\r\n\r\n    requestAnimationFrame(() => {\r\n      if (this.hasImmediateValue && this.immediateValue) {\r\n        this.execute();\r\n      }\r\n    });\r\n  }\r\n\r\n  execute(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    let destination = document.querySelector(this.targetValue);\r\n\r\n    if (destination == null) {\r\n      this.element.dispatchEvent(new CustomEvent(\"teleport:error\", {bubbles: true, cancelable: true}));\r\n      return;\r\n    }\r\n\r\n    let copy = this.element.cloneNode(true) as HTMLElement;\r\n    this.cleanup(copy);\r\n\r\n    switch (this.insertValue) {\r\n      case \"beforebegin\":\r\n      case \"beforeend\":\r\n      case \"afterend\":\r\n      case \"afterbegin\":\r\n        destination.insertAdjacentHTML(this.insertValue, copy.outerHTML);\r\n        break;\r\n      case \"replaceOuter\":\r\n        destination.outerHTML = copy.outerHTML;\r\n        break;\r\n      case \"replaceInner\":\r\n        destination.innerHTML = copy.outerHTML;\r\n        break;\r\n      case \"prepend\":\r\n        destination.insertAdjacentHTML(\"afterbegin\", copy.outerHTML);\r\n        break;\r\n      case \"append\":\r\n        destination.insertAdjacentHTML(\"beforeend\", copy.outerHTML);\r\n        break;\r\n      default:\r\n        throw new Error(\"`insert` value was not specified\");\r\n\r\n    }\r\n    this.element.remove();\r\n  }\r\n\r\n}\r\n","import {useClickOutside, useHover} from \"stimulus-use\";\nimport {BaseController} from \"./base_controller\";\n\nexport type ToggleClassMode = \"on\" | \"off\" | \"toggle\"\n\nexport class ToggleClassController extends BaseController {\n\n  static targets = [\"toggle\"];\n  static values = {\n    class: String,\n    mouseEnter: String,\n    mouseLeave: String,\n    clickAway: Boolean,\n    initial: String,\n  };\n\n  declare readonly toggleTargets: HTMLElement[];\n\n  declare readonly classValue: string;\n  declare readonly hasClassValue: boolean;\n\n  declare readonly mouseEnterValue: ToggleClassMode;\n  declare readonly hasMouseEnterValue: boolean;\n\n  declare readonly mouseLeaveValue: ToggleClassMode;\n  declare readonly hasMouseLeaveValue: boolean;\n\n  declare readonly clickAwayValue: boolean;\n  declare readonly hasClickAwayValue: boolean;\n\n  declare readonly initialValue: \"on\" | \"off\";\n  declare readonly hasInitialValue: boolean;\n\n  connect() {\n    if (!this.hasClassValue) {\n      throw new Error(\"data-toggle-class-class-value must not be empty\");\n    }\n\n    if (this.hasMouseEnterValue || this.hasMouseLeaveValue) {\n      useHover(this);\n    }\n\n    if (this.hasClickAwayValue && this.clickAwayValue) {\n      useClickOutside(this);\n    }\n\n    requestAnimationFrame(() => {\n      if (this.hasInitialValue) {\n        if (this.initialValue === \"on\") {\n          this.toggleTargets.forEach((target) => this.elementOn(target));\n        } else {\n          this.toggleTargets.forEach((target) => this.elementOff(target));\n        }\n      }\n    });\n  }\n\n  clickOutside() {\n    this.toggleTargets.forEach((target) => {\n      if (this.elementWasToggled(target)) {\n        this.elementToggleStatus(target);\n        this.elementToggle(target);\n      }\n    });\n  }\n\n  mouseEnter() {\n    if (this.hasMouseEnterValue) {\n      switch (this.mouseEnterValue) {\n        case \"on\":\n          this.on();\n          break;\n        case \"off\":\n          this.off();\n          break;\n        case \"toggle\":\n          this.toggle();\n          break;\n      }\n    }\n    return {};\n  }\n\n  mouseLeave() {\n    if (this.hasMouseLeaveValue) {\n      switch (this.mouseLeaveValue) {\n        case \"on\":\n          this.on();\n          break;\n        case \"off\":\n          this.off();\n          break;\n        case \"toggle\":\n          this.toggle();\n          break;\n      }\n    }\n    return {};\n  }\n\n  on(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementOn(target);\n    });\n  }\n\n  off(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementOff(target);\n    });\n  }\n\n  toggle(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementToggle(target);\n    });\n  }\n\n  private elementWasToggled(el: HTMLElement): boolean {\n    return el.dataset.toggled == \"true\";\n  }\n\n  private elementToggleStatus(el: HTMLElement) {\n    if (this.elementWasToggled(el)) {\n      delete el.dataset.toggled;\n    } else {\n      el.dataset.toggled = \"true\";\n    }\n  }\n\n  private elementToggle(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass));\n  }\n\n  private elementOn(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass, true));\n  }\n\n  private elementOff(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass, false));\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\nimport {isHTMLLinkElement} from \"./utilities/elements\";\nimport {isTurboFrame} from \"./utilities/turbo\";\n\nexport class TurboFrameRCController extends BaseController {\n\n  static values = {\n    frameId: String,\n    src: String,\n    loadingMessage: String,\n  };\n\n  declare readonly frameIdValue: string;\n  declare readonly srcValue: string;\n  declare readonly hasSrcValue: boolean;\n  declare readonly loadingMessageValue: string;\n  declare readonly hasLoadingMessageValue: boolean;\n\n  toggle(event?: Event | null) {\n    if (event) {\n      event.preventDefault();\n    }\n    let frame = this.getFrame();\n    let frameSrc = frame.src;\n    if (frameSrc == null || frameSrc !== this.getSrc()) {\n      this.setSrc();\n    } else {\n      this.clear();\n    }\n  }\n\n  setSrc(event?: Event | null) {\n    if (event) {\n      event.preventDefault();\n    }\n    let frame = this.getFrame();\n    if (this.hasLoadingMessageValue) {\n      frame.innerHTML = this.loadingMessageValue;\n    }\n\n    frame.src = this.getSrc();\n  }\n\n  clear(event?: Event | null) {\n    if (event) {\n      event.preventDefault();\n    }\n    let frame = this.getFrame();\n    frame.src = \"\";\n    frame.innerHTML = \"\";\n  }\n\n  private getFrame(): TurboFrame {\n    let frame = document.getElementById(`${this.frameIdValue}`);\n    if (frame == null) {\n      throw new Error(`Could not find frame with ID '${this.frameIdValue}'`);\n    }\n    if (!isTurboFrame(frame)) {\n      throw new Error(`Element targeted by ID '${this.frameIdValue}'`);\n    } else {\n      return frame;\n    }\n  }\n\n  private getSrc(): string {\n    let element = this.element as HTMLElement;\n    if (this.hasSrcValue) {\n      return this.srcValue;\n    } else if (isHTMLLinkElement(element)) {\n      return element.href;\n    } else {\n      throw new Error(\"No link given to drive frame to\");\n    }\n  }\n\n}\n","export function isTurboFrame(element: HTMLElement): element is TurboFrame {\r\n  return element.nodeName == \"TURBO-FRAME\";\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class WordCountController extends BaseController {\r\n\r\n  static targets = [\"input\", \"output\"];\r\n  static values = {min: Number, max: Number};\r\n  static classes = [\"error\"];\r\n\r\n  declare readonly inputTarget: HTMLInputElement | HTMLTextAreaElement;\r\n  declare readonly outputTarget: HTMLElement;\r\n  declare minValue: number;\r\n  declare hasMinValue: boolean;\r\n  declare maxValue: number;\r\n  declare hasMaxValue: boolean;\r\n  declare errorClass: string;\r\n  declare hasErrorClass: boolean;\r\n\r\n  boundHandler = this.updateWordCount.bind(this);\r\n\r\n  connect() {\r\n    this.updateWordCount();\r\n    this.inputTarget.addEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  disconnect() {\r\n    this.inputTarget.removeEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  updateWordCount() {\r\n    let wordCount = 0;\r\n    let textAreaValue = this.inputTarget.value;\r\n    let matches = textAreaValue.match(/\\S+/g);\r\n    wordCount = (matches && matches.length) || 0;\r\n    this.outputTarget.innerText = wordCount.toString();\r\n    if (this.hasErrorClass) {\r\n      if (this.isValidCount(wordCount)) {\r\n        this.outputTarget.classList.remove(this.errorClass);\r\n      } else {\r\n        this.outputTarget.classList.add(this.errorClass);\r\n      }\r\n    }\r\n  }\r\n\r\n  isValidCount(count: number) {\r\n    let min = 0;\r\n    let max = 99999;\r\n\r\n    if (this.hasMinValue) {\r\n      min = this.minValue;\r\n    }\r\n\r\n    if (this.hasMaxValue) {\r\n      max = this.maxValue;\r\n    }\r\n\r\n    return count >= min && count <= max;\r\n  }\r\n\r\n}\r\n"],"names":["BaseController","context","_this","Proxy","get","obj","prop","returnVal","Reflect","self","test","logProperty","toString","apply","target","thisArg","argArray","log","args","dispatch","element","eventName","options","bubbles","cancelable","detail","event","CustomEvent","dispatchEvent","functionName","this","application","debug","logger","console","groupCollapsed","identifier","groupEnd","Controller","AppearanceController","initialize","_handleVisibility","bind","connect","window","addEventListener","document","disconnect","removeEventListener","appear","away","_documentIsActive","visibilityState","hasFocus","AsyncBlockController","loadContent","el","hasReplaceTarget","replaceTarget","fetch","endpointValue","then","response","text","html","newEl","createElement","innerHTML","replaceWith","err","endpoint","String","AutoSubmitFormController","handler","querySelectorAll","forEach","_this2","boundHandler","_this3","e","method","controller","methodName","composeEventName","name","eventPrefix","composedName","extendedEvent","type","composed","Object","assign","originalEvent","defaultOptions","useIntersection","targetElement","controllerDisconnect","observer","IntersectionObserver","entries","entry","isIntersecting","isVisible","call","appearEvent","dispatchAppear","disappearEvent","dispatchDisappear","observe","unobserve","[object Object]","events","onlyVisible","StimulusUse","_a","_b","_c","controllerId","stimulusUseDebug","id","dataset","controllerInitialize","controllerConnect","UseHover","super","onEnter","onLeave","hover","enhanceController","UseMutation","error","handleError","mutation","MutationObserver","useWindowResize","callback","innerWidth","innerHeight","payload","height","Infinity","width","debounce","fn","wait","timeoutId","arguments","clearTimeout","setTimeout","AutosizeController","style","resize","boxSizing","requestAnimationFrame","windowResize","autosize","offset","offsetHeight","clientHeight","scrollHeight","CharCountController","updateCharCount","inputTarget","charCount","value","length","outputTarget","innerText","hasErrorClass","isValidCount","classList","remove","errorClass","add","count","min","max","hasMinValue","minValue","hasMaxValue","maxValue","Number","CheckboxSelectAllController","toggle","refresh","hasSelectAllTarget","selectAllTarget","checkboxTargets","checkbox","preventDefault","checked","checkboxesCount","checkboxesCheckedCount","indeterminate","filter","ClipboardController","supported","queryCommandSupported","hasRemoveUnusedValue","removeUnusedValue","hasFallbackTarget","fallbackTarget","hasCopyTarget","copyTarget","select","sourceTarget","copy","execCommand","isHTMLLinkElement","nodeName","isHTMLFormElement","isHTMLInputElement","removeUnused","Boolean","ConfirmController","confirm","Error","message","hasMessageValue","messageValue","ConfirmNavigationController","confirmMessage","onbeforeunload","handlePopstate","DebugController","testTargets","DetectDirtyController","initialValue","isInputElement","isCheckable","restore","setAttribute","removeAttribute","tagName","DisableInputsController","hasDisablerTarget","disablerTarget","disableInputs","enableInputs","shouldClear","hasClearValue","clearValue","disableTargets","_","disabled","clear","DismissableController","dismiss","EmptyDomController","useMutation","childList","checkEmpty","mutate","children","hasScopeSelectorValue","scopeSelectorValue","hasNotEmptyClass","notEmptyClass","split","klass","hasEmptyClass","emptyClass","scopeSelector","EnableInputsController","hasEnablerTarget","enablerTarget","enableTargets","FallbackImageController","onerror","hasPlaceholderValue","src","placeholderValue","display","placeholder","FormSaveController","_clear","restoreOnLoad","clearOnSubmit","localStorage","removeItem","formIdentifier","save","setItem","JSON","stringify","formData","getItem","savedData","parse","formElements","hasIdValue","idValue","elementID","location","href","formID","elements","data","hasRestoreOnLoadValue","restoreOnLoadValue","hasClearOnSubmitValue","clearOnSubmitValue","IntersectionController","threshold","disappear","hasThresholdValue","thresholdValue","map","val","parseFloat","trim","smoothPolyfilled","LazyBlockController","scrollToElement","behavior","block","inline","scrollIntoView","smoothSupported","import","polyfill","polyfillSmooth","documentElement","getScrollParent","node","overflowY","getComputedStyle","parentElement","body","LightboxImageController","open","close","_dialog","image","className","imageClassName","srcset","srcSet","sizes","appendChild","insertAdjacentElement","dialogPolyfill","registerDialog","modalClassName","showModal","hasSrcValue","srcValue","hasSrcSetValue","srcSetValue","hasSizesValue","sizesValue","hasModalClass","modalClass","hasImageClass","imageClass","LimitedSelectionCheckboxesController","handleInputs","inputTargets","boundHandleInputs","tickedInputs","reduce","previousValue","maxSelections","hasErrorTarget","errorTarget","NestedFormController","checkStructure","content","templateTarget","replace","generateID","targetTarget","insertAdjacentHTML","insertMode","wrapper","closest","wrapperClass","newRecord","destroyInput","querySelector","Date","getTime","Math","random","indexOf","hasWrapperSelectorValue","wrapperClassValue","hasInsertModeValue","insertModeValue","PasswordConfirmController","checkPasswordsMatch","passwordTargets","boundCheckPasswordsMatch","allPasswordsMatch","values","Set","has","size","_this4","PasswordPeekController","peak","passwordTarget","hide","ResponsiveIframeWrapperController","messageReceived","boundMessageReceived","hasOwnProperty","ResponsiveIframeBodyController","top","constructor","debounces","func","postUpdate","getHeight","parent","postMessage","EphemeralController","cleanupSelf","cleanup","replaceAll","RegExp","substringIdentifierValueRegex","camelCase","action","keys","classes","ScrollIntoFocusController","hasBehaviorValue","behaviorValue","hasBlockValue","blockValue","hasInlineValue","inlineValue","ScrollToBottomController","scroll","hasModeValue","modeValue","mode","ScrollToController","selectorValue","warn","selector","ScrollToTopController","SelfDestructController","timeout","secondsValue","seconds","StickyController","createMagicElement","_magicElement","_mode","intersectionRatio","hasStuckClass","stuckClass","TeleportController","hasInsertValue","hasImmediateValue","immediateValue","execute","destination","targetValue","cloneNode","insertValue","outerHTML","insert","immediate","ToggleClassController","hasClassValue","hasMouseEnterValue","hasMouseLeaveValue","useHover","hasClickAwayValue","clickAwayValue","onEvent","contains","rect","getBoundingClientRect","windowHeight","windowWidth","clientWidth","left","isElementInViewport","clickOutside","clickOutsideEvent","useClickOutside","hasInitialValue","toggleTargets","elementOn","elementOff","elementWasToggled","elementToggleStatus","elementToggle","mouseEnter","mouseEnterValue","on","off","mouseLeave","mouseLeaveValue","_this5","toggled","classValue","class","clickAway","initial","TurboFrameRCController","frameSrc","getFrame","getSrc","setSrc","frame","hasLoadingMessageValue","loadingMessageValue","getElementById","frameIdValue","frameId","loadingMessage","WordCountController","updateWordCount","wordCount","matches","match"],"mappings":"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"}