{"version":3,"file":"stimulus-library.module.js","sources":["../src/base_controller.ts","../src/async_block_controller.ts","../src/auto_submit_form_controller.ts","../node_modules/stimulus-use/dist/support/index.js","../node_modules/stimulus-use/dist/use-intersection/use-intersection.js","../node_modules/stimulus-use/dist/use-click-outside/use-click-outside.js","../node_modules/stimulus-use/dist/stimulus_use.js","../node_modules/stimulus-use/dist/use-hover/use-hover.js","../node_modules/stimulus-use/dist/use-mutation/use-mutation.js","../node_modules/stimulus-use/dist/use-window-resize/use-window-resize.js","../node_modules/stimulus-use/dist/use-debounce/use-debounce.js","../src/autosize_controller.ts","../src/char_count_controller.ts","../src/checkbox_select_all_controller.ts","../src/clipboard_controller.ts","../src/confirm_navigation_controller.ts","../src/debug_controller.ts","../src/detect_dirty_controller.ts","../src/disable_inputs_controller.ts","../src/dismissable_controller.ts","../src/empty_dom_controller.ts","../src/enable_inputs_controller.ts","../src/fallback_image_controller.ts","../src/lazy_block_controller.ts","../src/limited_selection_checkboxes_controller.ts","../src/nested_form_controller.ts","../src/password_confirm_controller.ts","../src/password_peek_controller.ts","../src/responsive_iframe_controller.ts","../src/utilities/scroll.ts","../src/utilities/ephemeral_controller.ts","../src/scroll_into_focus_controller.ts","../src/scroll_to_bottom_controller.ts","../src/scroll_to_controller.ts","../src/scroll_to_top_controller.ts","../src/self_destruct_controller.ts","../src/teleport_controller.ts","../src/toggle_class_controller.ts","../src/turbo_frame_rc_controller.ts","../src/utilities/turbo.ts","../src/utilities/elements.ts","../src/word_count_controller.ts"],"sourcesContent":["import {Context, Controller} from \"stimulus\";\r\n\r\nexport class BaseController extends Controller {\r\n\r\n  constructor(context: Context) {\r\n    super(context);\r\n    return new Proxy(this, {\r\n      get: (obj, prop) => {\r\n        let returnVal = Reflect.get(obj, prop);\r\n        let self = this;\r\n        if (logProperty(prop.toString())) {\r\n          if (typeof returnVal == \"function\") {\r\n            return new Proxy(returnVal, {\r\n              apply(target: any, thisArg: any, argArray?: any): any {\r\n                self.log(prop.toString(), {\r\n                  args: argArray,\r\n                });\r\n                return Reflect.apply(target, thisArg, argArray);\r\n              },\r\n            });\r\n          } else {\r\n            this.log(prop.toString());\r\n          }\r\n        }\r\n        return returnVal;\r\n      },\r\n    });\r\n  }\r\n\r\n  log(functionName: string, args: {} = {}): void {\r\n    // @ts-ignore\r\n    if (!this.application.debug) {\r\n      return;\r\n    }\r\n    let logger = console;\r\n    logger.groupCollapsed(`%c${this.identifier} %c#${functionName}`, \"color: #3B82F6\", \"color: unset\");\r\n    logger.log({\r\n      element: this.element,\r\n      ...args,\r\n    });\r\n    logger.groupEnd();\r\n  }\r\n\r\n}\r\n\r\nfunction logProperty(prop: string): boolean {\r\n  switch (prop) {\r\n    case \"application\":\r\n    case \"element\":\r\n    case \"constructor\":\r\n    case \"initialize\":\r\n    case \"log\":\r\n    case \"data\":\r\n    case \"valueDescriptorMap\":\r\n    case \"identifier\":\r\n      return false;\r\n  }\r\n\r\n  if (/^.*?Target(s)?$/.test(prop)) {\r\n    return false;\r\n  }\r\n  if (/^.*?Value$/.test(prop)) {\r\n    return false;\r\n  }\r\n  if (/^.*?ValueChanged$/.test(prop)) {\r\n    return false;\r\n  }\r\n  if (/^.*?Class$/.test(prop)) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n","import {BaseController} from \"./base_controller\";\n\nexport class AsyncBlockController extends BaseController {\n  static targets = [\"replace\"];\n  static values = {endpoint: String};\n\n  declare readonly replaceTarget: HTMLElement;\n  declare readonly hasReplaceTarget: boolean;\n  declare readonly endpointValue: string;\n\n\n  // This is a simple controller to load a block of content when the page loads.\n  // It should be used to give a quick initial response before calling out to an\n  // an AJAX endpoint to do some expensive work.\n  connect() {\n    this.loadContent();\n  }\n\n  loadContent() {\n    let el = (this.hasReplaceTarget ? this.replaceTarget : this.element) as HTMLElement;\n    fetch(this.endpointValue)\n    .then((response) => response.text())\n    .then((html) => {\n      let newEl = document.createElement(\"div\");\n      newEl.innerHTML = html;\n      el.replaceWith(newEl);\n\n      // Trigger event to show block has loaded\n      let event = new CustomEvent(\"ajax:success\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    })\n    .catch(err => {\n      el.replaceWith(\"Sorry, this content failed to load\");\n\n      let event = new CustomEvent(\"ajax:error\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    })\n    .finally(() => {\n      let event = new CustomEvent(\"ajax:complete\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    });\n  }\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class AutoSubmitFormController extends BaseController {\n\n  private boundHandler = this.handler.bind(this);\n\n  connect() {\n    (this.element as HTMLElement).querySelectorAll(\"input, select, textarea\").forEach(el => el.addEventListener(\"change\", this.boundHandler));\n  }\n\n  disconnect() {\n    (this.element as HTMLElement).querySelectorAll(\"input, select, textarea\").forEach(el => el.removeEventListener(\"change\", this.boundHandler));\n  }\n\n  private handler(e: Event) {\n    // this.element.submit()\n    // Moved to this to support remote forms and CSRF properly\n    this.element.dispatchEvent(\n      new CustomEvent(\"submit\", {\n        bubbles: true,\n        cancelable: true,\n      }),\n    );\n  }\n}\n","export const method = (controller, methodName) => {\n    const method = controller[methodName];\n    if (typeof method == 'function') {\n        return method;\n    }\n    else {\n        return (...args) => { };\n    }\n};\nexport const composeEventName = (name, controller, eventPrefix) => {\n    let composedName = name;\n    if (eventPrefix === true) {\n        composedName = `${controller.identifier}:${name}`;\n    }\n    else if (typeof eventPrefix === 'string') {\n        composedName = `${eventPrefix}:${name}`;\n    }\n    return composedName;\n};\nexport const extendedEvent = (type, event, detail) => {\n    const { bubbles, cancelable, composed } = event || { bubbles: true, cancelable: true, composed: true };\n    if (event) {\n        Object.assign(detail, { originalEvent: event });\n    }\n    const customEvent = new CustomEvent(type, {\n        bubbles,\n        cancelable,\n        composed,\n        detail,\n    });\n    return customEvent;\n};\nexport function isElementInViewport(el) {\n    const rect = el.getBoundingClientRect();\n    const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n    const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n    const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n    const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) >= 0);\n    return (vertInView && horInView);\n}\n//# sourceMappingURL=index.js.map","import { method, extendedEvent, composeEventName } from '../support/index';\nconst defaultOptions = {\n    dispatchEvent: true,\n    eventPrefix: true,\n};\nexport const useIntersection = (controller, options = {}) => {\n    const { dispatchEvent, eventPrefix } = Object.assign({}, defaultOptions, options);\n    const targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n    const callback = (entries) => {\n        const [entry] = entries;\n        if (entry.isIntersecting) {\n            dispatchAppear(entry);\n        }\n        else if (controller.isVisible) {\n            dispatchDisappear(entry);\n        }\n    };\n    const dispatchAppear = (entry) => {\n        controller.isVisible = true;\n        method(controller, 'appear').call(controller, entry);\n        // emit a custom \"appear\" event\n        if (dispatchEvent) {\n            const eventName = composeEventName('appear', controller, eventPrefix);\n            const appearEvent = extendedEvent(eventName, null, { controller, entry });\n            targetElement.dispatchEvent(appearEvent);\n        }\n    };\n    const dispatchDisappear = (entry) => {\n        controller.isVisible = false;\n        method(controller, 'disappear').call(controller, entry);\n        // emit a custom \"disappear\" event\n        if (dispatchEvent) {\n            const eventName = composeEventName('disappear', controller, eventPrefix);\n            const disappearEvent = extendedEvent(eventName, null, { controller, entry });\n            targetElement.dispatchEvent(disappearEvent);\n        }\n    };\n    // keep a copy of the current disconnect() function of the controller\n    // to support composing several behaviors\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    const observer = new IntersectionObserver(callback, options);\n    const observe = () => {\n        observer.observe(targetElement);\n    };\n    const unobserve = () => {\n        observer.unobserve(targetElement);\n    };\n    Object.assign(controller, {\n        isVisible: false,\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-intersection.js.map","import { composeEventName, extendedEvent, isElementInViewport } from '../support/index';\nconst defaultOptions = {\n    events: ['click', 'touchend'],\n    onlyVisible: true,\n    dispatchEvent: true,\n    eventPrefix: true,\n};\nexport const useClickOutside = (controller, options = {}) => {\n    const { onlyVisible, dispatchEvent, events, eventPrefix } = Object.assign({}, defaultOptions, options);\n    const onEvent = (event) => {\n        const targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        if (targetElement.contains(event.target) || (!isElementInViewport(targetElement) && onlyVisible)) {\n            return;\n        }\n        // call the clickOutside method of the Stimulus controller\n        if (controller.clickOutside) {\n            controller.clickOutside(event);\n        }\n        // emit a custom event\n        if (dispatchEvent) {\n            const eventName = composeEventName('click:outside', controller, eventPrefix);\n            const clickOutsideEvent = extendedEvent(eventName, event, { controller });\n            targetElement.dispatchEvent(clickOutsideEvent);\n        }\n    };\n    const observe = () => {\n        events === null || events === void 0 ? void 0 : events.forEach(event => {\n            window.addEventListener(event, onEvent, false);\n        });\n    };\n    const unobserve = () => {\n        events === null || events === void 0 ? void 0 : events.forEach(event => {\n            window.removeEventListener(event, onEvent, false);\n        });\n    };\n    // keep a copy of the current disconnect() function of the controller\n    // to support composing several behaviors\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    Object.assign(controller, {\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-click-outside.js.map","const defaultOptions = {\n    debug: false,\n    logger: console\n};\nexport class StimulusUse {\n    constructor(controller, options = {}) {\n        var _a, _b, _c;\n        this.log = (functionName, args) => {\n            if (!this.debug)\n                return;\n            this.logger.groupCollapsed(`%c${this.controller.identifier} %c#${functionName}`, 'color: #3B82F6', 'color: unset');\n            this.logger.log(Object.assign({ controllerId: this.controllerId }, args));\n            this.logger.groupEnd();\n        };\n        this.debug = (_b = (_a = options === null || options === void 0 ? void 0 : options.debug) !== null && _a !== void 0 ? _a : controller.application.stimulusUseDebug) !== null && _b !== void 0 ? _b : defaultOptions.debug;\n        this.logger = (_c = options === null || options === void 0 ? void 0 : options.logger) !== null && _c !== void 0 ? _c : defaultOptions.logger;\n        this.controller = controller;\n        this.controllerId = controller.element.id || controller.element.dataset.id;\n        // make copies of lifecycle functions\n        this.controllerInitialize = controller.initialize.bind(controller);\n        this.controllerConnect = controller.connect.bind(controller);\n        this.controllerDisconnect = controller.disconnect.bind(controller);\n    }\n}\n//# sourceMappingURL=stimulus_use.js.map","import { StimulusUse } from '../stimulus_use';\nimport { method } from '../support/index';\nexport class UseHover extends StimulusUse {\n    constructor(controller, options = {}) {\n        super(controller, options);\n        this.observe = () => {\n            this.targetElement.addEventListener('mouseenter', this.onEnter);\n            this.targetElement.addEventListener('mouseleave', this.onLeave);\n        };\n        this.unobserve = () => {\n            this.targetElement.removeEventListener('mouseenter', this.onEnter);\n            this.targetElement.removeEventListener('mouseleave', this.onLeave);\n        };\n        this.onEnter = () => {\n            method(this.controller, 'mouseEnter').call(this.controller);\n            this.log('mouseEnter', { hover: true });\n        };\n        this.onLeave = () => {\n            method(this.controller, 'mouseLeave').call(this.controller);\n            this.log('mouseLeave', { hover: false });\n        };\n        this.targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        this.controller = controller;\n        this.enhanceController();\n        this.observe();\n    }\n    enhanceController() {\n        const controllerDisconnect = this.controller.disconnect.bind(this.controller);\n        const disconnect = () => {\n            this.unobserve();\n            controllerDisconnect();\n        };\n        Object.assign(this.controller, { disconnect });\n    }\n}\nexport const useHover = (controller, options = {}) => {\n    const observer = new UseHover(controller, options);\n    return [observer.observe, observer.unobserve];\n};\n//# sourceMappingURL=use-hover.js.map","import { StimulusUse } from '../stimulus_use';\nimport { method } from '../support/index';\nexport class UseMutation extends StimulusUse {\n    constructor(controller, options = {}) {\n        super(controller, options);\n        this.observe = () => {\n            try {\n                this.observer.observe(this.targetElement, this.options);\n            }\n            catch (error) {\n                this.controller.application.handleError(error, \"At a minimum, one of childList, attributes, and/or characterData must be true\", {});\n            }\n        };\n        this.unobserve = () => {\n            this.observer.disconnect();\n        };\n        this.mutation = (entries) => {\n            method(this.controller, 'mutate').call(this.controller, entries);\n            this.log('mutate', { entries });\n        };\n        this.targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        this.controller = controller;\n        this.options = options;\n        this.observer = new MutationObserver(this.mutation);\n        this.enhanceController();\n        this.observe();\n    }\n    enhanceController() {\n        const controllerDisconnect = this.controller.disconnect.bind(this.controller);\n        const disconnect = () => {\n            this.unobserve();\n            controllerDisconnect();\n        };\n        Object.assign(this.controller, { disconnect });\n    }\n}\nexport const useMutation = (controller, options = {}) => {\n    const observer = new UseMutation(controller, options);\n    return [observer.observe, observer.unobserve];\n};\n//# sourceMappingURL=use-mutation.js.map","import { method } from '../support/index';\nexport const useWindowResize = (controller) => {\n    const callback = (event) => {\n        const { innerWidth, innerHeight } = window;\n        const payload = {\n            height: innerHeight || Infinity,\n            width: innerWidth || Infinity,\n            event\n        };\n        method(controller, 'windowResize').call(controller, payload);\n    };\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    const observe = () => {\n        window.addEventListener('resize', callback);\n        callback();\n    };\n    const unobserve = () => {\n        window.removeEventListener('resize', callback);\n    };\n    Object.assign(controller, {\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-window-resize.js.map","import { Controller } from 'stimulus';\nclass DebounceController extends Controller {\n}\nDebounceController.debounces = [];\nconst defaultWait = 200;\nconst debounce = (fn, wait = defaultWait) => {\n    let timeoutId = null;\n    return function () {\n        const args = arguments;\n        const context = this;\n        const callback = () => fn.apply(context, args);\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(callback, wait);\n    };\n};\nexport const useDebounce = (controller, options) => {\n    var _a;\n    const constructor = controller.constructor;\n    (_a = constructor.debounces) === null || _a === void 0 ? void 0 : _a.forEach((func) => {\n        if (typeof func === \"string\") {\n            controller[func] = debounce(controller[func], options === null || options === void 0 ? void 0 : options.wait);\n        }\n        if (typeof func === \"object\") {\n            const { name, wait } = func;\n            if (!name)\n                return;\n            controller[name] = debounce(controller[name], wait || (options === null || options === void 0 ? void 0 : options.wait));\n        }\n    });\n};\n//# sourceMappingURL=use-debounce.js.map","import {useWindowResize} from \"stimulus-use\";\nimport {BaseController} from \"./base_controller\";\n\nexport class AutosizeController extends BaseController {\n\n  private boundHandler = this.handler.bind(this);\n\n  connect() {\n    let target = this.element as HTMLTextAreaElement;\n    target.style.resize = \"none\";\n    target.style.boxSizing = \"border-box\";\n    target.addEventListener(\"input\", this.boundHandler);\n    target.addEventListener(\"focus\", this.boundHandler);\n    useWindowResize(this);\n    requestAnimationFrame(this.boundHandler);\n  }\n\n  windowResize() {\n    this.handler();\n  }\n\n  private handler() {\n    this.autosize(this.element as HTMLTextAreaElement);\n  };\n\n  private autosize(element: HTMLTextAreaElement) {\n    let offset = element.offsetHeight - element.clientHeight;\n    element.style.height = \"auto\";\n    element.style.height = element.scrollHeight + offset + \"px\";\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class CharCountController extends BaseController {\r\n\r\n  static targets = [\"input\", \"output\"];\r\n  static values = {min: Number, max: Number};\r\n  static classes = [\"error\"];\r\n\r\n  declare readonly inputTarget: HTMLInputElement | HTMLTextAreaElement;\r\n  declare readonly outputTarget: HTMLElement;\r\n  declare minValue: number;\r\n  declare hasMinValue: boolean;\r\n  declare maxValue: number;\r\n  declare hasMaxValue: boolean;\r\n  declare errorClass: string;\r\n  declare hasErrorClass: boolean;\r\n\r\n  boundHandler = this.updateCharCount.bind(this);\r\n\r\n  connect() {\r\n    this.updateCharCount();\r\n    this.inputTarget.addEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  disconnect() {\r\n    this.inputTarget.removeEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  updateCharCount() {\r\n    let charCount = this.inputTarget.value.length;\r\n    this.outputTarget.innerText = charCount.toString();\r\n    if (this.hasErrorClass) {\r\n      if (this.isValidCount(charCount)) {\r\n        this.outputTarget.classList.remove(this.errorClass);\r\n      } else {\r\n        this.outputTarget.classList.add(this.errorClass);\r\n      }\r\n    }\r\n  }\r\n\r\n  isValidCount(count: number) {\r\n    let min = 0;\r\n    let max = 99999;\r\n\r\n    if (this.hasMinValue) {\r\n      min = this.minValue;\r\n    }\r\n\r\n    if (this.hasMaxValue) {\r\n      max = this.maxValue;\r\n    }\r\n\r\n    return count >= min && count <= max;\r\n  }\r\n\r\n}\r\n","import {BaseController} from './base_controller';\r\n\r\nexport class CheckboxSelectAllController extends BaseController {\r\n  static targets = ['selectAll', 'checkbox'];\r\n\r\n  declare readonly hasCheckboxAllTarget: boolean;\r\n  declare readonly selectAllTarget: HTMLInputElement;\r\n  declare readonly checkboxTargets: HTMLInputElement[];\r\n\r\n  private get checked() {\r\n    return this.checkboxTargets.filter(checkbox => checkbox.checked);\r\n  }\r\n\r\n  private get unchecked() {\r\n    return this.checkboxTargets.filter(checkbox => !checkbox.checked);\r\n  }\r\n\r\n  initialize() {\r\n    this.toggle = this.toggle.bind(this);\r\n    this.refresh = this.refresh.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      if (!this.hasCheckboxAllTarget) {\r\n        return;\r\n      }\r\n\r\n      this.selectAllTarget.addEventListener('change', this.toggle);\r\n      this.checkboxTargets.forEach(checkbox => checkbox.addEventListener('change', this.refresh));\r\n      this.refresh();\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    if (!this.hasCheckboxAllTarget) {\r\n      return;\r\n    }\r\n\r\n    this.selectAllTarget.removeEventListener('change', this.toggle);\r\n    this.checkboxTargets.forEach((checkbox) => checkbox.removeEventListener('change', this.refresh));\r\n  }\r\n\r\n  private toggle(event: Event) {\r\n    event.preventDefault();\r\n    let target = event.target as HTMLInputElement;\r\n    this.checkboxTargets.forEach((checkbox) => checkbox.checked = target.checked);\r\n  }\r\n\r\n  private refresh() {\r\n    const checkboxesCount = this.checkboxTargets.length;\r\n    const checkboxesCheckedCount = this.checked.length;\r\n\r\n    this.selectAllTarget.checked = checkboxesCheckedCount > 0;\r\n    this.selectAllTarget.indeterminate = checkboxesCheckedCount > 0 && checkboxesCheckedCount < checkboxesCount;\r\n  }\r\n}","import {BaseController} from \"./base_controller\";\r\n\r\nexport class ClipboardController extends BaseController {\r\n\r\n  static targets = [\"button\", \"copy\", \"fallback\"];\r\n  static values = {removeUnused: Boolean};\r\n\r\n  declare readonly sourceTarget: HTMLElement;\r\n  declare readonly copyTarget: HTMLElement;\r\n  declare readonly hasCopyTarget: boolean;\r\n  declare readonly fallbackTarget: HTMLElement;\r\n  declare readonly hasFallbackTarget: boolean;\r\n\r\n  declare readonly hasRemoveUnusedValue: boolean;\r\n  declare readonly removeUnusedValue: boolean;\r\n\r\n  supported = false;\r\n\r\n  connect() {\r\n    this.supported = document.queryCommandSupported(\"copy\");\r\n\r\n    if (this.hasRemoveUnusedValue && this.removeUnusedValue) {\r\n      if (this.supported && this.hasFallbackTarget) {\r\n        this.fallbackTarget.remove();\r\n      } else if (this.hasCopyTarget) {\r\n        this.copyTarget.remove();\r\n      }\r\n    }\r\n  }\r\n\r\n  select(event: MouseEvent) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    (this.sourceTarget as HTMLInputElement | HTMLTextAreaElement).select();\r\n  }\r\n\r\n  copy(event: ClipboardEvent) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    (this.sourceTarget as HTMLInputElement | HTMLTextAreaElement).select();\r\n    if (this.supported) {\r\n      document.execCommand(\"copy\");\r\n    }\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\n\nexport class ConfirmNavigationController extends BaseController {\n\n  static values = {message: String};\n\n  declare readonly messageValue: string;\n\n  connect() {\n    let confirmMessage = this.messageValue;\n    window.onbeforeunload = () => (confirmMessage == null ? true : confirmMessage);\n    window.addEventListener(\"popstate\", this.handlePopstate);\n    window.addEventListener(\"submit\", () => {\n      window.removeEventListener(\"popstate\", this.handlePopstate);\n      window.onbeforeunload = null;\n    });\n    // TODO: Turbo navigation events\n  }\n\n  handlePopstate(event: PopStateEvent) {\n    return false;\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class DebugController extends BaseController {\n\n  static targets = [\"test\"];\n  declare testTargets: HTMLElement[];\n\n  connect() {\n    console.log(\"Debug Controller\", this, this.testTargets);\n  }\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class DetectDirtyController extends BaseController {\r\n\r\n  initialValue: string | boolean | null = null;\r\n\r\n  boundHandler = this.handler.bind(this);\r\n\r\n  connect() {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    if (this.isInputElement(element) && this.isCheckable(element)) {\r\n      this.initialValue = element.checked;\r\n    } else {\r\n      this.initialValue = element.value;\r\n    }\r\n    element.addEventListener(\"input\", this.boundHandler);\r\n    element.addEventListener(\"change\", this.boundHandler);\r\n  }\r\n\r\n  disconnect() {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    element.removeEventListener(\"input\", this.boundHandler);\r\n    element.removeEventListener(\"change\", this.boundHandler);\r\n  }\r\n\r\n  restore() {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    if (this.isInputElement(element) && this.isCheckable(element)) {\r\n      element.checked = this.initialValue as boolean;\r\n    } else {\r\n      element.value = this.initialValue as string;\r\n    }\r\n  }\r\n\r\n  private handler(event?: Event) {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n\r\n    if (this.initialValue !== element.value) {\r\n      element.setAttribute(\"data-dirty\", \"true\");\r\n    } else {\r\n      element.removeAttribute(\"data-dirty\");\r\n    }\r\n  }\r\n\r\n  private isCheckable(element: HTMLInputElement): boolean {\r\n    return (element.type === \"radio\" || element.type === \"checkbox\");\r\n  }\r\n\r\n  private isInputElement(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement): element is HTMLInputElement {\r\n    return element.tagName === \"INPUT\";\r\n  }\r\n\r\n}\r\n\r\nexport function isDirty(element: HTMLElement) {\r\n  return element.hasAttribute(\"data-dirty\");\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class DisableInputsController extends BaseController {\r\n\r\n  static targets = [\"disabler\", \"disable\"];\r\n\r\n  static values = {\r\n    clear: Boolean,\r\n  };\r\n\r\n  declare readonly hasDisablerTarget: boolean;\r\n  declare readonly disablerTarget: HTMLInputElement;\r\n  declare readonly disableTargets: Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\r\n  declare readonly clearValue: boolean;\r\n  declare readonly hasClearValue: boolean;\r\n\r\n  connect() {\r\n    this.toggle();\r\n  }\r\n\r\n  toggle() {\r\n    if (this.hasDisablerTarget && this.disablerTarget.checked) {\r\n      this.disableInputs();\r\n    } else {\r\n      this.enableInputs();\r\n    }\r\n  }\r\n\r\n  disableInputs() {\r\n    let shouldClear = this.hasClearValue && this.clearValue;\r\n    this.disableTargets.forEach((el, _) => {\r\n      if (shouldClear) {\r\n        el.value = \"\";\r\n      }\r\n      el.disabled = true;\r\n    });\r\n  }\r\n\r\n  enableInputs() {\r\n    this.disableTargets.forEach((el, _) => {\r\n      el.disabled = false;\r\n    });\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class DismissableController extends BaseController {\r\n\r\n\r\n  dismiss() {\r\n    this.element.remove();\r\n  }\r\n\r\n}\r\n","import {useMutation} from \"stimulus-use\";\r\nimport {BaseController} from \"./base_controller\";\r\n\r\nexport class EmptyDomController extends BaseController {\r\n\r\n  static classes = [\"empty\", \"notEmpty\"];\r\n  static values = {scopeSelector: String};\r\n\r\n  declare hasEmptyClass: boolean;\r\n  declare emptyClass: string;\r\n  declare hasNotEmptyClass: boolean;\r\n  declare notEmptyClass: string;\r\n\r\n  declare hasScopeSelectorValue: boolean;\r\n  declare scopeSelectorValue: string;\r\n\r\n  connect() {\r\n    useMutation(this, {element: this.element, childList: true});\r\n    this.checkEmpty();\r\n  }\r\n\r\n  mutate(entries: MutationRecord[]) {\r\n    this.checkEmpty();\r\n  }\r\n\r\n  checkEmpty() {\r\n    let children;\r\n    if (this.hasScopeSelectorValue) {\r\n      children = this.element.querySelectorAll(this.scopeSelectorValue);\r\n    } else {\r\n      children = this.element.children;\r\n    }\r\n\r\n    if (children.length === 0) {\r\n      if (this.hasNotEmptyClass) {\r\n        let classes = this.notEmptyClass.split(\" \");\r\n        classes.forEach(klass => this.element.classList.remove(klass));\r\n      }\r\n      if (this.hasEmptyClass) {\r\n        let classes = this.emptyClass.split(\" \");\r\n        classes.forEach(klass => this.element.classList.add(klass));\r\n      }\r\n      this.element.dispatchEvent(\r\n        new CustomEvent(\"dom:empty\", {\r\n          bubbles: true,\r\n          cancelable: true,\r\n        }),\r\n      );\r\n    } else {\r\n      if (this.hasNotEmptyClass) {\r\n        let classes = this.notEmptyClass.split(\" \");\r\n        classes.forEach(klass => this.element.classList.add(klass));\r\n      }\r\n      if (this.hasEmptyClass) {\r\n        let classes = this.emptyClass.split(\" \");\r\n        classes.forEach(klass => this.element.classList.remove(klass));\r\n      }\r\n      this.element.dispatchEvent(\r\n        new CustomEvent(\"dom:not-empty\", {\r\n          bubbles: true,\r\n          cancelable: true,\r\n          detail: {\r\n            count: children.length,\r\n          },\r\n        }),\r\n      );\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class EnableInputsController extends BaseController {\r\n\r\n  static targets = [\"enabler\", \"enable\"];\r\n\r\n  static values = {\r\n    clear: Boolean,\r\n  };\r\n\r\n  declare readonly hasEnablerTarget: boolean;\r\n  declare readonly enablerTarget: HTMLInputElement;\r\n  declare readonly enableTargets: Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\r\n  declare readonly clearValue: boolean;\r\n  declare readonly hasClearValue: boolean;\r\n\r\n  connect() {\r\n    this.toggle();\r\n  }\r\n\r\n  toggle() {\r\n    if (this.hasEnablerTarget && this.enablerTarget.checked) {\r\n      this.enableInputs();\r\n    } else {\r\n      this.disableInputs();\r\n    }\r\n  }\r\n\r\n  disableInputs() {\r\n    let shouldClear = this.hasClearValue && this.clearValue;\r\n    this.enableTargets.forEach((el, _) => {\r\n      if (shouldClear) {\r\n        el.value = \"\";\r\n      }\r\n      el.disabled = true;\r\n    });\r\n  }\r\n\r\n  enableInputs() {\r\n    this.enableTargets.forEach((el, _) => {\r\n      el.disabled = false;\r\n    });\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class FallbackImageController extends BaseController {\r\n\r\n  static values = {placeholder: String};\r\n\r\n  declare readonly placeholderValue: string;\r\n  declare readonly hasPlaceholderValue: boolean;\r\n\r\n  connect() {\r\n    let element = this.element as HTMLImageElement;\r\n\r\n    element.onerror = () => {\r\n      if (this.hasPlaceholderValue) {\r\n        element.src = this.placeholderValue;\r\n      } else {\r\n        element.style.display = \"none\";\r\n      }\r\n    };\r\n  }\r\n\r\n}\r\n","import {useIntersection} from \"stimulus-use\";\nimport {IntersectionOptions} from \"stimulus-use/dist/use-intersection/use-intersection\";\nimport {AsyncBlockController} from \"./async_block_controller\";\n\nexport class LazyBlockController extends AsyncBlockController {\n\n  declare observe: () => void;\n  declare unobserve: () => void;\n  declare options: IntersectionOptions;\n  declare isVisible: boolean;\n  declare disappear: () => void;\n\n  connect() {\n    let element = this.element;\n    this.options = {element, threshold: 0.3};\n\n    if (\"IntersectionObserver\" in window) {\n      [this.observe, this.unobserve] = useIntersection(this, this.options);\n    } else {\n      // Client doesn't support intersection observer, fallback to pre-loading\n      this.loadContent();\n    }\n  }\n\n  appear(entry: IntersectionObserverEntry) {\n    let element = this.element as HTMLImageElement;\n    if (element.src !== \"\") {\n      return;\n    }\n    if (entry.target === element && entry.isIntersecting) {\n      this.loadContent();\n      if (this.unobserve) {\n        this.unobserve();\n      }\n    }\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class LimitedSelectionCheckboxesController extends BaseController {\r\n\r\n  static targets = [\"input\", \"error\"];\r\n  static values = {max: Number, message: String};\r\n\r\n  declare readonly hasErrorTarget: boolean;\r\n  declare readonly errorTarget: HTMLElement;\r\n  declare readonly inputTargets: HTMLInputElement[];\r\n  declare readonly maxValue: number;\r\n  declare readonly messageValue: string;\r\n\r\n  maxSelections = 0;\r\n\r\n  boundHandleInputs = this.handleInputs.bind(this);\r\n\r\n  connect() {\r\n    this.inputTargets.forEach((el) => el.addEventListener(\"change\", this.boundHandleInputs));\r\n  }\r\n\r\n  disconnect() {\r\n    this.inputTargets.forEach((el) => el.removeEventListener(\"change\", this.boundHandleInputs));\r\n  }\r\n\r\n  handleInputs(event: Event) {\r\n    let tickedInputs = this.inputTargets.reduce((previousValue, el) => el.checked ? previousValue + 1 : previousValue, 0);\r\n    let target = event.target as HTMLInputElement;\r\n    if (tickedInputs > this.maxSelections) {\r\n      event.preventDefault();\r\n      target.checked = false;\r\n      target.dispatchEvent(new CustomEvent(\"change\", {bubbles: true, cancelable: true}));\r\n      target.dispatchEvent(new CustomEvent(\"limited-selection:too-many\", {bubbles: true, cancelable: true, detail: {target}}));\r\n      if (this.hasErrorTarget) {\r\n        this.errorTarget.innerHTML = this.messageValue;\r\n      }\r\n    } else {\r\n      target.dispatchEvent(new CustomEvent(\"limited-selection:selection\", {bubbles: true, cancelable: true, detail: {target}}));\r\n      if (this.hasErrorTarget) {\r\n        this.errorTarget.innerHTML = \"\";\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class NestedFormController extends BaseController {\r\n  static targets = ['target', 'template'];\r\n  static values = {\r\n    insertMode: String,\r\n    wrapperClass: String,\r\n  };\r\n\r\n  declare readonly targetTarget: HTMLElement;\r\n  declare readonly templateTarget: HTMLTemplateElement | HTMLScriptElement;\r\n\r\n  declare readonly wrapperClassValue: string;\r\n  declare readonly hasWrapperSelectorValue: boolean;\r\n  declare readonly insertModeValue: InsertPosition;\r\n  declare readonly hasInsertModeValue: boolean;\r\n\r\n  get wrapperClass() {\r\n    return this.hasWrapperSelectorValue ? this.wrapperClassValue : 'nested-fields';\r\n  }\r\n\r\n  get insertMode(): InsertPosition {\r\n    return this.hasInsertModeValue ? this.insertModeValue : 'beforeend';\r\n  }\r\n\r\n  connect() {\r\n    this.checkStructure();\r\n  }\r\n\r\n  add(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    const content = this.templateTarget.innerHTML.replace(/NEW_RECORD/g, this.generateID());\r\n    this.targetTarget.insertAdjacentHTML(this.insertMode, content);\r\n  }\r\n\r\n  remove(event: Event) {\r\n    event.preventDefault();\r\n    const wrapper: HTMLElement | null = (event.target as HTMLElement).closest(this.wrapperClass);\r\n    if (wrapper == null) {\r\n      throw new Error(`#remove was clicked from outside of a child record. Could not find an ancestor with class ${this.wrapperClass}`);\r\n    }\r\n\r\n    if (wrapper.dataset.newRecord === 'true') {\r\n      wrapper.remove();\r\n    } else {\r\n      wrapper.style.display = 'none';\r\n      let destroyInput = wrapper.querySelector(\"input[name*='_destroy']\") as HTMLInputElement | null;\r\n      if (destroyInput == null) {\r\n        throw new Error(`Could not find a hidden input with name '_destroy'. NestedForm cannot remove an already persisted record without it.`);\r\n      }\r\n\r\n      destroyInput.value = \"1\";\r\n    }\r\n  }\r\n\r\n  generateID(): string {\r\n    return new Date().getTime().toString() + Math.random();\r\n  }\r\n\r\n  private checkStructure() {\r\n    let template = this.templateTarget.innerHTML;\r\n\r\n    if (template.indexOf('NEW_RECORD')) {\r\n      throw new Error(\"Could not find 'NEW_RECORD' in the provided template. Please make sure you've passed `child_index: 'NEW_RECORD'` to `fields_for`\")\r\n    }\r\n  }\r\n}","import {BaseController} from \"./base_controller\";\r\n\r\nexport class PasswordConfirmController extends BaseController {\r\n\r\n  static targets = [\"password\"];\r\n  static classes = [\"error\"];\r\n\r\n  declare readonly passwordTargets: HTMLInputElement[];\r\n\r\n  declare readonly errorClass: string;\r\n  declare readonly hasErrorClass: boolean;\r\n\r\n  private boundCheckPasswordsMatch = this.checkPasswordsMatch.bind(this);\r\n\r\n  connect() {\r\n    this.passwordTargets.forEach((el) => el.addEventListener(\"change\", this.boundCheckPasswordsMatch));\r\n  }\r\n\r\n  disconnect() {\r\n    this.passwordTargets.forEach((el) => el.removeEventListener(\"change\", this.boundCheckPasswordsMatch));\r\n  }\r\n\r\n  private allPasswordsMatch() {\r\n    let values = new Set(this.passwordTargets.map(el => el.value));  // Create a unique set of the password values\r\n    return values.has(\"\") || values.size == 1; // If any of the passwords are still blank, or there is only one distinct password value (i.e. they all are the same)\r\n  }\r\n\r\n  private checkPasswordsMatch() {\r\n    if (this.allPasswordsMatch()) {\r\n      this.element.dispatchEvent(new CustomEvent(\"password-confirm:match\"));\r\n      if (this.hasErrorClass) {\r\n        this.passwordTargets.forEach(el => el.classList.remove(this.errorClass));\r\n      }\r\n    } else {\r\n      this.element.dispatchEvent(new CustomEvent(\"password-confirm:no-match\"));\r\n      if (this.hasErrorClass) {\r\n        this.passwordTargets.forEach(el => el.classList.add(this.errorClass));\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class PasswordPeekController extends BaseController {\r\n\r\n  static targets = [\"password\"];\r\n\r\n  declare readonly passwordTarget: HTMLInputElement;\r\n\r\n\r\n  peak(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    this.passwordTarget.type = \"text\";\r\n  }\r\n\r\n  hide(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    this.passwordTarget.type = \"password\";\r\n  }\r\n\r\n  toggle(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    if (this.passwordTarget.type === \"password\") {\r\n      this.peak();\r\n    } else {\r\n      this.hide();\r\n    }\r\n  }\r\n}\r\n","import {useDebounce, useWindowResize} from \"stimulus-use\";\nimport {WindowResizePayload} from \"stimulus-use/dist/use-window-resize/use-window-resize\";\nimport {BaseController} from \"./base_controller\";\n\ninterface ResponsiveIframeMessage {\n  name: string,\n  height: number,\n}\n\nexport class ResponsiveIframeWrapperController extends BaseController {\n\n  boundMessageReceived = this.messageReceived.bind(this);\n\n  connect() {\n    window.addEventListener(\"message\", this.boundMessageReceived);\n  }\n\n  disconnect() {\n    window.removeEventListener(\"message\", this.boundMessageReceived);\n  }\n\n  messageReceived(message: MessageEvent<ResponsiveIframeMessage>) {\n    let data = message.data;\n    if (data.hasOwnProperty(\"name\") && data.name === \"iframe-body\" && data.hasOwnProperty(\"height\")) {\n      this.resize(data.height);\n    }\n  }\n\n  resize(height: number) {\n    (this.element as HTMLIFrameElement).style.height = `${height}px`;\n  }\n\n}\n\nexport class ResponsiveIframeBodyController extends BaseController {\n\n  static debounces = [\"postUpdate\"];\n\n  declare observe: () => void;\n  declare unobserve: () => void;\n\n  connect() {\n    // If this Window is inside a frame\n    if (window.self !== window.top) {\n      useWindowResize(this);\n      useDebounce(this, {});\n      this.postUpdate();\n    } else {\n      // Not an iframe\n    }\n  }\n\n  windowResize(payload: WindowResizePayload) {\n    this.postUpdate();\n  };\n\n  postUpdate() {\n    let payload: ResponsiveIframeMessage = {name: \"iframe-body\", height: this.getHeight()};\n    window.parent.postMessage(\n      payload,\n      \"*\",\n    );\n  }\n\n  getHeight(): number {\n    const body = document.body;\n    const html = document.documentElement;\n\n    // Get the largest height out of body and html's various height measurements\n    return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n  }\n\n}\n","const smoothSupported = \"scrollBehavior\" in document.documentElement.style;\r\nlet smoothPolyfilled: boolean;\r\n\r\nexport async function scrollToElement(element: Element, {behavior = \"smooth\", block = \"start\", inline = \"nearest\"}: ScrollIntoViewOptions = {}) {\r\n  if (behavior == \"smooth\" && !smoothSupported) {\r\n    await polyfillSmooth();\r\n  }\r\n  element.scrollIntoView({behavior, block, inline});\r\n}\r\n\r\nasync function polyfillSmooth() {\r\n  const {polyfill} = await import(/* webpackChunkName: \"smoothscroll-polyfill\" */ \"smoothscroll-polyfill\");\r\n  if (smoothPolyfilled) {\r\n    return;\r\n  }\r\n  smoothPolyfilled = true;\r\n  polyfill();\r\n}\r\n\r\nexport function getScrollParent(node: HTMLElement | null): HTMLElement | null {\r\n  if (!node) {\r\n    return null;\r\n  }\r\n  const overflowY = getComputedStyle(node).overflowY;\r\n  const isScrollable = overflowY !== \"visible\" && overflowY !== \"hidden\";\r\n\r\n  if (isScrollable && node.scrollHeight >= node.clientHeight) {\r\n    return node;\r\n  }\r\n\r\n  return getScrollParent(node.parentElement) || document.body;\r\n}\r\n","import camelCase from \"lodash.camelcase\";\r\nimport {BaseController} from \"../base_controller\";\r\n\r\nexport class EphemeralController extends BaseController {\r\n\r\n  cleanupSelf() {\r\n    this.cleanup(this.element as HTMLElement);\r\n  }\r\n\r\n  cleanup(element: HTMLElement) {\r\n    element.dataset.controller = element.dataset.controller?.replaceAll(new RegExp(`(\\s|^)${this.identifier}(\\s|$)`, \"g\"), \"\") || \"\";\r\n    if (element.dataset.controller == \"\") {\r\n      // If there are no controllers left, remove the attribute\r\n      delete element.dataset.controller;\r\n    }\r\n\r\n    let substringIdentifierValueRegex = new RegExp(`(\\s|^)${this.identifier}\\\\..+?(\\s|$)`, \"g\");\r\n    element.dataset.target = element.dataset.target?.replaceAll(substringIdentifierValueRegex, \"\") || \"\";\r\n    delete element.dataset[camelCase(`${this.identifier}-target`)];\r\n    if (element.dataset.target == \"\") {\r\n      // If there are no targets left, remove the attribute\r\n      delete element.dataset.target;\r\n    }\r\n\r\n    element.dataset.action = element.dataset.target?.replaceAll(substringIdentifierValueRegex, \"\") || \"\";\r\n    delete element.dataset[camelCase(`${this.identifier}-action`)];\r\n    if (element.dataset.action == \"\") {\r\n      // If there are no actions left, remove the attribute\r\n      delete element.dataset.action;\r\n    }\r\n\r\n    // @ts-ignore\r\n    let values = this.constructor.values;\r\n    if (values) {\r\n      Object.keys(values).forEach(val => delete element.dataset[camelCase(`${this.identifier}-${val}-value`)]);\r\n    }\r\n\r\n    // @ts-ignore\r\n    let classes = this.constructor.classes;\r\n    if (classes) {\r\n      Object.keys(classes).forEach(val => delete element.dataset[camelCase(`${this.identifier}-${val}-class`)]);\r\n    }\r\n  }\r\n\r\n}\r\n","import {EphemeralController} from \"./utilities/ephemeral_controller\";\r\nimport {scrollToElement} from \"./utilities/scroll\";\r\n\r\nexport class ScrollIntoFocusController extends EphemeralController {\r\n\r\n  static values = {\r\n    behavior: String,\r\n    block: String,\r\n    inline: String,\r\n  };\r\n\r\n  declare behaviorValue: ScrollBehavior;\r\n  declare hasBehaviorValue: boolean;\r\n  declare blockValue: ScrollLogicalPosition;\r\n  declare hasBlockValue: boolean;\r\n  declare inlineValue: ScrollLogicalPosition;\r\n  declare hasInlineValue: boolean;\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      // Attempt smooth scrolling, with polyfill\r\n      scrollToElement(\r\n        this.element,\r\n        {\r\n          behavior: this.hasBehaviorValue ? this.behaviorValue : \"smooth\",\r\n          block: this.hasBlockValue ? this.blockValue : \"center\",\r\n          inline: this.hasInlineValue ? this.inlineValue : \"center\",\r\n        },\r\n      ).catch(() => this.element.scrollIntoView()); // Fallback to snap-scrolling\r\n      this.cleanupSelf();\r\n    });\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\nimport {getScrollParent, scrollToElement} from \"./utilities/scroll\";\r\n\r\nexport class ScrollToBottomController extends BaseController {\r\n\r\n  static values = {\r\n    mode: String,\r\n  };\r\n\r\n  declare modeValue: \"nearest\" | \"document\";\r\n  declare hasModeValue: boolean;\r\n\r\n\r\n  scroll(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    let mode = this.hasModeValue ? this.modeValue : \"document\";\r\n    let target: null | HTMLElement;\r\n    if (mode == \"document\") {\r\n      target = document.body;\r\n    } else {\r\n      target = getScrollParent(this.element as HTMLElement);\r\n    }\r\n    if (target == null) {\r\n      return;\r\n    }\r\n    scrollToElement(target!, {behavior: \"smooth\", block: \"end\"}).catch(() => target!.scrollIntoView(false));\r\n  }\r\n\r\n}\r\n\r\n","import {BaseController} from \"./base_controller\";\r\nimport {scrollToElement} from \"./utilities/scroll\";\r\n\r\nexport class ScrollToController extends BaseController {\r\n\r\n  static values = {\r\n    selector: String,\r\n    behavior: String,\r\n    block: String,\r\n    inline: String,\r\n  };\r\n\r\n  declare selectorValue: string;\r\n  declare behaviorValue: ScrollBehavior;\r\n  declare hasBehaviorValue: boolean;\r\n  declare blockValue: ScrollLogicalPosition;\r\n  declare hasBlockValue: boolean;\r\n  declare inlineValue: ScrollLogicalPosition;\r\n  declare hasInlineValue: boolean;\r\n\r\n\r\n  scroll() {\r\n    let target = document.querySelector(this.selectorValue);\r\n    if (!target) {\r\n      console.warn(`Could not find target for '${this.selectorValue}'`);\r\n      return;\r\n    }\r\n\r\n    scrollToElement(\r\n      target!,\r\n      {\r\n        behavior: this.hasBehaviorValue ? this.behaviorValue : \"smooth\",\r\n        block: this.hasBlockValue ? this.blockValue : \"center\",\r\n        inline: this.hasInlineValue ? this.inlineValue : \"center\",\r\n      },\r\n    ).catch(() => target!.scrollIntoView()); // Fallback to snap-scrolling\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\nimport {getScrollParent, scrollToElement} from \"./utilities/scroll\";\n\nexport class ScrollToTopController extends BaseController {\n\n  static values = {\n    mode: String,\n  };\n\n  declare modeValue: \"nearest\" | \"document\";\n  declare hasModeValue: boolean;\n\n\n  scroll(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    let mode = this.hasModeValue ? this.modeValue : \"document\";\n    let target: null | HTMLElement;\n    if (mode == \"document\") {\n      target = document.body;\n    } else {\n      target = getScrollParent(this.element as HTMLElement);\n    }\n    if (target == null) {\n      return;\n    }\n    scrollToElement(target!, {behavior: \"smooth\", block: \"start\"}).catch(() => target!.scrollIntoView(false));\n  }\n\n}\n\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class SelfDestructController extends BaseController {\r\n\r\n  static values = {seconds: Number};\r\n\r\n  declare readonly secondsValue: number;\r\n  timeout: null | ReturnType<typeof setTimeout> = null;\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      // Only start countdown on first paint\r\n      this.timeout = setTimeout(() => this.element.remove(), this.secondsValue * 1000);\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.timeout) {\r\n      clearTimeout(this.timeout);\r\n    }\r\n  }\r\n\r\n}\r\n","import {EphemeralController} from \"./utilities/ephemeral_controller\";\r\n\r\nexport class TeleportController extends EphemeralController {\r\n\r\n  static values = {target: String, insert: String, immediate: Boolean};\r\n\r\n  declare readonly immediateValue: boolean;\r\n  declare readonly hasImmediateValue: boolean;\r\n  declare readonly targetValue: string;\r\n  declare readonly hasInsertValue: boolean;\r\n  declare readonly insertValue: InsertPosition | \"replaceOuter\" | \"replaceInner\" | \"prepend\" | \"append\";\r\n\r\n  connect() {\r\n    if (!this.hasInsertValue) {\r\n      throw new Error(\"`insert` value was not specified\");\r\n    }\r\n\r\n    requestAnimationFrame(() => {\r\n      if (this.hasImmediateValue && this.immediateValue) {\r\n        this.execute();\r\n      }\r\n    });\r\n  }\r\n\r\n  execute(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    let destination = document.querySelector(this.targetValue);\r\n\r\n    if (destination == null) {\r\n      this.element.dispatchEvent(new CustomEvent(\"teleport:error\", {bubbles: true, cancelable: true}));\r\n      return;\r\n    }\r\n\r\n    let copy = this.element.cloneNode(true) as HTMLElement;\r\n    this.cleanup(copy);\r\n\r\n    switch (this.insertValue) {\r\n      case \"beforebegin\":\r\n      case \"beforeend\":\r\n      case \"afterend\":\r\n      case \"afterbegin\":\r\n        destination.insertAdjacentHTML(this.insertValue, copy.outerHTML);\r\n        break;\r\n      case \"replaceOuter\":\r\n        destination.outerHTML = copy.outerHTML;\r\n        break;\r\n      case \"replaceInner\":\r\n        destination.innerHTML = copy.outerHTML;\r\n        break;\r\n      case \"prepend\":\r\n        destination.insertAdjacentHTML(\"afterbegin\", copy.outerHTML);\r\n        break;\r\n      case \"append\":\r\n        destination.insertAdjacentHTML(\"beforeend\", copy.outerHTML);\r\n        break;\r\n      default:\r\n        throw new Error(\"`insert` value was not specified\");\r\n\r\n    }\r\n    this.element.remove();\r\n  }\r\n\r\n}\r\n","import {useClickOutside, useHover} from \"stimulus-use\";\nimport {BaseController} from \"./base_controller\";\n\nexport type ToggleClassMode = \"on\" | \"off\" | \"toggle\"\n\nexport class ToggleClassController extends BaseController {\n\n  static targets = [\"toggle\"];\n  static values = {\n    class: String,\n    mouseEnter: String,\n    mouseLeave: String,\n    clickAway: Boolean,\n    initial: String,\n  };\n\n  declare readonly toggleTargets: HTMLElement[];\n\n  declare readonly classValue: string;\n  declare readonly hasClassValue: boolean;\n\n  declare readonly mouseEnterValue: ToggleClassMode;\n  declare readonly hasMouseEnterValue: boolean;\n\n  declare readonly mouseLeaveValue: ToggleClassMode;\n  declare readonly hasMouseLeaveValue: boolean;\n\n  declare readonly clickAwayValue: boolean;\n  declare readonly hasClickAwayValue: boolean;\n\n  declare readonly initialValue: \"on\" | \"off\";\n  declare readonly hasInitialValue: boolean;\n\n  connect() {\n    if (!this.hasClassValue) {\n      throw new Error(\"data-toggle-class-class-value must not be empty\");\n    }\n\n    if (this.hasMouseEnterValue || this.hasMouseLeaveValue) {\n      useHover(this);\n    }\n\n    if (this.hasClickAwayValue && this.clickAwayValue) {\n      useClickOutside(this);\n    }\n\n    requestAnimationFrame(() => {\n      if (this.hasInitialValue) {\n        if (this.initialValue === \"on\") {\n          this.toggleTargets.forEach((target) => this.elementOn(target));\n        } else {\n          this.toggleTargets.forEach((target) => this.elementOff(target));\n        }\n      }\n    });\n  }\n\n  clickOutside() {\n    this.toggleTargets.forEach((target) => {\n      if (this.elementWasToggled(target)) {\n        this.elementToggleStatus(target);\n        this.elementToggle(target);\n      }\n    });\n  }\n\n  mouseEnter() {\n    if (this.hasMouseEnterValue) {\n      switch (this.mouseEnterValue) {\n        case \"on\":\n          this.on();\n          break;\n        case \"off\":\n          this.off();\n          break;\n        case \"toggle\":\n          this.toggle();\n          break;\n      }\n    }\n    return {};\n  }\n\n  mouseLeave() {\n    if (this.hasMouseLeaveValue) {\n      switch (this.mouseLeaveValue) {\n        case \"on\":\n          this.on();\n          break;\n        case \"off\":\n          this.off();\n          break;\n        case \"toggle\":\n          this.toggle();\n          break;\n      }\n    }\n    return {};\n  }\n\n  on(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementOn(target);\n    });\n  }\n\n  off(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementOff(target);\n    });\n  }\n\n  toggle(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementToggle(target);\n    });\n  }\n\n  private elementWasToggled(el: HTMLElement): boolean {\n    return el.dataset.toggled == \"true\";\n  }\n\n  private elementToggleStatus(el: HTMLElement) {\n    if (this.elementWasToggled(el)) {\n      delete el.dataset.toggled;\n    } else {\n      el.dataset.toggled = \"true\";\n    }\n  }\n\n  private elementToggle(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass));\n  }\n\n  private elementOn(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass, true));\n  }\n\n  private elementOff(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass, false));\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\nimport {isHTMLLinkElement} from \"./utilities/elements\";\nimport {isTurboFrame} from \"./utilities/turbo\";\n\nexport class TurboFrameRCController extends BaseController {\n\n  static values = {\n    frameId: String,\n    src: String,\n    loadingMessage: String,\n  };\n\n  declare readonly frameIdValue: string;\n  declare readonly srcValue: string;\n  declare readonly hasSrcValue: boolean;\n  declare readonly loadingMessageValue: string;\n  declare readonly hasLoadingMessageValue: boolean;\n\n  toggle(event?: Event | null) {\n    if (event) {\n      event.preventDefault();\n    }\n    let frame = this.getFrame();\n    let frameSrc = frame.src;\n    if (frameSrc == null || frameSrc !== this.getSrc()) {\n      this.setSrc();\n    } else {\n      this.clear();\n    }\n  }\n\n  setSrc(event?: Event | null) {\n    if (event) {\n      event.preventDefault();\n    }\n    let frame = this.getFrame();\n    if (this.hasLoadingMessageValue) {\n      frame.innerHTML = this.loadingMessageValue;\n    }\n\n    frame.src = this.getSrc();\n  }\n\n  clear(event?: Event | null) {\n    if (event) {\n      event.preventDefault();\n    }\n    let frame = this.getFrame();\n    frame.src = \"\";\n    frame.innerHTML = \"\";\n  }\n\n  private getFrame(): TurboFrame {\n    let frame = document.getElementById(`${this.frameIdValue}`);\n    if (frame == null) {\n      throw new Error(`Could not find frame with ID '${this.frameIdValue}'`);\n    }\n    if (!isTurboFrame(frame)) {\n      throw new Error(`Element targeted by ID '${this.frameIdValue}'`);\n    } else {\n      return frame;\n    }\n  }\n\n  private getSrc(): string {\n    let element = this.element as HTMLElement;\n    if (this.hasSrcValue) {\n      return this.srcValue;\n    } else if (isHTMLLinkElement(element)) {\n      return element.href;\n    } else {\n      throw new Error(\"No link given to drive frame to\");\n    }\n  }\n\n}\n","export function isTurboFrame(element: HTMLElement): element is TurboFrame {\r\n  return element.nodeName == \"TURBO-FRAME\";\r\n}\r\n","export function isHTMLLinkElement(element: Element): element is HTMLLinkElement {\n  return element.nodeName == \"A\";\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class WordCountController extends BaseController {\r\n\r\n  static targets = [\"input\", \"output\"];\r\n  static values = {min: Number, max: Number};\r\n  static classes = [\"error\"];\r\n\r\n  declare readonly inputTarget: HTMLInputElement | HTMLTextAreaElement;\r\n  declare readonly outputTarget: HTMLElement;\r\n  declare minValue: number;\r\n  declare hasMinValue: boolean;\r\n  declare maxValue: number;\r\n  declare hasMaxValue: boolean;\r\n  declare errorClass: string;\r\n  declare hasErrorClass: boolean;\r\n\r\n  boundHandler = this.updateWordCount.bind(this);\r\n\r\n  connect() {\r\n    this.updateWordCount();\r\n    this.inputTarget.addEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  disconnect() {\r\n    this.inputTarget.removeEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  updateWordCount() {\r\n    let wordCount = 0;\r\n    let textAreaValue = this.inputTarget.value;\r\n    let matches = textAreaValue.match(/\\S+/g);\r\n    wordCount = (matches && matches.length) || 0;\r\n    this.outputTarget.innerText = wordCount.toString();\r\n    if (this.hasErrorClass) {\r\n      if (this.isValidCount(wordCount)) {\r\n        this.outputTarget.classList.remove(this.errorClass);\r\n      } else {\r\n        this.outputTarget.classList.add(this.errorClass);\r\n      }\r\n    }\r\n  }\r\n\r\n  isValidCount(count: number) {\r\n    let min = 0;\r\n    let max = 99999;\r\n\r\n    if (this.hasMinValue) {\r\n      min = this.minValue;\r\n    }\r\n\r\n    if (this.hasMaxValue) {\r\n      max = this.maxValue;\r\n    }\r\n\r\n    return count >= min && count <= max;\r\n  }\r\n\r\n}\r\n"],"names":["BaseController","context","_this","Proxy","get","obj","prop","returnVal","Reflect","self","test","logProperty","toString","apply","target","thisArg","argArray","log","args","functionName","this","application","debug","logger","console","groupCollapsed","identifier","element","groupEnd","Controller","AsyncBlockController","connect","loadContent","el","hasReplaceTarget","replaceTarget","fetch","endpointValue","then","response","text","html","newEl","document","createElement","innerHTML","replaceWith","event","CustomEvent","detail","dispatchEvent","err","endpoint","String","AutoSubmitFormController","handler","bind","querySelectorAll","forEach","addEventListener","_this2","boundHandler","disconnect","removeEventListener","_this3","e","bubbles","cancelable","method","controller","methodName","composeEventName","name","eventPrefix","composedName","extendedEvent","type","composed","Object","assign","originalEvent","defaultOptions","events","onlyVisible","StimulusUse","[object Object]","options","_a","_b","_c","controllerId","stimulusUseDebug","id","dataset","controllerInitialize","initialize","controllerConnect","controllerDisconnect","UseHover","super","observe","targetElement","onEnter","onLeave","unobserve","call","hover","enhanceController","UseMutation","observer","error","handleError","mutation","entries","MutationObserver","useWindowResize","callback","innerWidth","innerHeight","window","payload","height","Infinity","width","debounce","fn","wait","timeoutId","arguments","clearTimeout","setTimeout","AutosizeController","style","resize","boxSizing","requestAnimationFrame","windowResize","autosize","offset","offsetHeight","clientHeight","scrollHeight","CharCountController","updateCharCount","inputTarget","charCount","value","length","outputTarget","innerText","hasErrorClass","isValidCount","classList","remove","errorClass","add","count","min","max","hasMinValue","minValue","hasMaxValue","maxValue","Number","CheckboxSelectAllController","toggle","refresh","hasCheckboxAllTarget","selectAllTarget","checkboxTargets","checkbox","preventDefault","checked","checkboxesCount","checkboxesCheckedCount","indeterminate","filter","ClipboardController","supported","queryCommandSupported","hasRemoveUnusedValue","removeUnusedValue","hasFallbackTarget","fallbackTarget","hasCopyTarget","copyTarget","select","sourceTarget","copy","execCommand","removeUnused","Boolean","ConfirmNavigationController","confirmMessage","messageValue","onbeforeunload","handlePopstate","message","DebugController","testTargets","DetectDirtyController","initialValue","isInputElement","isCheckable","restore","setAttribute","removeAttribute","tagName","DisableInputsController","hasDisablerTarget","disablerTarget","disableInputs","enableInputs","shouldClear","hasClearValue","clearValue","disableTargets","_","disabled","clear","DismissableController","dismiss","EmptyDomController","useMutation","childList","checkEmpty","mutate","children","hasScopeSelectorValue","scopeSelectorValue","hasNotEmptyClass","notEmptyClass","split","klass","hasEmptyClass","emptyClass","scopeSelector","EnableInputsController","hasEnablerTarget","enablerTarget","enableTargets","FallbackImageController","onerror","hasPlaceholderValue","src","placeholderValue","display","placeholder","LazyBlockController","threshold","IntersectionObserver","entry","isIntersecting","isVisible","eventName","appearEvent","dispatchAppear","disappearEvent","dispatchDisappear","useIntersection","appear","LimitedSelectionCheckboxesController","handleInputs","inputTargets","boundHandleInputs","tickedInputs","reduce","previousValue","maxSelections","hasErrorTarget","errorTarget","NestedFormController","checkStructure","content","templateTarget","replace","generateID","targetTarget","insertAdjacentHTML","insertMode","wrapper","closest","wrapperClass","Error","newRecord","destroyInput","querySelector","Date","getTime","Math","random","indexOf","hasWrapperSelectorValue","wrapperClassValue","hasInsertModeValue","insertModeValue","PasswordConfirmController","checkPasswordsMatch","passwordTargets","boundCheckPasswordsMatch","allPasswordsMatch","values","Set","map","has","size","_this4","PasswordPeekController","peak","passwordTarget","hide","ResponsiveIframeWrapperController","messageReceived","boundMessageReceived","data","hasOwnProperty","ResponsiveIframeBodyController","top","constructor","debounces","func","postUpdate","getHeight","parent","postMessage","body","documentElement","smoothPolyfilled","EphemeralController","cleanupSelf","cleanup","replaceAll","RegExp","substringIdentifierValueRegex","camelCase","action","keys","val","classes","scrollToElement","behavior","block","inline","scrollIntoView","smoothSupported","import","polyfill","polyfillSmooth","getScrollParent","node","overflowY","getComputedStyle","parentElement","ScrollIntoFocusController","hasBehaviorValue","behaviorValue","hasBlockValue","blockValue","hasInlineValue","inlineValue","ScrollToBottomController","scroll","hasModeValue","modeValue","mode","ScrollToController","selectorValue","warn","selector","ScrollToTopController","SelfDestructController","timeout","secondsValue","seconds","TeleportController","hasInsertValue","hasImmediateValue","immediateValue","execute","destination","targetValue","cloneNode","insertValue","outerHTML","insert","immediate","ToggleClassController","hasClassValue","hasMouseEnterValue","hasMouseLeaveValue","useHover","hasClickAwayValue","clickAwayValue","onEvent","contains","rect","getBoundingClientRect","windowHeight","windowWidth","clientWidth","left","isElementInViewport","clickOutside","clickOutsideEvent","useClickOutside","hasInitialValue","toggleTargets","elementOn","elementOff","elementWasToggled","elementToggleStatus","elementToggle","mouseEnter","mouseEnterValue","on","off","mouseLeave","mouseLeaveValue","_this5","toggled","classValue","class","clickAway","initial","TurboFrameRCController","frameSrc","getFrame","getSrc","setSrc","frame","hasLoadingMessageValue","loadingMessageValue","getElementById","frameIdValue","nodeName","hasSrcValue","srcValue","isHTMLLinkElement","href","frameId","loadingMessage","WordCountController","updateWordCount","wordCount","matches","match"],"mappings":"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"}