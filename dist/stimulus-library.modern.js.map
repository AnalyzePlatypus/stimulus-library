{"version":3,"file":"stimulus-library.modern.js","sources":["../src/base_controller.ts","../src/appearance_controller.ts","../src/async_block_controller.ts","../src/auto_submit_form_controller.ts","../node_modules/stimulus-use/dist/support/index.js","../node_modules/stimulus-use/dist/use-intersection/use-intersection.js","../node_modules/stimulus-use/dist/use-click-outside/use-click-outside.js","../node_modules/stimulus-use/dist/stimulus_use.js","../node_modules/stimulus-use/dist/use-hover/use-hover.js","../node_modules/stimulus-use/dist/use-mutation/use-mutation.js","../node_modules/stimulus-use/dist/use-window-resize/use-window-resize.js","../node_modules/stimulus-use/dist/use-debounce/use-debounce.js","../src/autosize_controller.ts","../src/char_count_controller.ts","../src/checkbox_select_all_controller.ts","../src/clipboard_controller.ts","../src/utilities/elements.ts","../src/confirm_controller.ts","../src/confirm_navigation_controller.ts","../src/debug_controller.ts","../src/detect_dirty_controller.ts","../src/disable_inputs_controller.ts","../src/dismissable_controller.ts","../src/empty_dom_controller.ts","../src/enable_inputs_controller.ts","../src/fallback_image_controller.ts","../src/form_save_controller.ts","../src/intersection_controller.ts","../src/lazy_block_controller.ts","../src/utilities/scroll.ts","../src/lightbox_image_controller.ts","../src/limited_selection_checkboxes_controller.ts","../src/nested_form_controller.ts","../src/password_confirm_controller.ts","../src/password_peek_controller.ts","../src/responsive_iframe_controller.ts","../src/utilities/ephemeral_controller.ts","../src/scroll_into_focus_controller.ts","../src/scroll_to_bottom_controller.ts","../src/scroll_to_controller.ts","../src/scroll_to_top_controller.ts","../src/self_destruct_controller.ts","../src/sticky_controller.ts","../src/teleport_controller.ts","../src/toggle_class_controller.ts","../src/turbo_frame_rc_controller.ts","../src/utilities/turbo.ts","../src/word_count_controller.ts"],"sourcesContent":["import {Context, Controller} from \"stimulus\";\n\nexport class BaseController extends Controller {\n\n  constructor(context: Context) {\n    super(context);\n    return new Proxy(this, {\n      get: (obj, prop) => {\n        let returnVal = Reflect.get(obj, prop);\n        let self = this;\n        if (logProperty(prop.toString())) {\n          if (typeof returnVal == \"function\") {\n            return new Proxy(returnVal, {\n              apply(target: any, thisArg: any, argArray?: any): any {\n                self.log(prop.toString(), {\n                  args: argArray,\n                });\n                return Reflect.apply(target, thisArg, argArray);\n              },\n            });\n          } else {\n            this.log(prop.toString());\n          }\n        }\n        return returnVal;\n      },\n    });\n  }\n\n  dispatch(element: HTMLElement, eventName: string, options: CustomEventInit = {}) {\n    let mergedOptions = Object.assign({}, {bubbles: true, cancelable: true, detail: {target: element}}, options);\n    if (!!mergedOptions.detail.target) {\n      mergedOptions.detail.target = element;\n    }\n    let event = new CustomEvent(eventName, mergedOptions);\n    element.dispatchEvent(event);\n  }\n\n  log(functionName: string, args: {} = {}): void {\n    // @ts-ignore\n    if (!this.application.debug) {\n      return;\n    }\n    let logger = console;\n    logger.groupCollapsed(`%c${this.identifier} %c#${functionName}`, \"color: #3B82F6\", \"color: unset\");\n    logger.log({\n      element: this.element,\n      ...args,\n    });\n    logger.groupEnd();\n  }\n\n}\n\nfunction logProperty(prop: string): boolean {\n  switch (prop) {\n    case \"application\":\n    case \"element\":\n    case \"constructor\":\n    case \"initialize\":\n    case \"log\":\n    case \"data\":\n    case \"valueDescriptorMap\":\n    case \"identifier\":\n      return false;\n  }\n\n  if (/^_.*?$/.test(prop)) {\n    return false;\n  }\n  if (/^.*?Target(s)?$/.test(prop)) {\n    return false;\n  }\n  if (/^.*?Value$/.test(prop)) {\n    return false;\n  }\n  if (/^.*?ValueChanged$/.test(prop)) {\n    return false;\n  }\n  if (/^.*?Class$/.test(prop)) {\n    return false;\n  }\n\n  return true;\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class AppearanceController extends BaseController {\r\n\r\n  initialize() {\r\n    this._handleVisibility = this._handleVisibility.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    window.addEventListener(\"focus\", this._handleVisibility);\r\n    window.addEventListener(\"blur\", this._handleVisibility);\r\n    document.addEventListener(\"visibilitychange\", this._handleVisibility);\r\n    this._handleVisibility();\r\n  }\r\n\r\n  disconnect() {\r\n    window.removeEventListener(\"focus\", this._handleVisibility);\r\n    window.removeEventListener(\"blur\", this._handleVisibility);\r\n    document.removeEventListener(\"visibilitychange\", this._handleVisibility);\r\n  }\r\n\r\n  appear() {\r\n    this.dispatch(this.element as HTMLElement, \"appearance:appear\");\r\n  }\r\n\r\n  away() {\r\n    this.dispatch(this.element as HTMLElement, \"appearance:away\");\r\n  }\r\n\r\n  _handleVisibility(): any {\r\n    this._documentIsActive() ? this.appear() : this.away();\r\n  }\r\n\r\n  _documentIsActive() {\r\n    return document.visibilityState == \"visible\" && document.hasFocus();\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\n\nexport class AsyncBlockController extends BaseController {\n  static targets = [\"replace\"];\n  static values = {endpoint: String, errorMessage: String, selector: String};\n\n  declare readonly replaceTarget: HTMLElement;\n  declare readonly hasReplaceTarget: boolean;\n  declare readonly endpointValue: string;\n\n  declare readonly hasSelectorValue: boolean;\n  declare readonly selectorValue: string;\n\n  declare readonly hasErrorMessageValue: boolean;\n  declare readonly errorMessageValue: string;\n\n  get _errorMessage(): string {\n    return this.hasErrorMessageValue ? this.errorMessageValue : \"This content failed to load\";\n  }\n\n  // This is a simple controller to load a block of content when the page loads.\n  // It should be used to give a quick initial response before calling out to an\n  // an AJAX endpoint to do some expensive work.\n  connect() {\n    this.loadContent();\n  }\n\n  loadContent() {\n    let self = this;\n    let el = (this.hasReplaceTarget ? this.replaceTarget : this.element) as HTMLElement;\n    fetch(this.endpointValue)\n    .then((response) => response.text())\n    .then((html) => {\n      let newEl = document.createElement(\"div\");\n      newEl.innerHTML = html;\n      if (this.hasSelectorValue) {\n        let selectedContent = newEl.querySelectorAll(this.selectorValue);\n        el.replaceWith(...selectedContent);\n      } else {\n        el.replaceWith(...newEl.children);\n      }\n      // Trigger event to show block has loaded\n      self.dispatch(el, \"ajax:success\");\n    })\n    .catch(err => {\n      el.replaceWith(this._errorMessage);\n      self.dispatch(el, \"ajax:error\");\n    })\n    .finally(() => {\n      self.dispatch(el, \"ajax:complete\");\n    });\n  }\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class AutoSubmitFormController extends BaseController {\n\n  initialize() {\n    this.handler = this.handler.bind(this);\n  }\n\n  connect() {\n    (this.element as HTMLElement).querySelectorAll(\"input, select, textarea\").forEach(el => el.addEventListener(\"change\", this.handler));\n  }\n\n  disconnect() {\n    (this.element as HTMLElement).querySelectorAll(\"input, select, textarea\").forEach(el => el.removeEventListener(\"change\", this.handler));\n  }\n\n  private handler(e: Event) {\n    // Trigger synthetic \"submit\" event on form\n    this.dispatch((this.element as HTMLElement), \"submit\");\n  }\n}\n","export const method = (controller, methodName) => {\n    const method = controller[methodName];\n    if (typeof method == 'function') {\n        return method;\n    }\n    else {\n        return (...args) => { };\n    }\n};\nexport const composeEventName = (name, controller, eventPrefix) => {\n    let composedName = name;\n    if (eventPrefix === true) {\n        composedName = `${controller.identifier}:${name}`;\n    }\n    else if (typeof eventPrefix === 'string') {\n        composedName = `${eventPrefix}:${name}`;\n    }\n    return composedName;\n};\nexport const extendedEvent = (type, event, detail) => {\n    const { bubbles, cancelable, composed } = event || { bubbles: true, cancelable: true, composed: true };\n    if (event) {\n        Object.assign(detail, { originalEvent: event });\n    }\n    const customEvent = new CustomEvent(type, {\n        bubbles,\n        cancelable,\n        composed,\n        detail,\n    });\n    return customEvent;\n};\nexport function isElementInViewport(el) {\n    const rect = el.getBoundingClientRect();\n    const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n    const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n    const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n    const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) >= 0);\n    return (vertInView && horInView);\n}\n//# sourceMappingURL=index.js.map","import { method, extendedEvent, composeEventName } from '../support/index';\nconst defaultOptions = {\n    dispatchEvent: true,\n    eventPrefix: true,\n};\nexport const useIntersection = (controller, options = {}) => {\n    const { dispatchEvent, eventPrefix } = Object.assign({}, defaultOptions, options);\n    const targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n    const callback = (entries) => {\n        const [entry] = entries;\n        if (entry.isIntersecting) {\n            dispatchAppear(entry);\n        }\n        else if (controller.isVisible) {\n            dispatchDisappear(entry);\n        }\n    };\n    const dispatchAppear = (entry) => {\n        controller.isVisible = true;\n        method(controller, 'appear').call(controller, entry);\n        // emit a custom \"appear\" event\n        if (dispatchEvent) {\n            const eventName = composeEventName('appear', controller, eventPrefix);\n            const appearEvent = extendedEvent(eventName, null, { controller, entry });\n            targetElement.dispatchEvent(appearEvent);\n        }\n    };\n    const dispatchDisappear = (entry) => {\n        controller.isVisible = false;\n        method(controller, 'disappear').call(controller, entry);\n        // emit a custom \"disappear\" event\n        if (dispatchEvent) {\n            const eventName = composeEventName('disappear', controller, eventPrefix);\n            const disappearEvent = extendedEvent(eventName, null, { controller, entry });\n            targetElement.dispatchEvent(disappearEvent);\n        }\n    };\n    // keep a copy of the current disconnect() function of the controller\n    // to support composing several behaviors\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    const observer = new IntersectionObserver(callback, options);\n    const observe = () => {\n        observer.observe(targetElement);\n    };\n    const unobserve = () => {\n        observer.unobserve(targetElement);\n    };\n    Object.assign(controller, {\n        isVisible: false,\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-intersection.js.map","import { composeEventName, extendedEvent, isElementInViewport } from '../support/index';\nconst defaultOptions = {\n    events: ['click', 'touchend'],\n    onlyVisible: true,\n    dispatchEvent: true,\n    eventPrefix: true,\n};\nexport const useClickOutside = (controller, options = {}) => {\n    const { onlyVisible, dispatchEvent, events, eventPrefix } = Object.assign({}, defaultOptions, options);\n    const onEvent = (event) => {\n        const targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        if (targetElement.contains(event.target) || (!isElementInViewport(targetElement) && onlyVisible)) {\n            return;\n        }\n        // call the clickOutside method of the Stimulus controller\n        if (controller.clickOutside) {\n            controller.clickOutside(event);\n        }\n        // emit a custom event\n        if (dispatchEvent) {\n            const eventName = composeEventName('click:outside', controller, eventPrefix);\n            const clickOutsideEvent = extendedEvent(eventName, event, { controller });\n            targetElement.dispatchEvent(clickOutsideEvent);\n        }\n    };\n    const observe = () => {\n        events === null || events === void 0 ? void 0 : events.forEach(event => {\n            window.addEventListener(event, onEvent, false);\n        });\n    };\n    const unobserve = () => {\n        events === null || events === void 0 ? void 0 : events.forEach(event => {\n            window.removeEventListener(event, onEvent, false);\n        });\n    };\n    // keep a copy of the current disconnect() function of the controller\n    // to support composing several behaviors\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    Object.assign(controller, {\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-click-outside.js.map","const defaultOptions = {\n    debug: false,\n    logger: console\n};\nexport class StimulusUse {\n    constructor(controller, options = {}) {\n        var _a, _b, _c;\n        this.log = (functionName, args) => {\n            if (!this.debug)\n                return;\n            this.logger.groupCollapsed(`%c${this.controller.identifier} %c#${functionName}`, 'color: #3B82F6', 'color: unset');\n            this.logger.log(Object.assign({ controllerId: this.controllerId }, args));\n            this.logger.groupEnd();\n        };\n        this.debug = (_b = (_a = options === null || options === void 0 ? void 0 : options.debug) !== null && _a !== void 0 ? _a : controller.application.stimulusUseDebug) !== null && _b !== void 0 ? _b : defaultOptions.debug;\n        this.logger = (_c = options === null || options === void 0 ? void 0 : options.logger) !== null && _c !== void 0 ? _c : defaultOptions.logger;\n        this.controller = controller;\n        this.controllerId = controller.element.id || controller.element.dataset.id;\n        // make copies of lifecycle functions\n        this.controllerInitialize = controller.initialize.bind(controller);\n        this.controllerConnect = controller.connect.bind(controller);\n        this.controllerDisconnect = controller.disconnect.bind(controller);\n    }\n}\n//# sourceMappingURL=stimulus_use.js.map","import { StimulusUse } from '../stimulus_use';\nimport { method } from '../support/index';\nexport class UseHover extends StimulusUse {\n    constructor(controller, options = {}) {\n        super(controller, options);\n        this.observe = () => {\n            this.targetElement.addEventListener('mouseenter', this.onEnter);\n            this.targetElement.addEventListener('mouseleave', this.onLeave);\n        };\n        this.unobserve = () => {\n            this.targetElement.removeEventListener('mouseenter', this.onEnter);\n            this.targetElement.removeEventListener('mouseleave', this.onLeave);\n        };\n        this.onEnter = () => {\n            method(this.controller, 'mouseEnter').call(this.controller);\n            this.log('mouseEnter', { hover: true });\n        };\n        this.onLeave = () => {\n            method(this.controller, 'mouseLeave').call(this.controller);\n            this.log('mouseLeave', { hover: false });\n        };\n        this.targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        this.controller = controller;\n        this.enhanceController();\n        this.observe();\n    }\n    enhanceController() {\n        const controllerDisconnect = this.controller.disconnect.bind(this.controller);\n        const disconnect = () => {\n            this.unobserve();\n            controllerDisconnect();\n        };\n        Object.assign(this.controller, { disconnect });\n    }\n}\nexport const useHover = (controller, options = {}) => {\n    const observer = new UseHover(controller, options);\n    return [observer.observe, observer.unobserve];\n};\n//# sourceMappingURL=use-hover.js.map","import { StimulusUse } from '../stimulus_use';\nimport { method } from '../support/index';\nexport class UseMutation extends StimulusUse {\n    constructor(controller, options = {}) {\n        super(controller, options);\n        this.observe = () => {\n            try {\n                this.observer.observe(this.targetElement, this.options);\n            }\n            catch (error) {\n                this.controller.application.handleError(error, \"At a minimum, one of childList, attributes, and/or characterData must be true\", {});\n            }\n        };\n        this.unobserve = () => {\n            this.observer.disconnect();\n        };\n        this.mutation = (entries) => {\n            method(this.controller, 'mutate').call(this.controller, entries);\n            this.log('mutate', { entries });\n        };\n        this.targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        this.controller = controller;\n        this.options = options;\n        this.observer = new MutationObserver(this.mutation);\n        this.enhanceController();\n        this.observe();\n    }\n    enhanceController() {\n        const controllerDisconnect = this.controller.disconnect.bind(this.controller);\n        const disconnect = () => {\n            this.unobserve();\n            controllerDisconnect();\n        };\n        Object.assign(this.controller, { disconnect });\n    }\n}\nexport const useMutation = (controller, options = {}) => {\n    const observer = new UseMutation(controller, options);\n    return [observer.observe, observer.unobserve];\n};\n//# sourceMappingURL=use-mutation.js.map","import { method } from '../support/index';\nexport const useWindowResize = (controller) => {\n    const callback = (event) => {\n        const { innerWidth, innerHeight } = window;\n        const payload = {\n            height: innerHeight || Infinity,\n            width: innerWidth || Infinity,\n            event\n        };\n        method(controller, 'windowResize').call(controller, payload);\n    };\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    const observe = () => {\n        window.addEventListener('resize', callback);\n        callback();\n    };\n    const unobserve = () => {\n        window.removeEventListener('resize', callback);\n    };\n    Object.assign(controller, {\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-window-resize.js.map","import { Controller } from 'stimulus';\nclass DebounceController extends Controller {\n}\nDebounceController.debounces = [];\nconst defaultWait = 200;\nconst debounce = (fn, wait = defaultWait) => {\n    let timeoutId = null;\n    return function () {\n        const args = arguments;\n        const context = this;\n        const callback = () => fn.apply(context, args);\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(callback, wait);\n    };\n};\nexport const useDebounce = (controller, options) => {\n    var _a;\n    const constructor = controller.constructor;\n    (_a = constructor.debounces) === null || _a === void 0 ? void 0 : _a.forEach((func) => {\n        if (typeof func === \"string\") {\n            controller[func] = debounce(controller[func], options === null || options === void 0 ? void 0 : options.wait);\n        }\n        if (typeof func === \"object\") {\n            const { name, wait } = func;\n            if (!name)\n                return;\n            controller[name] = debounce(controller[name], wait || (options === null || options === void 0 ? void 0 : options.wait));\n        }\n    });\n};\n//# sourceMappingURL=use-debounce.js.map","import {useWindowResize} from \"stimulus-use\";\nimport {BaseController} from \"./base_controller\";\n\nexport class AutosizeController extends BaseController {\n\n  initialize() {\n    this._handler = this._handler.bind(this);\n  }\n\n  connect() {\n    let target = this.element as HTMLTextAreaElement;\n    target.style.resize = \"none\";\n    target.style.boxSizing = \"border-box\";\n    target.addEventListener(\"input\", this._handler);\n    target.addEventListener(\"focus\", this._handler);\n    useWindowResize(this);\n    requestAnimationFrame(this._handler);\n  }\n\n  windowResize() {\n    this._handler();\n  }\n\n  private _handler() {\n    this.autosize(this.element as HTMLTextAreaElement);\n  };\n\n  private autosize(element: HTMLTextAreaElement) {\n    let offset = element.offsetHeight - element.clientHeight;\n    element.style.height = \"auto\";\n    element.style.height = element.scrollHeight + offset + \"px\";\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class CharCountController extends BaseController {\n\n  static targets = [\"input\", \"output\"];\n  static values = {min: Number, max: Number};\n  static classes = [\"error\"];\n\n  declare readonly inputTarget: HTMLInputElement | HTMLTextAreaElement;\n  declare readonly outputTarget: HTMLElement;\n  declare minValue: number;\n  declare hasMinValue: boolean;\n  declare maxValue: number;\n  declare hasMaxValue: boolean;\n  declare errorClass: string;\n  declare hasErrorClass: boolean;\n\n  initialize() {\n    this._updateCharCount = this._updateCharCount.bind(this);\n  }\n\n  connect() {\n    this._updateCharCount();\n    this.inputTarget.addEventListener(\"input\", this._updateCharCount);\n  }\n\n  disconnect() {\n    this.inputTarget.removeEventListener(\"input\", this._updateCharCount);\n  }\n\n  private _updateCharCount() {\n    let charCount = this.inputTarget.value.length;\n    this.outputTarget.innerText = charCount.toString();\n    if (this.hasErrorClass) {\n      if (this._isValidCount(charCount)) {\n        this.outputTarget.classList.remove(this.errorClass);\n      } else {\n        this.outputTarget.classList.add(this.errorClass);\n      }\n    }\n  }\n\n  private _isValidCount(count: number) {\n    let min = 0;\n    let max = 99999;\n\n    if (this.hasMinValue) {\n      min = this.minValue;\n    }\n\n    if (this.hasMaxValue) {\n      max = this.maxValue;\n    }\n\n    return count >= min && count <= max;\n  }\n\n}\n","import {BaseController} from './base_controller';\n\nexport class CheckboxSelectAllController extends BaseController {\n  static targets = ['selectAll', 'checkbox'];\n\n  declare readonly hasSelectAllTarget: boolean;\n  declare readonly selectAllTarget: HTMLInputElement;\n  declare readonly checkboxTargets: HTMLInputElement[];\n\n  private get checked() {\n    return this.checkboxTargets.filter(checkbox => checkbox.checked);\n  }\n\n  private get unchecked() {\n    return this.checkboxTargets.filter(checkbox => !checkbox.checked);\n  }\n\n  initialize() {\n    this.toggle = this.toggle.bind(this);\n    this.refresh = this.refresh.bind(this);\n  }\n\n  connect() {\n    requestAnimationFrame(() => {\n      if (!this.hasSelectAllTarget) {\n        return;\n      }\n\n      this.selectAllTarget.addEventListener('change', this.toggle);\n      this.checkboxTargets.forEach(checkbox => checkbox.addEventListener('change', this.refresh));\n      this.refresh();\n    });\n  }\n\n  disconnect() {\n    if (!this.hasSelectAllTarget) {\n      return;\n    }\n\n    this.selectAllTarget.removeEventListener('change', this.toggle);\n    this.checkboxTargets.forEach((checkbox) => checkbox.removeEventListener('change', this.refresh));\n  }\n\n  private toggle(event: Event) {\n    event.preventDefault();\n    let target = event.target as HTMLInputElement;\n    this.checkboxTargets.forEach((checkbox) => checkbox.checked = target.checked);\n  }\n\n  private refresh() {\n    const checkboxesCount = this.checkboxTargets.length;\n    const checkboxesCheckedCount = this.checked.length;\n\n    this.selectAllTarget.checked = checkboxesCheckedCount > 0;\n    this.selectAllTarget.indeterminate = checkboxesCheckedCount > 0 && checkboxesCheckedCount < checkboxesCount;\n  }\n}","import {BaseController} from \"./base_controller\";\r\n\r\nexport class ClipboardController extends BaseController {\r\n\r\n  static targets = [\"button\", \"copy\", \"fallback\"];\r\n  static values = {removeUnused: Boolean};\r\n\r\n  declare readonly sourceTarget: HTMLElement;\r\n  declare readonly copyTarget: HTMLElement;\r\n  declare readonly hasCopyTarget: boolean;\r\n  declare readonly fallbackTarget: HTMLElement;\r\n  declare readonly hasFallbackTarget: boolean;\r\n\r\n  declare readonly hasRemoveUnusedValue: boolean;\r\n  declare readonly removeUnusedValue: boolean;\r\n\r\n  supported = false;\r\n\r\n  connect() {\r\n    this.supported = document.queryCommandSupported(\"copy\");\r\n\r\n    if (this.hasRemoveUnusedValue && this.removeUnusedValue) {\r\n      if (this.supported && this.hasFallbackTarget) {\r\n        this.fallbackTarget.remove();\r\n      } else if (this.hasCopyTarget) {\r\n        this.copyTarget.remove();\r\n      }\r\n    }\r\n  }\r\n\r\n  select(event: MouseEvent) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    (this.sourceTarget as HTMLInputElement | HTMLTextAreaElement).select();\r\n  }\r\n\r\n  copy(event: ClipboardEvent) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    (this.sourceTarget as HTMLInputElement | HTMLTextAreaElement).select();\r\n    if (this.supported) {\r\n      document.execCommand(\"copy\");\r\n    }\r\n  }\r\n}\r\n","export function isHTMLLinkElement(element: Element): element is HTMLLinkElement {\n  return element.nodeName == \"A\";\n}\n\nexport function isHTMLFormElement(element: Element): element is HTMLFormElement {\n  return element.nodeName == \"FORM\";\n}\n\nexport function isHTMLInputElement(element: Element): element is HTMLInputElement {\n  return element.nodeName == \"INPUT\";\n}\n\nexport function isHTMLSelectElement(element: Element): element is HTMLSelectElement {\n  return element.nodeName == \"SELECT\";\n}\n\nexport function isHTMLImageElement(element: Element): element is HTMLImageElement {\n  return element.nodeName == \"IMG\";\n}\n\nexport function isElementCheckable(element: Element): element is HTMLInputElement & { checked: boolean } {\n  return isHTMLInputElement(element) && (element.type === \"radio\" || element.type === \"checkbox\");\n}\n","import {BaseController} from './base_controller';\r\nimport {isHTMLFormElement, isHTMLLinkElement} from \"./utilities/elements\";\r\n\r\nexport class ConfirmController extends BaseController {\r\n\r\n  static values = {\r\n    message: String,\r\n  };\r\n\r\n  declare readonly messageValue: string;\r\n  declare readonly hasMessageValue: boolean;\r\n\r\n  get message(): string {\r\n    return this.hasMessageValue ? this.messageValue : 'Are you sure?';\r\n  }\r\n\r\n  initialize() {\r\n    this.confirm = this.confirm.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      let element = this.element as HTMLElement;\r\n      if (isHTMLFormElement(element)) {\r\n        element.addEventListener(\"submit\", this.confirm);\r\n      } else if (isHTMLLinkElement(element)) {\r\n        element.addEventListener(\"click\", this.confirm);\r\n      } else {\r\n        throw new Error(\"Can't handle confirmation on attached element\");\r\n      }\r\n    });\r\n  }\r\n\r\n  confirm(event: Event) {\r\n    if (!(window.confirm(this.message))) {\r\n      event.preventDefault();\r\n      this.dispatch(this.element as HTMLElement, \"confirm:cancelled\");\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\n\nexport class ConfirmNavigationController extends BaseController {\n\n  static values = {_message: String};\n\n  declare readonly _messageValue: string;\n  declare readonly hasMessageValue: boolean;\n\n  get _message(): string {\n    return this.hasMessageValue ? this._messageValue : \"Do you want to leave this page? Changes you made may not be saved\";\n  }\n\n  initialize() {\n    this.handlePopstate = this.handlePopstate.bind(this);\n    this.handleTurboNavigation = this.handleTurboNavigation.bind(this);\n  }\n\n  connect() {\n    window.onbeforeunload = () => this._message;\n    window.addEventListener(\"popstate\", this.handlePopstate);\n    window.addEventListener(\"submit\", () => {\n      window.removeEventListener(\"popstate\", this.handlePopstate);\n      window.onbeforeunload = null;\n    });\n    window.addEventListener(\"turbolinks:before-visit\", this.handleTurboNavigation);\n    window.addEventListener(\"turbo:before-visit\", this.handleTurboNavigation);\n  }\n\n  handlePopstate(_event: PopStateEvent) {\n    return false;\n  }\n\n  handleTurboNavigation(event: Event) {\n    if (!confirm(this._message)) {\n      event.preventDefault();\n    }\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class DebugController extends BaseController {\n\n  static targets = [\"test\"];\n  declare testTargets: HTMLElement[];\n\n  connect() {\n    console.log(\"Debug Controller\", this, this.testTargets);\n  }\n}\n","import {BaseController} from \"./base_controller\";\nimport {isElementCheckable, isHTMLSelectElement} from \"./utilities/elements\";\n\nexport class DetectDirtyController extends BaseController {\n\n  initialize() {\n    this.checkDirty = this.checkDirty.bind(this);\n  }\n\n  connect() {\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n    this.checkDirty();\n    element.addEventListener(\"input\", this.checkDirty);\n    element.addEventListener(\"change\", this.checkDirty);\n  }\n\n  disconnect() {\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n    element.removeEventListener(\"input\", this.checkDirty);\n    element.removeEventListener(\"change\", this.checkDirty);\n  }\n\n  restore() {\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n    if (isElementCheckable(element)) {\n      element.checked = element.defaultChecked;\n    } else if (isHTMLSelectElement(element)) {\n      Array.from(element.options).forEach(option => option.selected = option.defaultSelected);\n    } else {\n      element.value = element.defaultValue;\n    }\n  }\n\n  private checkDirty(_event?: Event) {\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n\n    let dirty: boolean;\n    if (isElementCheckable(element)) {\n      dirty = element.checked != element.defaultChecked;\n    } else if (isHTMLSelectElement(element)) {\n      dirty = Array.from(element.options).some(option => option.selected != option.defaultSelected);\n    } else {\n      dirty = element.value != element.defaultValue;\n    }\n\n    if (dirty) {\n      element.setAttribute(\"data-dirty\", \"true\");\n    } else {\n      element.removeAttribute(\"data-dirty\");\n    }\n  }\n\n}\n\nexport function isDirty(element: HTMLElement) {\n  return element.hasAttribute(\"data-dirty\");\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class DisableInputsController extends BaseController {\r\n\r\n  static targets = [\"disabler\", \"disable\"];\r\n\r\n  static values = {\r\n    clear: Boolean,\r\n  };\r\n\r\n  declare readonly hasDisablerTarget: boolean;\r\n  declare readonly disablerTarget: HTMLInputElement;\r\n  declare readonly disableTargets: Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\r\n  declare readonly clearValue: boolean;\r\n  declare readonly hasClearValue: boolean;\r\n\r\n  connect() {\r\n    this.toggle();\r\n  }\r\n\r\n  toggle() {\r\n    if (this.hasDisablerTarget && this.disablerTarget.checked) {\r\n      this.disableInputs();\r\n    } else {\r\n      this.enableInputs();\r\n    }\r\n  }\r\n\r\n  disableInputs() {\r\n    let shouldClear = this.hasClearValue && this.clearValue;\r\n    this.disableTargets.forEach((el, _) => {\r\n      if (shouldClear) {\r\n        el.value = \"\";\r\n      }\r\n      el.disabled = true;\r\n    });\r\n  }\r\n\r\n  enableInputs() {\r\n    this.disableTargets.forEach((el, _) => {\r\n      el.disabled = false;\r\n    });\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\n\nexport class DismissableController extends BaseController {\n\n  dismiss() {\n    this.element.remove();\n  }\n\n}\n","import {useMutation} from \"stimulus-use\";\nimport {BaseController} from \"./base_controller\";\n\nexport class EmptyDomController extends BaseController {\n\n  static classes = [\"empty\", \"notEmpty\"];\n  static values = {scopeSelector: String};\n\n  declare hasEmptyClass: boolean;\n  declare emptyClass: string;\n  declare hasNotEmptyClass: boolean;\n  declare notEmptyClass: string;\n\n  declare hasScopeSelectorValue: boolean;\n  declare scopeSelectorValue: string;\n\n  connect() {\n    useMutation(this, {element: this.element, childList: true});\n    this.checkEmpty();\n  }\n\n  mutate(entries: MutationRecord[]) {\n    this.checkEmpty();\n  }\n\n  checkEmpty() {\n    let children;\n    if (this.hasScopeSelectorValue) {\n      children = this.element.querySelectorAll(this.scopeSelectorValue);\n    } else {\n      children = this.element.children;\n    }\n\n    if (children.length === 0) {\n      if (this.hasNotEmptyClass) {\n        let classes = this.notEmptyClass.split(\" \");\n        classes.forEach(klass => this.element.classList.remove(klass));\n      }\n      if (this.hasEmptyClass) {\n        let classes = this.emptyClass.split(\" \");\n        classes.forEach(klass => this.element.classList.add(klass));\n      }\n      this.dispatch(this.element as HTMLElement, \"dom:empty\");\n    } else {\n      if (this.hasNotEmptyClass) {\n        let classes = this.notEmptyClass.split(\" \");\n        classes.forEach(klass => this.element.classList.add(klass));\n      }\n      if (this.hasEmptyClass) {\n        let classes = this.emptyClass.split(\" \");\n        classes.forEach(klass => this.element.classList.remove(klass));\n      }\n      this.dispatch(this.element as HTMLElement, \"dom:not-empty\", {detail: {target: this.element, count: children.length}});\n    }\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class EnableInputsController extends BaseController {\r\n\r\n  static targets = [\"enabler\", \"enable\"];\r\n\r\n  static values = {\r\n    clear: Boolean,\r\n  };\r\n\r\n  declare readonly hasEnablerTarget: boolean;\r\n  declare readonly enablerTarget: HTMLInputElement;\r\n  declare readonly enableTargets: Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\r\n  declare readonly clearValue: boolean;\r\n  declare readonly hasClearValue: boolean;\r\n\r\n  connect() {\r\n    this.toggle();\r\n  }\r\n\r\n  toggle() {\r\n    if (this.hasEnablerTarget && this.enablerTarget.checked) {\r\n      this.enableInputs();\r\n    } else {\r\n      this.disableInputs();\r\n    }\r\n  }\r\n\r\n  disableInputs() {\r\n    let shouldClear = this.hasClearValue && this.clearValue;\r\n    this.enableTargets.forEach((el, _) => {\r\n      if (shouldClear) {\r\n        el.value = \"\";\r\n      }\r\n      el.disabled = true;\r\n    });\r\n  }\r\n\r\n  enableInputs() {\r\n    this.enableTargets.forEach((el, _) => {\r\n      el.disabled = false;\r\n    });\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class FallbackImageController extends BaseController {\r\n\r\n  static values = {placeholder: String};\r\n\r\n  declare readonly placeholderValue: string;\r\n  declare readonly hasPlaceholderValue: boolean;\r\n\r\n  connect() {\r\n    let element = this.element as HTMLImageElement;\r\n\r\n    element.onerror = () => {\r\n      if (this.hasPlaceholderValue) {\r\n        element.src = this.placeholderValue;\r\n      } else {\r\n        element.style.display = \"none\";\r\n      }\r\n    };\r\n  }\r\n\r\n}\r\n","import {BaseController} from './base_controller';\r\nimport {isHTMLFormElement, isHTMLInputElement} from \"./utilities/elements\";\r\n\r\ninterface FormSavePayload {\r\n  [idx: string]: {\r\n    [idx: string]: string | boolean\r\n  }\r\n}\r\n\r\nexport class FormSaveController extends BaseController {\r\n\r\n  static values = {\r\n    id: String,\r\n    restoreOnLoad: Boolean,\r\n    clearOnSubmit: Boolean,\r\n  };\r\n\r\n  declare readonly idValue: string;\r\n  declare readonly hasIdValue: boolean;\r\n  declare readonly restoreOnLoadValue: boolean;\r\n  declare readonly hasRestoreOnLoadValue: boolean;\r\n  declare readonly clearOnSubmitValue: boolean;\r\n  declare readonly hasClearOnSubmitValue: boolean;\r\n\r\n  get formID() {\r\n    if (this.hasIdValue) {\r\n      return this.idValue;\r\n    }\r\n    let elementID = (this.element as HTMLFormElement).id;\r\n\r\n    if (elementID !== \"\") {\r\n      return elementID;\r\n    } else {\r\n      throw new Error(`No ID value to uniquely identify this form. Please either specify data-${this.identifier}-id-value or give this form an 'id' attribute. `);\r\n    }\r\n  }\r\n\r\n  get formIdentifier() {\r\n    const url = location.href;\r\n    return `${url} ${this.formID}`;\r\n  }\r\n\r\n  get formElements() {\r\n    return (this.element as HTMLFormElement).elements;\r\n  }\r\n\r\n  get formData(): FormSavePayload {\r\n    let data: FormSavePayload = {[this.formIdentifier]: {}};\r\n    for (const element of this.formElements) {\r\n      let el = element as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\r\n      if (el.name.length > 0) {\r\n        if (isHTMLInputElement(el) && el.type == \"checkbox\") {\r\n          data[this.formIdentifier][el.name] = el.checked;\r\n        } else if (isHTMLInputElement(el) && el.type == \"radio\") {\r\n          if (el.checked) {\r\n            data[this.formIdentifier][el.name] = el.value;\r\n          }\r\n        } else {\r\n          data[this.formIdentifier][el.name] = el.value;\r\n        }\r\n      }\r\n    }\r\n    return data;\r\n  }\r\n\r\n  get restoreOnLoad() {\r\n    return this.hasRestoreOnLoadValue ? this.restoreOnLoadValue : true;\r\n  }\r\n\r\n  get clearOnSubmit() {\r\n    return this.hasClearOnSubmitValue ? this.clearOnSubmitValue : true;\r\n  }\r\n\r\n  initialize() {\r\n    this._clear = this._clear.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      let element = this.element;\r\n      if (!isHTMLFormElement(element)) {\r\n        throw new Error('Expected controller to be mounted on a form element.');\r\n      }\r\n\r\n      if (this.restoreOnLoad) {\r\n        this.restore();\r\n      }\r\n      if (this.clearOnSubmit) {\r\n        this.element.addEventListener('submit', this._clear);\r\n      }\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.clearOnSubmit) {\r\n      this.element.removeEventListener('submit', this._clear);\r\n    }\r\n  }\r\n\r\n  _clear() {\r\n    localStorage.removeItem(this.formIdentifier);\r\n    this.dispatch(this.element as HTMLElement, `form-save:cleared`);\r\n  }\r\n\r\n  clear(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    this._clear();\r\n  }\r\n\r\n  save(event: Event) {\r\n    event.preventDefault();\r\n    let data = this.formData;\r\n    localStorage.setItem(this.formIdentifier, JSON.stringify(data[this.formIdentifier]));\r\n    this.dispatch(this.element as HTMLElement, `form-save:save:success`);\r\n  }\r\n\r\n  restore(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    if (localStorage.getItem(this.formIdentifier)) {\r\n      const savedData = JSON.parse(localStorage.getItem(this.formIdentifier)!); // get and parse the saved data from localStorage\r\n      for (const element of this.formElements) {\r\n        let el = element as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\r\n        if (el.name in savedData) {\r\n          if (isHTMLInputElement(el) && el.type == \"checkbox\") {\r\n            el.checked = savedData[el.name];\r\n          } else if (isHTMLInputElement(el) && el.type == \"radio\") {\r\n            if (el.value == savedData[el.name]) {\r\n              el.checked = true;\r\n            }\r\n          } else {\r\n            el.value = savedData[el.name];\r\n          }\r\n        }\r\n      }\r\n      this.dispatch(this.element as HTMLElement, `form-save:restore:success`);\r\n    } else {\r\n      this.dispatch(this.element as HTMLElement, `form-save:restore:empty`);\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\nimport {useIntersection} from \"stimulus-use\";\n\nexport class IntersectionController extends BaseController {\n\n  static values = {threshold: String};\n\n  declare readonly isVisible: boolean;\n  declare readonly thresholdValue: string;\n  declare readonly hasThresholdValue: boolean;\n\n  get threshold(): number[] {\n    if (this.hasThresholdValue) {\n      return this.thresholdValue.split(',').map(val => Number.parseFloat(val.trim())).filter(val => val >= 0 && val <= 1);\n    } else {\n      return [0, 1];\n    }\n  }\n\n  connect() {\n    useIntersection(this, {\n      threshold: this.threshold,\n      element: this.element,\n    });\n  }\n\n  appear(entry: IntersectionObserverEntry) {\n    this.dispatch(\n      this.element as HTMLElement,\n      \"intersection:appear\",\n      {\n        detail: {\n          element: this.element,\n        },\n      },\n    );\n  };\n\n  disappear(entry: IntersectionObserverEntry) {\n    this.dispatch(\n      this.element as HTMLElement,\n      \"intersection:disappear\",\n      {\n        detail: {\n          element: this.element,\n        },\n      },\n    );\n  };\n\n}\n","import {useIntersection} from \"stimulus-use\";\nimport {AsyncBlockController} from \"./async_block_controller\";\n\nexport class LazyBlockController extends AsyncBlockController {\n\n  declare observe: () => void;\n  declare unobserve: () => void;\n  declare isVisible: boolean;\n  declare disappear: () => void;\n\n  connect() {\n    let element = this.element;\n\n    if (\"IntersectionObserver\" in window) {\n      [this.observe, this.unobserve] = useIntersection(this, {element, threshold: 0.3});\n    } else {\n      // Client doesn't support intersection observer, fallback to pre-loading\n      this.loadContent();\n    }\n  }\n\n  appear(entry: IntersectionObserverEntry) {\n    if (entry.target === this.element && entry.isIntersecting) {\n      this.loadContent();\n      if (this.unobserve) {\n        this.unobserve();\n      }\n    }\n  }\n\n}\n","const smoothSupported = \"scrollBehavior\" in document.documentElement.style;\r\nlet smoothPolyfilled: boolean;\r\n\r\nexport async function scrollToElement(element: Element, {behavior = \"smooth\", block = \"start\", inline = \"nearest\"}: ScrollIntoViewOptions = {}) {\r\n  if (behavior == \"smooth\" && !smoothSupported) {\r\n    await polyfillSmooth();\r\n  }\r\n  element.scrollIntoView({behavior, block, inline});\r\n}\r\n\r\nasync function polyfillSmooth() {\r\n  const {polyfill} = await import(/* webpackChunkName: \"smoothscroll-polyfill\" */ \"smoothscroll-polyfill\");\r\n  if (smoothPolyfilled) {\r\n    return;\r\n  }\r\n  smoothPolyfilled = true;\r\n  polyfill();\r\n}\r\n\r\nexport function getScrollParent(node: HTMLElement | null): HTMLElement | null {\r\n  if (!node) {\r\n    return null;\r\n  }\r\n  const overflowY = getComputedStyle(node).overflowY;\r\n  const isScrollable = overflowY !== \"visible\" && overflowY !== \"hidden\";\r\n\r\n  if (isScrollable && node.scrollHeight >= node.clientHeight) {\r\n    return node;\r\n  }\r\n\r\n  return getScrollParent(node.parentElement) || document.body;\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\nimport {scrollToElement} from \"./utilities/scroll\";\r\nimport dialogPolyfill from \"dialog-polyfill\";\r\n\r\nexport class LightboxImageController extends BaseController {\r\n\r\n  static values = {\r\n    src: String,\r\n    srcSet: String,\r\n    sizes: String,\r\n  };\r\n  static classes = [\"modal\", \"image\"];\r\n\r\n  declare readonly hasModalClass: boolean;\r\n  declare readonly modalClass: string;\r\n  declare readonly hasImageClass: boolean;\r\n  declare readonly imageClass: string;\r\n  declare readonly hasSrcValue: boolean;\r\n  declare readonly srcValue: string;\r\n  declare readonly hasSrcSetValue: boolean;\r\n  declare readonly srcSetValue: string;\r\n  declare readonly hasSizesValue: boolean;\r\n  declare readonly sizesValue: string;\r\n  _dialog: HTMLDialogElement | null = null;\r\n\r\n  get src(): string {\r\n    return this.hasSrcValue ? this.srcValue : (this.element as HTMLImageElement).src;\r\n  }\r\n\r\n  get srcSet(): string {\r\n    return this.hasSrcSetValue ? this.srcSetValue : (this.element as HTMLImageElement).srcset;\r\n  }\r\n\r\n  get sizes(): string {\r\n    return this.hasSizesValue ? this.sizesValue : (this.element as HTMLImageElement).sizes;\r\n  }\r\n\r\n  get modalClassName() {\r\n    return this.hasModalClass ? this.modalClass : \"image-lightbox-dialog\";\r\n  }\r\n\r\n  get imageClassName() {\r\n    return this.hasImageClass ? this.imageClass : \"image-lightbox-image\";\r\n  }\r\n\r\n  initialize() {\r\n    this.open = this.open.bind(this);\r\n    this.close = this.close.bind(this);\r\n  }\r\n\r\n  connect() {\r\n  }\r\n\r\n  open() {\r\n    let element = this.element as HTMLImageElement;\r\n    if (this._dialog) {\r\n      return;\r\n    }\r\n    this._dialog = document.createElement(\"dialog\");\r\n\r\n    let image = document.createElement(\"img\") as HTMLImageElement;\r\n    image.className = this.imageClassName;\r\n    image.src = this.src;\r\n    image.srcset = this.srcSet;\r\n    image.sizes = this.sizes;\r\n    this._dialog.appendChild(image);\r\n\r\n    element.insertAdjacentElement(\"afterend\", this._dialog);\r\n    dialogPolyfill.registerDialog(this._dialog);\r\n    this._dialog.className = this.modalClassName;\r\n    this._dialog.showModal();\r\n    scrollToElement(this._dialog, {behavior: \"smooth\", block: \"end\"}).catch(() => this._dialog!.scrollIntoView(false));\r\n    this._dialog.addEventListener(\"click\", this.close);\r\n    this._dialog.addEventListener(\"cancel\", this.close);\r\n    this._dialog.addEventListener(\"close\", this.close);\r\n  }\r\n\r\n  close() {\r\n    if (this._dialog) {\r\n      this._dialog.close();\r\n      this._dialog.remove();\r\n      this._dialog = null;\r\n      scrollToElement(this.element, {behavior: \"smooth\", block: \"end\"}).catch(() => this.element.scrollIntoView(false));\r\n    }\r\n  }\r\n\r\n} ","import {BaseController} from \"./base_controller\";\n\nexport class LimitedSelectionCheckboxesController extends BaseController {\n\n  static targets = [\"input\", \"error\"];\n  static values = {max: Number, message: String};\n\n  declare readonly hasErrorTarget: boolean;\n  declare readonly errorTarget: HTMLElement;\n  declare readonly inputTargets: HTMLInputElement[];\n  declare readonly maxValue: number;\n  declare readonly messageValue: string;\n\n  initialize() {\n    this.handleInputs = this.handleInputs.bind(this);\n  }\n\n  connect() {\n    this.inputTargets.forEach((el) => el.addEventListener(\"change\", this.handleInputs));\n  }\n\n  disconnect() {\n    this.inputTargets.forEach((el) => el.removeEventListener(\"change\", this.handleInputs));\n  }\n\n  handleInputs(event: Event) {\n    let tickedInputs = this.inputTargets.reduce((previousValue, el) => el.checked ? previousValue + 1 : previousValue, 0);\n    let target = event.target as HTMLInputElement;\n    if (tickedInputs > this.maxValue) {\n      event.preventDefault();\n      target.checked = false;\n      this.dispatch(target, \"change\");\n      this.dispatch(target, \"limited-selection:too-many\");\n      if (this.hasErrorTarget) {\n        this.errorTarget.innerHTML = this.messageValue;\n      }\n    } else {\n      this.dispatch(target, \"limited-selection:selection\");\n      if (this.hasErrorTarget) {\n        this.errorTarget.innerHTML = \"\";\n      }\n    }\n  }\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class NestedFormController extends BaseController {\n  static targets = ['target', 'template'];\n  static values = {\n    insertMode: String,\n    wrapperClass: String,\n  };\n\n  declare readonly targetTarget: HTMLElement;\n  declare readonly templateTarget: HTMLTemplateElement | HTMLScriptElement;\n\n  declare readonly wrapperClassValue: string;\n  declare readonly hasWrapperSelectorValue: boolean;\n  declare readonly insertModeValue: InsertPosition;\n  declare readonly hasInsertModeValue: boolean;\n\n  get wrapperClass() {\n    return this.hasWrapperSelectorValue ? this.wrapperClassValue : 'nested-fields';\n  }\n\n  get insertMode(): InsertPosition {\n    return this.hasInsertModeValue ? this.insertModeValue : 'beforeend';\n  }\n\n  connect() {\n    this.checkStructure();\n  }\n\n  add(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const content = this.templateTarget.innerHTML.replace(/NEW_RECORD/g, this.generateID());\n    this.targetTarget.insertAdjacentHTML(this.insertMode, content);\n  }\n\n  remove(event: Event) {\n    event.preventDefault();\n    const wrapper: HTMLElement | null = (event.target as HTMLElement).closest(`.${this.wrapperClass}`);\n    if (wrapper == null) {\n      throw new Error(`#remove was clicked from outside of a child record. Could not find an ancestor with class .${this.wrapperClass}`);\n    }\n\n    if (wrapper.dataset.newRecord === 'true') {\n      wrapper.remove();\n    } else {\n      wrapper.style.display = 'none';\n      let destroyInput = wrapper.querySelector(\"input[name*='_destroy']\") as HTMLInputElement | null;\n      if (destroyInput == null) {\n        throw new Error(`Could not find a hidden input with name '_destroy'. NestedForm cannot remove an already persisted record without it.`);\n      }\n\n      destroyInput.value = \"1\";\n    }\n  }\n\n  generateID(): string {\n    return new Date().getTime().toString() + Math.random().toString().slice(2);\n  }\n\n  private checkStructure() {\n    let template = this.templateTarget.innerHTML;\n\n    if (template.indexOf('NEW_RECORD')) {\n      throw new Error(\"Could not find 'NEW_RECORD' in the provided template. Please make sure you've passed `child_index: 'NEW_RECORD'` to `fields_for`\");\n    }\n  }\n}","import {BaseController} from \"./base_controller\";\n\nexport class PasswordConfirmController extends BaseController {\n\n  static targets = [\"password\"];\n  static classes = [\"error\"];\n\n  declare readonly passwordTargets: HTMLInputElement[];\n\n  declare readonly errorClass: string;\n  declare readonly hasErrorClass: boolean;\n\n  initialize() {\n    this.checkPasswordsMatch = this.checkPasswordsMatch.bind(this);\n  }\n\n  connect() {\n    this.passwordTargets.forEach((el) => el.addEventListener(\"change\", this.checkPasswordsMatch));\n  }\n\n  disconnect() {\n    this.passwordTargets.forEach((el) => el.removeEventListener(\"change\", this.checkPasswordsMatch));\n  }\n\n  private allPasswordsMatch(): boolean {\n    let values = new Set(this.passwordTargets.map(el => el.value));  // Create a unique set of the password values\n    return values.has(\"\") || values.size == 1; // If any of the passwords are still blank, or there is only one distinct password value (i.e. they all are the same)\n  }\n\n  private checkPasswordsMatch() {\n    let element = this.element as HTMLElement;\n    if (this.allPasswordsMatch()) {\n      this.dispatch(element, \"password-confirm:match\");\n      if (this.hasErrorClass) {\n        this.passwordTargets.forEach(el => el.classList.remove(this.errorClass));\n      }\n    } else {\n      this.dispatch(element, \"password-confirm:no-match\");\n      if (this.hasErrorClass) {\n        this.passwordTargets.forEach(el => el.classList.add(this.errorClass));\n      }\n    }\n  }\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class PasswordPeekController extends BaseController {\n\n  static targets = [\"password\"];\n\n  declare readonly passwordTarget: HTMLInputElement;\n\n  peak(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    this.passwordTarget.type = \"text\";\n  }\n\n  hide(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    this.passwordTarget.type = \"password\";\n  }\n\n  toggle(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    if (this.passwordTarget.type === \"password\") {\n      this.peak();\n    } else {\n      this.hide();\n    }\n  }\n}\n","import {useDebounce, useWindowResize} from \"stimulus-use\";\nimport {WindowResizePayload} from \"stimulus-use/dist/use-window-resize/use-window-resize\";\nimport {BaseController} from \"./base_controller\";\n\ninterface ResponsiveIframeMessage {\n  name: string,\n  height: number,\n}\n\nexport class ResponsiveIframeWrapperController extends BaseController {\n\n  initialize() {\n    this.messageReceived = this.messageReceived.bind(this);\n  }\n\n  connect() {\n    window.addEventListener(\"message\", this.messageReceived);\n  }\n\n  disconnect() {\n    window.removeEventListener(\"message\", this.messageReceived);\n  }\n\n  messageReceived(message: MessageEvent<ResponsiveIframeMessage>) {\n    let data = message.data;\n    if (data.hasOwnProperty(\"name\") && data.name === \"iframe-body\" && data.hasOwnProperty(\"height\")) {\n      this.resize(data.height);\n    }\n  }\n\n  resize(height: number) {\n    (this.element as HTMLIFrameElement).style.height = `${height}px`;\n  }\n\n}\n\nexport class ResponsiveIframeBodyController extends BaseController {\n\n  static debounces = [\"postUpdate\"];\n\n  declare observe: () => void;\n  declare unobserve: () => void;\n\n  connect() {\n    // If this Window is inside a frame\n    if (window.self !== window.top) {\n      useWindowResize(this);\n      useDebounce(this, {});\n      this.postUpdate();\n    } else {\n      // Not an iframe\n    }\n  }\n\n  windowResize(payload: WindowResizePayload) {\n    this.postUpdate();\n  };\n\n  postUpdate() {\n    let payload: ResponsiveIframeMessage = {name: \"iframe-body\", height: this.getHeight()};\n    window.parent.postMessage(\n      payload,\n      \"*\",\n    );\n  }\n\n  getHeight(): number {\n    const body = document.body;\n    const html = document.documentElement;\n\n    // Get the largest height out of body and html's various height measurements\n    return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n  }\n\n}\n","import camelCase from \"camelcase\";\r\nimport {BaseController} from \"../base_controller\";\r\n\r\nexport class EphemeralController extends BaseController {\r\n\r\n  _cleanupSelf() {\r\n    this.cleanup(this.element as HTMLElement);\r\n  }\r\n\r\n  cleanup(element: HTMLElement) {\r\n    element.dataset.controller = element.dataset.controller?.replaceAll(new RegExp(`(\\s|^)${this.identifier}(\\s|$)`, \"g\"), \"\") || \"\";\r\n    if (element.dataset.controller == \"\") {\r\n      // If there are no controllers left, remove the attribute\r\n      delete element.dataset.controller;\r\n    }\r\n\r\n    let substringIdentifierValueRegex = new RegExp(`(\\s|^)${this.identifier}\\\\..+?(\\s|$)`, \"g\");\r\n    element.dataset.target = element.dataset.target?.replaceAll(substringIdentifierValueRegex, \"\") || \"\";\r\n    delete element.dataset[camelCase(`${this.identifier}-target`)];\r\n    if (element.dataset.target == \"\") {\r\n      // If there are no targets left, remove the attribute\r\n      delete element.dataset.target;\r\n    }\r\n\r\n    element.dataset.action = element.dataset.target?.replaceAll(substringIdentifierValueRegex, \"\") || \"\";\r\n    delete element.dataset[camelCase(`${this.identifier}-action`)];\r\n    if (element.dataset.action == \"\") {\r\n      // If there are no actions left, remove the attribute\r\n      delete element.dataset.action;\r\n    }\r\n\r\n    // @ts-ignore\r\n    let values = this.constructor.values;\r\n    if (values) {\r\n      Object.keys(values).forEach(val => delete element.dataset[camelCase(`${this.identifier}-${val}-value`)]);\r\n    }\r\n\r\n    // @ts-ignore\r\n    let classes = this.constructor.classes;\r\n    if (classes) {\r\n      Object.keys(classes).forEach(val => delete element.dataset[camelCase(`${this.identifier}-${val}-class`)]);\r\n    }\r\n  }\r\n\r\n}\r\n","import {EphemeralController} from \"./utilities/ephemeral_controller\";\r\nimport {scrollToElement} from \"./utilities/scroll\";\r\n\r\nexport class ScrollIntoFocusController extends EphemeralController {\r\n\r\n  static values = {\r\n    behavior: String,\r\n    block: String,\r\n    inline: String,\r\n  };\r\n\r\n  declare behaviorValue: ScrollBehavior;\r\n  declare hasBehaviorValue: boolean;\r\n  declare blockValue: ScrollLogicalPosition;\r\n  declare hasBlockValue: boolean;\r\n  declare inlineValue: ScrollLogicalPosition;\r\n  declare hasInlineValue: boolean;\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      // Attempt smooth scrolling, with polyfill\r\n      scrollToElement(\r\n        this.element,\r\n        {\r\n          behavior: this.hasBehaviorValue ? this.behaviorValue : \"smooth\",\r\n          block: this.hasBlockValue ? this.blockValue : \"center\",\r\n          inline: this.hasInlineValue ? this.inlineValue : \"center\",\r\n        },\r\n      ).catch(() => this.element.scrollIntoView()); // Fallback to snap-scrolling\r\n      this._cleanupSelf();\r\n    });\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\nimport {getScrollParent, scrollToElement} from \"./utilities/scroll\";\n\nexport class ScrollToBottomController extends BaseController {\n\n  static values = {\n    mode: String,\n  };\n\n  declare modeValue: \"nearest\" | \"document\";\n  declare hasModeValue: boolean;\n\n  scroll(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    let mode = this.hasModeValue ? this.modeValue : \"document\";\n    let target: null | HTMLElement;\n    if (mode == \"document\") {\n      target = document.body;\n    } else {\n      target = getScrollParent(this.element as HTMLElement);\n    }\n    if (target == null) {\n      return;\n    }\n    scrollToElement(target!, {behavior: \"smooth\", block: \"end\"}).catch(() => target!.scrollIntoView(false));\n  }\n\n}\n\n","import {BaseController} from \"./base_controller\";\nimport {scrollToElement} from \"./utilities/scroll\";\n\nexport class ScrollToController extends BaseController {\n\n  static values = {\n    selector: String,\n    behavior: String,\n    block: String,\n    inline: String,\n  };\n\n  declare selectorValue: string;\n  declare behaviorValue: ScrollBehavior;\n  declare hasBehaviorValue: boolean;\n  declare blockValue: ScrollLogicalPosition;\n  declare hasBlockValue: boolean;\n  declare inlineValue: ScrollLogicalPosition;\n  declare hasInlineValue: boolean;\n\n  scroll() {\n    let target = document.querySelector(this.selectorValue);\n    if (!target) {\n      console.warn(`Could not find target for '${this.selectorValue}'`);\n      return;\n    }\n\n    scrollToElement(\n      target!,\n      {\n        behavior: this.hasBehaviorValue ? this.behaviorValue : \"smooth\",\n        block: this.hasBlockValue ? this.blockValue : \"center\",\n        inline: this.hasInlineValue ? this.inlineValue : \"center\",\n      },\n    ).catch(() => target!.scrollIntoView()); // Fallback to snap-scrolling\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\nimport {getScrollParent, scrollToElement} from \"./utilities/scroll\";\n\nexport class ScrollToTopController extends BaseController {\n\n  static values = {\n    mode: String,\n  };\n\n  declare modeValue: \"nearest\" | \"document\";\n  declare hasModeValue: boolean;\n\n  scroll(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    let mode = this.hasModeValue ? this.modeValue : \"document\";\n    let target: null | HTMLElement;\n    if (mode == \"document\") {\n      target = document.body;\n    } else {\n      target = getScrollParent(this.element as HTMLElement);\n    }\n    if (target == null) {\n      return;\n    }\n    scrollToElement(target!, {behavior: \"smooth\", block: \"start\"}).catch(() => target!.scrollIntoView(false));\n  }\n\n}\n\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class SelfDestructController extends BaseController {\r\n\r\n  static values = {seconds: Number};\r\n\r\n  declare readonly secondsValue: number;\r\n  timeout: null | ReturnType<typeof setTimeout> = null;\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      // Only start countdown on first paint\r\n      this.timeout = setTimeout(() => this.element.remove(), this.secondsValue * 1000);\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.timeout) {\r\n      clearTimeout(this.timeout);\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class StickyController extends BaseController {\r\n\r\n  static classes = [\"stuck\"];\r\n  static values = {\r\n    mode: String,\r\n  };\r\n\r\n  declare readonly hasStuckClass: boolean;\r\n  declare readonly stuckClass: string;\r\n  declare readonly hasModeValue: \"top\" | \"bottom\";\r\n  declare readonly modeValue: \"top\" | \"bottom\";\r\n\r\n  _magicElement: HTMLDivElement | null = null;\r\n\r\n  get _mode(): \"top\" | \"bottom\" {\r\n    return this.hasModeValue ? this.modeValue : \"top\";\r\n  }\r\n\r\n  createMagicElement() {\r\n    // Magic element placed next to the sticky el that acts as an external border.\r\n    // When the magic element is off the page, we know that the sticky el is \"stuck\"\r\n    if (this._magicElement !== null) {\r\n      return;\r\n    }\r\n\r\n    this._magicElement = document.createElement(\"div\");\r\n    switch (this._mode) {\r\n      case \"top\":\r\n        this.element.insertAdjacentElement(\"beforebegin\", this._magicElement);\r\n        break;\r\n      case \"bottom\":\r\n        this.element.insertAdjacentElement(\"afterend\", this._magicElement);\r\n        break;\r\n    }\r\n  }\r\n\r\n  connect() {\r\n    let element = this.element as HTMLElement;\r\n    this.createMagicElement();\r\n\r\n    const observer = new IntersectionObserver(entries => {\r\n      entries.forEach(entry => {\r\n        if (entry.target !== this._magicElement) {\r\n          return;\r\n        }\r\n        if (entry.intersectionRatio === 0) {\r\n          element.classList.add(this.hasStuckClass ? this.stuckClass : \"stuck\");\r\n        } else if (entry.intersectionRatio === 1) {\r\n          element.classList.remove(this.hasStuckClass ? this.stuckClass : \"stuck\");\r\n        }\r\n      });\r\n\r\n    }, {\r\n      threshold: [0, 1],\r\n    });\r\n    observer.observe(this._magicElement!);\r\n  }\r\n\r\n}\r\n","import {EphemeralController} from \"./utilities/ephemeral_controller\";\n\nexport class TeleportController extends EphemeralController {\n\n  static values = {target: String, insert: String, immediate: Boolean};\n\n  declare readonly immediateValue: boolean;\n  declare readonly hasImmediateValue: boolean;\n  declare readonly targetValue: string;\n  declare readonly hasInsertValue: boolean;\n  declare readonly insertValue: InsertPosition | \"replaceOuter\" | \"replaceInner\" | \"prepend\" | \"append\";\n\n  connect() {\n    if (!this.hasInsertValue) {\n      throw new Error(\"`insert` value was not specified\");\n    }\n\n    requestAnimationFrame(() => {\n      if (this.hasImmediateValue && this.immediateValue) {\n        this.execute();\n      }\n    });\n  }\n\n  execute(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    let element = this.element as HTMLElement;\n    let destination = document.querySelector(this.targetValue);\n\n    if (destination == null) {\n      this.dispatch(element, \"teleport:error\");\n      return;\n    }\n\n    let copy = element.cloneNode(true) as HTMLElement;\n    this.cleanup(copy);\n\n    switch (this.insertValue) {\n      case \"beforebegin\":\n      case \"beforeend\":\n      case \"afterend\":\n      case \"afterbegin\":\n        destination.insertAdjacentHTML(this.insertValue, copy.outerHTML);\n        break;\n      case \"replaceOuter\":\n        destination.outerHTML = copy.outerHTML;\n        break;\n      case \"replaceInner\":\n        destination.innerHTML = copy.outerHTML;\n        break;\n      case \"prepend\":\n        destination.insertAdjacentHTML(\"afterbegin\", copy.outerHTML);\n        break;\n      case \"append\":\n        destination.insertAdjacentHTML(\"beforeend\", copy.outerHTML);\n        break;\n      default:\n        throw new Error(\"`insert` value was not specified\");\n\n    }\n    element.remove();\n  }\n\n}\n","import {useClickOutside, useHover} from \"stimulus-use\";\nimport {BaseController} from \"./base_controller\";\n\nexport type ToggleClassMode = \"on\" | \"off\" | \"toggle\"\n\nexport class ToggleClassController extends BaseController {\n\n  static targets = [\"toggle\"];\n  static values = {\n    class: String,\n    mouseEnter: String,\n    mouseLeave: String,\n    clickAway: Boolean,\n    initial: String,\n  };\n\n  declare readonly toggleTargets: HTMLElement[];\n\n  declare readonly classValue: string;\n  declare readonly hasClassValue: boolean;\n\n  declare readonly mouseEnterValue: ToggleClassMode;\n  declare readonly hasMouseEnterValue: boolean;\n\n  declare readonly mouseLeaveValue: ToggleClassMode;\n  declare readonly hasMouseLeaveValue: boolean;\n\n  declare readonly clickAwayValue: boolean;\n  declare readonly hasClickAwayValue: boolean;\n\n  declare readonly initialValue: \"on\" | \"off\";\n  declare readonly hasInitialValue: boolean;\n\n  connect() {\n    if (!this.hasClassValue) {\n      throw new Error(\"data-toggle-class-class-value must not be empty\");\n    }\n\n    if (this.hasMouseEnterValue || this.hasMouseLeaveValue) {\n      useHover(this);\n    }\n\n    if (this.hasClickAwayValue && this.clickAwayValue) {\n      useClickOutside(this);\n    }\n\n    requestAnimationFrame(() => {\n      if (this.hasInitialValue) {\n        if (this.initialValue === \"on\") {\n          this.toggleTargets.forEach((target) => this.elementOn(target));\n        } else {\n          this.toggleTargets.forEach((target) => this.elementOff(target));\n        }\n      }\n    });\n  }\n\n  clickOutside() {\n    this.toggleTargets.forEach((target) => {\n      if (this.elementWasToggled(target)) {\n        this.elementToggleStatus(target);\n        this.elementToggle(target);\n      }\n    });\n  }\n\n  mouseEnter() {\n    if (this.hasMouseEnterValue) {\n      switch (this.mouseEnterValue) {\n        case \"on\":\n          this.on();\n          break;\n        case \"off\":\n          this.off();\n          break;\n        case \"toggle\":\n          this.toggle();\n          break;\n      }\n    }\n    return {};\n  }\n\n  mouseLeave() {\n    if (this.hasMouseLeaveValue) {\n      switch (this.mouseLeaveValue) {\n        case \"on\":\n          this.on();\n          break;\n        case \"off\":\n          this.off();\n          break;\n        case \"toggle\":\n          this.toggle();\n          break;\n      }\n    }\n    return {};\n  }\n\n  on(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementOn(target);\n    });\n  }\n\n  off(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementOff(target);\n    });\n  }\n\n  toggle(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementToggle(target);\n    });\n  }\n\n  private elementWasToggled(el: HTMLElement): boolean {\n    return el.dataset.toggled == \"true\";\n  }\n\n  private elementToggleStatus(el: HTMLElement) {\n    if (this.elementWasToggled(el)) {\n      delete el.dataset.toggled;\n    } else {\n      el.dataset.toggled = \"true\";\n    }\n  }\n\n  private elementToggle(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass));\n  }\n\n  private elementOn(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass, true));\n  }\n\n  private elementOff(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass, false));\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\nimport {isHTMLLinkElement} from \"./utilities/elements\";\nimport {isTurboFrame} from \"./utilities/turbo\";\n\nexport class TurboFrameRCController extends BaseController {\n\n  static values = {\n    frameId: String,\n    src: String,\n    loadingMessage: String,\n  };\n\n  declare readonly frameIdValue: string;\n  declare readonly srcValue: string;\n  declare readonly hasSrcValue: boolean;\n  declare readonly loadingMessageValue: string;\n  declare readonly hasLoadingMessageValue: boolean;\n\n  toggle(event?: Event | null) {\n    if (event) {\n      event.preventDefault();\n    }\n    let frame = this._getFrame();\n    let frameSrc = frame.src;\n    if (frameSrc == null || frameSrc !== this._getSrc()) {\n      this._setSrc();\n    } else {\n      this._clear();\n    }\n  }\n\n  setSrc(event?: Event | null) {\n    if (event) {\n      event.preventDefault();\n    }\n    this._setSrc();\n  }\n\n  clear(event?: Event | null) {\n    if (event) {\n      event.preventDefault();\n    }\n    this._clear();\n  }\n\n  private _setSrc() {\n    let frame = this._getFrame();\n    if (this.hasLoadingMessageValue) {\n      frame.innerHTML = this.loadingMessageValue;\n    }\n    frame.src = this._getSrc();\n  }\n\n  private _clear() {\n    let frame = this._getFrame();\n    frame.src = \"\";\n    frame.innerHTML = \"\";\n  }\n\n  private _getFrame(): TurboFrame {\n    let frame = document.getElementById(`${this.frameIdValue}`);\n    if (frame == null) {\n      throw new Error(`Could not find frame with ID '${this.frameIdValue}'`);\n    }\n    if (!isTurboFrame(frame)) {\n      throw new Error(`Element targeted by ID '${this.frameIdValue}'`);\n    } else {\n      return frame;\n    }\n  }\n\n  private _getSrc(): string {\n    let element = this.element as HTMLElement;\n    if (this.hasSrcValue) {\n      return this.srcValue;\n    } else if (isHTMLLinkElement(element)) {\n      return element.href;\n    } else {\n      throw new Error(\"No link given to drive frame to\");\n    }\n  }\n\n}\n","export function isTurboFrame(element: HTMLElement): element is TurboFrame {\r\n  return element.nodeName == \"TURBO-FRAME\";\r\n}\r\n","import {BaseController} from \"./base_controller\";\n\nexport class WordCountController extends BaseController {\n\n  static targets = [\"input\", \"output\"];\n  static values = {min: Number, max: Number};\n  static classes = [\"error\"];\n\n  declare readonly inputTarget: HTMLInputElement | HTMLTextAreaElement;\n  declare readonly outputTarget: HTMLElement;\n  declare minValue: number;\n  declare hasMinValue: boolean;\n  declare maxValue: number;\n  declare hasMaxValue: boolean;\n  declare errorClass: string;\n  declare hasErrorClass: boolean;\n\n  initialize() {\n    this.updateWordCount = this.updateWordCount.bind(this);\n  }\n\n  connect() {\n    this.updateWordCount();\n    this.inputTarget.addEventListener(\"input\", this.updateWordCount);\n  }\n\n  disconnect() {\n    this.inputTarget.removeEventListener(\"input\", this.updateWordCount);\n  }\n\n  updateWordCount() {\n    let wordCount = 0;\n    let textAreaValue = this.inputTarget.value;\n    let matches = textAreaValue.match(/\\S+/g);\n    wordCount = (matches && matches.length) || 0;\n    this.outputTarget.innerText = wordCount.toString();\n    if (this.hasErrorClass) {\n      if (this.isValidCount(wordCount)) {\n        this.outputTarget.classList.remove(this.errorClass);\n      } else {\n        this.outputTarget.classList.add(this.errorClass);\n      }\n    }\n  }\n\n  isValidCount(count: number) {\n    let min = 0;\n    let max = 99999;\n\n    if (this.hasMinValue) {\n      min = this.minValue;\n    }\n\n    if (this.hasMaxValue) {\n      max = this.maxValue;\n    }\n\n    return count >= min && count <= max;\n  }\n\n}\n"],"names":["BaseController","Controller","constructor","context","super","Proxy","this","get","obj","prop","returnVal","Reflect","self","test","logProperty","toString","apply","target","thisArg","argArray","log","args","dispatch","element","eventName","options","mergedOptions","Object","assign","bubbles","cancelable","detail","event","CustomEvent","dispatchEvent","functionName","application","debug","logger","console","groupCollapsed","identifier","groupEnd","AppearanceController","initialize","_handleVisibility","bind","connect","window","addEventListener","document","disconnect","removeEventListener","appear","away","_documentIsActive","visibilityState","hasFocus","AsyncBlockController","_errorMessage","hasErrorMessageValue","errorMessageValue","loadContent","el","hasReplaceTarget","replaceTarget","fetch","endpointValue","then","response","text","html","newEl","createElement","innerHTML","hasSelectorValue","selectedContent","querySelectorAll","selectorValue","replaceWith","children","catch","err","finally","endpoint","String","errorMessage","selector","AutoSubmitFormController","handler","forEach","e","method","controller","methodName","composeEventName","name","eventPrefix","composedName","extendedEvent","type","composed","originalEvent","defaultOptions","useIntersection","targetElement","controllerDisconnect","observer","IntersectionObserver","entries","entry","isIntersecting","isVisible","call","appearEvent","dispatchAppear","disappearEvent","dispatchDisappear","observe","unobserve","[object Object]","events","onlyVisible","StimulusUse","_a","_b","_c","controllerId","stimulusUseDebug","id","dataset","controllerInitialize","controllerConnect","UseHover","onEnter","onLeave","hover","enhanceController","UseMutation","error","handleError","mutation","MutationObserver","useWindowResize","callback","innerWidth","innerHeight","payload","height","Infinity","width","debounce","fn","wait","timeoutId","arguments","clearTimeout","setTimeout","AutosizeController","_handler","style","resize","boxSizing","requestAnimationFrame","windowResize","autosize","offset","offsetHeight","clientHeight","scrollHeight","CharCountController","_updateCharCount","inputTarget","charCount","value","length","outputTarget","innerText","hasErrorClass","_isValidCount","classList","remove","errorClass","add","count","min","max","hasMinValue","minValue","hasMaxValue","maxValue","Number","CheckboxSelectAllController","checked","checkboxTargets","filter","checkbox","unchecked","toggle","refresh","hasSelectAllTarget","selectAllTarget","preventDefault","checkboxesCount","checkboxesCheckedCount","indeterminate","ClipboardController","supported","queryCommandSupported","hasRemoveUnusedValue","removeUnusedValue","hasFallbackTarget","fallbackTarget","hasCopyTarget","copyTarget","select","sourceTarget","copy","execCommand","isHTMLLinkElement","nodeName","isHTMLFormElement","isHTMLInputElement","isHTMLSelectElement","isElementCheckable","removeUnused","Boolean","ConfirmController","message","hasMessageValue","messageValue","confirm","Error","ConfirmNavigationController","_message","_messageValue","handlePopstate","handleTurboNavigation","onbeforeunload","_event","DebugController","testTargets","DetectDirtyController","checkDirty","restore","defaultChecked","Array","from","option","selected","defaultSelected","defaultValue","dirty","some","setAttribute","removeAttribute","DisableInputsController","hasDisablerTarget","disablerTarget","disableInputs","enableInputs","shouldClear","hasClearValue","clearValue","disableTargets","_","disabled","clear","DismissableController","dismiss","EmptyDomController","useMutation","childList","checkEmpty","mutate","hasScopeSelectorValue","scopeSelectorValue","hasNotEmptyClass","notEmptyClass","split","klass","hasEmptyClass","emptyClass","scopeSelector","EnableInputsController","hasEnablerTarget","enablerTarget","enableTargets","FallbackImageController","onerror","hasPlaceholderValue","src","placeholderValue","display","placeholder","FormSaveController","formID","hasIdValue","idValue","elementID","formIdentifier","location","href","formElements","elements","formData","data","restoreOnLoad","hasRestoreOnLoadValue","restoreOnLoadValue","clearOnSubmit","hasClearOnSubmitValue","clearOnSubmitValue","_clear","localStorage","removeItem","save","setItem","JSON","stringify","getItem","savedData","parse","IntersectionController","threshold","hasThresholdValue","thresholdValue","map","val","parseFloat","trim","disappear","LazyBlockController","smoothSupported","documentElement","smoothPolyfilled","scrollToElement","behavior","block","inline","async","polyfill","polyfillSmooth","scrollIntoView","getScrollParent","node","overflowY","getComputedStyle","parentElement","body","LightboxImageController","hasSrcValue","srcValue","srcSet","hasSrcSetValue","srcSetValue","srcset","sizes","hasSizesValue","sizesValue","modalClassName","hasModalClass","modalClass","imageClassName","hasImageClass","imageClass","open","close","_dialog","image","className","appendChild","insertAdjacentElement","dialogPolyfill","registerDialog","showModal","LimitedSelectionCheckboxesController","handleInputs","inputTargets","tickedInputs","reduce","previousValue","hasErrorTarget","errorTarget","NestedFormController","wrapperClass","hasWrapperSelectorValue","wrapperClassValue","insertMode","hasInsertModeValue","insertModeValue","checkStructure","content","templateTarget","replace","generateID","targetTarget","insertAdjacentHTML","wrapper","closest","newRecord","destroyInput","querySelector","Date","getTime","Math","random","slice","indexOf","PasswordConfirmController","checkPasswordsMatch","passwordTargets","allPasswordsMatch","values","Set","has","size","PasswordPeekController","peak","passwordTarget","hide","ResponsiveIframeWrapperController","messageReceived","hasOwnProperty","ResponsiveIframeBodyController","top","debounces","func","postUpdate","getHeight","parent","postMessage","EphemeralController","_cleanupSelf","cleanup","replaceAll","RegExp","substringIdentifierValueRegex","camelCase","action","keys","classes","ScrollIntoFocusController","hasBehaviorValue","behaviorValue","hasBlockValue","blockValue","hasInlineValue","inlineValue","ScrollToBottomController","scroll","hasModeValue","modeValue","mode","ScrollToController","warn","ScrollToTopController","SelfDestructController","timeout","secondsValue","seconds","StickyController","_mode","createMagicElement","_magicElement","intersectionRatio","hasStuckClass","stuckClass","TeleportController","hasInsertValue","hasImmediateValue","immediateValue","execute","destination","targetValue","cloneNode","insertValue","outerHTML","insert","immediate","ToggleClassController","hasClassValue","hasMouseEnterValue","hasMouseLeaveValue","useHover","hasClickAwayValue","clickAwayValue","onEvent","contains","rect","getBoundingClientRect","windowHeight","windowWidth","clientWidth","left","isElementInViewport","clickOutside","clickOutsideEvent","useClickOutside","hasInitialValue","toggleTargets","initialValue","elementOn","elementOff","elementWasToggled","elementToggleStatus","elementToggle","mouseEnter","mouseEnterValue","on","off","mouseLeave","mouseLeaveValue","toggled","classValue","class","clickAway","initial","TurboFrameRCController","frameSrc","_getFrame","_getSrc","_setSrc","setSrc","frame","hasLoadingMessageValue","loadingMessageValue","getElementById","frameIdValue","frameId","loadingMessage","WordCountController","updateWordCount","wordCount","matches","match","isValidCount"],"mappings":"mTAEaA,UAAuBC,EAElCC,YAAYC,GAEV,OADAC,MAAMD,OACKE,MAAMC,KAAM,CACrBC,IAAK,CAACC,EAAKC,KACT,IAAIC,EAAYC,QAAQJ,IAAIC,EAAKC,GAC7BG,EAAON,KACX,GA4CR,SAAqBG,GACnB,OAAQA,GACN,IAAK,cACL,IAAK,UACL,IAAK,cACL,IAAK,aACL,IAAK,MACL,IAAK,OACL,IAAK,qBACL,IAAK,aACH,SAGJ,QAAI,SAASI,KAAKJ,IAGd,kBAAkBI,KAAKJ,IAGvB,aAAaI,KAAKJ,IAGlB,oBAAoBI,KAAKJ,IAGzB,aAAaI,KAAKJ,IArEZK,CAAYL,EAAKM,YAAa,CAChC,GAAwB,mBAAbL,EACT,WAAWL,MAAMK,EAAW,CAC1BM,MAAK,CAACC,EAAaC,EAAcC,KAC/BP,EAAKQ,IAAIX,EAAKM,WAAY,CACxBM,KAAMF,IAEDR,QAAQK,MAAMC,EAAQC,EAASC,MAI1Cb,KAAKc,IAAIX,EAAKM,YAGlB,OAAOL,KAKbY,SAASC,EAAsBC,EAAmBC,EAA2B,IAC3E,IAAIC,EAAgBC,OAAOC,OAAO,GAAI,CAACC,SAAS,EAAMC,YAAY,EAAMC,OAAQ,CAACd,OAAQM,IAAWE,GAC9FC,EAAcK,OAAOd,SACzBS,EAAcK,OAAOd,OAASM,GAEhC,IAAIS,EAAQ,IAAIC,YAAYT,EAAWE,GACvCH,EAAQW,cAAcF,GAGxBZ,IAAIe,EAAsBd,EAAW,IAEnC,IAAKf,KAAK8B,YAAYC,MACpB,OAEF,IAAIC,EAASC,QACbD,EAAOE,oBAAoBlC,KAAKmC,iBAAiBN,IAAgB,iBAAkB,gBACnFG,EAAOlB,OACLG,QAASjB,KAAKiB,SACXF,IAELiB,EAAOI,kBC/CEC,UAA6B3C,EAExC4C,aACEtC,KAAKuC,kBAAoBvC,KAAKuC,kBAAkBC,KAAKxC,MAGvDyC,UACEC,OAAOC,iBAAiB,QAAS3C,KAAKuC,mBACtCG,OAAOC,iBAAiB,OAAQ3C,KAAKuC,mBACrCK,SAASD,iBAAiB,mBAAoB3C,KAAKuC,mBACnDvC,KAAKuC,oBAGPM,aACEH,OAAOI,oBAAoB,QAAS9C,KAAKuC,mBACzCG,OAAOI,oBAAoB,OAAQ9C,KAAKuC,mBACxCK,SAASE,oBAAoB,mBAAoB9C,KAAKuC,mBAGxDQ,SACE/C,KAAKgB,SAAShB,KAAKiB,QAAwB,qBAG7C+B,OACEhD,KAAKgB,SAAShB,KAAKiB,QAAwB,mBAG7CsB,oBACEvC,KAAKiD,oBAAsBjD,KAAK+C,SAAW/C,KAAKgD,OAGlDC,oBACE,MAAmC,WAA5BL,SAASM,iBAAgCN,SAASO,kBChChDC,UAA6B1D,EAcxC2D,oBACE,YAAYC,qBAAuBtD,KAAKuD,kBAAoB,8BAM9Dd,UACEzC,KAAKwD,cAGPA,cACE,IAAIlD,EAAON,KACPyD,EAAMzD,KAAK0D,iBAAmB1D,KAAK2D,cAAgB3D,KAAKiB,QAC5D2C,MAAM5D,KAAK6D,eACVC,KAAMC,GAAaA,EAASC,QAC5BF,KAAMG,IACL,IAAIC,EAAQtB,SAASuB,cAAc,OAEnC,GADAD,EAAME,UAAYH,EACdjE,KAAKqE,iBAAkB,CACzB,IAAIC,EAAkBJ,EAAMK,iBAAiBvE,KAAKwE,eAClDf,EAAGgB,eAAeH,QAElBb,EAAGgB,eAAeP,EAAMQ,UAG1BpE,EAAKU,SAASyC,EAAI,kBAEnBkB,MAAMC,IACLnB,EAAGgB,YAAYzE,KAAKqD,eACpB/C,EAAKU,SAASyC,EAAI,gBAEnBoB,QAAQ,KACPvE,EAAKU,SAASyC,EAAI,oBA9CfL,UAAU,CAAC,WACXA,SAAS,CAAC0B,SAAUC,OAAQC,aAAcD,OAAQE,SAAUF,cCFxDG,UAAiCxF,EAE5C4C,aACEtC,KAAKmF,QAAUnF,KAAKmF,QAAQ3C,KAAKxC,MAGnCyC,UACGzC,KAAKiB,QAAwBsD,iBAAiB,2BAA2Ba,QAAQ3B,GAAMA,EAAGd,iBAAiB,SAAU3C,KAAKmF,UAG7HtC,aACG7C,KAAKiB,QAAwBsD,iBAAiB,2BAA2Ba,QAAQ3B,GAAMA,EAAGX,oBAAoB,SAAU9C,KAAKmF,UAGxHA,QAAQE,GAEdrF,KAAKgB,SAAUhB,KAAKiB,QAAyB,WClB1C,MAAMqE,EAAS,CAACC,EAAYC,KAC/B,MAAMF,EAASC,EAAWC,GAC1B,MAAqB,mBAAVF,EACAA,EAGA,IAAIvE,QAGN0E,EAAmB,CAACC,EAAMH,EAAYI,KAC/C,IAAIC,EAAeF,EAOnB,OANoB,IAAhBC,EACAC,EAAe,GAAGL,EAAWpD,cAAcuD,IAEf,iBAAhBC,IACZC,EAAe,GAAGD,KAAeD,KAE9BE,GAEEC,EAAgB,CAACC,EAAMpE,EAAOD,KACvC,MAAMF,QAAEA,EAAOC,WAAEA,EAAUuE,SAAEA,GAAarE,GAAS,CAAEH,SAAS,EAAMC,YAAY,EAAMuE,UAAU,GAUhG,OATIrE,GACAL,OAAOC,OAAOG,EAAQ,CAAEuE,cAAetE,IAEvB,IAAIC,YAAYmE,EAAM,CACtCvE,QAAAA,EACAC,WAAAA,EACAuE,SAAAA,EACAtE,OAAAA,KC3BFwE,EAAiB,CACnBrE,eAAe,EACf+D,aAAa,GAEJO,EAAkB,CAACX,EAAYpE,EAAU,MAClD,MAAMS,cAAEA,EAAa+D,YAAEA,GAAgBtE,OAAOC,OAAO,GAAI2E,EAAgB9E,GACnEgF,GAAiBhF,MAAAA,OAAyC,EAASA,EAAQF,UAAYsE,EAAWtE,QAgClGmF,EAAuBb,EAAW1C,WAAWL,KAAK+C,GAClDc,EAAW,IAAIC,qBAhCHC,IACd,MAAOC,GAASD,EACZC,EAAMC,eAOS,CAACD,IAIpB,GAHAjB,EAAWmB,WAAY,EACvBpB,EAAOC,EAAY,UAAUoB,KAAKpB,EAAYiB,GAE1C5E,EAAe,CACf,MAAMV,EAAYuE,EAAiB,SAAUF,EAAYI,GACnDiB,EAAcf,EAAc3E,EAAW,KAAM,CAAEqE,WAAAA,EAAYiB,MAAAA,IACjEL,EAAcvE,cAAcgF,KAb5BC,CAAeL,GAEVjB,EAAWmB,WAcE,CAACF,IAIvB,GAHAjB,EAAWmB,WAAY,EACvBpB,EAAOC,EAAY,aAAaoB,KAAKpB,EAAYiB,GAE7C5E,EAAe,CACf,MAAMV,EAAYuE,EAAiB,YAAaF,EAAYI,GACtDmB,EAAiBjB,EAAc3E,EAAW,KAAM,CAAEqE,WAAAA,EAAYiB,MAAAA,IACpEL,EAAcvE,cAAckF,KApB5BC,CAAkBP,IA0B0BrF,GAC9C6F,EAAU,KACZX,EAASW,QAAQb,IAEfc,EAAY,KACdZ,EAASY,UAAUd,IAUvB,OARA9E,OAAOC,OAAOiE,EAAY,CACtBmB,WAAW,EACXQ,aACID,IACAb,OAGRY,IACO,CAACA,EAASC,ICtDfhB,EAAiB,CACnBkB,OAAQ,CAAC,QAAS,YAClBC,aAAa,EACbxF,eAAe,EACf+D,aAAa,GCLXM,EAAiB,CACnBlE,OAAO,EACPC,OAAQC,SAEL,MAAMoF,EACTH,YAAY3B,EAAYpE,EAAU,IAC9B,IAAImG,EAAIC,EAAIC,EACZxH,KAAKc,IAAM,CAACe,EAAcd,KACjBf,KAAK+B,QAEV/B,KAAKgC,OAAOE,eAAe,KAAKlC,KAAKuF,WAAWpD,iBAAiBN,IAAgB,iBAAkB,gBACnG7B,KAAKgC,OAAOlB,IAAIO,OAAOC,OAAO,CAAEmG,aAAczH,KAAKyH,cAAgB1G,IACnEf,KAAKgC,OAAOI,aAEhBpC,KAAK+B,MAAmK,QAA1JwF,EAAgF,QAA1ED,EAAKnG,MAAAA,OAAyC,EAASA,EAAQY,aAA0B,IAAPuF,EAAgBA,EAAK/B,EAAWzD,YAAY4F,wBAAqC,IAAPH,EAAgBA,EAAKtB,EAAelE,MACpN/B,KAAKgC,OAAqF,QAA3EwF,EAAKrG,MAAAA,OAAyC,EAASA,EAAQa,cAA2B,IAAPwF,EAAgBA,EAAKvB,EAAejE,OACtIhC,KAAKuF,WAAaA,EAClBvF,KAAKyH,aAAelC,EAAWtE,QAAQ0G,IAAMpC,EAAWtE,QAAQ2G,QAAQD,GAExE3H,KAAK6H,qBAAuBtC,EAAWjD,WAAWE,KAAK+C,GACvDvF,KAAK8H,kBAAoBvC,EAAW9C,QAAQD,KAAK+C,GACjDvF,KAAKoG,qBAAuBb,EAAW1C,WAAWL,KAAK+C,ICnBxD,MAAMwC,UAAiBV,EAC1BH,YAAY3B,EAAYpE,EAAU,IAC9BrB,MAAMyF,EAAYpE,GAClBnB,KAAKgH,QAAU,KACXhH,KAAKmG,cAAcxD,iBAAiB,aAAc3C,KAAKgI,SACvDhI,KAAKmG,cAAcxD,iBAAiB,aAAc3C,KAAKiI,UAE3DjI,KAAKiH,UAAY,KACbjH,KAAKmG,cAAcrD,oBAAoB,aAAc9C,KAAKgI,SAC1DhI,KAAKmG,cAAcrD,oBAAoB,aAAc9C,KAAKiI,UAE9DjI,KAAKgI,QAAU,KACX1C,EAAOtF,KAAKuF,WAAY,cAAcoB,KAAK3G,KAAKuF,YAChDvF,KAAKc,IAAI,aAAc,CAAEoH,OAAO,KAEpClI,KAAKiI,QAAU,KACX3C,EAAOtF,KAAKuF,WAAY,cAAcoB,KAAK3G,KAAKuF,YAChDvF,KAAKc,IAAI,aAAc,CAAEoH,OAAO,KAEpClI,KAAKmG,eAAiBhF,MAAAA,OAAyC,EAASA,EAAQF,UAAYsE,EAAWtE,QACvGjB,KAAKuF,WAAaA,EAClBvF,KAAKmI,oBACLnI,KAAKgH,UAETE,oBACI,MAAMd,EAAuBpG,KAAKuF,WAAW1C,WAAWL,KAAKxC,KAAKuF,YAKlElE,OAAOC,OAAOtB,KAAKuF,WAAY,CAAE1C,WAJd,KACf7C,KAAKiH,YACLb,QC5BL,MAAMgC,UAAoBf,EAC7BH,YAAY3B,EAAYpE,EAAU,IAC9BrB,MAAMyF,EAAYpE,GAClBnB,KAAKgH,QAAU,KACX,IACIhH,KAAKqG,SAASW,QAAQhH,KAAKmG,cAAenG,KAAKmB,SAEnD,MAAOkH,GACHrI,KAAKuF,WAAWzD,YAAYwG,YAAYD,EAAO,gFAAiF,MAGxIrI,KAAKiH,UAAY,KACbjH,KAAKqG,SAASxD,cAElB7C,KAAKuI,SAAYhC,IACbjB,EAAOtF,KAAKuF,WAAY,UAAUoB,KAAK3G,KAAKuF,WAAYgB,GACxDvG,KAAKc,IAAI,SAAU,CAAEyF,QAAAA,KAEzBvG,KAAKmG,eAAiBhF,MAAAA,OAAyC,EAASA,EAAQF,UAAYsE,EAAWtE,QACvGjB,KAAKuF,WAAaA,EAClBvF,KAAKmB,QAAUA,EACfnB,KAAKqG,SAAW,IAAImC,iBAAiBxI,KAAKuI,UAC1CvI,KAAKmI,oBACLnI,KAAKgH,UAETE,oBACI,MAAMd,EAAuBpG,KAAKuF,WAAW1C,WAAWL,KAAKxC,KAAKuF,YAKlElE,OAAOC,OAAOtB,KAAKuF,WAAY,CAAE1C,WAJd,KACf7C,KAAKiH,YACLb,QAKL,MCnCMqC,EAAmBlD,IAC5B,MAAMmD,EAAYhH,IACd,MAAMiH,WAAEA,EAAUC,YAAEA,GAAgBlG,OAC9BmG,EAAU,CACZC,OAAQF,GAAeG,SACvBC,MAAOL,GAAcI,SACrBrH,MAAAA,GAEJ4D,EAAOC,EAAY,gBAAgBoB,KAAKpB,EAAYsD,IAElDzC,EAAuBb,EAAW1C,WAAWL,KAAK+C,GAClDyB,EAAU,KACZtE,OAAOC,iBAAiB,SAAU+F,GAClCA,KAEEzB,EAAY,KACdvE,OAAOI,oBAAoB,SAAU4F,IASzC,OAPArH,OAAOC,OAAOiE,EAAY,CACtB2B,aACID,IACAb,OAGRY,IACO,CAACA,EAASC,ICrBfgC,EAAW,CAACC,EAAIC,EADF,OAEhB,IAAIC,EAAY,KAChB,OAAO,WACH,MAAMrI,EAAOsI,UACPxJ,EAAUG,KACV0I,EAAW,IAAMQ,EAAGxI,MAAMb,EAASkB,GACrCqI,GACAE,aAAaF,GAEjBA,EAAYG,WAAWb,EAAUS,WCX5BK,UAA2B9J,EAEtC4C,aACEtC,KAAKyJ,SAAWzJ,KAAKyJ,SAASjH,KAAKxC,MAGrCyC,UACE,IAAI9B,EAASX,KAAKiB,QAClBN,EAAO+I,MAAMC,OAAS,OACtBhJ,EAAO+I,MAAME,UAAY,aACzBjJ,EAAOgC,iBAAiB,QAAS3C,KAAKyJ,UACtC9I,EAAOgC,iBAAiB,QAAS3C,KAAKyJ,UACtChB,EAAgBzI,MAChB6J,sBAAsB7J,KAAKyJ,UAG7BK,eACE9J,KAAKyJ,WAGCA,WACNzJ,KAAK+J,SAAS/J,KAAKiB,SAGb8I,SAAS9I,GACf,IAAI+I,EAAS/I,EAAQgJ,aAAehJ,EAAQiJ,aAC5CjJ,EAAQyI,MAAMZ,OAAS,OACvB7H,EAAQyI,MAAMZ,OAAS7H,EAAQkJ,aAAeH,EAAS,YC5B9CI,UAA4B1K,EAevC4C,aACEtC,KAAKqK,iBAAmBrK,KAAKqK,iBAAiB7H,KAAKxC,MAGrDyC,UACEzC,KAAKqK,mBACLrK,KAAKsK,YAAY3H,iBAAiB,QAAS3C,KAAKqK,kBAGlDxH,aACE7C,KAAKsK,YAAYxH,oBAAoB,QAAS9C,KAAKqK,kBAG7CA,mBACN,IAAIE,EAAYvK,KAAKsK,YAAYE,MAAMC,OACvCzK,KAAK0K,aAAaC,UAAYJ,EAAU9J,WACpCT,KAAK4K,gBACH5K,KAAK6K,cAAcN,GACrBvK,KAAK0K,aAAaI,UAAUC,OAAO/K,KAAKgL,YAExChL,KAAK0K,aAAaI,UAAUG,IAAIjL,KAAKgL,aAKnCH,cAAcK,GACpB,IAAIC,EAAM,EACNC,EAAM,MAUV,OARIpL,KAAKqL,cACPF,EAAMnL,KAAKsL,UAGTtL,KAAKuL,cACPH,EAAMpL,KAAKwL,UAGNN,GAASC,GAAOD,GAASE,GAlD3BhB,UAAU,CAAC,QAAS,UACpBA,SAAS,CAACe,IAAKM,OAAQL,IAAKK,QAC5BrB,UAAU,CAAC,eCJPsB,UAAoChM,EAO/CiM,cACE,YAAYC,gBAAgBC,OAAOC,GAAYA,EAASH,SAG1DI,gBACE,YAAYH,gBAAgBC,OAAOC,IAAaA,EAASH,SAG3DrJ,aACEtC,KAAKgM,OAAShM,KAAKgM,OAAOxJ,KAAKxC,MAC/BA,KAAKiM,QAAUjM,KAAKiM,QAAQzJ,KAAKxC,MAGnCyC,UACEoH,sBAAsB,KACf7J,KAAKkM,qBAIVlM,KAAKmM,gBAAgBxJ,iBAAiB,SAAU3C,KAAKgM,QACrDhM,KAAK4L,gBAAgBxG,QAAQ0G,GAAYA,EAASnJ,iBAAiB,SAAU3C,KAAKiM,UAClFjM,KAAKiM,aAITpJ,aACO7C,KAAKkM,qBAIVlM,KAAKmM,gBAAgBrJ,oBAAoB,SAAU9C,KAAKgM,QACxDhM,KAAK4L,gBAAgBxG,QAAS0G,GAAaA,EAAShJ,oBAAoB,SAAU9C,KAAKiM,WAGjFD,OAAOtK,GACbA,EAAM0K,iBACN,IAAIzL,EAASe,EAAMf,OACnBX,KAAK4L,gBAAgBxG,QAAS0G,GAAaA,EAASH,QAAUhL,EAAOgL,SAG/DM,UACN,MAAMI,EAAkBrM,KAAK4L,gBAAgBnB,OACvC6B,EAAyBtM,KAAK2L,QAAQlB,OAE5CzK,KAAKmM,gBAAgBR,QAAUW,EAAyB,EACxDtM,KAAKmM,gBAAgBI,cAAgBD,EAAyB,GAAKA,EAAyBD,GAnDvFX,UAAU,CAAC,YAAa,kBCDpBc,UAA4B9M,EAAzCE,kCAcEI,gBAAY,EAEZyC,UACEzC,KAAKyM,UAAY7J,SAAS8J,sBAAsB,QAE5C1M,KAAK2M,sBAAwB3M,KAAK4M,oBAChC5M,KAAKyM,WAAazM,KAAK6M,kBACzB7M,KAAK8M,eAAe/B,SACX/K,KAAK+M,eACd/M,KAAKgN,WAAWjC,UAKtBkC,OAAOvL,GACDA,GACFA,EAAM0K,iBAEPpM,KAAKkN,aAAwDD,SAGhEE,KAAKzL,GACCA,GACFA,EAAM0K,iBAEPpM,KAAKkN,aAAwDD,SAC1DjN,KAAKyM,WACP7J,SAASwK,YAAY,kBC3CXC,EAAkBpM,GAChC,MAA2B,KAApBA,EAAQqM,kBAGDC,EAAkBtM,GAChC,MAA2B,QAApBA,EAAQqM,kBAGDE,EAAmBvM,GACjC,MAA2B,SAApBA,EAAQqM,kBAGDG,EAAoBxM,GAClC,MAA2B,UAApBA,EAAQqM,kBAODI,EAAmBzM,GACjC,OAAOuM,EAAmBvM,KAA8B,UAAjBA,EAAQ6E,MAAqC,aAAjB7E,EAAQ6E,MDjBpE0G,UAAU,CAAC,SAAU,OAAQ,YAC7BA,SAAS,CAACmB,aAAcC,eEFpBC,UAA0BnO,EASrCoO,cACE,YAAYC,gBAAkB/N,KAAKgO,aAAe,gBAGpD1L,aACEtC,KAAKiO,QAAUjO,KAAKiO,QAAQzL,KAAKxC,MAGnCyC,UACEoH,sBAAsB,KACpB,IAAI5I,EAAUjB,KAAKiB,QACnB,GAAIsM,EAAkBtM,GACpBA,EAAQ0B,iBAAiB,SAAU3C,KAAKiO,kBAC/BZ,EAAkBpM,GAG3B,UAAUiN,MAAM,iDAFhBjN,EAAQ0B,iBAAiB,QAAS3C,KAAKiO,YAO7CA,QAAQvM,GACAgB,OAAOuL,QAAQjO,KAAK8N,WACxBpM,EAAM0K,iBACNpM,KAAKgB,SAAShB,KAAKiB,QAAwB,uBA/BxC4M,SAAS,CACdC,QAAS/I,cCJAoJ,UAAoCzO,EAO/C0O,eACE,YAAYL,gBAAkB/N,KAAKqO,cAAgB,oEAGrD/L,aACEtC,KAAKsO,eAAiBtO,KAAKsO,eAAe9L,KAAKxC,MAC/CA,KAAKuO,sBAAwBvO,KAAKuO,sBAAsB/L,KAAKxC,MAG/DyC,UACEC,OAAO8L,eAAiB,IAAMxO,KAAKoO,SACnC1L,OAAOC,iBAAiB,WAAY3C,KAAKsO,gBACzC5L,OAAOC,iBAAiB,SAAU,KAChCD,OAAOI,oBAAoB,WAAY9C,KAAKsO,gBAC5C5L,OAAO8L,eAAiB,OAE1B9L,OAAOC,iBAAiB,0BAA2B3C,KAAKuO,uBACxD7L,OAAOC,iBAAiB,qBAAsB3C,KAAKuO,uBAGrDD,eAAeG,GACb,SAGFF,sBAAsB7M,GACfuM,QAAQjO,KAAKoO,WAChB1M,EAAM0K,kBA/BH+B,SAAS,CAACC,SAAUrJ,cCFhB2J,UAAwBhP,EAKnC+C,UACER,QAAQnB,IAAI,mBAAoBd,KAAMA,KAAK2O,cAJtCD,UAAU,CAAC,cCDPE,UAA8BlP,EAEzC4C,aACEtC,KAAK6O,WAAa7O,KAAK6O,WAAWrM,KAAKxC,MAGzCyC,UACE,IAAIxB,EAAUjB,KAAKiB,QACnBjB,KAAK6O,aACL5N,EAAQ0B,iBAAiB,QAAS3C,KAAK6O,YACvC5N,EAAQ0B,iBAAiB,SAAU3C,KAAK6O,YAG1ChM,aACE,IAAI5B,EAAUjB,KAAKiB,QACnBA,EAAQ6B,oBAAoB,QAAS9C,KAAK6O,YAC1C5N,EAAQ6B,oBAAoB,SAAU9C,KAAK6O,YAG7CC,UACE,IAAI7N,EAAUjB,KAAKiB,QACfyM,EAAmBzM,GACrBA,EAAQ0K,QAAU1K,EAAQ8N,eACjBtB,EAAoBxM,GAC7B+N,MAAMC,KAAKhO,EAAQE,SAASiE,QAAQ8J,GAAUA,EAAOC,SAAWD,EAAOE,iBAEvEnO,EAAQuJ,MAAQvJ,EAAQoO,aAIpBR,WAAWJ,GACjB,IAEIa,EAFArO,EAAUjB,KAAKiB,QAIjBqO,EADE5B,EAAmBzM,GACbA,EAAQ0K,SAAW1K,EAAQ8N,eAC1BtB,EAAoBxM,GACrB+N,MAAMC,KAAKhO,EAAQE,SAASoO,KAAKL,GAAUA,EAAOC,UAAYD,EAAOE,iBAErEnO,EAAQuJ,OAASvJ,EAAQoO,aAG/BC,EACFrO,EAAQuO,aAAa,aAAc,QAEnCvO,EAAQwO,gBAAgB,qBC9CjBC,UAAgChQ,EAc3C+C,UACEzC,KAAKgM,SAGPA,SACMhM,KAAK2P,mBAAqB3P,KAAK4P,eAAejE,QAChD3L,KAAK6P,gBAEL7P,KAAK8P,eAITD,gBACE,IAAIE,EAAc/P,KAAKgQ,eAAiBhQ,KAAKiQ,WAC7CjQ,KAAKkQ,eAAe9K,QAAQ,CAAC3B,EAAI0M,KAC3BJ,IACFtM,EAAG+G,MAAQ,IAEb/G,EAAG2M,UAAW,IAIlBN,eACE9P,KAAKkQ,eAAe9K,QAAQ,CAAC3B,EAAI0M,KAC/B1M,EAAG2M,UAAW,KApCXV,UAAU,CAAC,WAAY,WAEvBA,SAAS,CACdW,MAAOzC,eCLE0C,UAA8B5Q,EAEzC6Q,UACEvQ,KAAKiB,QAAQ8J,gBCFJyF,UAA2B9Q,EAatC+C,UdoByB,EAAC8C,EAAYpE,EAAU,MAC7B,IAAIiH,EcpBTpI,KdoBiCmB,IcpB7CsP,CAAYzQ,EAAM,CAACiB,QAASjB,KAAKiB,QAASyP,WAAW,IACrD1Q,KAAK2Q,aAGPC,OAAOrK,GACLvG,KAAK2Q,aAGPA,aACE,IAAIjM,EAEFA,EADE1E,KAAK6Q,sBACI7Q,KAAKiB,QAAQsD,iBAAiBvE,KAAK8Q,oBAEnC9Q,KAAKiB,QAAQyD,SAGF,IAApBA,EAAS+F,QACPzK,KAAK+Q,kBACO/Q,KAAKgR,cAAcC,MAAM,KAC/B7L,QAAQ8L,GAASlR,KAAKiB,QAAQ6J,UAAUC,OAAOmG,IAErDlR,KAAKmR,eACOnR,KAAKoR,WAAWH,MAAM,KAC5B7L,QAAQ8L,GAASlR,KAAKiB,QAAQ6J,UAAUG,IAAIiG,IAEtDlR,KAAKgB,SAAShB,KAAKiB,QAAwB,eAEvCjB,KAAK+Q,kBACO/Q,KAAKgR,cAAcC,MAAM,KAC/B7L,QAAQ8L,GAASlR,KAAKiB,QAAQ6J,UAAUG,IAAIiG,IAElDlR,KAAKmR,eACOnR,KAAKoR,WAAWH,MAAM,KAC5B7L,QAAQ8L,GAASlR,KAAKiB,QAAQ6J,UAAUC,OAAOmG,IAEzDlR,KAAKgB,SAAShB,KAAKiB,QAAwB,gBAAiB,CAACQ,OAAQ,CAACd,OAAQX,KAAKiB,QAASiK,MAAOxG,EAAS+F,YA/CzG+F,UAAU,CAAC,QAAS,YACpBA,SAAS,CAACa,cAAetM,cCJrBuM,UAA+B5R,EAc1C+C,UACEzC,KAAKgM,SAGPA,SACMhM,KAAKuR,kBAAoBvR,KAAKwR,cAAc7F,QAC9C3L,KAAK8P,eAEL9P,KAAK6P,gBAITA,gBACE,IAAIE,EAAc/P,KAAKgQ,eAAiBhQ,KAAKiQ,WAC7CjQ,KAAKyR,cAAcrM,QAAQ,CAAC3B,EAAI0M,KAC1BJ,IACFtM,EAAG+G,MAAQ,IAEb/G,EAAG2M,UAAW,IAIlBN,eACE9P,KAAKyR,cAAcrM,QAAQ,CAAC3B,EAAI0M,KAC9B1M,EAAG2M,UAAW,KApCXkB,UAAU,CAAC,UAAW,UAEtBA,SAAS,CACdjB,MAAOzC,eCLE8D,UAAgChS,EAO3C+C,UACE,IAAIxB,EAAUjB,KAAKiB,QAEnBA,EAAQ0Q,QAAU,KACZ3R,KAAK4R,oBACP3Q,EAAQ4Q,IAAM7R,KAAK8R,iBAEnB7Q,EAAQyI,MAAMqI,QAAU,SAZvBL,SAAS,CAACM,YAAajN,cCKnBkN,UAA2BvS,EAetCwS,aACE,GAAIlS,KAAKmS,WACP,YAAYC,QAEd,IAAIC,EAAarS,KAAKiB,QAA4B0G,GAElD,GAAkB,KAAd0K,EACF,OAAOA,EAEP,UAAUnE,gFAAgFlO,KAAKmC,6DAInGmQ,qBAEE,SADYC,SAASC,QACJxS,KAAKkS,SAGxBO,mBACE,YAAaxR,QAA4ByR,SAG3CC,eACE,IAAIC,EAAwB,CAAC1L,CAAClH,KAAKsS,gBAAiB,IACpD,IAAK,MAAMrR,UAAgBwR,aAAc,CACvC,IAAIhP,EAAKxC,EACLwC,EAAGiC,KAAK+E,OAAS,IACf+C,EAAmB/J,IAAkB,YAAXA,EAAGqC,KAC/B8M,EAAK5S,KAAKsS,gBAAgB7O,EAAGiC,MAAQjC,EAAGkI,QAC/B6B,EAAmB/J,IAAkB,SAAXA,EAAGqC,KAClCrC,EAAGkI,UACLiH,EAAK5S,KAAKsS,gBAAgB7O,EAAGiC,MAAQjC,EAAG+G,OAG1CoI,EAAK5S,KAAKsS,gBAAgB7O,EAAGiC,MAAQjC,EAAG+G,OAI9C,OAAOoI,EAGTC,oBACE,YAAYC,uBAAwB9S,KAAK+S,mBAG3CC,oBACE,YAAYC,uBAAwBjT,KAAKkT,mBAG3C5Q,aACEtC,KAAKmT,OAASnT,KAAKmT,OAAO3Q,KAAKxC,MAGjCyC,UACEoH,sBAAsB,KAEpB,IAAK0D,EADSvN,KAAKiB,SAEjB,UAAUiN,MAAM,wDAGdlO,KAAK6S,eACP7S,KAAK8O,UAEH9O,KAAKgT,eACPhT,KAAKiB,QAAQ0B,iBAAiB,SAAU3C,KAAKmT,UAKnDtQ,aACM7C,KAAKgT,eACPhT,KAAKiB,QAAQ6B,oBAAoB,SAAU9C,KAAKmT,QAIpDA,SACEC,aAAaC,WAAWrT,KAAKsS,gBAC7BtS,KAAKgB,SAAShB,KAAKiB,6BAGrBoP,MAAM3O,GACAA,GACFA,EAAM0K,iBAERpM,KAAKmT,SAGPG,KAAK5R,GACHA,EAAM0K,iBAENgH,aAAaG,QAAQvT,KAAKsS,eAAgBkB,KAAKC,UADpCzT,KAAK2S,SAC8C3S,KAAKsS,kBACnEtS,KAAKgB,SAAShB,KAAKiB,kCAGrB6N,QAAQpN,GAIN,GAHIA,GACFA,EAAM0K,iBAEJgH,aAAaM,QAAQ1T,KAAKsS,gBAAiB,CAC7C,MAAMqB,EAAYH,KAAKI,MAAMR,aAAaM,QAAQ1T,KAAKsS,iBACvD,IAAK,MAAMrR,UAAgBwR,aAAc,CACvC,IAAIhP,EAAKxC,EACLwC,EAAGiC,QAAQiO,IACTnG,EAAmB/J,IAAkB,YAAXA,EAAGqC,KAC/BrC,EAAGkI,QAAUgI,EAAUlQ,EAAGiC,MACjB8H,EAAmB/J,IAAkB,SAAXA,EAAGqC,KAClCrC,EAAG+G,OAASmJ,EAAUlQ,EAAGiC,QAC3BjC,EAAGkI,SAAU,GAGflI,EAAG+G,MAAQmJ,EAAUlQ,EAAGiC,OAI9B1F,KAAKgB,SAAShB,KAAKiB,0CAEnBjB,KAAKgB,SAAShB,KAAKiB,oCAjIhBgR,SAAS,CACdtK,GAAI5C,OACJ8N,cAAejF,QACfoF,cAAepF,eCXNiG,UAA+BnU,EAQ1CoU,gBACE,OAAI9T,KAAK+T,uBACKC,eAAe/C,MAAM,KAAKgD,IAAIC,GAAOzI,OAAO0I,WAAWD,EAAIE,SAASvI,OAAOqI,GAAOA,GAAO,GAAKA,GAAO,GAE1G,CAAC,EAAG,GAIfzR,UACEyD,EAAgBlG,KAAM,CACpB8T,UAAW9T,KAAK8T,UAChB7S,QAASjB,KAAKiB,UAIlB8B,OAAOyD,GACLxG,KAAKgB,SACHhB,KAAKiB,QACL,sBACA,CACEQ,OAAQ,CACNR,QAASjB,KAAKiB,WAMtBoT,UAAU7N,GACRxG,KAAKgB,SACHhB,KAAKiB,QACL,yBACA,CACEQ,OAAQ,CACNR,QAASjB,KAAKiB,YAvCf4S,SAAS,CAACC,UAAW/O,cCFjBuP,UAA4BlR,EAOvCX,UACE,IAAIxB,EAAUjB,KAAKiB,QAEf,yBAA0ByB,QAC3B1C,KAAKgH,QAAShH,KAAKiH,WAAaf,EAAgBlG,KAAM,CAACiB,QAAAA,EAAS6S,UAAW,KAG5E9T,KAAKwD,cAITT,OAAOyD,GACDA,EAAM7F,SAAWX,KAAKiB,SAAWuF,EAAMC,iBACzCzG,KAAKwD,cACDxD,KAAKiH,WACPjH,KAAKiH,cCzBb,MAAMsN,EAAkB,mBAAoB3R,SAAS4R,gBAAgB9K,MACrE,IAAI+K,iBAEkBC,EAAgBzT,GAAkB0T,SAACA,EAAW,SAAZC,MAAsBA,EAAQ,QAA9BC,OAAuCA,EAAS,WAAoC,IAC1H,UAAZF,GAAyBJ,SAM/BO,iBACE,MAAMC,SAACA,gBAAyE,yBAC5EN,IAGJA,GAAmB,EACnBM,KAXQC,GAER/T,EAAQgU,eAAe,CAACN,SAAAA,EAAUC,MAAAA,EAAOC,OAAAA,aAY3BK,EAAgBC,GAC9B,IAAKA,EACH,YAEF,MAAMC,EAAYC,iBAAiBF,GAAMC,UAGzC,MAFmC,YAAdA,GAAyC,WAAdA,GAE5BD,EAAKhL,cAAgBgL,EAAKjL,aACrCiL,EAGFD,EAAgBC,EAAKG,gBAAkB1S,SAAS2S,WC1B5CC,UAAgC9V,EAA7CE,kCAmBEI,aAAoC,KAEpC6R,UACE,YAAY4D,YAAczV,KAAK0V,SAAY1V,KAAKiB,QAA6B4Q,IAG/E8D,aACE,YAAYC,eAAiB5V,KAAK6V,YAAe7V,KAAKiB,QAA6B6U,OAGrFC,YACE,YAAYC,cAAgBhW,KAAKiW,WAAcjW,KAAKiB,QAA6B8U,MAGnFG,qBACE,YAAYC,cAAgBnW,KAAKoW,WAAa,wBAGhDC,qBACE,YAAYC,cAAgBtW,KAAKuW,WAAa,uBAGhDjU,aACEtC,KAAKwW,KAAOxW,KAAKwW,KAAKhU,KAAKxC,MAC3BA,KAAKyW,MAAQzW,KAAKyW,MAAMjU,KAAKxC,MAG/ByC,WAGA+T,OACE,IAAIvV,EAAUjB,KAAKiB,QACnB,GAAIjB,KAAK0W,QACP,OAEF1W,KAAK0W,QAAU9T,SAASuB,cAAc,UAEtC,IAAIwS,EAAQ/T,SAASuB,cAAc,OACnCwS,EAAMC,UAAY5W,KAAKqW,eACvBM,EAAM9E,IAAM7R,KAAK6R,IACjB8E,EAAMb,OAAS9V,KAAK2V,OACpBgB,EAAMZ,MAAQ/V,KAAK+V,MACnB/V,KAAK0W,QAAQG,YAAYF,GAEzB1V,EAAQ6V,sBAAsB,WAAY9W,KAAK0W,SAC/CK,EAAeC,eAAehX,KAAK0W,SACnC1W,KAAK0W,QAAQE,UAAY5W,KAAKkW,eAC9BlW,KAAK0W,QAAQO,YACbvC,EAAgB1U,KAAK0W,QAAS,CAAC/B,SAAU,SAAUC,MAAO,QAAQjQ,MAAM,IAAM3E,KAAK0W,QAASzB,gBAAe,IAC3GjV,KAAK0W,QAAQ/T,iBAAiB,QAAS3C,KAAKyW,OAC5CzW,KAAK0W,QAAQ/T,iBAAiB,SAAU3C,KAAKyW,OAC7CzW,KAAK0W,QAAQ/T,iBAAiB,QAAS3C,KAAKyW,OAG9CA,QACMzW,KAAK0W,UACP1W,KAAK0W,QAAQD,QACbzW,KAAK0W,QAAQ3L,SACb/K,KAAK0W,QAAU,KACfhC,EAAgB1U,KAAKiB,QAAS,CAAC0T,SAAU,SAAUC,MAAO,QAAQjQ,MAAM,IAAM3E,KAAKiB,QAAQgU,gBAAe,MA5EvGO,SAAS,CACd3D,IAAK9M,OACL4Q,OAAQ5Q,OACRgR,MAAOhR,QAEFyQ,UAAU,CAAC,QAAS,eCThB0B,UAA6CxX,EAWxD4C,aACEtC,KAAKmX,aAAenX,KAAKmX,aAAa3U,KAAKxC,MAG7CyC,UACEzC,KAAKoX,aAAahS,QAAS3B,GAAOA,EAAGd,iBAAiB,SAAU3C,KAAKmX,eAGvEtU,aACE7C,KAAKoX,aAAahS,QAAS3B,GAAOA,EAAGX,oBAAoB,SAAU9C,KAAKmX,eAG1EA,aAAazV,GACX,IAAI2V,EAAerX,KAAKoX,aAAaE,OAAO,CAACC,EAAe9T,IAAOA,EAAGkI,QAAU4L,EAAgB,EAAIA,EAAe,GAC/G5W,EAASe,EAAMf,OACf0W,EAAerX,KAAKwL,UACtB9J,EAAM0K,iBACNzL,EAAOgL,SAAU,EACjB3L,KAAKgB,SAASL,EAAQ,UACtBX,KAAKgB,SAASL,EAAQ,8BAClBX,KAAKwX,iBACPxX,KAAKyX,YAAYrT,UAAYpE,KAAKgO,gBAGpChO,KAAKgB,SAASL,EAAQ,+BAClBX,KAAKwX,iBACPxX,KAAKyX,YAAYrT,UAAY,MAnC5B8S,UAAU,CAAC,QAAS,SACpBA,SAAS,CAAC9L,IAAKK,OAAQqC,QAAS/I,cCH5B2S,UAA6BhY,EAexCiY,mBACE,YAAYC,wBAA0B5X,KAAK6X,kBAAoB,gBAGjEC,iBACE,YAAYC,mBAAqB/X,KAAKgY,gBAAkB,YAG1DvV,UACEzC,KAAKiY,iBAGPhN,IAAIvJ,GACEA,GACFA,EAAM0K,iBAGR,MAAM8L,EAAUlY,KAAKmY,eAAe/T,UAAUgU,QAAQ,cAAepY,KAAKqY,cAC1ErY,KAAKsY,aAAaC,mBAAmBvY,KAAK8X,WAAYI,GAGxDnN,OAAOrJ,GACLA,EAAM0K,iBACN,MAAMoM,EAA+B9W,EAAMf,OAAuB8X,YAAYzY,KAAK2X,gBACnF,GAAe,MAAXa,EACF,UAAUtK,oGAAoGlO,KAAK2X,gBAGrH,GAAkC,SAA9Ba,EAAQ5Q,QAAQ8Q,UAClBF,EAAQzN,aACH,CACLyN,EAAQ9O,MAAMqI,QAAU,OACxB,IAAI4G,EAAeH,EAAQI,cAAc,2BACzC,GAAoB,MAAhBD,EACF,UAAUzK,8HAGZyK,EAAanO,MAAQ,KAIzB6N,aACE,WAAWQ,MAAOC,UAAUrY,WAAasY,KAAKC,SAASvY,WAAWwY,MAAM,GAGlEhB,iBAGN,GAFejY,KAAKmY,eAAe/T,UAEtB8U,QAAQ,cACnB,UAAUhL,MAAM,qIA/DbwJ,UAAU,CAAC,SAAU,YACrBA,SAAS,CACdI,WAAY/S,OACZ4S,aAAc5S,cCJLoU,UAAkCzZ,EAU7C4C,aACEtC,KAAKoZ,oBAAsBpZ,KAAKoZ,oBAAoB5W,KAAKxC,MAG3DyC,UACEzC,KAAKqZ,gBAAgBjU,QAAS3B,GAAOA,EAAGd,iBAAiB,SAAU3C,KAAKoZ,sBAG1EvW,aACE7C,KAAKqZ,gBAAgBjU,QAAS3B,GAAOA,EAAGX,oBAAoB,SAAU9C,KAAKoZ,sBAGrEE,oBACN,IAAIC,EAAS,IAAIC,IAAIxZ,KAAKqZ,gBAAgBpF,IAAIxQ,GAAMA,EAAG+G,QACvD,OAAO+O,EAAOE,IAAI,KAAsB,GAAfF,EAAOG,KAG1BN,sBACN,IAAInY,EAAUjB,KAAKiB,QACfjB,KAAKsZ,qBACPtZ,KAAKgB,SAASC,EAAS,0BACnBjB,KAAK4K,eACP5K,KAAKqZ,gBAAgBjU,QAAQ3B,GAAMA,EAAGqH,UAAUC,OAAO/K,KAAKgL,eAG9DhL,KAAKgB,SAASC,EAAS,6BACnBjB,KAAK4K,eACP5K,KAAKqZ,gBAAgBjU,QAAQ3B,GAAMA,EAAGqH,UAAUG,IAAIjL,KAAKgL,eAnCxDmO,UAAU,CAAC,YACXA,UAAU,CAAC,eCHPQ,UAA+Bja,EAM1Cka,KAAKlY,GACCA,GACFA,EAAM0K,iBAERpM,KAAK6Z,eAAe/T,KAAO,OAG7BgU,KAAKpY,GACCA,GACFA,EAAM0K,iBAERpM,KAAK6Z,eAAe/T,KAAO,WAG7BkG,OAAOtK,GACDA,GACFA,EAAM0K,iBAEyB,aAA7BpM,KAAK6Z,eAAe/T,KACtB9F,KAAK4Z,OAEL5Z,KAAK8Z,QAzBFH,UAAU,CAAC,kBCKPI,UAA0Cra,EAErD4C,aACEtC,KAAKga,gBAAkBha,KAAKga,gBAAgBxX,KAAKxC,MAGnDyC,UACEC,OAAOC,iBAAiB,UAAW3C,KAAKga,iBAG1CnX,aACEH,OAAOI,oBAAoB,UAAW9C,KAAKga,iBAG7CA,gBAAgBlM,GACd,IAAI8E,EAAO9E,EAAQ8E,KACfA,EAAKqH,eAAe,SAAyB,gBAAdrH,EAAKlN,MAA0BkN,EAAKqH,eAAe,WACpFja,KAAK2J,OAAOiJ,EAAK9J,QAIrBa,OAAOb,GACJ9I,KAAKiB,QAA8ByI,MAAMZ,UAAYA,aAK7CoR,UAAuCxa,EAOlD+C,UxB1ByB,IAAC8C,EAAYpE,EAChCmG,EwB2BA5E,OAAOpC,OAASoC,OAAOyX,MACzB1R,EAAgBzI,MxB7BkBmB,EwB8BhB,GxB3Ba,QAAhCmG,GAHuB/B,EwB8BVvF,MxB5BiBJ,YACbwa,iBAA8B,IAAP9S,GAAyBA,EAAGlC,QAASiV,IAI1E,GAHoB,iBAATA,IACP9U,EAAW8U,GAAQpR,EAAS1D,EAAW8U,GAAOlZ,MAAAA,OAAyC,EAASA,EAAQgI,OAExF,iBAATkR,EAAmB,CAC1B,MAAM3U,KAAEA,EAAIyD,KAAEA,GAASkR,EACvB,IAAK3U,EACD,OACJH,EAAWG,GAAQuD,EAAS1D,EAAWG,GAAOyD,IAAShI,MAAAA,OAAyC,EAASA,EAAQgI,UwBoBvHnJ,KAAKsa,cAMTxQ,aAAajB,GACX7I,KAAKsa,aAGPA,aACE,IAAIzR,EAAmC,CAACnD,KAAM,cAAeoD,OAAQ9I,KAAKua,aAC1E7X,OAAO8X,OAAOC,YACZ5R,EACA,KAIJ0R,YACE,MAAMhF,EAAO3S,SAAS2S,KAChBtR,EAAOrB,SAAS4R,gBAGtB,OAAOuE,KAAK3N,IAAImK,EAAKpL,aAAcoL,EAAKtL,aAAchG,EAAKiG,aAAcjG,EAAKkG,aAAclG,EAAKgG,eAjC5FiQ,YAAY,CAAC,oBCnCTQ,UAA4Bhb,EAEvCib,eACE3a,KAAK4a,QAAQ5a,KAAKiB,SAGpB2Z,QAAQ3Z,aACNA,EAAQ2G,QAAQrC,qBAAatE,EAAQ2G,QAAQrC,qBAAYsV,WAAW,IAAIC,eAAgB9a,KAAKmC,kBAAoB,KAAM,MAAO,GAC5F,IAA9BlB,EAAQ2G,QAAQrC,mBAEXtE,EAAQ2G,QAAQrC,WAGzB,IAAIwV,EAAgC,IAAID,eAAgB9a,KAAKmC,wBAA0B,KACvFlB,EAAQ2G,QAAQjH,iBAASM,EAAQ2G,QAAQjH,iBAAQka,WAAWE,EAA+B,MAAO,UAC3F9Z,EAAQ2G,QAAQoT,KAAahb,KAAKmC,sBACX,IAA1BlB,EAAQ2G,QAAQjH,eAEXM,EAAQ2G,QAAQjH,OAGzBM,EAAQ2G,QAAQqT,iBAASha,EAAQ2G,QAAQjH,iBAAQka,WAAWE,EAA+B,MAAO,UAC3F9Z,EAAQ2G,QAAQoT,KAAahb,KAAKmC,sBACX,IAA1BlB,EAAQ2G,QAAQqT,eAEXha,EAAQ2G,QAAQqT,OAIzB,IAAI1B,EAASvZ,KAAKJ,YAAY2Z,OAC1BA,GACFlY,OAAO6Z,KAAK3B,GAAQnU,QAAQ8O,UAAcjT,EAAQ2G,QAAQoT,KAAahb,KAAKmC,cAAc+R,aAI5F,IAAIiH,EAAUnb,KAAKJ,YAAYub,QAC3BA,GACF9Z,OAAO6Z,KAAKC,GAAS/V,QAAQ8O,UAAcjT,EAAQ2G,QAAQoT,KAAahb,KAAKmC,cAAc+R,oBCrCpFkH,UAAkCV,EAe7CjY,UACEoH,sBAAsB,KAEpB6K,EACE1U,KAAKiB,QACL,CACE0T,SAAU3U,KAAKqb,iBAAmBrb,KAAKsb,cAAgB,SACvD1G,MAAO5U,KAAKub,cAAgBvb,KAAKwb,WAAa,SAC9C3G,OAAQ7U,KAAKyb,eAAiBzb,KAAK0b,YAAc,WAEnD/W,MAAM,IAAM3E,KAAKiB,QAAQgU,kBAC3BjV,KAAK2a,kBAxBFS,SAAS,CACdzG,SAAU5P,OACV6P,MAAO7P,OACP8P,OAAQ9P,cCLC4W,WAAiCjc,EAS5Ckc,OAAOla,GAIL,IACIf,EAJAe,GACFA,EAAM0K,iBAKNzL,EADU,aAFDX,KAAK6b,aAAe7b,KAAK8b,UAAY,YAGrClZ,SAAS2S,KAETL,EAAgBlV,KAAKiB,SAElB,MAAVN,GAGJ+T,EAAgB/T,EAAS,CAACgU,SAAU,SAAUC,MAAO,QAAQjQ,MAAM,IAAMhE,EAAQsU,gBAAe,KArB3F0G,UAAS,CACdI,KAAMhX,cCHGiX,WAA2Btc,EAiBtCkc,SACE,IAAIjb,EAASiC,SAASgW,cAAc5Y,KAAKwE,eACpC7D,EAKL+T,EACE/T,EACA,CACEgU,SAAU3U,KAAKqb,iBAAmBrb,KAAKsb,cAAgB,SACvD1G,MAAO5U,KAAKub,cAAgBvb,KAAKwb,WAAa,SAC9C3G,OAAQ7U,KAAKyb,eAAiBzb,KAAK0b,YAAc,WAEnD/W,MAAM,IAAMhE,EAAQsU,kBAXpBhT,QAAQga,mCAAmCjc,KAAKwE,mBAlB7CwX,UAAS,CACd/W,SAAUF,OACV4P,SAAU5P,OACV6P,MAAO7P,OACP8P,OAAQ9P,cCNCmX,WAA8Bxc,EASzCkc,OAAOla,GAIL,IACIf,EAJAe,GACFA,EAAM0K,iBAKNzL,EADU,aAFDX,KAAK6b,aAAe7b,KAAK8b,UAAY,YAGrClZ,SAAS2S,KAETL,EAAgBlV,KAAKiB,SAElB,MAAVN,GAGJ+T,EAAgB/T,EAAS,CAACgU,SAAU,SAAUC,MAAO,UAAUjQ,MAAM,IAAMhE,EAAQsU,gBAAe,KArB7FiH,UAAS,CACdH,KAAMhX,cCJGoX,WAA+Bzc,EAA5CE,kCAKEI,aAAgD,KAEhDyC,UACEoH,sBAAsB,KAEpB7J,KAAKoc,QAAU7S,WAAW,IAAMvJ,KAAKiB,QAAQ8J,SAA8B,IAApB/K,KAAKqc,gBAIhExZ,aACM7C,KAAKoc,SACP9S,aAAatJ,KAAKoc,UAdfD,UAAS,CAACG,QAAS7Q,cCFf8Q,WAAyB7c,EAAtCE,kCAYEI,mBAAuC,KAEvCwc,YACE,YAAYX,aAAe7b,KAAK8b,UAAY,MAG9CW,qBAGE,GAA2B,OAAvBzc,KAAK0c,cAKT,OADA1c,KAAK0c,cAAgB9Z,SAASuB,cAAc,OACpCnE,KAAKwc,OACX,IAAK,MACHxc,KAAKiB,QAAQ6V,sBAAsB,cAAe9W,KAAK0c,eACvD,MACF,IAAK,SACH1c,KAAKiB,QAAQ6V,sBAAsB,WAAY9W,KAAK0c,gBAK1Dja,UACE,IAAIxB,EAAUjB,KAAKiB,QACnBjB,KAAKyc,qBAEY,IAAInW,qBAAqBC,IACxCA,EAAQnB,QAAQoB,IACVA,EAAM7F,SAAWX,KAAK0c,gBAGM,IAA5BlW,EAAMmW,kBACR1b,EAAQ6J,UAAUG,IAAIjL,KAAK4c,cAAgB5c,KAAK6c,WAAa,SACxB,IAA5BrW,EAAMmW,mBACf1b,EAAQ6J,UAAUC,OAAO/K,KAAK4c,cAAgB5c,KAAK6c,WAAa,aAInE,CACD/I,UAAW,CAAC,EAAG,KAER9M,QAAQhH,KAAK0c,gBArDjBH,WAAU,CAAC,SACXA,UAAS,CACdR,KAAMhX,cCJG+X,WAA2BpC,EAUtCjY,UACE,IAAKzC,KAAK+c,eACR,UAAU7O,MAAM,oCAGlBrE,sBAAsB,KAChB7J,KAAKgd,mBAAqBhd,KAAKid,gBACjCjd,KAAKkd,YAKXA,QAAQxb,GACFA,GACFA,EAAM0K,iBAER,IAAInL,EAAUjB,KAAKiB,QACfkc,EAAcva,SAASgW,cAAc5Y,KAAKod,aAE9C,GAAmB,MAAfD,EAEF,YADAnd,KAAKgB,SAASC,EAAS,kBAIzB,IAAIkM,EAAOlM,EAAQoc,WAAU,GAG7B,OAFArd,KAAK4a,QAAQzN,GAELnN,KAAKsd,aACX,IAAK,cACL,IAAK,YACL,IAAK,WACL,IAAK,aACHH,EAAY5E,mBAAmBvY,KAAKsd,YAAanQ,EAAKoQ,WACtD,MACF,IAAK,eACHJ,EAAYI,UAAYpQ,EAAKoQ,UAC7B,MACF,IAAK,eACHJ,EAAY/Y,UAAY+I,EAAKoQ,UAC7B,MACF,IAAK,UACHJ,EAAY5E,mBAAmB,aAAcpL,EAAKoQ,WAClD,MACF,IAAK,SACHJ,EAAY5E,mBAAmB,YAAapL,EAAKoQ,WACjD,MACF,QACE,UAAUrP,MAAM,oCAGpBjN,EAAQ8J,UA1DH+R,UAAS,CAACnc,OAAQoE,OAAQyY,OAAQzY,OAAQ0Y,UAAW7P,eCCjD8P,WAA8Bhe,EA4BzC+C,UACE,IAAKzC,KAAK2d,cACR,UAAUzP,MAAM,oDAGdlO,KAAK4d,oBAAsB5d,KAAK6d,qBpCHhB,EAACtY,EAAYpE,EAAU,MAC1B,IAAI4G,EoCGV/H,KpCH+BmB,IoCGxC2c,GAGE9d,KAAK+d,mBAAqB/d,KAAKge,gBtCnCR,EAACzY,EAAYpE,EAAU,MAClD,MAAMiG,YAAEA,EAAWxF,cAAEA,EAAauF,OAAEA,EAAMxB,YAAEA,GAAgBtE,OAAOC,OAAO,GAAI2E,EAAgB9E,GACxF8c,EAAWvc,IACb,MAAMyE,GAAiBhF,MAAAA,OAAyC,EAASA,EAAQF,UAAYsE,EAAWtE,QACxG,KAAIkF,EAAc+X,SAASxc,EAAMf,UFqBlC,SAA6B8C,GAChC,MAAM0a,EAAO1a,EAAG2a,wBACVC,EAAgB3b,OAAOkG,aAAehG,SAAS4R,gBAAgBtK,aAC/DoU,EAAe5b,OAAOiG,YAAc/F,SAAS4R,gBAAgB+J,YAGnE,OAFoBJ,EAAKhE,KAAOkE,GAAmBF,EAAKhE,IAAMgE,EAAKrV,QAAW,GAC3DqV,EAAKK,MAAQF,GAAkBH,EAAKK,KAAOL,EAAKnV,OAAU,EE1B3ByV,CAAoBtY,IAAkBiB,KAIhF7B,EAAWmZ,cACXnZ,EAAWmZ,aAAahd,GAGxBE,GAAe,CACf,MAAMV,EAAYuE,EAAiB,gBAAiBF,EAAYI,GAC1DgZ,EAAoB9Y,EAAc3E,EAAWQ,EAAO,CAAE6D,WAAAA,IAC5DY,EAAcvE,cAAc+c,KAe9BvY,EAAuBb,EAAW1C,WAAWL,KAAK+C,GACxDlE,OAAOC,OAAOiE,EAAY,CACtB2B,aARAC,MAAAA,GAAgDA,EAAO/B,QAAQ1D,IAC3DgB,OAAOI,oBAAoBpB,EAAOuc,GAAS,KAS3C7X,OAfJe,MAAAA,GAAgDA,EAAO/B,QAAQ1D,IAC3DgB,OAAOC,iBAAiBjB,EAAOuc,GAAS,MsCgB9CW,CAAgB5e,MAGlB6J,sBAAsB,KAChB7J,KAAK6e,iBAEL7e,KAAK8e,cAAc1Z,QADK,OAAtBpF,KAAK+e,aACqBpe,GAAWX,KAAKgf,UAAUre,GAE1BA,GAAWX,KAAKif,WAAWte,MAM/D+d,eACE1e,KAAK8e,cAAc1Z,QAASzE,IACtBX,KAAKkf,kBAAkBve,KACzBX,KAAKmf,oBAAoBxe,GACzBX,KAAKof,cAAcze,MAKzB0e,aACE,GAAIrf,KAAK4d,mBACP,OAAQ5d,KAAKsf,iBACX,IAAK,KACHtf,KAAKuf,KACL,MACF,IAAK,MACHvf,KAAKwf,MACL,MACF,IAAK,SACHxf,KAAKgM,SAIX,MAAO,GAGTyT,aACE,GAAIzf,KAAK6d,mBACP,OAAQ7d,KAAK0f,iBACX,IAAK,KACH1f,KAAKuf,KACL,MACF,IAAK,MACHvf,KAAKwf,MACL,MACF,IAAK,SACHxf,KAAKgM,SAIX,MAAO,GAGTuT,GAAG7d,GACD1B,KAAK8e,cAAc1Z,QAASzE,IAC1BX,KAAKmf,oBAAoBxe,GACzBX,KAAKgf,UAAUre,KAInB6e,IAAI9d,GACF1B,KAAK8e,cAAc1Z,QAASzE,IAC1BX,KAAKmf,oBAAoBxe,GACzBX,KAAKif,WAAWte,KAIpBqL,OAAOtK,GACL1B,KAAK8e,cAAc1Z,QAASzE,IAC1BX,KAAKmf,oBAAoBxe,GACzBX,KAAKof,cAAcze,KAIfue,kBAAkBzb,GACxB,MAA6B,QAAtBA,EAAGmE,QAAQ+X,QAGZR,oBAAoB1b,GACtBzD,KAAKkf,kBAAkBzb,UAClBA,EAAGmE,QAAQ+X,QAElBlc,EAAGmE,QAAQ+X,QAAU,OAIjBP,cAAc3b,GACNzD,KAAK4f,WAAW3O,MAAM,KAC5B7L,QAAS8L,GAAUzN,EAAGqH,UAAUkB,OAAOkF,IAGzC8N,UAAUvb,GACFzD,KAAK4f,WAAW3O,MAAM,KAC5B7L,QAAS8L,GAAUzN,EAAGqH,UAAUkB,OAAOkF,GAAO,IAGhD+N,WAAWxb,GACHzD,KAAK4f,WAAW3O,MAAM,KAC5B7L,QAAS8L,GAAUzN,EAAGqH,UAAUkB,OAAOkF,GAAO,KA1IjDwM,WAAU,CAAC,UACXA,UAAS,CACdmC,MAAO9a,OACPsa,WAAYta,OACZ0a,WAAY1a,OACZ+a,UAAWlS,QACXmS,QAAShb,cCTAib,WAA+BtgB,EAc1CsM,OAAOtK,GACDA,GACFA,EAAM0K,iBAER,IACI6T,EADQjgB,KAAKkgB,YACIrO,IACL,MAAZoO,GAAoBA,IAAajgB,KAAKmgB,UACxCngB,KAAKogB,UAELpgB,KAAKmT,SAITkN,OAAO3e,GACDA,GACFA,EAAM0K,iBAERpM,KAAKogB,UAGP/P,MAAM3O,GACAA,GACFA,EAAM0K,iBAERpM,KAAKmT,SAGCiN,UACN,IAAIE,EAAQtgB,KAAKkgB,YACblgB,KAAKugB,yBACPD,EAAMlc,UAAYpE,KAAKwgB,qBAEzBF,EAAMzO,IAAM7R,KAAKmgB,UAGXhN,SACN,IAAImN,EAAQtgB,KAAKkgB,YACjBI,EAAMzO,IAAM,GACZyO,EAAMlc,UAAY,GAGZ8b,YACN,IAAII,EAAQ1d,SAAS6d,kBAAkBzgB,KAAK0gB,gBAC5C,GAAa,MAATJ,EACF,UAAUpS,uCAAuClO,KAAK0gB,iBAExD,GC/DyB,eD+DPJ,EC/DLhT,SDgEX,UAAUY,iCAAiClO,KAAK0gB,iBAEhD,OAAOJ,EAIHH,UACN,IAAIlf,EAAUjB,KAAKiB,QACnB,GAAIjB,KAAKyV,YACP,YAAYC,YACHrI,EAAkBpM,GAC3B,OAAOA,EAAQuR,KAEf,UAAUtE,MAAM,oCAxEb8R,UAAS,CACdW,QAAS5b,OACT8M,IAAK9M,OACL6b,eAAgB7b,cEPP8b,WAA4BnhB,EAevC4C,aACEtC,KAAK8gB,gBAAkB9gB,KAAK8gB,gBAAgBte,KAAKxC,MAGnDyC,UACEzC,KAAK8gB,kBACL9gB,KAAKsK,YAAY3H,iBAAiB,QAAS3C,KAAK8gB,iBAGlDje,aACE7C,KAAKsK,YAAYxH,oBAAoB,QAAS9C,KAAK8gB,iBAGrDA,kBACE,IAAIC,EAAY,EAEZC,EADgBhhB,KAAKsK,YAAYE,MACTyW,MAAM,QAClCF,EAAaC,GAAWA,EAAQvW,QAAW,EAC3CzK,KAAK0K,aAAaC,UAAYoW,EAAUtgB,WACpCT,KAAK4K,gBACH5K,KAAKkhB,aAAaH,GACpB/gB,KAAK0K,aAAaI,UAAUC,OAAO/K,KAAKgL,YAExChL,KAAK0K,aAAaI,UAAUG,IAAIjL,KAAKgL,aAK3CkW,aAAahW,GACX,IAAIC,EAAM,EACNC,EAAM,MAUV,OARIpL,KAAKqL,cACPF,EAAMnL,KAAKsL,UAGTtL,KAAKuL,cACPH,EAAMpL,KAAKwL,UAGNN,GAASC,GAAOD,GAASE,GArD3ByV,WAAU,CAAC,QAAS,UACpBA,UAAS,CAAC1V,IAAKM,OAAQL,IAAKK,QAC5BoV,WAAU,CAAC"}