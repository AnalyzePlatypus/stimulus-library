{"version":3,"file":"stimulus-library.umd.js","sources":["../src/base_controller.ts","../src/async_block_controller.ts","../src/auto_submit_form_controller.ts","../node_modules/stimulus-use/dist/support/index.js","../node_modules/stimulus-use/dist/use-intersection/use-intersection.js","../node_modules/stimulus-use/dist/use-click-outside/use-click-outside.js","../node_modules/stimulus-use/dist/stimulus_use.js","../node_modules/stimulus-use/dist/use-hover/use-hover.js","../node_modules/stimulus-use/dist/use-mutation/use-mutation.js","../node_modules/stimulus-use/dist/use-window-resize/use-window-resize.js","../node_modules/stimulus-use/dist/use-debounce/use-debounce.js","../src/autosize_controller.ts","../src/char_count_controller.ts","../src/checkbox_select_all_controller.ts","../src/clipboard_controller.ts","../src/confirm_navigation_controller.ts","../src/debug_controller.ts","../src/detect_dirty_controller.ts","../src/disable_inputs_controller.ts","../src/dismissable_controller.ts","../src/empty_dom_controller.ts","../src/enable_inputs_controller.ts","../src/fallback_image_controller.ts","../src/utilities/elements.ts","../src/form_save_controller.ts","../src/lazy_block_controller.ts","../src/limited_selection_checkboxes_controller.ts","../src/nested_form_controller.ts","../src/password_confirm_controller.ts","../src/password_peek_controller.ts","../src/responsive_iframe_controller.ts","../src/utilities/scroll.ts","../src/utilities/ephemeral_controller.ts","../src/scroll_into_focus_controller.ts","../src/scroll_to_bottom_controller.ts","../src/scroll_to_controller.ts","../src/scroll_to_top_controller.ts","../src/self_destruct_controller.ts","../src/teleport_controller.ts","../src/toggle_class_controller.ts","../src/turbo_frame_rc_controller.ts","../src/utilities/turbo.ts","../src/word_count_controller.ts"],"sourcesContent":["import {Context, Controller} from \"stimulus\";\r\n\r\nexport class BaseController extends Controller {\r\n\r\n  constructor(context: Context) {\r\n    super(context);\r\n    return new Proxy(this, {\r\n      get: (obj, prop) => {\r\n        let returnVal = Reflect.get(obj, prop);\r\n        let self = this;\r\n        if (logProperty(prop.toString())) {\r\n          if (typeof returnVal == \"function\") {\r\n            return new Proxy(returnVal, {\r\n              apply(target: any, thisArg: any, argArray?: any): any {\r\n                self.log(prop.toString(), {\r\n                  args: argArray,\r\n                });\r\n                return Reflect.apply(target, thisArg, argArray);\r\n              },\r\n            });\r\n          } else {\r\n            this.log(prop.toString());\r\n          }\r\n        }\r\n        return returnVal;\r\n      },\r\n    });\r\n  }\r\n\r\n  dispatch(element: HTMLElement, eventName: string, options: CustomEventInit = {bubbles: true, cancelable: true, detail: {target: element}}) {\r\n    let event = new CustomEvent(eventName, options);\r\n    element.dispatchEvent(event);\r\n  }\r\n\r\n  log(functionName: string, args: {} = {}): void {\r\n    // @ts-ignore\r\n    if (!this.application.debug) {\r\n      return;\r\n    }\r\n    let logger = console;\r\n    logger.groupCollapsed(`%c${this.identifier} %c#${functionName}`, \"color: #3B82F6\", \"color: unset\");\r\n    logger.log({\r\n      element: this.element,\r\n      ...args,\r\n    });\r\n    logger.groupEnd();\r\n  }\r\n\r\n}\r\n\r\nfunction logProperty(prop: string): boolean {\r\n  switch (prop) {\r\n    case \"application\":\r\n    case \"element\":\r\n    case \"constructor\":\r\n    case \"initialize\":\r\n    case \"log\":\r\n    case \"data\":\r\n    case \"valueDescriptorMap\":\r\n    case \"identifier\":\r\n      return false;\r\n  }\r\n\r\n  if (/^_.*?$/.test(prop)) {\r\n    return false;\r\n  }\r\n  if (/^.*?Target(s)?$/.test(prop)) {\r\n    return false;\r\n  }\r\n  if (/^.*?Value$/.test(prop)) {\r\n    return false;\r\n  }\r\n  if (/^.*?ValueChanged$/.test(prop)) {\r\n    return false;\r\n  }\r\n  if (/^.*?Class$/.test(prop)) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n","import {BaseController} from \"./base_controller\";\n\nexport class AsyncBlockController extends BaseController {\n  static targets = [\"replace\"];\n  static values = {endpoint: String};\n\n  declare readonly replaceTarget: HTMLElement;\n  declare readonly hasReplaceTarget: boolean;\n  declare readonly endpointValue: string;\n\n\n  // This is a simple controller to load a block of content when the page loads.\n  // It should be used to give a quick initial response before calling out to an\n  // an AJAX endpoint to do some expensive work.\n  connect() {\n    this.loadContent();\n  }\n\n  loadContent() {\n    let el = (this.hasReplaceTarget ? this.replaceTarget : this.element) as HTMLElement;\n    fetch(this.endpointValue)\n    .then((response) => response.text())\n    .then((html) => {\n      let newEl = document.createElement(\"div\");\n      newEl.innerHTML = html;\n      el.replaceWith(newEl);\n\n      // Trigger event to show block has loaded\n      let event = new CustomEvent(\"ajax:success\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    })\n    .catch(err => {\n      el.replaceWith(\"Sorry, this content failed to load\");\n\n      let event = new CustomEvent(\"ajax:error\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    })\n    .finally(() => {\n      let event = new CustomEvent(\"ajax:complete\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    });\n  }\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class AutoSubmitFormController extends BaseController {\n\n  private boundHandler = this.handler.bind(this);\n\n  connect() {\n    (this.element as HTMLElement).querySelectorAll(\"input, select, textarea\").forEach(el => el.addEventListener(\"change\", this.boundHandler));\n  }\n\n  disconnect() {\n    (this.element as HTMLElement).querySelectorAll(\"input, select, textarea\").forEach(el => el.removeEventListener(\"change\", this.boundHandler));\n  }\n\n  private handler(e: Event) {\n    // this.element.submit()\n    // Moved to this to support remote forms and CSRF properly\n    this.element.dispatchEvent(\n      new CustomEvent(\"submit\", {\n        bubbles: true,\n        cancelable: true,\n      }),\n    );\n  }\n}\n","export const method = (controller, methodName) => {\n    const method = controller[methodName];\n    if (typeof method == 'function') {\n        return method;\n    }\n    else {\n        return (...args) => { };\n    }\n};\nexport const composeEventName = (name, controller, eventPrefix) => {\n    let composedName = name;\n    if (eventPrefix === true) {\n        composedName = `${controller.identifier}:${name}`;\n    }\n    else if (typeof eventPrefix === 'string') {\n        composedName = `${eventPrefix}:${name}`;\n    }\n    return composedName;\n};\nexport const extendedEvent = (type, event, detail) => {\n    const { bubbles, cancelable, composed } = event || { bubbles: true, cancelable: true, composed: true };\n    if (event) {\n        Object.assign(detail, { originalEvent: event });\n    }\n    const customEvent = new CustomEvent(type, {\n        bubbles,\n        cancelable,\n        composed,\n        detail,\n    });\n    return customEvent;\n};\nexport function isElementInViewport(el) {\n    const rect = el.getBoundingClientRect();\n    const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n    const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n    const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n    const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) >= 0);\n    return (vertInView && horInView);\n}\n//# sourceMappingURL=index.js.map","import { method, extendedEvent, composeEventName } from '../support/index';\nconst defaultOptions = {\n    dispatchEvent: true,\n    eventPrefix: true,\n};\nexport const useIntersection = (controller, options = {}) => {\n    const { dispatchEvent, eventPrefix } = Object.assign({}, defaultOptions, options);\n    const targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n    const callback = (entries) => {\n        const [entry] = entries;\n        if (entry.isIntersecting) {\n            dispatchAppear(entry);\n        }\n        else if (controller.isVisible) {\n            dispatchDisappear(entry);\n        }\n    };\n    const dispatchAppear = (entry) => {\n        controller.isVisible = true;\n        method(controller, 'appear').call(controller, entry);\n        // emit a custom \"appear\" event\n        if (dispatchEvent) {\n            const eventName = composeEventName('appear', controller, eventPrefix);\n            const appearEvent = extendedEvent(eventName, null, { controller, entry });\n            targetElement.dispatchEvent(appearEvent);\n        }\n    };\n    const dispatchDisappear = (entry) => {\n        controller.isVisible = false;\n        method(controller, 'disappear').call(controller, entry);\n        // emit a custom \"disappear\" event\n        if (dispatchEvent) {\n            const eventName = composeEventName('disappear', controller, eventPrefix);\n            const disappearEvent = extendedEvent(eventName, null, { controller, entry });\n            targetElement.dispatchEvent(disappearEvent);\n        }\n    };\n    // keep a copy of the current disconnect() function of the controller\n    // to support composing several behaviors\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    const observer = new IntersectionObserver(callback, options);\n    const observe = () => {\n        observer.observe(targetElement);\n    };\n    const unobserve = () => {\n        observer.unobserve(targetElement);\n    };\n    Object.assign(controller, {\n        isVisible: false,\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-intersection.js.map","import { composeEventName, extendedEvent, isElementInViewport } from '../support/index';\nconst defaultOptions = {\n    events: ['click', 'touchend'],\n    onlyVisible: true,\n    dispatchEvent: true,\n    eventPrefix: true,\n};\nexport const useClickOutside = (controller, options = {}) => {\n    const { onlyVisible, dispatchEvent, events, eventPrefix } = Object.assign({}, defaultOptions, options);\n    const onEvent = (event) => {\n        const targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        if (targetElement.contains(event.target) || (!isElementInViewport(targetElement) && onlyVisible)) {\n            return;\n        }\n        // call the clickOutside method of the Stimulus controller\n        if (controller.clickOutside) {\n            controller.clickOutside(event);\n        }\n        // emit a custom event\n        if (dispatchEvent) {\n            const eventName = composeEventName('click:outside', controller, eventPrefix);\n            const clickOutsideEvent = extendedEvent(eventName, event, { controller });\n            targetElement.dispatchEvent(clickOutsideEvent);\n        }\n    };\n    const observe = () => {\n        events === null || events === void 0 ? void 0 : events.forEach(event => {\n            window.addEventListener(event, onEvent, false);\n        });\n    };\n    const unobserve = () => {\n        events === null || events === void 0 ? void 0 : events.forEach(event => {\n            window.removeEventListener(event, onEvent, false);\n        });\n    };\n    // keep a copy of the current disconnect() function of the controller\n    // to support composing several behaviors\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    Object.assign(controller, {\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-click-outside.js.map","const defaultOptions = {\n    debug: false,\n    logger: console\n};\nexport class StimulusUse {\n    constructor(controller, options = {}) {\n        var _a, _b, _c;\n        this.log = (functionName, args) => {\n            if (!this.debug)\n                return;\n            this.logger.groupCollapsed(`%c${this.controller.identifier} %c#${functionName}`, 'color: #3B82F6', 'color: unset');\n            this.logger.log(Object.assign({ controllerId: this.controllerId }, args));\n            this.logger.groupEnd();\n        };\n        this.debug = (_b = (_a = options === null || options === void 0 ? void 0 : options.debug) !== null && _a !== void 0 ? _a : controller.application.stimulusUseDebug) !== null && _b !== void 0 ? _b : defaultOptions.debug;\n        this.logger = (_c = options === null || options === void 0 ? void 0 : options.logger) !== null && _c !== void 0 ? _c : defaultOptions.logger;\n        this.controller = controller;\n        this.controllerId = controller.element.id || controller.element.dataset.id;\n        // make copies of lifecycle functions\n        this.controllerInitialize = controller.initialize.bind(controller);\n        this.controllerConnect = controller.connect.bind(controller);\n        this.controllerDisconnect = controller.disconnect.bind(controller);\n    }\n}\n//# sourceMappingURL=stimulus_use.js.map","import { StimulusUse } from '../stimulus_use';\nimport { method } from '../support/index';\nexport class UseHover extends StimulusUse {\n    constructor(controller, options = {}) {\n        super(controller, options);\n        this.observe = () => {\n            this.targetElement.addEventListener('mouseenter', this.onEnter);\n            this.targetElement.addEventListener('mouseleave', this.onLeave);\n        };\n        this.unobserve = () => {\n            this.targetElement.removeEventListener('mouseenter', this.onEnter);\n            this.targetElement.removeEventListener('mouseleave', this.onLeave);\n        };\n        this.onEnter = () => {\n            method(this.controller, 'mouseEnter').call(this.controller);\n            this.log('mouseEnter', { hover: true });\n        };\n        this.onLeave = () => {\n            method(this.controller, 'mouseLeave').call(this.controller);\n            this.log('mouseLeave', { hover: false });\n        };\n        this.targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        this.controller = controller;\n        this.enhanceController();\n        this.observe();\n    }\n    enhanceController() {\n        const controllerDisconnect = this.controller.disconnect.bind(this.controller);\n        const disconnect = () => {\n            this.unobserve();\n            controllerDisconnect();\n        };\n        Object.assign(this.controller, { disconnect });\n    }\n}\nexport const useHover = (controller, options = {}) => {\n    const observer = new UseHover(controller, options);\n    return [observer.observe, observer.unobserve];\n};\n//# sourceMappingURL=use-hover.js.map","import { StimulusUse } from '../stimulus_use';\nimport { method } from '../support/index';\nexport class UseMutation extends StimulusUse {\n    constructor(controller, options = {}) {\n        super(controller, options);\n        this.observe = () => {\n            try {\n                this.observer.observe(this.targetElement, this.options);\n            }\n            catch (error) {\n                this.controller.application.handleError(error, \"At a minimum, one of childList, attributes, and/or characterData must be true\", {});\n            }\n        };\n        this.unobserve = () => {\n            this.observer.disconnect();\n        };\n        this.mutation = (entries) => {\n            method(this.controller, 'mutate').call(this.controller, entries);\n            this.log('mutate', { entries });\n        };\n        this.targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        this.controller = controller;\n        this.options = options;\n        this.observer = new MutationObserver(this.mutation);\n        this.enhanceController();\n        this.observe();\n    }\n    enhanceController() {\n        const controllerDisconnect = this.controller.disconnect.bind(this.controller);\n        const disconnect = () => {\n            this.unobserve();\n            controllerDisconnect();\n        };\n        Object.assign(this.controller, { disconnect });\n    }\n}\nexport const useMutation = (controller, options = {}) => {\n    const observer = new UseMutation(controller, options);\n    return [observer.observe, observer.unobserve];\n};\n//# sourceMappingURL=use-mutation.js.map","import { method } from '../support/index';\nexport const useWindowResize = (controller) => {\n    const callback = (event) => {\n        const { innerWidth, innerHeight } = window;\n        const payload = {\n            height: innerHeight || Infinity,\n            width: innerWidth || Infinity,\n            event\n        };\n        method(controller, 'windowResize').call(controller, payload);\n    };\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    const observe = () => {\n        window.addEventListener('resize', callback);\n        callback();\n    };\n    const unobserve = () => {\n        window.removeEventListener('resize', callback);\n    };\n    Object.assign(controller, {\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-window-resize.js.map","import { Controller } from 'stimulus';\nclass DebounceController extends Controller {\n}\nDebounceController.debounces = [];\nconst defaultWait = 200;\nconst debounce = (fn, wait = defaultWait) => {\n    let timeoutId = null;\n    return function () {\n        const args = arguments;\n        const context = this;\n        const callback = () => fn.apply(context, args);\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(callback, wait);\n    };\n};\nexport const useDebounce = (controller, options) => {\n    var _a;\n    const constructor = controller.constructor;\n    (_a = constructor.debounces) === null || _a === void 0 ? void 0 : _a.forEach((func) => {\n        if (typeof func === \"string\") {\n            controller[func] = debounce(controller[func], options === null || options === void 0 ? void 0 : options.wait);\n        }\n        if (typeof func === \"object\") {\n            const { name, wait } = func;\n            if (!name)\n                return;\n            controller[name] = debounce(controller[name], wait || (options === null || options === void 0 ? void 0 : options.wait));\n        }\n    });\n};\n//# sourceMappingURL=use-debounce.js.map","import {useWindowResize} from \"stimulus-use\";\nimport {BaseController} from \"./base_controller\";\n\nexport class AutosizeController extends BaseController {\n\n  private boundHandler = this.handler.bind(this);\n\n  connect() {\n    let target = this.element as HTMLTextAreaElement;\n    target.style.resize = \"none\";\n    target.style.boxSizing = \"border-box\";\n    target.addEventListener(\"input\", this.boundHandler);\n    target.addEventListener(\"focus\", this.boundHandler);\n    useWindowResize(this);\n    requestAnimationFrame(this.boundHandler);\n  }\n\n  windowResize() {\n    this.handler();\n  }\n\n  private handler() {\n    this.autosize(this.element as HTMLTextAreaElement);\n  };\n\n  private autosize(element: HTMLTextAreaElement) {\n    let offset = element.offsetHeight - element.clientHeight;\n    element.style.height = \"auto\";\n    element.style.height = element.scrollHeight + offset + \"px\";\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class CharCountController extends BaseController {\r\n\r\n  static targets = [\"input\", \"output\"];\r\n  static values = {min: Number, max: Number};\r\n  static classes = [\"error\"];\r\n\r\n  declare readonly inputTarget: HTMLInputElement | HTMLTextAreaElement;\r\n  declare readonly outputTarget: HTMLElement;\r\n  declare minValue: number;\r\n  declare hasMinValue: boolean;\r\n  declare maxValue: number;\r\n  declare hasMaxValue: boolean;\r\n  declare errorClass: string;\r\n  declare hasErrorClass: boolean;\r\n\r\n  boundHandler = this.updateCharCount.bind(this);\r\n\r\n  connect() {\r\n    this.updateCharCount();\r\n    this.inputTarget.addEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  disconnect() {\r\n    this.inputTarget.removeEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  updateCharCount() {\r\n    let charCount = this.inputTarget.value.length;\r\n    this.outputTarget.innerText = charCount.toString();\r\n    if (this.hasErrorClass) {\r\n      if (this.isValidCount(charCount)) {\r\n        this.outputTarget.classList.remove(this.errorClass);\r\n      } else {\r\n        this.outputTarget.classList.add(this.errorClass);\r\n      }\r\n    }\r\n  }\r\n\r\n  isValidCount(count: number) {\r\n    let min = 0;\r\n    let max = 99999;\r\n\r\n    if (this.hasMinValue) {\r\n      min = this.minValue;\r\n    }\r\n\r\n    if (this.hasMaxValue) {\r\n      max = this.maxValue;\r\n    }\r\n\r\n    return count >= min && count <= max;\r\n  }\r\n\r\n}\r\n","import {BaseController} from './base_controller';\r\n\r\nexport class CheckboxSelectAllController extends BaseController {\r\n  static targets = ['selectAll', 'checkbox'];\r\n\r\n  declare readonly hasCheckboxAllTarget: boolean;\r\n  declare readonly selectAllTarget: HTMLInputElement;\r\n  declare readonly checkboxTargets: HTMLInputElement[];\r\n\r\n  private get checked() {\r\n    return this.checkboxTargets.filter(checkbox => checkbox.checked);\r\n  }\r\n\r\n  private get unchecked() {\r\n    return this.checkboxTargets.filter(checkbox => !checkbox.checked);\r\n  }\r\n\r\n  initialize() {\r\n    this.toggle = this.toggle.bind(this);\r\n    this.refresh = this.refresh.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      if (!this.hasCheckboxAllTarget) {\r\n        return;\r\n      }\r\n\r\n      this.selectAllTarget.addEventListener('change', this.toggle);\r\n      this.checkboxTargets.forEach(checkbox => checkbox.addEventListener('change', this.refresh));\r\n      this.refresh();\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    if (!this.hasCheckboxAllTarget) {\r\n      return;\r\n    }\r\n\r\n    this.selectAllTarget.removeEventListener('change', this.toggle);\r\n    this.checkboxTargets.forEach((checkbox) => checkbox.removeEventListener('change', this.refresh));\r\n  }\r\n\r\n  private toggle(event: Event) {\r\n    event.preventDefault();\r\n    let target = event.target as HTMLInputElement;\r\n    this.checkboxTargets.forEach((checkbox) => checkbox.checked = target.checked);\r\n  }\r\n\r\n  private refresh() {\r\n    const checkboxesCount = this.checkboxTargets.length;\r\n    const checkboxesCheckedCount = this.checked.length;\r\n\r\n    this.selectAllTarget.checked = checkboxesCheckedCount > 0;\r\n    this.selectAllTarget.indeterminate = checkboxesCheckedCount > 0 && checkboxesCheckedCount < checkboxesCount;\r\n  }\r\n}","import {BaseController} from \"./base_controller\";\r\n\r\nexport class ClipboardController extends BaseController {\r\n\r\n  static targets = [\"button\", \"copy\", \"fallback\"];\r\n  static values = {removeUnused: Boolean};\r\n\r\n  declare readonly sourceTarget: HTMLElement;\r\n  declare readonly copyTarget: HTMLElement;\r\n  declare readonly hasCopyTarget: boolean;\r\n  declare readonly fallbackTarget: HTMLElement;\r\n  declare readonly hasFallbackTarget: boolean;\r\n\r\n  declare readonly hasRemoveUnusedValue: boolean;\r\n  declare readonly removeUnusedValue: boolean;\r\n\r\n  supported = false;\r\n\r\n  connect() {\r\n    this.supported = document.queryCommandSupported(\"copy\");\r\n\r\n    if (this.hasRemoveUnusedValue && this.removeUnusedValue) {\r\n      if (this.supported && this.hasFallbackTarget) {\r\n        this.fallbackTarget.remove();\r\n      } else if (this.hasCopyTarget) {\r\n        this.copyTarget.remove();\r\n      }\r\n    }\r\n  }\r\n\r\n  select(event: MouseEvent) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    (this.sourceTarget as HTMLInputElement | HTMLTextAreaElement).select();\r\n  }\r\n\r\n  copy(event: ClipboardEvent) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    (this.sourceTarget as HTMLInputElement | HTMLTextAreaElement).select();\r\n    if (this.supported) {\r\n      document.execCommand(\"copy\");\r\n    }\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\n\nexport class ConfirmNavigationController extends BaseController {\n\n  static values = {message: String};\n\n  declare readonly messageValue: string;\n\n  connect() {\n    let confirmMessage = this.messageValue;\n    window.onbeforeunload = () => (confirmMessage == null ? true : confirmMessage);\n    window.addEventListener(\"popstate\", this.handlePopstate);\n    window.addEventListener(\"submit\", () => {\n      window.removeEventListener(\"popstate\", this.handlePopstate);\n      window.onbeforeunload = null;\n    });\n    // TODO: Turbo navigation events\n  }\n\n  handlePopstate(event: PopStateEvent) {\n    return false;\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class DebugController extends BaseController {\n\n  static targets = [\"test\"];\n  declare testTargets: HTMLElement[];\n\n  connect() {\n    console.log(\"Debug Controller\", this, this.testTargets);\n  }\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class DetectDirtyController extends BaseController {\r\n\r\n  initialValue: string | boolean | null = null;\r\n\r\n  boundHandler = this.handler.bind(this);\r\n\r\n  connect() {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    if (this.isInputElement(element) && this.isCheckable(element)) {\r\n      this.initialValue = element.checked;\r\n    } else {\r\n      this.initialValue = element.value;\r\n    }\r\n    element.addEventListener(\"input\", this.boundHandler);\r\n    element.addEventListener(\"change\", this.boundHandler);\r\n  }\r\n\r\n  disconnect() {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    element.removeEventListener(\"input\", this.boundHandler);\r\n    element.removeEventListener(\"change\", this.boundHandler);\r\n  }\r\n\r\n  restore() {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    if (this.isInputElement(element) && this.isCheckable(element)) {\r\n      element.checked = this.initialValue as boolean;\r\n    } else {\r\n      element.value = this.initialValue as string;\r\n    }\r\n  }\r\n\r\n  private handler(event?: Event) {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n\r\n    if (this.initialValue !== element.value) {\r\n      element.setAttribute(\"data-dirty\", \"true\");\r\n    } else {\r\n      element.removeAttribute(\"data-dirty\");\r\n    }\r\n  }\r\n\r\n  private isCheckable(element: HTMLInputElement): boolean {\r\n    return (element.type === \"radio\" || element.type === \"checkbox\");\r\n  }\r\n\r\n  private isInputElement(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement): element is HTMLInputElement {\r\n    return element.tagName === \"INPUT\";\r\n  }\r\n\r\n}\r\n\r\nexport function isDirty(element: HTMLElement) {\r\n  return element.hasAttribute(\"data-dirty\");\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class DisableInputsController extends BaseController {\r\n\r\n  static targets = [\"disabler\", \"disable\"];\r\n\r\n  static values = {\r\n    clear: Boolean,\r\n  };\r\n\r\n  declare readonly hasDisablerTarget: boolean;\r\n  declare readonly disablerTarget: HTMLInputElement;\r\n  declare readonly disableTargets: Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\r\n  declare readonly clearValue: boolean;\r\n  declare readonly hasClearValue: boolean;\r\n\r\n  connect() {\r\n    this.toggle();\r\n  }\r\n\r\n  toggle() {\r\n    if (this.hasDisablerTarget && this.disablerTarget.checked) {\r\n      this.disableInputs();\r\n    } else {\r\n      this.enableInputs();\r\n    }\r\n  }\r\n\r\n  disableInputs() {\r\n    let shouldClear = this.hasClearValue && this.clearValue;\r\n    this.disableTargets.forEach((el, _) => {\r\n      if (shouldClear) {\r\n        el.value = \"\";\r\n      }\r\n      el.disabled = true;\r\n    });\r\n  }\r\n\r\n  enableInputs() {\r\n    this.disableTargets.forEach((el, _) => {\r\n      el.disabled = false;\r\n    });\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class DismissableController extends BaseController {\r\n\r\n\r\n  dismiss() {\r\n    this.element.remove();\r\n  }\r\n\r\n}\r\n","import {useMutation} from \"stimulus-use\";\r\nimport {BaseController} from \"./base_controller\";\r\n\r\nexport class EmptyDomController extends BaseController {\r\n\r\n  static classes = [\"empty\", \"notEmpty\"];\r\n  static values = {scopeSelector: String};\r\n\r\n  declare hasEmptyClass: boolean;\r\n  declare emptyClass: string;\r\n  declare hasNotEmptyClass: boolean;\r\n  declare notEmptyClass: string;\r\n\r\n  declare hasScopeSelectorValue: boolean;\r\n  declare scopeSelectorValue: string;\r\n\r\n  connect() {\r\n    useMutation(this, {element: this.element, childList: true});\r\n    this.checkEmpty();\r\n  }\r\n\r\n  mutate(entries: MutationRecord[]) {\r\n    this.checkEmpty();\r\n  }\r\n\r\n  checkEmpty() {\r\n    let children;\r\n    if (this.hasScopeSelectorValue) {\r\n      children = this.element.querySelectorAll(this.scopeSelectorValue);\r\n    } else {\r\n      children = this.element.children;\r\n    }\r\n\r\n    if (children.length === 0) {\r\n      if (this.hasNotEmptyClass) {\r\n        let classes = this.notEmptyClass.split(\" \");\r\n        classes.forEach(klass => this.element.classList.remove(klass));\r\n      }\r\n      if (this.hasEmptyClass) {\r\n        let classes = this.emptyClass.split(\" \");\r\n        classes.forEach(klass => this.element.classList.add(klass));\r\n      }\r\n      this.element.dispatchEvent(\r\n        new CustomEvent(\"dom:empty\", {\r\n          bubbles: true,\r\n          cancelable: true,\r\n        }),\r\n      );\r\n    } else {\r\n      if (this.hasNotEmptyClass) {\r\n        let classes = this.notEmptyClass.split(\" \");\r\n        classes.forEach(klass => this.element.classList.add(klass));\r\n      }\r\n      if (this.hasEmptyClass) {\r\n        let classes = this.emptyClass.split(\" \");\r\n        classes.forEach(klass => this.element.classList.remove(klass));\r\n      }\r\n      this.element.dispatchEvent(\r\n        new CustomEvent(\"dom:not-empty\", {\r\n          bubbles: true,\r\n          cancelable: true,\r\n          detail: {\r\n            count: children.length,\r\n          },\r\n        }),\r\n      );\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class EnableInputsController extends BaseController {\r\n\r\n  static targets = [\"enabler\", \"enable\"];\r\n\r\n  static values = {\r\n    clear: Boolean,\r\n  };\r\n\r\n  declare readonly hasEnablerTarget: boolean;\r\n  declare readonly enablerTarget: HTMLInputElement;\r\n  declare readonly enableTargets: Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\r\n  declare readonly clearValue: boolean;\r\n  declare readonly hasClearValue: boolean;\r\n\r\n  connect() {\r\n    this.toggle();\r\n  }\r\n\r\n  toggle() {\r\n    if (this.hasEnablerTarget && this.enablerTarget.checked) {\r\n      this.enableInputs();\r\n    } else {\r\n      this.disableInputs();\r\n    }\r\n  }\r\n\r\n  disableInputs() {\r\n    let shouldClear = this.hasClearValue && this.clearValue;\r\n    this.enableTargets.forEach((el, _) => {\r\n      if (shouldClear) {\r\n        el.value = \"\";\r\n      }\r\n      el.disabled = true;\r\n    });\r\n  }\r\n\r\n  enableInputs() {\r\n    this.enableTargets.forEach((el, _) => {\r\n      el.disabled = false;\r\n    });\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class FallbackImageController extends BaseController {\r\n\r\n  static values = {placeholder: String};\r\n\r\n  declare readonly placeholderValue: string;\r\n  declare readonly hasPlaceholderValue: boolean;\r\n\r\n  connect() {\r\n    let element = this.element as HTMLImageElement;\r\n\r\n    element.onerror = () => {\r\n      if (this.hasPlaceholderValue) {\r\n        element.src = this.placeholderValue;\r\n      } else {\r\n        element.style.display = \"none\";\r\n      }\r\n    };\r\n  }\r\n\r\n}\r\n","export function isHTMLLinkElement(element: Element): element is HTMLLinkElement {\n  return element.nodeName == \"A\";\n}\n\nexport function isHTMLFormElement(element: Element): element is HTMLFormElement {\n  return element.nodeName == \"FORM\";\n}\n\nexport function isHTMLInputElement(element: Element): element is HTMLInputElement {\n  return element.nodeName == \"INPUT\";\n}\n\n","import {BaseController} from './base_controller';\r\nimport {isHTMLFormElement, isHTMLInputElement} from \"./utilities/elements\";\r\n\r\ninterface FormSavePayload {\r\n  [idx: string]: {\r\n    [idx: string]: string | boolean\r\n  }\r\n}\r\n\r\nexport class FormSaveController extends BaseController {\r\n\r\n  static values = {\r\n    id: String,\r\n    restoreOnLoad: Boolean,\r\n    clearOnSubmit: Boolean,\r\n  };\r\n\r\n  declare readonly idValue: string;\r\n  declare readonly hasIdValue: boolean;\r\n  declare readonly restoreOnLoadValue: boolean;\r\n  declare readonly hasRestoreOnLoadValue: boolean;\r\n  declare readonly clearOnSubmitValue: boolean;\r\n  declare readonly hasClearOnSubmitValue: boolean;\r\n\r\n  get formID() {\r\n    if (this.hasIdValue) {\r\n      return this.idValue;\r\n    }\r\n    let elementID = (this.element as HTMLFormElement).id;\r\n\r\n    if (elementID !== \"\") {\r\n      return elementID;\r\n    } else {\r\n      throw new Error(`No ID value to uniquely identify this form. Please either specify data-${this.identifier}-id-value or give this form an 'id' attribute. `);\r\n    }\r\n  }\r\n\r\n  get formIdentifier() {\r\n    const url = location.href;\r\n    return `${url} ${this.formID}`;\r\n  }\r\n\r\n  get formElements() {\r\n    return (this.element as HTMLFormElement).elements;\r\n  }\r\n\r\n  get formData(): FormSavePayload {\r\n    let data: FormSavePayload = {[this.formIdentifier]: {}};\r\n    for (const element of this.formElements) {\r\n      let el = element as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\r\n      if (el.name.length > 0) {\r\n        if (isHTMLInputElement(el) && el.type == \"checkbox\") {\r\n          data[this.formIdentifier][el.name] = el.checked;\r\n        } else if (isHTMLInputElement(el) && el.type == \"radio\") {\r\n          if (el.checked) {\r\n            data[this.formIdentifier][el.name] = el.value;\r\n          }\r\n        } else {\r\n          data[this.formIdentifier][el.name] = el.value;\r\n        }\r\n      }\r\n    }\r\n    return data;\r\n  }\r\n\r\n  get restoreOnLoad() {\r\n    return this.hasRestoreOnLoadValue ? this.restoreOnLoadValue : true;\r\n  }\r\n\r\n  get clearOnSubmit() {\r\n    return this.hasClearOnSubmitValue ? this.clearOnSubmitValue : true;\r\n  }\r\n\r\n  initialize() {\r\n    this._clear = this._clear.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      let element = this.element;\r\n      if (!isHTMLFormElement(element)) {\r\n        throw new Error('Expected controller to be mounted on a form element.');\r\n      }\r\n\r\n      if (this.restoreOnLoad) {\r\n        this.restore();\r\n      }\r\n      if (this.clearOnSubmit) {\r\n        this.element.addEventListener('submit', this._clear);\r\n      }\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.clearOnSubmit) {\r\n      this.element.removeEventListener('submit', this._clear);\r\n    }\r\n  }\r\n\r\n  _clear() {\r\n    localStorage.removeItem(this.formIdentifier);\r\n    this.dispatch(this.element as HTMLElement, `form-save:cleared`);\r\n  }\r\n\r\n  clear(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    this._clear();\r\n  }\r\n\r\n  save(event: Event) {\r\n    event.preventDefault();\r\n    let data = this.formData;\r\n    localStorage.setItem(this.formIdentifier, JSON.stringify(data[this.formIdentifier]));\r\n    this.dispatch(this.element as HTMLElement, `form-save:save:success`);\r\n  }\r\n\r\n  restore(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    if (localStorage.getItem(this.formIdentifier)) {\r\n      const savedData = JSON.parse(localStorage.getItem(this.formIdentifier)!); // get and parse the saved data from localStorage\r\n      for (const element of this.formElements) {\r\n        let el = element as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\r\n        if (el.name in savedData) {\r\n          if (isHTMLInputElement(el) && el.type == \"checkbox\") {\r\n            el.checked = savedData[el.name];\r\n          } else if (isHTMLInputElement(el) && el.type == \"radio\") {\r\n            if (el.value == savedData[el.name]) {\r\n              el.checked = true;\r\n            }\r\n          } else {\r\n            el.value = savedData[el.name];\r\n          }\r\n        }\r\n      }\r\n      this.dispatch(this.element as HTMLElement, `form-save:restore:success`);\r\n    } else {\r\n      this.dispatch(this.element as HTMLElement, `form-save:restore:empty`);\r\n    }\r\n  }\r\n\r\n}\r\n","import {useIntersection} from \"stimulus-use\";\nimport {IntersectionOptions} from \"stimulus-use/dist/use-intersection/use-intersection\";\nimport {AsyncBlockController} from \"./async_block_controller\";\n\nexport class LazyBlockController extends AsyncBlockController {\n\n  declare observe: () => void;\n  declare unobserve: () => void;\n  declare options: IntersectionOptions;\n  declare isVisible: boolean;\n  declare disappear: () => void;\n\n  connect() {\n    let element = this.element;\n    this.options = {element, threshold: 0.3};\n\n    if (\"IntersectionObserver\" in window) {\n      [this.observe, this.unobserve] = useIntersection(this, this.options);\n    } else {\n      // Client doesn't support intersection observer, fallback to pre-loading\n      this.loadContent();\n    }\n  }\n\n  appear(entry: IntersectionObserverEntry) {\n    let element = this.element as HTMLImageElement;\n    if (element.src !== \"\") {\n      return;\n    }\n    if (entry.target === element && entry.isIntersecting) {\n      this.loadContent();\n      if (this.unobserve) {\n        this.unobserve();\n      }\n    }\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class LimitedSelectionCheckboxesController extends BaseController {\r\n\r\n  static targets = [\"input\", \"error\"];\r\n  static values = {max: Number, message: String};\r\n\r\n  declare readonly hasErrorTarget: boolean;\r\n  declare readonly errorTarget: HTMLElement;\r\n  declare readonly inputTargets: HTMLInputElement[];\r\n  declare readonly maxValue: number;\r\n  declare readonly messageValue: string;\r\n\r\n  maxSelections = 0;\r\n\r\n  boundHandleInputs = this.handleInputs.bind(this);\r\n\r\n  connect() {\r\n    this.inputTargets.forEach((el) => el.addEventListener(\"change\", this.boundHandleInputs));\r\n  }\r\n\r\n  disconnect() {\r\n    this.inputTargets.forEach((el) => el.removeEventListener(\"change\", this.boundHandleInputs));\r\n  }\r\n\r\n  handleInputs(event: Event) {\r\n    let tickedInputs = this.inputTargets.reduce((previousValue, el) => el.checked ? previousValue + 1 : previousValue, 0);\r\n    let target = event.target as HTMLInputElement;\r\n    if (tickedInputs > this.maxSelections) {\r\n      event.preventDefault();\r\n      target.checked = false;\r\n      target.dispatchEvent(new CustomEvent(\"change\", {bubbles: true, cancelable: true}));\r\n      target.dispatchEvent(new CustomEvent(\"limited-selection:too-many\", {bubbles: true, cancelable: true, detail: {target}}));\r\n      if (this.hasErrorTarget) {\r\n        this.errorTarget.innerHTML = this.messageValue;\r\n      }\r\n    } else {\r\n      target.dispatchEvent(new CustomEvent(\"limited-selection:selection\", {bubbles: true, cancelable: true, detail: {target}}));\r\n      if (this.hasErrorTarget) {\r\n        this.errorTarget.innerHTML = \"\";\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class NestedFormController extends BaseController {\r\n  static targets = ['target', 'template'];\r\n  static values = {\r\n    insertMode: String,\r\n    wrapperClass: String,\r\n  };\r\n\r\n  declare readonly targetTarget: HTMLElement;\r\n  declare readonly templateTarget: HTMLTemplateElement | HTMLScriptElement;\r\n\r\n  declare readonly wrapperClassValue: string;\r\n  declare readonly hasWrapperSelectorValue: boolean;\r\n  declare readonly insertModeValue: InsertPosition;\r\n  declare readonly hasInsertModeValue: boolean;\r\n\r\n  get wrapperClass() {\r\n    return this.hasWrapperSelectorValue ? this.wrapperClassValue : 'nested-fields';\r\n  }\r\n\r\n  get insertMode(): InsertPosition {\r\n    return this.hasInsertModeValue ? this.insertModeValue : 'beforeend';\r\n  }\r\n\r\n  connect() {\r\n    this.checkStructure();\r\n  }\r\n\r\n  add(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    const content = this.templateTarget.innerHTML.replace(/NEW_RECORD/g, this.generateID());\r\n    this.targetTarget.insertAdjacentHTML(this.insertMode, content);\r\n  }\r\n\r\n  remove(event: Event) {\r\n    event.preventDefault();\r\n    const wrapper: HTMLElement | null = (event.target as HTMLElement).closest(this.wrapperClass);\r\n    if (wrapper == null) {\r\n      throw new Error(`#remove was clicked from outside of a child record. Could not find an ancestor with class ${this.wrapperClass}`);\r\n    }\r\n\r\n    if (wrapper.dataset.newRecord === 'true') {\r\n      wrapper.remove();\r\n    } else {\r\n      wrapper.style.display = 'none';\r\n      let destroyInput = wrapper.querySelector(\"input[name*='_destroy']\") as HTMLInputElement | null;\r\n      if (destroyInput == null) {\r\n        throw new Error(`Could not find a hidden input with name '_destroy'. NestedForm cannot remove an already persisted record without it.`);\r\n      }\r\n\r\n      destroyInput.value = \"1\";\r\n    }\r\n  }\r\n\r\n  generateID(): string {\r\n    return new Date().getTime().toString() + Math.random();\r\n  }\r\n\r\n  private checkStructure() {\r\n    let template = this.templateTarget.innerHTML;\r\n\r\n    if (template.indexOf('NEW_RECORD')) {\r\n      throw new Error(\"Could not find 'NEW_RECORD' in the provided template. Please make sure you've passed `child_index: 'NEW_RECORD'` to `fields_for`\")\r\n    }\r\n  }\r\n}","import {BaseController} from \"./base_controller\";\r\n\r\nexport class PasswordConfirmController extends BaseController {\r\n\r\n  static targets = [\"password\"];\r\n  static classes = [\"error\"];\r\n\r\n  declare readonly passwordTargets: HTMLInputElement[];\r\n\r\n  declare readonly errorClass: string;\r\n  declare readonly hasErrorClass: boolean;\r\n\r\n  private boundCheckPasswordsMatch = this.checkPasswordsMatch.bind(this);\r\n\r\n  connect() {\r\n    this.passwordTargets.forEach((el) => el.addEventListener(\"change\", this.boundCheckPasswordsMatch));\r\n  }\r\n\r\n  disconnect() {\r\n    this.passwordTargets.forEach((el) => el.removeEventListener(\"change\", this.boundCheckPasswordsMatch));\r\n  }\r\n\r\n  private allPasswordsMatch() {\r\n    let values = new Set(this.passwordTargets.map(el => el.value));  // Create a unique set of the password values\r\n    return values.has(\"\") || values.size == 1; // If any of the passwords are still blank, or there is only one distinct password value (i.e. they all are the same)\r\n  }\r\n\r\n  private checkPasswordsMatch() {\r\n    if (this.allPasswordsMatch()) {\r\n      this.element.dispatchEvent(new CustomEvent(\"password-confirm:match\"));\r\n      if (this.hasErrorClass) {\r\n        this.passwordTargets.forEach(el => el.classList.remove(this.errorClass));\r\n      }\r\n    } else {\r\n      this.element.dispatchEvent(new CustomEvent(\"password-confirm:no-match\"));\r\n      if (this.hasErrorClass) {\r\n        this.passwordTargets.forEach(el => el.classList.add(this.errorClass));\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class PasswordPeekController extends BaseController {\r\n\r\n  static targets = [\"password\"];\r\n\r\n  declare readonly passwordTarget: HTMLInputElement;\r\n\r\n\r\n  peak(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    this.passwordTarget.type = \"text\";\r\n  }\r\n\r\n  hide(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    this.passwordTarget.type = \"password\";\r\n  }\r\n\r\n  toggle(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    if (this.passwordTarget.type === \"password\") {\r\n      this.peak();\r\n    } else {\r\n      this.hide();\r\n    }\r\n  }\r\n}\r\n","import {useDebounce, useWindowResize} from \"stimulus-use\";\nimport {WindowResizePayload} from \"stimulus-use/dist/use-window-resize/use-window-resize\";\nimport {BaseController} from \"./base_controller\";\n\ninterface ResponsiveIframeMessage {\n  name: string,\n  height: number,\n}\n\nexport class ResponsiveIframeWrapperController extends BaseController {\n\n  boundMessageReceived = this.messageReceived.bind(this);\n\n  connect() {\n    window.addEventListener(\"message\", this.boundMessageReceived);\n  }\n\n  disconnect() {\n    window.removeEventListener(\"message\", this.boundMessageReceived);\n  }\n\n  messageReceived(message: MessageEvent<ResponsiveIframeMessage>) {\n    let data = message.data;\n    if (data.hasOwnProperty(\"name\") && data.name === \"iframe-body\" && data.hasOwnProperty(\"height\")) {\n      this.resize(data.height);\n    }\n  }\n\n  resize(height: number) {\n    (this.element as HTMLIFrameElement).style.height = `${height}px`;\n  }\n\n}\n\nexport class ResponsiveIframeBodyController extends BaseController {\n\n  static debounces = [\"postUpdate\"];\n\n  declare observe: () => void;\n  declare unobserve: () => void;\n\n  connect() {\n    // If this Window is inside a frame\n    if (window.self !== window.top) {\n      useWindowResize(this);\n      useDebounce(this, {});\n      this.postUpdate();\n    } else {\n      // Not an iframe\n    }\n  }\n\n  windowResize(payload: WindowResizePayload) {\n    this.postUpdate();\n  };\n\n  postUpdate() {\n    let payload: ResponsiveIframeMessage = {name: \"iframe-body\", height: this.getHeight()};\n    window.parent.postMessage(\n      payload,\n      \"*\",\n    );\n  }\n\n  getHeight(): number {\n    const body = document.body;\n    const html = document.documentElement;\n\n    // Get the largest height out of body and html's various height measurements\n    return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n  }\n\n}\n","const smoothSupported = \"scrollBehavior\" in document.documentElement.style;\r\nlet smoothPolyfilled: boolean;\r\n\r\nexport async function scrollToElement(element: Element, {behavior = \"smooth\", block = \"start\", inline = \"nearest\"}: ScrollIntoViewOptions = {}) {\r\n  if (behavior == \"smooth\" && !smoothSupported) {\r\n    await polyfillSmooth();\r\n  }\r\n  element.scrollIntoView({behavior, block, inline});\r\n}\r\n\r\nasync function polyfillSmooth() {\r\n  const {polyfill} = await import(/* webpackChunkName: \"smoothscroll-polyfill\" */ \"smoothscroll-polyfill\");\r\n  if (smoothPolyfilled) {\r\n    return;\r\n  }\r\n  smoothPolyfilled = true;\r\n  polyfill();\r\n}\r\n\r\nexport function getScrollParent(node: HTMLElement | null): HTMLElement | null {\r\n  if (!node) {\r\n    return null;\r\n  }\r\n  const overflowY = getComputedStyle(node).overflowY;\r\n  const isScrollable = overflowY !== \"visible\" && overflowY !== \"hidden\";\r\n\r\n  if (isScrollable && node.scrollHeight >= node.clientHeight) {\r\n    return node;\r\n  }\r\n\r\n  return getScrollParent(node.parentElement) || document.body;\r\n}\r\n","import camelCase from \"lodash/camelCase\";\r\nimport {BaseController} from \"../base_controller\";\r\n\r\nexport class EphemeralController extends BaseController {\r\n\r\n  cleanupSelf() {\r\n    this.cleanup(this.element as HTMLElement);\r\n  }\r\n\r\n  cleanup(element: HTMLElement) {\r\n    element.dataset.controller = element.dataset.controller?.replaceAll(new RegExp(`(\\s|^)${this.identifier}(\\s|$)`, \"g\"), \"\") || \"\";\r\n    if (element.dataset.controller == \"\") {\r\n      // If there are no controllers left, remove the attribute\r\n      delete element.dataset.controller;\r\n    }\r\n\r\n    let substringIdentifierValueRegex = new RegExp(`(\\s|^)${this.identifier}\\\\..+?(\\s|$)`, \"g\");\r\n    element.dataset.target = element.dataset.target?.replaceAll(substringIdentifierValueRegex, \"\") || \"\";\r\n    delete element.dataset[camelCase(`${this.identifier}-target`)];\r\n    if (element.dataset.target == \"\") {\r\n      // If there are no targets left, remove the attribute\r\n      delete element.dataset.target;\r\n    }\r\n\r\n    element.dataset.action = element.dataset.target?.replaceAll(substringIdentifierValueRegex, \"\") || \"\";\r\n    delete element.dataset[camelCase(`${this.identifier}-action`)];\r\n    if (element.dataset.action == \"\") {\r\n      // If there are no actions left, remove the attribute\r\n      delete element.dataset.action;\r\n    }\r\n\r\n    // @ts-ignore\r\n    let values = this.constructor.values;\r\n    if (values) {\r\n      Object.keys(values).forEach(val => delete element.dataset[camelCase(`${this.identifier}-${val}-value`)]);\r\n    }\r\n\r\n    // @ts-ignore\r\n    let classes = this.constructor.classes;\r\n    if (classes) {\r\n      Object.keys(classes).forEach(val => delete element.dataset[camelCase(`${this.identifier}-${val}-class`)]);\r\n    }\r\n  }\r\n\r\n}\r\n","import {EphemeralController} from \"./utilities/ephemeral_controller\";\r\nimport {scrollToElement} from \"./utilities/scroll\";\r\n\r\nexport class ScrollIntoFocusController extends EphemeralController {\r\n\r\n  static values = {\r\n    behavior: String,\r\n    block: String,\r\n    inline: String,\r\n  };\r\n\r\n  declare behaviorValue: ScrollBehavior;\r\n  declare hasBehaviorValue: boolean;\r\n  declare blockValue: ScrollLogicalPosition;\r\n  declare hasBlockValue: boolean;\r\n  declare inlineValue: ScrollLogicalPosition;\r\n  declare hasInlineValue: boolean;\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      // Attempt smooth scrolling, with polyfill\r\n      scrollToElement(\r\n        this.element,\r\n        {\r\n          behavior: this.hasBehaviorValue ? this.behaviorValue : \"smooth\",\r\n          block: this.hasBlockValue ? this.blockValue : \"center\",\r\n          inline: this.hasInlineValue ? this.inlineValue : \"center\",\r\n        },\r\n      ).catch(() => this.element.scrollIntoView()); // Fallback to snap-scrolling\r\n      this.cleanupSelf();\r\n    });\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\nimport {getScrollParent, scrollToElement} from \"./utilities/scroll\";\r\n\r\nexport class ScrollToBottomController extends BaseController {\r\n\r\n  static values = {\r\n    mode: String,\r\n  };\r\n\r\n  declare modeValue: \"nearest\" | \"document\";\r\n  declare hasModeValue: boolean;\r\n\r\n\r\n  scroll(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    let mode = this.hasModeValue ? this.modeValue : \"document\";\r\n    let target: null | HTMLElement;\r\n    if (mode == \"document\") {\r\n      target = document.body;\r\n    } else {\r\n      target = getScrollParent(this.element as HTMLElement);\r\n    }\r\n    if (target == null) {\r\n      return;\r\n    }\r\n    scrollToElement(target!, {behavior: \"smooth\", block: \"end\"}).catch(() => target!.scrollIntoView(false));\r\n  }\r\n\r\n}\r\n\r\n","import {BaseController} from \"./base_controller\";\r\nimport {scrollToElement} from \"./utilities/scroll\";\r\n\r\nexport class ScrollToController extends BaseController {\r\n\r\n  static values = {\r\n    selector: String,\r\n    behavior: String,\r\n    block: String,\r\n    inline: String,\r\n  };\r\n\r\n  declare selectorValue: string;\r\n  declare behaviorValue: ScrollBehavior;\r\n  declare hasBehaviorValue: boolean;\r\n  declare blockValue: ScrollLogicalPosition;\r\n  declare hasBlockValue: boolean;\r\n  declare inlineValue: ScrollLogicalPosition;\r\n  declare hasInlineValue: boolean;\r\n\r\n\r\n  scroll() {\r\n    let target = document.querySelector(this.selectorValue);\r\n    if (!target) {\r\n      console.warn(`Could not find target for '${this.selectorValue}'`);\r\n      return;\r\n    }\r\n\r\n    scrollToElement(\r\n      target!,\r\n      {\r\n        behavior: this.hasBehaviorValue ? this.behaviorValue : \"smooth\",\r\n        block: this.hasBlockValue ? this.blockValue : \"center\",\r\n        inline: this.hasInlineValue ? this.inlineValue : \"center\",\r\n      },\r\n    ).catch(() => target!.scrollIntoView()); // Fallback to snap-scrolling\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\nimport {getScrollParent, scrollToElement} from \"./utilities/scroll\";\n\nexport class ScrollToTopController extends BaseController {\n\n  static values = {\n    mode: String,\n  };\n\n  declare modeValue: \"nearest\" | \"document\";\n  declare hasModeValue: boolean;\n\n\n  scroll(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    let mode = this.hasModeValue ? this.modeValue : \"document\";\n    let target: null | HTMLElement;\n    if (mode == \"document\") {\n      target = document.body;\n    } else {\n      target = getScrollParent(this.element as HTMLElement);\n    }\n    if (target == null) {\n      return;\n    }\n    scrollToElement(target!, {behavior: \"smooth\", block: \"start\"}).catch(() => target!.scrollIntoView(false));\n  }\n\n}\n\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class SelfDestructController extends BaseController {\r\n\r\n  static values = {seconds: Number};\r\n\r\n  declare readonly secondsValue: number;\r\n  timeout: null | ReturnType<typeof setTimeout> = null;\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      // Only start countdown on first paint\r\n      this.timeout = setTimeout(() => this.element.remove(), this.secondsValue * 1000);\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.timeout) {\r\n      clearTimeout(this.timeout);\r\n    }\r\n  }\r\n\r\n}\r\n","import {EphemeralController} from \"./utilities/ephemeral_controller\";\r\n\r\nexport class TeleportController extends EphemeralController {\r\n\r\n  static values = {target: String, insert: String, immediate: Boolean};\r\n\r\n  declare readonly immediateValue: boolean;\r\n  declare readonly hasImmediateValue: boolean;\r\n  declare readonly targetValue: string;\r\n  declare readonly hasInsertValue: boolean;\r\n  declare readonly insertValue: InsertPosition | \"replaceOuter\" | \"replaceInner\" | \"prepend\" | \"append\";\r\n\r\n  connect() {\r\n    if (!this.hasInsertValue) {\r\n      throw new Error(\"`insert` value was not specified\");\r\n    }\r\n\r\n    requestAnimationFrame(() => {\r\n      if (this.hasImmediateValue && this.immediateValue) {\r\n        this.execute();\r\n      }\r\n    });\r\n  }\r\n\r\n  execute(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    let destination = document.querySelector(this.targetValue);\r\n\r\n    if (destination == null) {\r\n      this.element.dispatchEvent(new CustomEvent(\"teleport:error\", {bubbles: true, cancelable: true}));\r\n      return;\r\n    }\r\n\r\n    let copy = this.element.cloneNode(true) as HTMLElement;\r\n    this.cleanup(copy);\r\n\r\n    switch (this.insertValue) {\r\n      case \"beforebegin\":\r\n      case \"beforeend\":\r\n      case \"afterend\":\r\n      case \"afterbegin\":\r\n        destination.insertAdjacentHTML(this.insertValue, copy.outerHTML);\r\n        break;\r\n      case \"replaceOuter\":\r\n        destination.outerHTML = copy.outerHTML;\r\n        break;\r\n      case \"replaceInner\":\r\n        destination.innerHTML = copy.outerHTML;\r\n        break;\r\n      case \"prepend\":\r\n        destination.insertAdjacentHTML(\"afterbegin\", copy.outerHTML);\r\n        break;\r\n      case \"append\":\r\n        destination.insertAdjacentHTML(\"beforeend\", copy.outerHTML);\r\n        break;\r\n      default:\r\n        throw new Error(\"`insert` value was not specified\");\r\n\r\n    }\r\n    this.element.remove();\r\n  }\r\n\r\n}\r\n","import {useClickOutside, useHover} from \"stimulus-use\";\nimport {BaseController} from \"./base_controller\";\n\nexport type ToggleClassMode = \"on\" | \"off\" | \"toggle\"\n\nexport class ToggleClassController extends BaseController {\n\n  static targets = [\"toggle\"];\n  static values = {\n    class: String,\n    mouseEnter: String,\n    mouseLeave: String,\n    clickAway: Boolean,\n    initial: String,\n  };\n\n  declare readonly toggleTargets: HTMLElement[];\n\n  declare readonly classValue: string;\n  declare readonly hasClassValue: boolean;\n\n  declare readonly mouseEnterValue: ToggleClassMode;\n  declare readonly hasMouseEnterValue: boolean;\n\n  declare readonly mouseLeaveValue: ToggleClassMode;\n  declare readonly hasMouseLeaveValue: boolean;\n\n  declare readonly clickAwayValue: boolean;\n  declare readonly hasClickAwayValue: boolean;\n\n  declare readonly initialValue: \"on\" | \"off\";\n  declare readonly hasInitialValue: boolean;\n\n  connect() {\n    if (!this.hasClassValue) {\n      throw new Error(\"data-toggle-class-class-value must not be empty\");\n    }\n\n    if (this.hasMouseEnterValue || this.hasMouseLeaveValue) {\n      useHover(this);\n    }\n\n    if (this.hasClickAwayValue && this.clickAwayValue) {\n      useClickOutside(this);\n    }\n\n    requestAnimationFrame(() => {\n      if (this.hasInitialValue) {\n        if (this.initialValue === \"on\") {\n          this.toggleTargets.forEach((target) => this.elementOn(target));\n        } else {\n          this.toggleTargets.forEach((target) => this.elementOff(target));\n        }\n      }\n    });\n  }\n\n  clickOutside() {\n    this.toggleTargets.forEach((target) => {\n      if (this.elementWasToggled(target)) {\n        this.elementToggleStatus(target);\n        this.elementToggle(target);\n      }\n    });\n  }\n\n  mouseEnter() {\n    if (this.hasMouseEnterValue) {\n      switch (this.mouseEnterValue) {\n        case \"on\":\n          this.on();\n          break;\n        case \"off\":\n          this.off();\n          break;\n        case \"toggle\":\n          this.toggle();\n          break;\n      }\n    }\n    return {};\n  }\n\n  mouseLeave() {\n    if (this.hasMouseLeaveValue) {\n      switch (this.mouseLeaveValue) {\n        case \"on\":\n          this.on();\n          break;\n        case \"off\":\n          this.off();\n          break;\n        case \"toggle\":\n          this.toggle();\n          break;\n      }\n    }\n    return {};\n  }\n\n  on(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementOn(target);\n    });\n  }\n\n  off(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementOff(target);\n    });\n  }\n\n  toggle(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementToggle(target);\n    });\n  }\n\n  private elementWasToggled(el: HTMLElement): boolean {\n    return el.dataset.toggled == \"true\";\n  }\n\n  private elementToggleStatus(el: HTMLElement) {\n    if (this.elementWasToggled(el)) {\n      delete el.dataset.toggled;\n    } else {\n      el.dataset.toggled = \"true\";\n    }\n  }\n\n  private elementToggle(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass));\n  }\n\n  private elementOn(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass, true));\n  }\n\n  private elementOff(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass, false));\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\nimport {isHTMLLinkElement} from \"./utilities/elements\";\nimport {isTurboFrame} from \"./utilities/turbo\";\n\nexport class TurboFrameRCController extends BaseController {\n\n  static values = {\n    frameId: String,\n    src: String,\n    loadingMessage: String,\n  };\n\n  declare readonly frameIdValue: string;\n  declare readonly srcValue: string;\n  declare readonly hasSrcValue: boolean;\n  declare readonly loadingMessageValue: string;\n  declare readonly hasLoadingMessageValue: boolean;\n\n  toggle(event?: Event | null) {\n    if (event) {\n      event.preventDefault();\n    }\n    let frame = this.getFrame();\n    let frameSrc = frame.src;\n    if (frameSrc == null || frameSrc !== this.getSrc()) {\n      this.setSrc();\n    } else {\n      this.clear();\n    }\n  }\n\n  setSrc(event?: Event | null) {\n    if (event) {\n      event.preventDefault();\n    }\n    let frame = this.getFrame();\n    if (this.hasLoadingMessageValue) {\n      frame.innerHTML = this.loadingMessageValue;\n    }\n\n    frame.src = this.getSrc();\n  }\n\n  clear(event?: Event | null) {\n    if (event) {\n      event.preventDefault();\n    }\n    let frame = this.getFrame();\n    frame.src = \"\";\n    frame.innerHTML = \"\";\n  }\n\n  private getFrame(): TurboFrame {\n    let frame = document.getElementById(`${this.frameIdValue}`);\n    if (frame == null) {\n      throw new Error(`Could not find frame with ID '${this.frameIdValue}'`);\n    }\n    if (!isTurboFrame(frame)) {\n      throw new Error(`Element targeted by ID '${this.frameIdValue}'`);\n    } else {\n      return frame;\n    }\n  }\n\n  private getSrc(): string {\n    let element = this.element as HTMLElement;\n    if (this.hasSrcValue) {\n      return this.srcValue;\n    } else if (isHTMLLinkElement(element)) {\n      return element.href;\n    } else {\n      throw new Error(\"No link given to drive frame to\");\n    }\n  }\n\n}\n","export function isTurboFrame(element: HTMLElement): element is TurboFrame {\r\n  return element.nodeName == \"TURBO-FRAME\";\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class WordCountController extends BaseController {\r\n\r\n  static targets = [\"input\", \"output\"];\r\n  static values = {min: Number, max: Number};\r\n  static classes = [\"error\"];\r\n\r\n  declare readonly inputTarget: HTMLInputElement | HTMLTextAreaElement;\r\n  declare readonly outputTarget: HTMLElement;\r\n  declare minValue: number;\r\n  declare hasMinValue: boolean;\r\n  declare maxValue: number;\r\n  declare hasMaxValue: boolean;\r\n  declare errorClass: string;\r\n  declare hasErrorClass: boolean;\r\n\r\n  boundHandler = this.updateWordCount.bind(this);\r\n\r\n  connect() {\r\n    this.updateWordCount();\r\n    this.inputTarget.addEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  disconnect() {\r\n    this.inputTarget.removeEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  updateWordCount() {\r\n    let wordCount = 0;\r\n    let textAreaValue = this.inputTarget.value;\r\n    let matches = textAreaValue.match(/\\S+/g);\r\n    wordCount = (matches && matches.length) || 0;\r\n    this.outputTarget.innerText = wordCount.toString();\r\n    if (this.hasErrorClass) {\r\n      if (this.isValidCount(wordCount)) {\r\n        this.outputTarget.classList.remove(this.errorClass);\r\n      } else {\r\n        this.outputTarget.classList.add(this.errorClass);\r\n      }\r\n    }\r\n  }\r\n\r\n  isValidCount(count: number) {\r\n    let min = 0;\r\n    let max = 99999;\r\n\r\n    if (this.hasMinValue) {\r\n      min = this.minValue;\r\n    }\r\n\r\n    if (this.hasMaxValue) {\r\n      max = this.maxValue;\r\n    }\r\n\r\n    return count >= min && count <= max;\r\n  }\r\n\r\n}\r\n"],"names":["BaseController","context","_this","Proxy","get","obj","prop","returnVal","Reflect","self","test","logProperty","toString","apply","target","thisArg","argArray","log","args","dispatch","element","eventName","options","bubbles","cancelable","detail","event","CustomEvent","dispatchEvent","functionName","this","application","debug","logger","console","groupCollapsed","identifier","groupEnd","Controller","AsyncBlockController","connect","loadContent","el","hasReplaceTarget","replaceTarget","fetch","endpointValue","then","response","text","html","newEl","document","createElement","innerHTML","replaceWith","err","endpoint","String","AutoSubmitFormController","handler","bind","querySelectorAll","forEach","addEventListener","_this2","boundHandler","disconnect","removeEventListener","_this3","e","method","controller","methodName","composeEventName","name","eventPrefix","composedName","extendedEvent","type","composed","Object","assign","originalEvent","defaultOptions","events","onlyVisible","StimulusUse","[object Object]","_a","_b","_c","controllerId","stimulusUseDebug","id","dataset","controllerInitialize","initialize","controllerConnect","controllerDisconnect","UseHover","super","observe","targetElement","onEnter","onLeave","unobserve","call","hover","enhanceController","UseMutation","observer","error","handleError","mutation","entries","MutationObserver","useWindowResize","callback","innerWidth","innerHeight","window","payload","height","Infinity","width","debounce","fn","wait","timeoutId","arguments","clearTimeout","setTimeout","AutosizeController","style","resize","boxSizing","requestAnimationFrame","windowResize","autosize","offset","offsetHeight","clientHeight","scrollHeight","CharCountController","updateCharCount","inputTarget","charCount","value","length","outputTarget","innerText","hasErrorClass","isValidCount","classList","remove","errorClass","add","count","min","max","hasMinValue","minValue","hasMaxValue","maxValue","Number","CheckboxSelectAllController","toggle","refresh","hasCheckboxAllTarget","selectAllTarget","checkboxTargets","checkbox","preventDefault","checked","checkboxesCount","checkboxesCheckedCount","indeterminate","filter","ClipboardController","supported","queryCommandSupported","hasRemoveUnusedValue","removeUnusedValue","hasFallbackTarget","fallbackTarget","hasCopyTarget","copyTarget","select","sourceTarget","copy","execCommand","removeUnused","Boolean","ConfirmNavigationController","confirmMessage","messageValue","onbeforeunload","handlePopstate","message","DebugController","testTargets","DetectDirtyController","initialValue","isInputElement","isCheckable","restore","setAttribute","removeAttribute","tagName","DisableInputsController","hasDisablerTarget","disablerTarget","disableInputs","enableInputs","shouldClear","hasClearValue","clearValue","disableTargets","_","disabled","clear","DismissableController","dismiss","EmptyDomController","useMutation","childList","checkEmpty","mutate","children","hasScopeSelectorValue","scopeSelectorValue","hasNotEmptyClass","notEmptyClass","split","klass","hasEmptyClass","emptyClass","scopeSelector","EnableInputsController","hasEnablerTarget","enablerTarget","enableTargets","FallbackImageController","onerror","hasPlaceholderValue","src","placeholderValue","display","isHTMLInputElement","nodeName","placeholder","FormSaveController","_clear","Error","restoreOnLoad","clearOnSubmit","localStorage","removeItem","formIdentifier","save","setItem","JSON","stringify","formData","getItem","savedData","parse","formElements","hasIdValue","idValue","elementID","location","href","formID","elements","data","hasRestoreOnLoadValue","restoreOnLoadValue","hasClearOnSubmitValue","clearOnSubmitValue","LazyBlockController","threshold","IntersectionObserver","entry","isIntersecting","isVisible","appearEvent","dispatchAppear","disappearEvent","dispatchDisappear","useIntersection","appear","LimitedSelectionCheckboxesController","handleInputs","inputTargets","boundHandleInputs","tickedInputs","reduce","previousValue","maxSelections","hasErrorTarget","errorTarget","NestedFormController","checkStructure","content","templateTarget","replace","generateID","targetTarget","insertAdjacentHTML","insertMode","wrapper","closest","wrapperClass","newRecord","destroyInput","querySelector","Date","getTime","Math","random","indexOf","hasWrapperSelectorValue","wrapperClassValue","hasInsertModeValue","insertModeValue","PasswordConfirmController","checkPasswordsMatch","passwordTargets","boundCheckPasswordsMatch","allPasswordsMatch","values","Set","map","has","size","_this4","PasswordPeekController","peak","passwordTarget","hide","ResponsiveIframeWrapperController","messageReceived","boundMessageReceived","hasOwnProperty","ResponsiveIframeBodyController","top","constructor","debounces","func","postUpdate","getHeight","parent","postMessage","body","documentElement","smoothPolyfilled","EphemeralController","cleanupSelf","cleanup","replaceAll","RegExp","substringIdentifierValueRegex","camelCase","action","keys","val","classes","scrollToElement","behavior","block","inline","scrollIntoView","smoothSupported","import","polyfill","polyfillSmooth","getScrollParent","node","overflowY","getComputedStyle","parentElement","ScrollIntoFocusController","hasBehaviorValue","behaviorValue","hasBlockValue","blockValue","hasInlineValue","inlineValue","ScrollToBottomController","scroll","hasModeValue","modeValue","mode","ScrollToController","selectorValue","warn","selector","ScrollToTopController","SelfDestructController","timeout","secondsValue","seconds","TeleportController","hasInsertValue","hasImmediateValue","immediateValue","execute","destination","targetValue","cloneNode","insertValue","outerHTML","insert","immediate","ToggleClassController","hasClassValue","hasMouseEnterValue","hasMouseLeaveValue","useHover","hasClickAwayValue","clickAwayValue","onEvent","contains","rect","getBoundingClientRect","windowHeight","windowWidth","clientWidth","left","isElementInViewport","clickOutside","clickOutsideEvent","useClickOutside","hasInitialValue","toggleTargets","elementOn","elementOff","elementWasToggled","elementToggleStatus","elementToggle","mouseEnter","mouseEnterValue","on","off","mouseLeave","mouseLeaveValue","_this5","toggled","classValue","class","clickAway","initial","TurboFrameRCController","frameSrc","getFrame","getSrc","setSrc","frame","hasLoadingMessageValue","loadingMessageValue","getElementById","frameIdValue","hasSrcValue","srcValue","isHTMLLinkElement","frameId","loadingMessage","WordCountController","updateWordCount","wordCount","matches","match"],"mappings":"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"}