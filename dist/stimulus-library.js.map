{"version":3,"file":"stimulus-library.js","sources":["../src/async_block_controller.ts","../src/auto_submit_form_controller.ts","../src/autosize_controller.ts","../src/char_count_controller.ts","../src/clipboard_controller.ts","../src/confirm_navigation_controller.ts","../src/detect_dirty_controller.ts","../src/disable_inputs_controller.ts","../src/dismissable_controller.ts","../src/empty_dom_controller.ts","../src/enable_inputs_controller.ts","../src/fallback_image_controller.ts","../src/lazy_block_controller.ts","../src/limited_selection_checkboxes_controller.ts","../src/password_confirm_controller.ts","../src/password_peek_controller.ts","../src/responsive_iframe_controller.ts","../src/self_destruct_controller.ts","../src/teleport_controller.ts","../src/toggle_class_controller.ts","../src/word_count_controller.ts"],"sourcesContent":["import {Controller} from \"stimulus\";\n\nexport class AsyncBlockController extends Controller {\n  static targets = [\"replace\"];\n  static values = {endpoint: String};\n\n  declare readonly replaceTarget: HTMLElement;\n  declare readonly hasReplaceTarget: boolean;\n  declare readonly endpointValue: string;\n\n\n  // This is a simple controller to load a block of content when the page loads.\n  // It should be used to give a quick initial response before calling out to an\n  // an AJAX endpoint to do some expensive work.\n  connect() {\n    this.loadContent();\n  }\n\n  loadContent() {\n    let el = (this.hasReplaceTarget ? this.replaceTarget : this.element) as HTMLElement;\n    fetch(this.endpointValue)\n    .then((response) => response.text())\n    .then((html) => {\n      let newEl = document.createElement(\"div\");\n      newEl.innerHTML = html;\n      el.replaceWith(newEl);\n\n      // Trigger event to show block has loaded\n      let event = new CustomEvent(\"ajax:success\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    })\n    .catch(err => {\n      el.replaceWith(\"Sorry, this content failed to load\");\n\n      let event = new CustomEvent(\"ajax:error\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    })\n    .finally(() => {\n      let event = new CustomEvent(\"ajax:complete\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    });\n  }\n}\n","import {Controller} from \"stimulus\";\n\nexport class AutoSubmitFormController extends Controller {\n\n  private boundHandler = this.handler.bind(this);\n\n  connect() {\n    (this.element as HTMLElement).querySelectorAll(\"input, select, textarea\").forEach(el => el.addEventListener(\"change\", this.boundHandler));\n  }\n\n  disconnect() {\n    (this.element as HTMLElement).querySelectorAll(\"input, select, textarea\").forEach(el => el.removeEventListener(\"change\", this.boundHandler));\n  }\n\n  private handler(e: Event) {\n    // this.element.submit()\n    // Moved to this to support remote forms and CSRF properly\n    this.element.dispatchEvent(\n      new CustomEvent(\"submit\", {\n        bubbles: true,\n        cancelable: true,\n      }),\n    );\n  }\n}\n","import {Controller} from \"stimulus\";\nimport {useWindowResize} from \"stimulus-use\";\n\nexport class AutosizeController extends Controller {\n\n  private boundHandler = this.handler.bind(this);\n  declare observe: () => void;\n  declare unobserve: () => void;\n\n  connect() {\n    let target = this.element as HTMLTextAreaElement;\n    target.style.resize = \"none\";\n    target.style.boxSizing = \"border-box\";\n\n    useWindowResize(this);\n\n    setTimeout(this.boundHandler, 1000);\n    target.addEventListener(\"input\", this.boundHandler);\n    target.addEventListener(\"focus\", this.boundHandler);\n  }\n\n  windowResize() {\n    this.handler();\n  }\n\n  private handler() {\n    this.autosize(this.element as HTMLTextAreaElement);\n  };\n\n  private autosize(element: HTMLTextAreaElement) {\n    let offset = element.offsetHeight - element.clientHeight;\n    element.style.height = \"auto\";\n    element.style.height = element.scrollHeight + offset + \"px\";\n  }\n\n}\n","import {Controller} from \"stimulus\";\r\n\r\nexport class CharCountController extends Controller {\r\n\r\n  static targets = [\"input\", \"output\"];\r\n  static values = {min: Number, max: Number};\r\n  static classes = [\"error\"];\r\n\r\n  declare readonly inputTarget: HTMLInputElement | HTMLTextAreaElement;\r\n  declare readonly outputTarget: HTMLElement;\r\n  declare minValue: number;\r\n  declare hasMinValue: boolean;\r\n  declare maxValue: number;\r\n  declare hasMaxValue: boolean;\r\n  declare errorClass: string;\r\n  declare hasErrorClass: boolean;\r\n\r\n  boundHandler = this.updateCharCount.bind(this);\r\n\r\n  connect() {\r\n    this.updateCharCount();\r\n    this.inputTarget.addEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  disconnect() {\r\n    this.inputTarget.removeEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  updateCharCount() {\r\n    let charCount = this.inputTarget.value.length;\r\n    this.outputTarget.innerText = charCount.toString();\r\n    if (this.hasErrorClass) {\r\n      if (this.isValidCount(charCount)) {\r\n        this.outputTarget.classList.remove(this.errorClass);\r\n      } else {\r\n        this.outputTarget.classList.add(this.errorClass);\r\n      }\r\n    }\r\n  }\r\n\r\n  isValidCount(count: number) {\r\n    let min = 0;\r\n    let max = 99999;\r\n\r\n    if (this.hasMinValue) {\r\n      min = this.minValue;\r\n    }\r\n\r\n    if (this.hasMaxValue) {\r\n      max = this.maxValue;\r\n    }\r\n\r\n    return count >= min && count <= max;\r\n  }\r\n\r\n}\r\n","import {Controller} from \"stimulus\";\r\n\r\nexport class ClipboardController extends Controller {\r\n\r\n  static targets = [\"button\", \"copy\", \"fallback\"];\r\n  static values = {removeUnused: Boolean};\r\n\r\n  declare readonly sourceTarget: HTMLElement;\r\n  declare readonly copyTarget: HTMLElement;\r\n  declare readonly hasCopyTarget: boolean;\r\n  declare readonly fallbackTarget: HTMLElement;\r\n  declare readonly hasFallbackTarget: boolean;\r\n\r\n  declare readonly hasRemoveUnusedValue: boolean;\r\n  declare readonly removeUnusedValue: boolean;\r\n\r\n  supported = false;\r\n\r\n  connect() {\r\n    this.supported = document.queryCommandSupported(\"copy\");\r\n\r\n    if (this.hasRemoveUnusedValue && this.removeUnusedValue) {\r\n      if (this.supported && this.hasFallbackTarget) {\r\n        this.fallbackTarget.remove();\r\n      } else if (this.hasCopyTarget) {\r\n        this.copyTarget.remove();\r\n      }\r\n    }\r\n  }\r\n\r\n  select(event: MouseEvent) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    (this.sourceTarget as HTMLInputElement | HTMLTextAreaElement).select();\r\n  }\r\n\r\n  copy(event: ClipboardEvent) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    (this.sourceTarget as HTMLInputElement | HTMLTextAreaElement).select();\r\n    if (this.supported) {\r\n      document.execCommand(\"copy\");\r\n    }\r\n  }\r\n}\r\n","import {Controller} from \"stimulus\";\r\n\r\nexport class ConfirmNavigationController extends Controller {\r\n\r\n  static values = {message: String}\r\n\r\n  declare readonly messageValue: string;\r\n\r\n  connect() {\r\n    let confirmMessage = this.messageValue;\r\n    window.onbeforeunload = () => (confirmMessage == null ? true : confirmMessage);\r\n    window.addEventListener(\"popstate\", this.handlePopstate);\r\n    window.addEventListener(\"submit\", () => {\r\n      window.removeEventListener(\"popstate\", this.handlePopstate);\r\n      window.onbeforeunload = null;\r\n    });\r\n    // TODO: Turbo navigation events\r\n  }\r\n\r\n  handlePopstate(event: PopStateEvent) {\r\n    return false;\r\n  }\r\n\r\n}\r\n","import {Controller} from \"stimulus\";\r\n\r\nexport class DetectDirtyController extends Controller {\r\n\r\n  initialValue: string | boolean | null = null;\r\n\r\n  boundHandler = this.handler.bind(this);\r\n\r\n  connect() {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    if (this.isInputElement(element) && this.isCheckable(element)) {\r\n      this.initialValue = element.checked;\r\n    } else {\r\n      this.initialValue = element.value;\r\n    }\r\n    element.addEventListener(\"input\", this.boundHandler);\r\n    element.addEventListener(\"change\", this.boundHandler);\r\n  }\r\n\r\n  disconnect() {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    element.removeEventListener(\"input\", this.boundHandler);\r\n    element.removeEventListener(\"change\", this.boundHandler);\r\n  }\r\n\r\n  restore() {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    if (this.isInputElement(element) && this.isCheckable(element)) {\r\n      element.checked = this.initialValue as boolean;\r\n    } else {\r\n      element.value = this.initialValue as string;\r\n    }\r\n  }\r\n\r\n  private handler(event?: Event) {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n\r\n    if (this.initialValue !== element.value) {\r\n      element.setAttribute(\"data-dirty\", \"true\");\r\n    } else {\r\n      element.removeAttribute(\"data-dirty\");\r\n    }\r\n  }\r\n\r\n  private isCheckable(element: HTMLInputElement): boolean {\r\n    return (element.type === \"radio\" || element.type === \"checkbox\");\r\n  }\r\n\r\n  private isInputElement(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement): element is HTMLInputElement {\r\n    return element.tagName === \"INPUT\";\r\n  }\r\n\r\n}\r\n\r\nexport function isDirty(element: HTMLElement) {\r\n  return element.hasAttribute(\"data-dirty\");\r\n}\r\n","import {Controller} from \"stimulus\";\r\n\r\nexport class DisableInputsController extends Controller {\r\n\r\n  static targets = [\"disabler\", \"disable\"];\r\n\r\n  declare readonly hasDisablerTarget: boolean;\r\n  declare readonly disablerTarget: HTMLInputElement;\r\n  declare readonly disableTargets: Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\r\n\r\n  connect() {\r\n    this.toggle();\r\n  }\r\n\r\n  toggle() {\r\n    if (this.hasDisablerTarget && this.disablerTarget.checked) {\r\n      this.disableInputs();\r\n    } else {\r\n      this.enableInputs();\r\n    }\r\n  }\r\n\r\n  disableInputs() {\r\n    this.disableTargets.forEach((el, _) => {\r\n      el.disabled = true;\r\n    });\r\n  }\r\n\r\n  enableInputs() {\r\n    this.disableTargets.forEach((el, _) => {\r\n      el.disabled = false;\r\n    });\r\n  }\r\n}\r\n","import {Controller} from \"stimulus\";\r\n\r\nexport class DismissableController extends Controller {\r\n\r\n  dismiss() {\r\n    this.element.remove();\r\n  }\r\n\r\n}\r\n","import {Controller} from \"stimulus\";\r\nimport {useMutation} from \"stimulus-use\";\r\n\r\nexport class EmptyDomController extends Controller {\r\n\r\n  static classes = [\"empty\"];\r\n  static values = {scopeSelector: String};\r\n\r\n  declare hasEmptyClass: boolean;\r\n  declare emptyClass: string;\r\n\r\n  declare hasScopeSelectorValue: boolean;\r\n  declare scopeSelectorValue: string;\r\n\r\n  connect() {\r\n    useMutation(this, {element: this.element, childList: true});\r\n  }\r\n\r\n  mutate(entries: MutationRecord[]) {\r\n    let children;\r\n    if (this.hasScopeSelectorValue) {\r\n      children = this.element.querySelectorAll(this.scopeSelectorValue);\r\n    } else {\r\n      children = this.element.children;\r\n    }\r\n\r\n    if (children.length === 0) {\r\n      if (this.hasEmptyClass) {\r\n        this.element.classList.add(this.emptyClass);\r\n      }\r\n      this.element.dispatchEvent(new CustomEvent(\"dom:empty\", {bubbles: true, cancelable: true}));\r\n    } else {\r\n      if (this.hasEmptyClass) {\r\n        this.element.classList.remove(this.emptyClass);\r\n      }\r\n      this.element.dispatchEvent(new CustomEvent(\"dom:not-empty\", {bubbles: true, cancelable: true}));\r\n    }\r\n  }\r\n\r\n}\r\n","import {Controller} from \"stimulus\";\r\n\r\nexport class EnableInputsController extends Controller {\r\n\r\n  static targets = [\"enabler\", \"enable\"];\r\n\r\n  declare readonly hasEnablerTarget: boolean;\r\n  declare readonly enablerTarget: HTMLInputElement;\r\n  declare readonly enableTargets: Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\r\n\r\n  connect() {\r\n    this.toggle();\r\n  }\r\n\r\n  toggle() {\r\n    if (this.hasEnablerTarget && this.enablerTarget.checked) {\r\n      this.enableInputs();\r\n    } else {\r\n      this.disableInputs();\r\n    }\r\n  }\r\n\r\n  disableInputs() {\r\n    this.enableTargets.forEach((el, _) => {\r\n      el.disabled = true;\r\n    });\r\n  }\r\n\r\n  enableInputs() {\r\n    this.enableTargets.forEach((el, _) => {\r\n      el.disabled = false;\r\n    });\r\n  }\r\n}\r\n","import {Controller} from \"stimulus\";\r\n\r\nexport class FallbackImageController extends Controller {\r\n\r\n  static values = {placeholder: String};\r\n\r\n  declare readonly placeholderValue: string;\r\n  declare readonly hasPlaceholderValue: boolean;\r\n\r\n  connect() {\r\n    let element = this.element as HTMLImageElement;\r\n\r\n    element.onerror = () => {\r\n      if (this.hasPlaceholderValue) {\r\n        element.src = this.placeholderValue;\r\n      } else {\r\n        element.style.display = \"none\";\r\n      }\r\n    };\r\n  }\r\n\r\n}\r\n","import {useIntersection} from \"stimulus-use\";\nimport {IntersectionOptions} from \"stimulus-use/dist/use-intersection/use-intersection\";\nimport {AsyncBlockController} from \"./async_block_controller\";\n\nexport class LazyBlockController extends AsyncBlockController {\n\n  declare observe: () => void;\n  declare unobserve: () => void;\n  declare options: IntersectionOptions;\n  declare isVisible: boolean;\n  declare disappear : () => void;\n\n  connect() {\n    let element = this.element;\n    this.options = {element, threshold: 0.3};\n\n    if (\"IntersectionObserver\" in window) {\n      [this.observe, this.unobserve] = useIntersection(this, this.options);\n    } else {\n      // Client doesn't support intersection observer, fallback to pre-loading\n      this.loadContent();\n    }\n  }\n\n  appear(entry: IntersectionObserverEntry) {\n    let element = this.element as HTMLImageElement;\n    if (element.src !== \"\") {\n      return;\n    }\n    if (entry.target === element && entry.isIntersecting) {\n      this.loadContent();\n      if (this.unobserve) {\n        this.unobserve();\n      }\n    }\n  }\n\n}\n","import {Controller} from \"stimulus\";\r\n\r\nexport class LimitedSelectionCheckboxesController extends Controller {\r\n\r\n  static targets = [\"input\", \"error\"];\r\n  static values = {max: Number, message: String};\r\n\r\n  declare readonly hasErrorTarget: boolean;\r\n  declare readonly errorTarget: HTMLElement;\r\n  declare readonly inputTargets: HTMLInputElement[];\r\n  declare readonly maxValue: number;\r\n  declare readonly messageValue: string;\r\n\r\n  maxSelections = 0;\r\n\r\n  boundHandleInputs = this.handleInputs.bind(this);\r\n\r\n  connect() {\r\n    this.inputTargets.forEach((el) => el.addEventListener(\"change\", this.boundHandleInputs));\r\n  }\r\n\r\n  disconnect() {\r\n    this.inputTargets.forEach((el) => el.removeEventListener(\"change\", this.boundHandleInputs));\r\n  }\r\n\r\n  handleInputs(event: Event) {\r\n    let tickedInputs = this.inputTargets.reduce((previousValue, el) => el.checked ? previousValue + 1 : previousValue, 0);\r\n    let target = event.target as HTMLInputElement;\r\n    if (tickedInputs > this.maxSelections) {\r\n      event.preventDefault();\r\n      target.checked = false;\r\n      target.dispatchEvent(new CustomEvent(\"change\", {bubbles: true, cancelable: true}));\r\n      target.dispatchEvent(new CustomEvent(\"limited-selection:too-many\", {bubbles: true, cancelable: true, detail: {target}}));\r\n      if (this.hasErrorTarget) {\r\n        this.errorTarget.innerHTML = this.messageValue;\r\n      }\r\n    } else {\r\n      target.dispatchEvent(new CustomEvent(\"limited-selection:selection\", {bubbles: true, cancelable: true, detail: {target}}));\r\n      if (this.hasErrorTarget) {\r\n        this.errorTarget.innerHTML = \"\";\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {Controller} from \"stimulus\";\r\n\r\nexport class PasswordConfirmController extends Controller {\r\n\r\n  static targets = [\"password\"];\r\n  static classes = [\"error\"];\r\n\r\n  declare readonly passwordTargets: HTMLInputElement[];\r\n\r\n  declare readonly errorClass: string;\r\n  declare readonly hasErrorClass: boolean;\r\n\r\n  private boundCheckPasswordsMatch = this.checkPasswordsMatch.bind(this);\r\n\r\n  connect() {\r\n    this.passwordTargets.forEach((el) => el.addEventListener(\"change\", this.boundCheckPasswordsMatch));\r\n  }\r\n\r\n  disconnect() {\r\n    this.passwordTargets.forEach((el) => el.removeEventListener(\"change\", this.boundCheckPasswordsMatch));\r\n  }\r\n\r\n  private allPasswordsMatch() {\r\n    let values = new Set(this.passwordTargets.map(el => el.value));  // Create a unique set of the password values\r\n    return values.has(\"\") || values.size == 1; // If any of the passwords are still blank, or there is only one distinct password value (i.e. they all are the same)\r\n  }\r\n\r\n  private checkPasswordsMatch() {\r\n    if (this.allPasswordsMatch()) {\r\n      this.element.dispatchEvent(new CustomEvent(\"password-confirm:match\"));\r\n      if (this.hasErrorClass) {\r\n        this.passwordTargets.forEach(el => el.classList.remove(this.errorClass));\r\n      }\r\n    } else {\r\n      this.element.dispatchEvent(new CustomEvent(\"password-confirm:no-match\"));\r\n      if (this.hasErrorClass) {\r\n        this.passwordTargets.forEach(el => el.classList.add(this.errorClass));\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {Controller} from \"stimulus\";\r\n\r\nexport class PasswordPeekController extends Controller {\r\n\r\n  static targets = [\"password\"];\r\n\r\n  declare readonly passwordTarget: HTMLInputElement;\r\n\r\n  connect() {\r\n  }\r\n\r\n  peak(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    this.passwordTarget.type = \"text\";\r\n  }\r\n\r\n  hide(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    this.passwordTarget.type = \"password\";\r\n  }\r\n\r\n  toggle(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    if (this.passwordTarget.type === \"password\") {\r\n      this.peak();\r\n    } else {\r\n      this.hide();\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","import {Controller} from \"stimulus\";\nimport {useDebounce, useWindowResize} from \"stimulus-use\";\nimport {WindowResizePayload} from \"stimulus-use/dist/use-window-resize/use-window-resize\";\n\ninterface ResponsiveIframeMessage {\n  name: string,\n  height: number,\n}\n\nexport class ResponsiveIframeWrapperController extends Controller {\n\n  boundMessageReceived = this.messageReceived.bind(this);\n\n  connect() {\n    window.addEventListener(\"message\", this.boundMessageReceived);\n  }\n\n  disconnect() {\n    window.removeEventListener(\"message\", this.boundMessageReceived);\n  }\n\n  messageReceived(message: MessageEvent<ResponsiveIframeMessage>) {\n    let data = message.data;\n    if (data.hasOwnProperty(\"name\") && data.name === \"iframe-body\" && data.hasOwnProperty(\"height\")) {\n      this.resize(data.height);\n    }\n  }\n\n  resize(height: number) {\n    (this.element as HTMLIFrameElement).style.height = `${height}px`;\n  }\n\n}\n\nexport class ResponsiveIframeBodyController extends Controller {\n\n  static debounces = [\"postUpdate\"];\n\n  declare observe: () => void;\n  declare unobserve: () => void;\n\n  connect() {\n    // If this Window is inside a frame\n    if (window.self !== window.top) {\n      useWindowResize(this);\n      useDebounce(this, {});\n      this.postUpdate();\n    } else {\n      // Not an iframe\n    }\n  }\n\n  windowResize(payload: WindowResizePayload) {\n    this.postUpdate();\n  };\n\n  postUpdate() {\n    let payload: ResponsiveIframeMessage = {name: \"iframe-body\", height: this.getHeight()};\n    window.parent.postMessage(\n      payload,\n      \"*\",\n    );\n  }\n\n  getHeight(): number {\n    const body = document.body;\n    const html = document.documentElement;\n\n    // Get the largest height out of body and html's various height measurements\n    return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n  }\n\n}\n","import {Controller} from \"stimulus\";\r\n\r\nexport class SelfDestructController extends Controller {\r\n\r\n  static values = { seconds: Number }\r\n\r\n  declare readonly secondsValue: number;\r\n  timeout: null | ReturnType<typeof setTimeout> = null;\r\n\r\n  connect() {\r\n    this.timeout = setTimeout(() => this.element.remove(), this.secondsValue * 1000);\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.timeout) {\r\n      clearTimeout(this.timeout);\r\n    }\r\n  }\r\n\r\n}\r\n","// IDEA: A controller that copies the DOM element, inserts it elsewhere, then removes itself, stripping out the controller from the copied element.\r\nimport {Controller} from \"stimulus\";\r\n\r\nexport class TeleportController extends Controller {\r\n\r\n  static values = {target: String, insert: String};\r\n  declare readonly targetValue: string;\r\n  declare readonly insertValue: InsertPosition | \"replaceOuter\" | \"replaceInner\" | \"prepend\" | \"append\";\r\n\r\n  connect() {\r\n    let destination = document.querySelector(this.targetValue);\r\n\r\n    if (destination == null) {\r\n      this.element.dispatchEvent(new CustomEvent(\"teleport:error\", {bubbles: true, cancelable: true}));\r\n      return;\r\n    }\r\n\r\n    let copy = this.element.cloneNode(true) as HTMLElement;\r\n    copy.removeAttribute(`${this.identifier}-insert-adjacent-html-value`);\r\n    copy.setAttribute(\r\n      \"data-controller\",\r\n      copy.getAttribute(\"data-controller\")?.replace(new RegExp(`(^|\\s)${this.identifier}($|\\s)`), \"\") || \"\",\r\n    );\r\n    copy.removeAttribute(`data-controller${this.identifier}-insert-adjacent-html-value`);\r\n\r\n    switch (this.insertValue) {\r\n      case \"beforebegin\":\r\n      case \"beforeend\":\r\n      case \"afterend\":\r\n      case \"afterbegin\":\r\n        destination.insertAdjacentHTML(this.insertValue, copy.outerHTML);\r\n        break;\r\n      case \"replaceOuter\":\r\n        destination.outerHTML = copy.outerHTML;\r\n        break;\r\n      case \"replaceInner\":\r\n        destination.innerHTML = copy.outerHTML;\r\n        break;\r\n      case \"prepend\":\r\n        destination.insertAdjacentHTML(\"afterbegin\", copy.outerHTML);\r\n        break;\r\n      case \"append\":\r\n        destination.insertAdjacentHTML(\"beforeend\", copy.outerHTML);\r\n        break;\r\n    }\r\n  }\r\n\r\n}\r\n","import {Controller} from \"stimulus\";\r\nimport {useClickOutside, useHover} from \"stimulus-use\";\r\n\r\nexport type ToggleClassMode = \"on\" | \"off\" | \"toggle\"\r\n\r\nexport class ToggleClassController extends Controller {\r\n\r\n  static targets = [\"toggle\"];\r\n  static values = {\r\n    class: String,\r\n    mouseEnter: String,\r\n    mouseLeave: String,\r\n    clickAway: Boolean,\r\n    initial: Boolean,\r\n  };\r\n\r\n  declare readonly toggleTargets: HTMLElement[];\r\n\r\n  declare readonly classValue: string;\r\n  declare readonly hasClassValue: boolean;\r\n\r\n  declare readonly mouseEnterValue: ToggleClassMode;\r\n  declare readonly hasMouseEnterValue: boolean;\r\n\r\n  declare readonly mouseLeaveValue: ToggleClassMode;\r\n  declare readonly hasMouseLeaveValue: boolean;\r\n\r\n  declare readonly clickAwayValue: boolean;\r\n  declare readonly hasClickAwayValue: boolean;\r\n\r\n  declare readonly initialValue: \"on\" | \"off\";\r\n\r\n  connect() {\r\n    if (this.initialValue === \"on\") {\r\n      this.toggleTargets.forEach((target) => this.elementOn(target));\r\n    } else {\r\n      this.toggleTargets.forEach((target) => this.elementOff(target));\r\n    }\r\n\r\n    if (this.hasMouseEnterValue || this.hasMouseLeaveValue) {\r\n      useHover(this);\r\n    }\r\n\r\n    if (this.hasClickAwayValue && this.clickAwayValue) {\r\n      useClickOutside(this);\r\n    }\r\n\r\n    if (!this.hasClassValue) {\r\n      throw new Error(\"data-toggle-class-class-value must not be empty\");\r\n    }\r\n  }\r\n\r\n  clickOutside() {\r\n    this.toggleTargets.forEach((target) => {\r\n      if (this.elementWasToggled(target)) {\r\n        this.elementToggleStatus(target);\r\n        this.elementToggle(target);\r\n      }\r\n    });\r\n  }\r\n\r\n  mouseEnter() {\r\n    if (this.hasMouseEnterValue) {\r\n      switch (this.mouseEnterValue) {\r\n        case \"on\":\r\n          this.on();\r\n          break;\r\n        case \"off\":\r\n          this.off();\r\n          break;\r\n        case \"toggle\":\r\n          this.toggle();\r\n          break;\r\n      }\r\n    }\r\n    return {};\r\n  }\r\n\r\n  mouseLeave() {\r\n    if (this.hasMouseLeaveValue) {\r\n      switch (this.mouseLeaveValue) {\r\n        case \"on\":\r\n          this.off(); // Reverse behaviour when hover state ends\r\n          break;\r\n        case \"off\":\r\n          this.on(); // Reverse behaviour when hover state ends\r\n          break;\r\n        case \"toggle\":\r\n          this.toggle();\r\n          break;\r\n      }\r\n    }\r\n    return {};\r\n  }\r\n\r\n  on(event?: Event) {\r\n    this.toggleTargets.forEach((target) => {\r\n      this.elementToggleStatus(target);\r\n      this.elementOn(target);\r\n    });\r\n  }\r\n\r\n  off(event?: Event) {\r\n    this.toggleTargets.forEach((target) => {\r\n      this.elementToggleStatus(target);\r\n      this.elementOff(target);\r\n    });\r\n  }\r\n\r\n  toggle(event?: Event) {\r\n    this.toggleTargets.forEach((target) => {\r\n      this.elementToggleStatus(target);\r\n      this.elementToggle(target);\r\n    });\r\n  }\r\n\r\n  private elementWasToggled(el: HTMLElement): boolean {\r\n    return el.dataset.toggled == \"true\";\r\n  }\r\n\r\n  private elementToggleStatus(el: HTMLElement) {\r\n    if (this.elementWasToggled(el)) {\r\n      delete el.dataset.toggled;\r\n    } else {\r\n      el.dataset.toggled = \"true\";\r\n    }\r\n  }\r\n\r\n  private elementToggle(el: HTMLElement) {\r\n    let classes = this.classValue.split(\" \");\r\n    classes.forEach((klass) => el.classList.toggle(klass));\r\n  }\r\n\r\n  private elementOn(el: HTMLElement) {\r\n    let classes = this.classValue.split(\" \");\r\n    classes.forEach((klass) => el.classList.toggle(klass, true));\r\n  }\r\n\r\n  private elementOff(el: HTMLElement) {\r\n    let classes = this.classValue.split(\" \");\r\n    classes.forEach((klass) => el.classList.toggle(klass, false));\r\n  }\r\n\r\n}\r\n","import {Controller} from \"stimulus\";\r\n\r\nexport class WordCountController extends Controller {\r\n\r\n  static targets = [\"input\", \"output\"];\r\n  static values = {min: Number, max: Number};\r\n  static classes = [\"error\"];\r\n\r\n  declare readonly inputTarget: HTMLInputElement | HTMLTextAreaElement;\r\n  declare readonly outputTarget: HTMLElement;\r\n  declare minValue: number;\r\n  declare hasMinValue: boolean;\r\n  declare maxValue: number;\r\n  declare hasMaxValue: boolean;\r\n  declare errorClass: string;\r\n  declare hasErrorClass: boolean;\r\n\r\n  boundHandler = this.updateWordCount.bind(this);\r\n\r\n  connect() {\r\n    this.updateWordCount();\r\n    this.inputTarget.addEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  disconnect() {\r\n    this.inputTarget.removeEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  updateWordCount() {\r\n    let wordCount = 0;\r\n    let textAreaValue = this.inputTarget.value;\r\n    let matches = textAreaValue.match(/\\S+/g);\r\n    wordCount = (matches && matches.length) || 0;\r\n    this.outputTarget.innerText = wordCount.toString();\r\n    if (this.hasErrorClass) {\r\n      if (this.isValidCount(wordCount)) {\r\n        this.outputTarget.classList.remove(this.errorClass);\r\n      } else {\r\n        this.outputTarget.classList.add(this.errorClass);\r\n      }\r\n    }\r\n  }\r\n\r\n  isValidCount(count: number) {\r\n    let min = 0;\r\n    let max = 99999;\r\n\r\n    if (this.hasMinValue) {\r\n      min = this.minValue;\r\n    }\r\n\r\n    if (this.hasMaxValue) {\r\n      max = this.maxValue;\r\n    }\r\n\r\n    return count >= min && count <= max;\r\n  }\r\n\r\n}\r\n"],"names":["AsyncBlockController","connect","this","loadContent","el","hasReplaceTarget","replaceTarget","element","fetch","endpointValue","then","response","text","html","newEl","document","createElement","innerHTML","replaceWith","event","CustomEvent","detail","dispatchEvent","err","Controller","endpoint","String","AutoSubmitFormController","_this","handler","bind","querySelectorAll","forEach","addEventListener","_this2","boundHandler","disconnect","removeEventListener","_this3","e","bubbles","cancelable","AutosizeController","target","style","resize","boxSizing","useWindowResize","setTimeout","windowResize","autosize","offset","offsetHeight","clientHeight","height","scrollHeight","CharCountController","updateCharCount","inputTarget","charCount","value","length","outputTarget","innerText","toString","hasErrorClass","isValidCount","classList","remove","errorClass","add","count","min","max","hasMinValue","minValue","hasMaxValue","maxValue","Number","ClipboardController","supported","queryCommandSupported","hasRemoveUnusedValue","removeUnusedValue","hasFallbackTarget","fallbackTarget","hasCopyTarget","copyTarget","select","preventDefault","sourceTarget","copy","execCommand","removeUnused","Boolean","ConfirmNavigationController","confirmMessage","messageValue","window","onbeforeunload","handlePopstate","message","DetectDirtyController","initialValue","isInputElement","isCheckable","checked","restore","setAttribute","removeAttribute","type","tagName","DisableInputsController","toggle","hasDisablerTarget","disablerTarget","disableInputs","enableInputs","disableTargets","_","disabled","DismissableController","dismiss","EmptyDomController","useMutation","childList","mutate","entries","hasScopeSelectorValue","scopeSelectorValue","children","hasEmptyClass","emptyClass","scopeSelector","EnableInputsController","hasEnablerTarget","enablerTarget","enableTargets","FallbackImageController","onerror","hasPlaceholderValue","src","placeholderValue","display","placeholder","LazyBlockController","options","threshold","useIntersection","observe","unobserve","appear","entry","isIntersecting","LimitedSelectionCheckboxesController","handleInputs","inputTargets","boundHandleInputs","tickedInputs","reduce","previousValue","maxSelections","hasErrorTarget","errorTarget","PasswordConfirmController","checkPasswordsMatch","passwordTargets","boundCheckPasswordsMatch","allPasswordsMatch","values","Set","map","has","size","_this4","PasswordPeekController","peak","passwordTarget","hide","ResponsiveIframeWrapperController","messageReceived","boundMessageReceived","data","hasOwnProperty","name","ResponsiveIframeBodyController","self","top","useDebounce","postUpdate","payload","getHeight","parent","postMessage","body","documentElement","Math","SelfDestructController","timeout","secondsValue","clearTimeout","seconds","TeleportController","destination","querySelector","targetValue","cloneNode","identifier","getAttribute","replace","RegExp","insertValue","insertAdjacentHTML","outerHTML","insert","ToggleClassController","toggleTargets","elementOn","elementOff","hasMouseEnterValue","hasMouseLeaveValue","useHover","hasClickAwayValue","clickAwayValue","useClickOutside","hasClassValue","Error","clickOutside","elementWasToggled","elementToggleStatus","elementToggle","mouseEnter","mouseEnterValue","on","off","mouseLeave","mouseLeaveValue","_this5","dataset","toggled","classValue","split","klass","class","clickAway","initial","WordCountController","updateWordCount","wordCount","matches","match"],"mappings":"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"}