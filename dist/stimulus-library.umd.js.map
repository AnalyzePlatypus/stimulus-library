{"version":3,"file":"stimulus-library.umd.js","sources":["../src/base_controller.ts","../src/appearance_controller.ts","../src/async_block_controller.ts","../src/auto_submit_form_controller.ts","../node_modules/stimulus-use/dist/support/index.js","../node_modules/stimulus-use/dist/use-intersection/use-intersection.js","../node_modules/stimulus-use/dist/use-click-outside/use-click-outside.js","../node_modules/stimulus-use/dist/stimulus_use.js","../node_modules/stimulus-use/dist/use-hover/use-hover.js","../node_modules/stimulus-use/dist/use-mutation/use-mutation.js","../node_modules/stimulus-use/dist/use-window-resize/use-window-resize.js","../node_modules/stimulus-use/dist/use-debounce/use-debounce.js","../src/autosize_controller.ts","../src/char_count_controller.ts","../src/checkbox_select_all_controller.ts","../src/clipboard_controller.ts","../src/utilities/elements.ts","../src/confirm_controller.ts","../src/confirm_navigation_controller.ts","../src/debug_controller.ts","../src/detect_dirty_controller.ts","../src/detect_dirty_form_controller.ts","../src/disable_inputs_controller.ts","../src/disable_with_controller.ts","../src/dismissable_controller.ts","../src/element_save_controller.ts","../src/empty_dom_controller.ts","../src/enable_inputs_controller.ts","../src/fallback_image_controller.ts","../src/form_rc_controller.ts","../src/form_save_controller.ts","../src/intersection_controller.ts","../src/utilities/scroll.ts","../src/lazy_block_controller.ts","../src/lightbox_image_controller.ts","../src/limited_selection_checkboxes_controller.ts","../src/nested_form_controller.ts","../src/password_confirm_controller.ts","../src/password_peek_controller.ts","../src/remote_form_controller.ts","../src/responsive_iframe_controller.ts","../src/utilities/ephemeral_controller.ts","../src/scroll_into_focus_controller.ts","../src/scroll_to_bottom_controller.ts","../src/scroll_to_controller.ts","../src/scroll_to_top_controller.ts","../src/self_destruct_controller.ts","../src/sticky_controller.ts","../src/table_sort_controller.ts","../src/table_truncate_controller.ts","../src/teleport_controller.ts","../src/toggle_class_controller.ts","../src/utilities/turbo.ts","../src/turbo_frame_rc_controller.ts","../src/turbo_frame_refresh_controller.ts","../src/word_count_controller.ts"],"sourcesContent":["import {Context, Controller} from \"stimulus\";\n\nexport class BaseController extends Controller {\n\n  constructor(context: Context) {\n    super(context);\n    return new Proxy(this, {\n      get: (obj, prop) => {\n        let returnVal = Reflect.get(obj, prop);\n        let self = this;\n        if (logProperty(prop.toString())) {\n          if (typeof returnVal == \"function\") {\n            return new Proxy(returnVal, {\n              apply(target: any, thisArg: any, argArray?: any): any {\n                self.log(prop.toString(), {\n                  args: argArray,\n                });\n                return Reflect.apply(target, thisArg, argArray);\n              },\n            });\n          } else {\n            this.log(prop.toString());\n          }\n        }\n        return returnVal;\n      },\n    });\n  }\n\n  get el(): HTMLElement {\n    return this.element as HTMLElement;\n  }\n\n  dispatch(element: HTMLElement, eventName: string, options: CustomEventInit = {}) {\n    let mergedOptions = Object.assign({}, {bubbles: true, cancelable: true, detail: {target: element}}, options);\n    if (!!mergedOptions.detail.target) {\n      mergedOptions.detail.target = element;\n    }\n    let event = new CustomEvent(eventName, mergedOptions);\n    element.dispatchEvent(event);\n  }\n\n  log(functionName: string, args: {} = {}): void {\n    // @ts-ignore\n    if (!this.application.debug) {\n      return;\n    }\n    let logger = console;\n    logger.groupCollapsed(`%c${this.identifier} %c#${functionName}`, \"color: #3B82F6\", \"color: unset\");\n    logger.log({\n      element: this.element,\n      ...args,\n    });\n    logger.groupEnd();\n  }\n\n}\n\nfunction logProperty(prop: string): boolean {\n  switch (prop) {\n    case \"application\":\n    case \"el\":\n    case \"element\":\n    case \"constructor\":\n    case \"initialize\":\n    case \"log\":\n    case \"dispatch\":\n    case \"data\":\n    case \"valueDescriptorMap\":\n    case \"identifier\":\n      return false;\n  }\n\n  if (/^_.*?$/.test(prop)) {\n    return false;\n  }\n  if (/^.*?Target(s)?$/.test(prop)) {\n    return false;\n  }\n  if (/^.*?Value$/.test(prop)) {\n    return false;\n  }\n  if (/^.*?ValueChanged$/.test(prop)) {\n    return false;\n  }\n  if (/^.*?Class$/.test(prop)) {\n    return false;\n  }\n\n  return true;\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class AppearanceController extends BaseController {\r\n\r\n  initialize() {\r\n    this._handleVisibility = this._handleVisibility.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    window.addEventListener(\"focus\", this._handleVisibility);\r\n    window.addEventListener(\"blur\", this._handleVisibility);\r\n    document.addEventListener(\"visibilitychange\", this._handleVisibility);\r\n    this._handleVisibility();\r\n  }\r\n\r\n  disconnect() {\r\n    window.removeEventListener(\"focus\", this._handleVisibility);\r\n    window.removeEventListener(\"blur\", this._handleVisibility);\r\n    document.removeEventListener(\"visibilitychange\", this._handleVisibility);\r\n  }\r\n\r\n  appear() {\r\n    this.dispatch(this.el, \"appearance:appear\");\r\n  }\r\n\r\n  away() {\r\n    this.dispatch(this.el, \"appearance:away\");\r\n  }\r\n\r\n  _handleVisibility() {\r\n    this._documentIsActive() ? this.appear() : this.away();\r\n  }\r\n\r\n  _documentIsActive() {\r\n    return document.visibilityState == \"visible\" && document.hasFocus();\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\n\nexport class AsyncBlockController extends BaseController {\n  static targets = [\"replace\"];\n  static values = {endpoint: String, errorMessage: String, selector: String};\n\n  declare readonly replaceTarget: HTMLElement;\n  declare readonly hasReplaceTarget: boolean;\n  declare readonly endpointValue: string;\n\n  declare readonly hasSelectorValue: boolean;\n  declare readonly selectorValue: string;\n\n  declare readonly hasErrorMessageValue: boolean;\n  declare readonly errorMessageValue: string;\n\n  get _errorMessage(): string {\n    return this.hasErrorMessageValue ? this.errorMessageValue : \"This content failed to load\";\n  }\n\n  // This is a simple controller to load a block of content when the page loads.\n  // It should be used to give a quick initial response before calling out to an\n  // an AJAX endpoint to do some expensive work.\n  connect() {\n    this.loadContent();\n  }\n\n  loadContent() {\n    let self = this;\n    let el = this.hasReplaceTarget ? this.replaceTarget : this.el;\n    fetch(this.endpointValue)\n    .then((response) => response.text())\n    .then((html) => {\n      let newEl = document.createElement(\"div\");\n      newEl.innerHTML = html;\n      if (this.hasSelectorValue) {\n        let selectedContent = newEl.querySelectorAll(this.selectorValue);\n        el.replaceWith(...selectedContent);\n      } else {\n        el.replaceWith(...newEl.children);\n      }\n      // Trigger event to show block has loaded\n      self.dispatch(el, \"ajax:success\");\n    })\n    .catch(err => {\n      el.replaceWith(this._errorMessage);\n      self.dispatch(el, \"ajax:error\");\n    })\n    .finally(() => {\n      self.dispatch(el, \"ajax:complete\");\n    });\n  }\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class AutoSubmitFormController extends BaseController {\n\n  initialize() {\n    this.handler = this.handler.bind(this);\n  }\n\n  connect() {\n    this.el.querySelectorAll(\"input, select, textarea\").forEach(el => el.addEventListener(\"change\", this.handler));\n  }\n\n  disconnect() {\n    this.el.querySelectorAll(\"input, select, textarea\").forEach(el => el.removeEventListener(\"change\", this.handler));\n  }\n\n  private handler(e: Event) {\n    // Trigger synthetic \"submit\" event on form\n    this.dispatch((this.el), \"submit\");\n  }\n}\n","export const method = (controller, methodName) => {\n    const method = controller[methodName];\n    if (typeof method == 'function') {\n        return method;\n    }\n    else {\n        return (...args) => { };\n    }\n};\nexport const composeEventName = (name, controller, eventPrefix) => {\n    let composedName = name;\n    if (eventPrefix === true) {\n        composedName = `${controller.identifier}:${name}`;\n    }\n    else if (typeof eventPrefix === 'string') {\n        composedName = `${eventPrefix}:${name}`;\n    }\n    return composedName;\n};\nexport const extendedEvent = (type, event, detail) => {\n    const { bubbles, cancelable, composed } = event || { bubbles: true, cancelable: true, composed: true };\n    if (event) {\n        Object.assign(detail, { originalEvent: event });\n    }\n    const customEvent = new CustomEvent(type, {\n        bubbles,\n        cancelable,\n        composed,\n        detail,\n    });\n    return customEvent;\n};\nexport function isElementInViewport(el) {\n    const rect = el.getBoundingClientRect();\n    const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n    const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n    const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n    const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) >= 0);\n    return (vertInView && horInView);\n}\n//# sourceMappingURL=index.js.map","import { method, extendedEvent, composeEventName } from '../support/index';\nconst defaultOptions = {\n    dispatchEvent: true,\n    eventPrefix: true,\n};\nexport const useIntersection = (controller, options = {}) => {\n    const { dispatchEvent, eventPrefix } = Object.assign({}, defaultOptions, options);\n    const targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n    const callback = (entries) => {\n        const [entry] = entries;\n        if (entry.isIntersecting) {\n            dispatchAppear(entry);\n        }\n        else if (controller.isVisible) {\n            dispatchDisappear(entry);\n        }\n    };\n    const dispatchAppear = (entry) => {\n        controller.isVisible = true;\n        method(controller, 'appear').call(controller, entry);\n        // emit a custom \"appear\" event\n        if (dispatchEvent) {\n            const eventName = composeEventName('appear', controller, eventPrefix);\n            const appearEvent = extendedEvent(eventName, null, { controller, entry });\n            targetElement.dispatchEvent(appearEvent);\n        }\n    };\n    const dispatchDisappear = (entry) => {\n        controller.isVisible = false;\n        method(controller, 'disappear').call(controller, entry);\n        // emit a custom \"disappear\" event\n        if (dispatchEvent) {\n            const eventName = composeEventName('disappear', controller, eventPrefix);\n            const disappearEvent = extendedEvent(eventName, null, { controller, entry });\n            targetElement.dispatchEvent(disappearEvent);\n        }\n    };\n    // keep a copy of the current disconnect() function of the controller\n    // to support composing several behaviors\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    const observer = new IntersectionObserver(callback, options);\n    const observe = () => {\n        observer.observe(targetElement);\n    };\n    const unobserve = () => {\n        observer.unobserve(targetElement);\n    };\n    Object.assign(controller, {\n        isVisible: false,\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-intersection.js.map","import { composeEventName, extendedEvent, isElementInViewport } from '../support/index';\nconst defaultOptions = {\n    events: ['click', 'touchend'],\n    onlyVisible: true,\n    dispatchEvent: true,\n    eventPrefix: true,\n};\nexport const useClickOutside = (controller, options = {}) => {\n    const { onlyVisible, dispatchEvent, events, eventPrefix } = Object.assign({}, defaultOptions, options);\n    const onEvent = (event) => {\n        const targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        if (targetElement.contains(event.target) || (!isElementInViewport(targetElement) && onlyVisible)) {\n            return;\n        }\n        // call the clickOutside method of the Stimulus controller\n        if (controller.clickOutside) {\n            controller.clickOutside(event);\n        }\n        // emit a custom event\n        if (dispatchEvent) {\n            const eventName = composeEventName('click:outside', controller, eventPrefix);\n            const clickOutsideEvent = extendedEvent(eventName, event, { controller });\n            targetElement.dispatchEvent(clickOutsideEvent);\n        }\n    };\n    const observe = () => {\n        events === null || events === void 0 ? void 0 : events.forEach(event => {\n            window.addEventListener(event, onEvent, false);\n        });\n    };\n    const unobserve = () => {\n        events === null || events === void 0 ? void 0 : events.forEach(event => {\n            window.removeEventListener(event, onEvent, false);\n        });\n    };\n    // keep a copy of the current disconnect() function of the controller\n    // to support composing several behaviors\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    Object.assign(controller, {\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-click-outside.js.map","const defaultOptions = {\n    debug: false,\n    logger: console\n};\nexport class StimulusUse {\n    constructor(controller, options = {}) {\n        var _a, _b, _c;\n        this.log = (functionName, args) => {\n            if (!this.debug)\n                return;\n            this.logger.groupCollapsed(`%c${this.controller.identifier} %c#${functionName}`, 'color: #3B82F6', 'color: unset');\n            this.logger.log(Object.assign({ controllerId: this.controllerId }, args));\n            this.logger.groupEnd();\n        };\n        this.debug = (_b = (_a = options === null || options === void 0 ? void 0 : options.debug) !== null && _a !== void 0 ? _a : controller.application.stimulusUseDebug) !== null && _b !== void 0 ? _b : defaultOptions.debug;\n        this.logger = (_c = options === null || options === void 0 ? void 0 : options.logger) !== null && _c !== void 0 ? _c : defaultOptions.logger;\n        this.controller = controller;\n        this.controllerId = controller.element.id || controller.element.dataset.id;\n        // make copies of lifecycle functions\n        this.controllerInitialize = controller.initialize.bind(controller);\n        this.controllerConnect = controller.connect.bind(controller);\n        this.controllerDisconnect = controller.disconnect.bind(controller);\n    }\n}\n//# sourceMappingURL=stimulus_use.js.map","import { StimulusUse } from '../stimulus_use';\nimport { method } from '../support/index';\nexport class UseHover extends StimulusUse {\n    constructor(controller, options = {}) {\n        super(controller, options);\n        this.observe = () => {\n            this.targetElement.addEventListener('mouseenter', this.onEnter);\n            this.targetElement.addEventListener('mouseleave', this.onLeave);\n        };\n        this.unobserve = () => {\n            this.targetElement.removeEventListener('mouseenter', this.onEnter);\n            this.targetElement.removeEventListener('mouseleave', this.onLeave);\n        };\n        this.onEnter = () => {\n            method(this.controller, 'mouseEnter').call(this.controller);\n            this.log('mouseEnter', { hover: true });\n        };\n        this.onLeave = () => {\n            method(this.controller, 'mouseLeave').call(this.controller);\n            this.log('mouseLeave', { hover: false });\n        };\n        this.targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        this.controller = controller;\n        this.enhanceController();\n        this.observe();\n    }\n    enhanceController() {\n        const controllerDisconnect = this.controller.disconnect.bind(this.controller);\n        const disconnect = () => {\n            this.unobserve();\n            controllerDisconnect();\n        };\n        Object.assign(this.controller, { disconnect });\n    }\n}\nexport const useHover = (controller, options = {}) => {\n    const observer = new UseHover(controller, options);\n    return [observer.observe, observer.unobserve];\n};\n//# sourceMappingURL=use-hover.js.map","import { StimulusUse } from '../stimulus_use';\nimport { method } from '../support/index';\nexport class UseMutation extends StimulusUse {\n    constructor(controller, options = {}) {\n        super(controller, options);\n        this.observe = () => {\n            try {\n                this.observer.observe(this.targetElement, this.options);\n            }\n            catch (error) {\n                this.controller.application.handleError(error, \"At a minimum, one of childList, attributes, and/or characterData must be true\", {});\n            }\n        };\n        this.unobserve = () => {\n            this.observer.disconnect();\n        };\n        this.mutation = (entries) => {\n            method(this.controller, 'mutate').call(this.controller, entries);\n            this.log('mutate', { entries });\n        };\n        this.targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        this.controller = controller;\n        this.options = options;\n        this.observer = new MutationObserver(this.mutation);\n        this.enhanceController();\n        this.observe();\n    }\n    enhanceController() {\n        const controllerDisconnect = this.controller.disconnect.bind(this.controller);\n        const disconnect = () => {\n            this.unobserve();\n            controllerDisconnect();\n        };\n        Object.assign(this.controller, { disconnect });\n    }\n}\nexport const useMutation = (controller, options = {}) => {\n    const observer = new UseMutation(controller, options);\n    return [observer.observe, observer.unobserve];\n};\n//# sourceMappingURL=use-mutation.js.map","import { method } from '../support/index';\nexport const useWindowResize = (controller) => {\n    const callback = (event) => {\n        const { innerWidth, innerHeight } = window;\n        const payload = {\n            height: innerHeight || Infinity,\n            width: innerWidth || Infinity,\n            event\n        };\n        method(controller, 'windowResize').call(controller, payload);\n    };\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    const observe = () => {\n        window.addEventListener('resize', callback);\n        callback();\n    };\n    const unobserve = () => {\n        window.removeEventListener('resize', callback);\n    };\n    Object.assign(controller, {\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-window-resize.js.map","import { Controller } from 'stimulus';\nclass DebounceController extends Controller {\n}\nDebounceController.debounces = [];\nconst defaultWait = 200;\nconst debounce = (fn, wait = defaultWait) => {\n    let timeoutId = null;\n    return function () {\n        const args = arguments;\n        const context = this;\n        const callback = () => fn.apply(context, args);\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(callback, wait);\n    };\n};\nexport const useDebounce = (controller, options) => {\n    var _a;\n    const constructor = controller.constructor;\n    (_a = constructor.debounces) === null || _a === void 0 ? void 0 : _a.forEach((func) => {\n        if (typeof func === \"string\") {\n            controller[func] = debounce(controller[func], options === null || options === void 0 ? void 0 : options.wait);\n        }\n        if (typeof func === \"object\") {\n            const { name, wait } = func;\n            if (!name)\n                return;\n            controller[name] = debounce(controller[name], wait || (options === null || options === void 0 ? void 0 : options.wait));\n        }\n    });\n};\n//# sourceMappingURL=use-debounce.js.map","import {useWindowResize} from \"stimulus-use\";\nimport {BaseController} from \"./base_controller\";\n\nexport class AutosizeController extends BaseController {\n\n  initialize() {\n    this._handler = this._handler.bind(this);\n  }\n\n  connect() {\n    let target = this.el as HTMLTextAreaElement;\n    target.style.resize = \"none\";\n    target.style.boxSizing = \"border-box\";\n    target.addEventListener(\"input\", this._handler);\n    target.addEventListener(\"focus\", this._handler);\n    useWindowResize(this);\n    requestAnimationFrame(this._handler);\n  }\n\n  windowResize() {\n    this._handler();\n  }\n\n  private _handler() {\n    this.autosize(this.el as HTMLTextAreaElement);\n  };\n\n  private autosize(element: HTMLTextAreaElement) {\n    let offset = element.offsetHeight - element.clientHeight;\n    element.style.height = \"auto\";\n    element.style.height = element.scrollHeight + offset + \"px\";\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class CharCountController extends BaseController {\n\n  static targets = [\"input\", \"output\"];\n  static values = {min: Number, max: Number};\n  static classes = [\"error\"];\n\n  declare readonly inputTarget: HTMLInputElement | HTMLTextAreaElement;\n  declare readonly outputTarget: HTMLElement;\n  declare minValue: number;\n  declare hasMinValue: boolean;\n  declare maxValue: number;\n  declare hasMaxValue: boolean;\n  declare errorClass: string;\n  declare hasErrorClass: boolean;\n\n  initialize() {\n    this._updateCharCount = this._updateCharCount.bind(this);\n  }\n\n  connect() {\n    this._updateCharCount();\n    this.inputTarget.addEventListener(\"input\", this._updateCharCount);\n  }\n\n  disconnect() {\n    this.inputTarget.removeEventListener(\"input\", this._updateCharCount);\n  }\n\n  private _updateCharCount() {\n    let charCount = this.inputTarget.value.length;\n    this.outputTarget.innerText = charCount.toString();\n    if (this.hasErrorClass) {\n      if (this._isValidCount(charCount)) {\n        this.outputTarget.classList.remove(this.errorClass);\n      } else {\n        this.outputTarget.classList.add(this.errorClass);\n      }\n    }\n  }\n\n  private _isValidCount(count: number) {\n    let min = 0;\n    let max = 99999;\n\n    if (this.hasMinValue) {\n      min = this.minValue;\n    }\n\n    if (this.hasMaxValue) {\n      max = this.maxValue;\n    }\n\n    return count >= min && count <= max;\n  }\n\n}\n","import {BaseController} from './base_controller';\n\nexport class CheckboxSelectAllController extends BaseController {\n  static targets = ['selectAll', 'checkbox'];\n\n  declare readonly hasSelectAllTarget: boolean;\n  declare readonly selectAllTarget: HTMLInputElement;\n  declare readonly checkboxTargets: HTMLInputElement[];\n\n  private get checked() {\n    return this.checkboxTargets.filter(checkbox => checkbox.checked);\n  }\n\n  private get unchecked() {\n    return this.checkboxTargets.filter(checkbox => !checkbox.checked);\n  }\n\n  initialize() {\n    this.toggle = this.toggle.bind(this);\n    this.refresh = this.refresh.bind(this);\n  }\n\n  connect() {\n    requestAnimationFrame(() => {\n      if (!this.hasSelectAllTarget) {\n        return;\n      }\n\n      this.selectAllTarget.addEventListener('change', this.toggle);\n      this.checkboxTargets.forEach(checkbox => checkbox.addEventListener('change', this.refresh));\n      this.refresh();\n    });\n  }\n\n  disconnect() {\n    if (!this.hasSelectAllTarget) {\n      return;\n    }\n\n    this.selectAllTarget.removeEventListener('change', this.toggle);\n    this.checkboxTargets.forEach((checkbox) => checkbox.removeEventListener('change', this.refresh));\n  }\n\n  private toggle(event: Event) {\n    event.preventDefault();\n    let target = event.target as HTMLInputElement;\n    this.checkboxTargets.forEach((checkbox) => checkbox.checked = target.checked);\n  }\n\n  private refresh() {\n    const checkboxesCount = this.checkboxTargets.length;\n    const checkboxesCheckedCount = this.checked.length;\n\n    this.selectAllTarget.checked = checkboxesCheckedCount > 0;\n    this.selectAllTarget.indeterminate = checkboxesCheckedCount > 0 && checkboxesCheckedCount < checkboxesCount;\n  }\n}","import {BaseController} from \"./base_controller\";\r\n\r\nexport class ClipboardController extends BaseController {\r\n\r\n  static targets = [\"source\", \"button\", \"copy\", \"fallback\"];\r\n  static values = {removeUnused: Boolean};\r\n\r\n  declare readonly sourceTarget: HTMLElement;\r\n  declare readonly copyTarget: HTMLElement;\r\n  declare readonly hasCopyTarget: boolean;\r\n  declare readonly fallbackTarget: HTMLElement;\r\n  declare readonly hasFallbackTarget: boolean;\r\n\r\n  declare readonly hasRemoveUnusedValue: boolean;\r\n  declare readonly removeUnusedValue: boolean;\r\n\r\n  supported = false;\r\n\r\n  connect() {\r\n    this.supported = document.queryCommandSupported(\"copy\");\r\n\r\n    if (this.hasRemoveUnusedValue && this.removeUnusedValue) {\r\n      if (this.supported && this.hasFallbackTarget) {\r\n        this.fallbackTarget.remove();\r\n      } else if (this.hasCopyTarget) {\r\n        this.copyTarget.remove();\r\n      }\r\n    }\r\n  }\r\n\r\n  select(event: MouseEvent) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    (this.sourceTarget as HTMLInputElement | HTMLTextAreaElement).select();\r\n  }\r\n\r\n  copy(event: ClipboardEvent) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    (this.sourceTarget as HTMLInputElement | HTMLTextAreaElement).select();\r\n    if (this.supported) {\r\n      document.execCommand(\"copy\");\r\n    }\r\n  }\r\n}\r\n","export function isHTMLLinkElement(element: Element): element is HTMLLinkElement {\n  return element.nodeName == \"LINK\";\n}\n\nexport function isHTMLAnchorElement(element: Element): element is HTMLAnchorElement {\n  return element.nodeName == \"A\";\n}\n\nexport function isHTMLFormElement(element: Element): element is HTMLFormElement {\n  return element.nodeName == \"FORM\";\n}\n\nexport function isHTMLInputElement(element: Element): element is HTMLInputElement {\n  return element.nodeName == \"INPUT\";\n}\n\nexport function isHTMLButtonElement(element: Element): element is HTMLButtonElement {\n  return element.nodeName == \"BUTTON\";\n}\n\nexport function isHTMLSelectElement(element: Element): element is HTMLSelectElement {\n  return element.nodeName == \"SELECT\";\n}\n\nexport function isHTMLImageElement(element: Element): element is HTMLImageElement {\n  return element.nodeName == \"IMG\";\n}\n\nexport function isElementCheckable(element: Element): element is HTMLInputElement & { checked: boolean } {\n  return isHTMLInputElement(element) && (element.type === \"radio\" || element.type === \"checkbox\");\n}\n","import {BaseController} from './base_controller';\nimport {isHTMLFormElement, isHTMLAnchorElement} from \"./utilities/elements\";\n\nexport class ConfirmController extends BaseController {\n\n  static values = {\n    message: String,\n  };\n\n  declare readonly messageValue: string;\n  declare readonly hasMessageValue: boolean;\n\n  get message(): string {\n    return this.hasMessageValue ? this.messageValue : 'Are you sure?';\n  }\n\n  initialize() {\n    this.confirm = this.confirm.bind(this);\n  }\n\n  connect() {\n    requestAnimationFrame(() => {\n      let element = this.el;\n      if (isHTMLFormElement(element)) {\n        element.addEventListener(\"submit\", this.confirm);\n      } else if (isHTMLAnchorElement(element)) {\n        element.addEventListener(\"click\", this.confirm);\n      } else {\n        throw new Error(\"Can't handle confirmation on attached element\");\n      }\n    });\n  }\n\n  confirm(event: Event) {\n    if (!(window.confirm(this.message))) {\n      event.preventDefault();\n      this.dispatch(this.el, \"confirm:cancelled\");\n    }\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class ConfirmNavigationController extends BaseController {\n\n  static values = {_message: String};\n\n  declare readonly _messageValue: string;\n  declare readonly hasMessageValue: boolean;\n\n  get _message(): string {\n    return this.hasMessageValue ? this._messageValue : \"Do you want to leave this page? Changes you made may not be saved\";\n  }\n\n  initialize() {\n    this.handlePopstate = this.handlePopstate.bind(this);\n    this.handleTurboNavigation = this.handleTurboNavigation.bind(this);\n  }\n\n  connect() {\n    window.onbeforeunload = () => this._message;\n    window.addEventListener(\"popstate\", this.handlePopstate);\n    window.addEventListener(\"submit\", () => {\n      window.removeEventListener(\"popstate\", this.handlePopstate);\n      window.onbeforeunload = null;\n    });\n    window.addEventListener(\"turbolinks:before-visit\", this.handleTurboNavigation);\n    window.addEventListener(\"turbo:before-visit\", this.handleTurboNavigation);\n  }\n\n  handlePopstate(_event: PopStateEvent) {\n    return false;\n  }\n\n  handleTurboNavigation(event: Event) {\n    if (!confirm(this._message)) {\n      event.preventDefault();\n    }\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class DebugController extends BaseController {\n\n  static targets = [\"test\"];\n  declare testTargets: HTMLElement[];\n\n  connect() {\n    console.log(\"Debug Controller\", this, this.testTargets);\n  }\n}\n","import {BaseController} from \"./base_controller\";\r\nimport {isElementCheckable, isHTMLSelectElement} from \"./utilities/elements\";\r\n\r\nexport class DetectDirtyController extends BaseController {\r\n\r\n  get _cacheAttrName(): string {\r\n    return 'detect-dirty-load-value';\r\n  }\r\n\r\n  initialize() {\r\n    this._checkDirty = this._checkDirty.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n\r\n    this._cacheLoadValues();\r\n    this._checkDirty();\r\n    element.addEventListener(\"input\", this._checkDirty);\r\n    element.addEventListener(\"change\", this._checkDirty);\r\n  }\r\n\r\n  disconnect() {\r\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    element.removeEventListener(\"input\", this._checkDirty);\r\n    element.removeEventListener(\"change\", this._checkDirty);\r\n  }\r\n\r\n  restore(event?: Event) {\r\n    event?.preventDefault();\r\n    this._restoreElementFromLoadValue();\r\n  }\r\n\r\n  private _getElementValue(): boolean | string {\r\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    return isElementCheckable(element) ? element.checked : element.value;\r\n  }\r\n\r\n  private _getElementLoadValue(): boolean | string {\r\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    let value = element.getAttribute(this._cacheAttrName);\r\n    if (isElementCheckable(element)) {\r\n      return value == null ? element.defaultChecked : value == \"true\";\r\n    } else if (value !== null) {\r\n      return value;\r\n    }\r\n\r\n    if (isHTMLSelectElement(element)) {\r\n      let options = Array.from(element.options);\r\n      options.forEach((option) => {\r\n        if (option.defaultSelected) {\r\n          element.value = option.value;\r\n          return option.value;\r\n        }\r\n      });\r\n    }\r\n\r\n    return value!;\r\n  }\r\n\r\n  private _elementHasCachedLoadValue(): boolean {\r\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    return element.hasAttribute(this._cacheAttrName);\r\n  }\r\n\r\n  private _checkDirty() {\r\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    if (this._isElementDirty()) {\r\n      element.setAttribute('data-dirty', \"true\");\r\n    } else {\r\n      element.removeAttribute('data-dirty');\r\n    }\r\n  }\r\n\r\n  private _isElementDirty(): boolean {\r\n    return this._getElementValue() !== this._getElementLoadValue();\r\n  }\r\n\r\n  private _restoreElementFromLoadValue() {\r\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    let cacheValue = element.getAttribute(this._cacheAttrName);\r\n\r\n    if (isElementCheckable(element)) {\r\n      element.setAttribute(this._cacheAttrName, element.checked.toString());\r\n      element.checked = cacheValue == null ? element.defaultChecked : cacheValue == \"true\";\r\n    } else if (isHTMLSelectElement(element)) {\r\n      if (cacheValue == null) {\r\n        let options = Array.from(element.options);\r\n        options.forEach((option) => {\r\n          if (option.defaultSelected) {\r\n            element.value = option.value;\r\n            return;\r\n          }\r\n        });\r\n      } else {\r\n        element.value = cacheValue;\r\n      }\r\n\r\n    } else {\r\n      element.value = cacheValue == null ? element.defaultValue : cacheValue;\r\n    }\r\n  }\r\n\r\n  private _cacheLoadValues(): void {\r\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    if (!this._elementHasCachedLoadValue() && isElementCheckable(element)) {\r\n      element.setAttribute(this._cacheAttrName, element.checked.toString());\r\n    } else {\r\n      element.setAttribute(this._cacheAttrName, element.value.toString());\r\n    }\r\n  }\r\n}\r\n\r\nexport function isDirty(element: HTMLElement) {\r\n  return element.hasAttribute(\"data-dirty\");\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\nimport {isElementCheckable, isHTMLSelectElement} from \"./utilities/elements\";\r\n\r\nexport class DetectDirtyFormController extends BaseController {\r\n\r\n  get _formElements(): Array<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement> {\r\n    return Array.from(this.el.querySelectorAll('input, select, textarea'));\r\n  }\r\n\r\n  get _cacheAttrName(): string {\r\n    return 'detect-dirty-load-value';\r\n  }\r\n\r\n  initialize() {\r\n    this._checkDirty = this._checkDirty.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n\r\n    this._cacheLoadValues();\r\n    this._checkDirty();\r\n    element.addEventListener(\"input\", this._checkDirty);\r\n    element.addEventListener(\"change\", this._checkDirty);\r\n  }\r\n\r\n  disconnect() {\r\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    element.removeEventListener(\"input\", this._checkDirty);\r\n    element.removeEventListener(\"change\", this._checkDirty);\r\n  }\r\n\r\n  restore(event?: Event) {\r\n    event?.preventDefault()\r\n    this._formElements.forEach(element => this._restoreElementFromLoadValue(element))\r\n  }\r\n\r\n  private _getElementValue(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement): boolean | string {\r\n    return isElementCheckable(element) ? element.checked : element.value;\r\n  }\r\n\r\n  private _getElementLoadValue(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement): boolean | string {\r\n    let value = element.getAttribute(this._cacheAttrName);\r\n    if (isElementCheckable(element)) {\r\n      return value == null ? element.defaultChecked : value == \"true\";\r\n    } else if (value !== null) {\r\n      return value;\r\n    }\r\n\r\n    if (isHTMLSelectElement(element)) {\r\n      let options = Array.from(element.options);\r\n      options.forEach((option) => {\r\n        if (option.defaultSelected) {\r\n          element.value = option.value;\r\n          return option.value;\r\n        }\r\n      });\r\n    }\r\n\r\n    return value!;\r\n  }\r\n\r\n  private _elementHasCachedLoadValue(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement): boolean {\r\n    return element.hasAttribute(this._cacheAttrName);\r\n  }\r\n\r\n  private _checkElementDirty(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement) {\r\n    if (this._isElementDirty(element)) {\r\n      element.setAttribute('data-dirty', \"true\");\r\n    } else {\r\n      element.removeAttribute('data-dirty');\r\n    }\r\n  }\r\n\r\n  private _isElementDirty(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement): boolean {\r\n    return this._getElementValue(element) !== this._getElementLoadValue(element);\r\n  }\r\n\r\n  private _cacheElementLoadValue(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement) {\r\n    if (!this._elementHasCachedLoadValue(element) && isElementCheckable(element)) {\r\n      element.setAttribute(this._cacheAttrName, element.checked.toString());\r\n    } else {\r\n      element.setAttribute(this._cacheAttrName, element.value.toString());\r\n    }\r\n  }\r\n\r\n  private _restoreElementFromLoadValue(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement) {\r\n    let cacheValue = element.getAttribute(this._cacheAttrName);\r\n\r\n    if (isElementCheckable(element)) {\r\n      element.setAttribute(this._cacheAttrName, element.checked.toString());\r\n      element.checked = cacheValue == null ? element.defaultChecked : cacheValue == \"true\";\r\n    } else if (isHTMLSelectElement(element)) {\r\n      if (cacheValue == null) {\r\n        let options = Array.from(element.options);\r\n        options.forEach((option) => {\r\n          if (option.defaultSelected) {\r\n            element.value = option.value;\r\n            return;\r\n          }\r\n        });\r\n      } else {\r\n        element.value = cacheValue;\r\n      }\r\n\r\n    } else {\r\n      element.value = cacheValue == null ? element.defaultValue : cacheValue;\r\n    }\r\n  }\r\n\r\n  private _cacheLoadValues(): void {\r\n    this._formElements.forEach(el => this._cacheElementLoadValue(el));\r\n  }\r\n\r\n  private _checkDirty(): void {\r\n    this._formElements.forEach(el => this._checkElementDirty(el));\r\n    if (this._formElements.some(el => isDirty(el))) {\r\n      this.el.setAttribute(\"data-dirty\", \"true\")\r\n    } else {\r\n      this.el.removeAttribute(\"data-dirty\")\r\n    }\r\n  }\r\n}\r\n\r\nexport function isDirty(element: HTMLElement) {\r\n  return element.hasAttribute(\"data-dirty\");\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class DisableInputsController extends BaseController {\r\n\r\n  static targets = [\"disabler\", \"disable\"];\r\n\r\n  static values = {\r\n    clear: Boolean,\r\n  };\r\n\r\n  declare readonly hasDisablerTarget: boolean;\r\n  declare readonly disablerTarget: HTMLInputElement;\r\n  declare readonly disableTargets: Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\r\n  declare readonly clearValue: boolean;\r\n  declare readonly hasClearValue: boolean;\r\n\r\n  connect() {\r\n    this.toggle();\r\n  }\r\n\r\n  toggle() {\r\n    if (this.hasDisablerTarget && this.disablerTarget.checked) {\r\n      this.disableInputs();\r\n    } else {\r\n      this.enableInputs();\r\n    }\r\n  }\r\n\r\n  disableInputs() {\r\n    let shouldClear = this.hasClearValue && this.clearValue;\r\n    this.disableTargets.forEach((el, _) => {\r\n      if (shouldClear) {\r\n        el.value = \"\";\r\n      }\r\n      el.disabled = true;\r\n    });\r\n  }\r\n\r\n  enableInputs() {\r\n    this.disableTargets.forEach((el, _) => {\r\n      el.disabled = false;\r\n    });\r\n  }\r\n}\r\n","import {BaseController} from './base_controller';\nimport {isHTMLAnchorElement, isHTMLButtonElement, isHTMLInputElement} from \"./utilities/elements\";\n\nexport class DisableWithController extends BaseController {\n\n  static values = {\n    message: String,\n    timeout: Number,\n  };\n\n  declare readonly messageValue: string;\n  declare readonly hasMessageValue: boolean;\n  declare readonly timeoutValue: number;\n  declare readonly hasTimeoutValue: boolean;\n\n  _cacheText?: string;\n  _timeoutHandle?: ReturnType<typeof window.setTimeout>;\n\n  get _message(): string {\n    return this.hasMessageValue ? this.messageValue : 'Submitting...';\n  }\n\n  get _timeout(): number {\n    return this.hasTimeoutValue ? this.timeoutValue : 1000;\n  }\n\n  initialize() {\n    this.enable = this.enable.bind(this);\n    this.disable = this.disable.bind(this);\n  }\n\n  connect() {\n    requestAnimationFrame(() => {\n      this.el.addEventListener(\"click\", this.disable);\n    });\n  }\n\n  disconnect() {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle);\n    }\n  }\n\n  disable(event?: Event) {\n    let element = this.el;\n\n    if (this._isDisabled(element)) {\n      event?.preventDefault();\n      event?.stopImmediatePropagation();\n    } else {\n      this._cacheText = this._getElText(element);\n      this._setElText(element, this._message);\n      this._disable(element);\n      setTimeout(this.enable, this._timeout);\n    }\n  }\n\n  enable(event?: Event) {\n    event?.preventDefault();\n    let element = this.el;\n    if (this._isDisabled(element)) {\n      this._setElText(element, this._cacheText!);\n      this._enable(element);\n    }\n  }\n\n  _isDisabled(el: HTMLElement): boolean {\n    if ((isHTMLInputElement(el) && el.type == \"submit\") || isHTMLButtonElement(el)) {\n      return el.disabled;\n    } else {\n      return el.dataset.disabled == \"true\";\n    }\n  }\n\n  _getElText(el: HTMLElement): string {\n    if (isHTMLInputElement(el) && el.type == \"submit\") {\n      return el.value;\n    } else {\n      return el.innerText;\n    }\n  }\n\n  _setElText(el: HTMLElement, str: string) {\n    if (isHTMLInputElement(el) && el.type == \"submit\") {\n      el.value = str;\n    } else if (isHTMLButtonElement(el) || isHTMLAnchorElement(el)) {\n      el.innerText = str;\n    }\n  }\n\n  _disable(el: HTMLElement) {\n    if ((isHTMLInputElement(el) && el.type == \"submit\") || isHTMLButtonElement(el)) {\n      el.disabled = true;\n    } else {\n      el.dataset.disabled = \"true\";\n    }\n  }\n\n  _enable(el: HTMLElement) {\n    if (isHTMLInputElement(el) && el.type == \"submit\" || isHTMLButtonElement(el)) {\n      el.disabled = false;\n    } else {\n      el.dataset.disabled = undefined;\n    }\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class DismissableController extends BaseController {\n\n  dismiss() {\n    this.el.remove();\n  }\n\n}\n","import {BaseController} from './base_controller';\nimport _get from \"lodash-es/get\";\nimport _set from \"lodash-es/set\";\n\nexport class ElementSaveController extends BaseController {\n\n  static targets = [\n    \"element\",\n  ];\n  static values = {\n    id: String,\n    attributes: String,\n    restoreOnLoad: Boolean,\n  };\n  declare readonly hasElementTarget: boolean;\n  declare readonly elementTarget: HTMLElement;\n  declare readonly elementTargets: HTMLElement[];\n  declare readonly idValue: string;\n  declare readonly attributesValue: string;\n  declare readonly hasIdValue: boolean;\n  declare readonly restoreOnLoadValue: boolean;\n  declare readonly hasRestoreOnLoadValue: boolean;\n\n  get _id() {\n    if (this.hasIdValue) {\n      return this.idValue;\n    }\n    let elementID = this.el.id;\n\n    if (elementID !== \"\") {\n      return elementID;\n    } else {\n      throw new Error(`No ID value to uniquely identify this element. Please either specify data-${this.identifier}-id-value or give this element an 'id' attribute. `);\n    }\n  }\n\n  get _uniqueIdentifier() {\n    const url = location.href;\n    return `${url} ${this._id}`;\n  }\n\n  get _restoreOnLoad() {\n    return this.hasRestoreOnLoadValue ? this.restoreOnLoadValue : true;\n  }\n\n  get _element(): HTMLElement {\n    return this.hasElementTarget ? this.elementTarget : this.el;\n  }\n\n  connect() {\n    requestAnimationFrame(() => {\n      if (this._restoreOnLoad) {\n        this.restore();\n      }\n    });\n  }\n\n  clear(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    localStorage.removeItem(this._uniqueIdentifier);\n    this.dispatch(this._element, `element-save:cleared`);\n  }\n\n  save(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    let element = this._element;\n    let attributes = this.attributesValue.split(\" \");\n    let data: { [idx: string]: any } = {};\n    attributes.forEach((attr: string) => data[attr] = _get(element, attr));\n    localStorage.setItem(this._uniqueIdentifier, JSON.stringify(data));\n    this.dispatch(element, `element-save:save:success`);\n  }\n\n  restore(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    let element = this._element;\n    if (localStorage.getItem(this._uniqueIdentifier)) {\n      const savedData = JSON.parse(localStorage.getItem(this._uniqueIdentifier)!); // get and parse the saved data from localStorage\n      Object.keys(savedData).forEach((attr: string) => {\n        _set(element as HTMLElement, attr, savedData[attr]);\n      });\n      this.dispatch(element, `element-save:restore:success`);\n    } else {\n      this.dispatch(element, `element-save:restore:empty`);\n    }\n  }\n\n}\n","import {useMutation} from \"stimulus-use\";\nimport {BaseController} from \"./base_controller\";\n\nexport class EmptyDomController extends BaseController {\n\n  static classes = [\"empty\", \"notEmpty\"];\n  static values = {scopeSelector: String};\n\n  declare hasEmptyClass: boolean;\n  declare emptyClass: string;\n  declare hasNotEmptyClass: boolean;\n  declare notEmptyClass: string;\n\n  declare hasScopeSelectorValue: boolean;\n  declare scopeSelectorValue: string;\n\n  get emptyClasses(): string[] {\n    return this.emptyClass.split(\" \");\n  }\n\n  get notEmptyClasses(): string[] {\n    return this.notEmptyClass.split(\" \");\n  }\n\n  get children(): Element[] {\n    let element = this.el;\n    if (this.hasScopeSelectorValue) {\n      return Array.from(element.querySelectorAll(this.scopeSelectorValue));\n    } else {\n      return Array.from(element.children);\n    }\n  }\n\n  connect() {\n    useMutation(this, {element: this.el, childList: true});\n    this.checkEmpty();\n  }\n\n  mutate(entries: MutationRecord[]) {\n    this.checkEmpty();\n  }\n\n  checkEmpty() {\n    let element = this.el;\n    let children = this.children;\n    if (children.length === 0) {\n      this._removeNotEmptyClasses();\n      this._addEmptyClasses();\n      this.dispatch(element as HTMLElement, \"dom:empty\");\n    } else {\n      this._addNotEmptyClasses();\n      this._removeEmptyClasses();\n      this.dispatch(element as HTMLElement, \"dom:not-empty\", {detail: {count: children.length}});\n    }\n  }\n\n  private _removeEmptyClasses() {\n    if (this.hasEmptyClass) {\n      this.el.classList.remove(...this.emptyClasses);\n    }\n  }\n\n  private _addNotEmptyClasses() {\n    if (this.hasNotEmptyClass) {\n      this.el.classList.add(...this.notEmptyClasses);\n    }\n  }\n\n  private _addEmptyClasses() {\n    if (this.hasEmptyClass) {\n      this.el.classList.add(...this.emptyClasses);\n    }\n  }\n\n  private _removeNotEmptyClasses() {\n    if (this.hasNotEmptyClass) {\n      this.el.classList.remove(...this.notEmptyClasses);\n    }\n  }\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class EnableInputsController extends BaseController {\r\n\r\n  static targets = [\"enabler\", \"enable\"];\r\n\r\n  static values = {\r\n    clear: Boolean,\r\n  };\r\n\r\n  declare readonly hasEnablerTarget: boolean;\r\n  declare readonly enablerTarget: HTMLInputElement;\r\n  declare readonly enableTargets: Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\r\n  declare readonly clearValue: boolean;\r\n  declare readonly hasClearValue: boolean;\r\n\r\n  connect() {\r\n    this.toggle();\r\n  }\r\n\r\n  toggle() {\r\n    if (this.hasEnablerTarget && this.enablerTarget.checked) {\r\n      this.enableInputs();\r\n    } else {\r\n      this.disableInputs();\r\n    }\r\n  }\r\n\r\n  disableInputs() {\r\n    let shouldClear = this.hasClearValue && this.clearValue;\r\n    this.enableTargets.forEach((el, _) => {\r\n      if (shouldClear) {\r\n        el.value = \"\";\r\n      }\r\n      el.disabled = true;\r\n    });\r\n  }\r\n\r\n  enableInputs() {\r\n    this.enableTargets.forEach((el, _) => {\r\n      el.disabled = false;\r\n    });\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class FallbackImageController extends BaseController {\r\n\r\n  static values = {placeholder: String};\r\n\r\n  declare readonly placeholderValue: string;\r\n  declare readonly hasPlaceholderValue: boolean;\r\n\r\n  connect() {\r\n    let element = this.el as HTMLImageElement;\r\n\r\n    element.onerror = () => {\r\n      if (this.hasPlaceholderValue) {\r\n        element.src = this.placeholderValue;\r\n      } else {\r\n        element.style.display = \"none\";\r\n      }\r\n    };\r\n  }\r\n\r\n}\r\n","import {BaseController} from './base_controller';\r\n\r\nexport class FormRcController extends BaseController {\r\n\r\n  static targets = [\"form\"];\r\n\r\n  declare readonly formTarget: HTMLFormElement;\r\n\r\n  submit(event?: Event) {\r\n    event?.preventDefault();\r\n    this.dispatch(this.formTarget, \"submit\");\r\n    this.formTarget.submit();\r\n  }\r\n\r\n  reset(event?: Event) {\r\n    event?.preventDefault();\r\n    this.dispatch(this.formTarget, \"reset\");\r\n    this.formTarget.reset();\r\n  }\r\n\r\n}","import {BaseController} from './base_controller';\r\nimport {isHTMLFormElement, isHTMLInputElement} from \"./utilities/elements\";\r\n\r\ninterface FormSavePayload {\r\n  [idx: string]: {\r\n    [idx: string]: string | boolean\r\n  }\r\n}\r\n\r\nexport class FormSaveController extends BaseController {\r\n\r\n  static values = {\r\n    id: String,\r\n    restoreOnLoad: Boolean,\r\n    clearOnSubmit: Boolean,\r\n  };\r\n\r\n  declare readonly idValue: string;\r\n  declare readonly hasIdValue: boolean;\r\n  declare readonly restoreOnLoadValue: boolean;\r\n  declare readonly hasRestoreOnLoadValue: boolean;\r\n  declare readonly clearOnSubmitValue: boolean;\r\n  declare readonly hasClearOnSubmitValue: boolean;\r\n\r\n  get formID() {\r\n    if (this.hasIdValue) {\r\n      return this.idValue;\r\n    }\r\n    let elementID = (this.el as HTMLFormElement).id;\r\n\r\n    if (elementID !== \"\") {\r\n      return elementID;\r\n    } else {\r\n      throw new Error(`No ID value to uniquely identify this form. Please either specify data-${this.identifier}-id-value or give this form an 'id' attribute. `);\r\n    }\r\n  }\r\n\r\n  get formIdentifier() {\r\n    const url = location.href;\r\n    return `${url} ${this.formID}`;\r\n  }\r\n\r\n  get formElements() {\r\n    return (this.el as HTMLFormElement).elements;\r\n  }\r\n\r\n  get formData(): FormSavePayload {\r\n    let data: FormSavePayload = {[this.formIdentifier]: {}};\r\n    for (const element of this.formElements) {\r\n      let el = element as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\r\n      if (el.name.length > 0) {\r\n        if (isHTMLInputElement(el) && el.type == \"checkbox\") {\r\n          data[this.formIdentifier][el.name] = el.checked;\r\n        } else if (isHTMLInputElement(el) && el.type == \"radio\") {\r\n          if (el.checked) {\r\n            data[this.formIdentifier][el.name] = el.value;\r\n          }\r\n        } else {\r\n          data[this.formIdentifier][el.name] = el.value;\r\n        }\r\n      }\r\n    }\r\n    return data;\r\n  }\r\n\r\n  get restoreOnLoad() {\r\n    return this.hasRestoreOnLoadValue ? this.restoreOnLoadValue : true;\r\n  }\r\n\r\n  get clearOnSubmit() {\r\n    return this.hasClearOnSubmitValue ? this.clearOnSubmitValue : true;\r\n  }\r\n\r\n  initialize() {\r\n    this._clear = this._clear.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      let element = this.el;\r\n      if (!isHTMLFormElement(element)) {\r\n        throw new Error('Expected controller to be mounted on a form element.');\r\n      }\r\n\r\n      if (this.restoreOnLoad) {\r\n        this.restore();\r\n      }\r\n      if (this.clearOnSubmit) {\r\n        this.el.addEventListener('submit', this._clear);\r\n      }\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.clearOnSubmit) {\r\n      this.el.removeEventListener('submit', this._clear);\r\n    }\r\n  }\r\n\r\n  _clear() {\r\n    localStorage.removeItem(this.formIdentifier);\r\n    this.dispatch(this.el, `form-save:cleared`);\r\n  }\r\n\r\n  clear(event?: Event) {\r\n    event?.preventDefault();\r\n    this._clear();\r\n  }\r\n\r\n  save(event: Event) {\r\n    event.preventDefault();\r\n    let data = this.formData;\r\n    localStorage.setItem(this.formIdentifier, JSON.stringify(data[this.formIdentifier]));\r\n    this.dispatch(this.el, `form-save:save:success`);\r\n  }\r\n\r\n  restore(event?: Event) {\r\n    event?.preventDefault();\r\n    if (localStorage.getItem(this.formIdentifier)) {\r\n      const savedData = JSON.parse(localStorage.getItem(this.formIdentifier)!); // get and parse the saved data from localStorage\r\n      for (const element of this.formElements) {\r\n        let el = element as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\r\n        if (el.name in savedData) {\r\n          if (isHTMLInputElement(el) && el.type == \"checkbox\") {\r\n            el.checked = savedData[el.name];\r\n          } else if (isHTMLInputElement(el) && el.type == \"radio\") {\r\n            if (el.value == savedData[el.name]) {\r\n              el.checked = true;\r\n            }\r\n          } else {\r\n            el.value = savedData[el.name];\r\n          }\r\n        }\r\n      }\r\n      this.dispatch(this.el, `form-save:restore:success`);\r\n    } else {\r\n      this.dispatch(this.el, `form-save:restore:empty`);\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\nimport {useIntersection} from \"stimulus-use\";\n\nexport class IntersectionController extends BaseController {\n\n  static values = {threshold: String};\n\n  declare readonly isVisible: boolean;\n  declare readonly thresholdValue: string;\n  declare readonly hasThresholdValue: boolean;\n\n  get threshold(): number[] {\n    if (this.hasThresholdValue) {\n      return this.thresholdValue.split(',').map(val => Number.parseFloat(val.trim())).filter(val => val >= 0 && val <= 1);\n    } else {\n      return [0, 1];\n    }\n  }\n\n  connect() {\n    useIntersection(this, {\n      threshold: this.threshold,\n      element: this.el,\n    });\n  }\n\n  appear(entry: IntersectionObserverEntry) {\n    this.dispatch(\n      this.el,\n      \"intersection:appear\",\n      {\n        detail: {\n          element: this.el,\n        },\n      },\n    );\n  };\n\n  disappear(entry: IntersectionObserverEntry) {\n    this.dispatch(\n      this.el,\n      \"intersection:disappear\",\n      {\n        detail: {\n          element: this.el,\n        },\n      },\n    );\n  };\n\n}\n","const smoothSupported = \"scrollBehavior\" in document.documentElement.style;\r\nlet smoothPolyfilled: boolean;\r\n\r\nexport async function scrollToElement(element: Element, {behavior = \"smooth\", block = \"start\", inline = \"nearest\"}: ScrollIntoViewOptions = {}) {\r\n  if (behavior == \"smooth\" && !smoothSupported) {\r\n    await polyfillSmooth();\r\n  }\r\n  element.scrollIntoView({behavior, block, inline});\r\n}\r\n\r\nasync function polyfillSmooth() {\r\n  const {polyfill} = await import(/* webpackChunkName: \"smoothscroll-polyfill\" */ \"smoothscroll-polyfill\");\r\n  if (smoothPolyfilled) {\r\n    return;\r\n  }\r\n  smoothPolyfilled = true;\r\n  polyfill();\r\n}\r\n\r\nexport function getScrollParent(node: HTMLElement | null): HTMLElement | null {\r\n  if (!node) {\r\n    return null;\r\n  }\r\n  const overflowY = getComputedStyle(node).overflowY;\r\n  const isScrollable = overflowY !== \"visible\" && overflowY !== \"hidden\";\r\n\r\n  if (isScrollable && node.scrollHeight >= node.clientHeight) {\r\n    return node;\r\n  }\r\n\r\n  return getScrollParent(node.parentElement) || document.body;\r\n}\r\n","import {useIntersection} from \"stimulus-use\";\nimport {AsyncBlockController} from \"./async_block_controller\";\n\nexport class LazyBlockController extends AsyncBlockController {\n\n  declare observe: () => void;\n  declare unobserve: () => void;\n  declare isVisible: boolean;\n  declare disappear: () => void;\n\n  connect() {\n    let element = this.el;\n\n    if (\"IntersectionObserver\" in window) {\n      [this.observe, this.unobserve] = useIntersection(this, {element, threshold: 0.3});\n    } else {\n      // Client doesn't support intersection observer, fallback to pre-loading\n      this.loadContent();\n    }\n  }\n\n  appear(entry: IntersectionObserverEntry) {\n    if (entry.target === this.el && entry.isIntersecting) {\n      this.loadContent();\n      if (this.unobserve) {\n        this.unobserve();\n      }\n    }\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\r\nimport {scrollToElement} from \"./utilities/scroll\";\r\nimport dialogPolyfill from \"dialog-polyfill\";\r\n\r\nexport class LightboxImageController extends BaseController {\r\n\r\n  static values = {\r\n    src: String,\r\n    srcSet: String,\r\n    sizes: String,\r\n  };\r\n  static classes = [\"modal\", \"image\"];\r\n\r\n  declare readonly hasModalClass: boolean;\r\n  declare readonly modalClass: string;\r\n  declare readonly hasImageClass: boolean;\r\n  declare readonly imageClass: string;\r\n  declare readonly hasSrcValue: boolean;\r\n  declare readonly srcValue: string;\r\n  declare readonly hasSrcSetValue: boolean;\r\n  declare readonly srcSetValue: string;\r\n  declare readonly hasSizesValue: boolean;\r\n  declare readonly sizesValue: string;\r\n  _dialog: HTMLDialogElement | null = null;\r\n\r\n  get src(): string {\r\n    return this.hasSrcValue ? this.srcValue : (this.el as HTMLImageElement).src;\r\n  }\r\n\r\n  get srcSet(): string {\r\n    return this.hasSrcSetValue ? this.srcSetValue : (this.el as HTMLImageElement).srcset;\r\n  }\r\n\r\n  get sizes(): string {\r\n    return this.hasSizesValue ? this.sizesValue : (this.el as HTMLImageElement).sizes;\r\n  }\r\n\r\n  get modalClassName() {\r\n    return this.hasModalClass ? this.modalClass : \"image-lightbox-dialog\";\r\n  }\r\n\r\n  get imageClassName() {\r\n    return this.hasImageClass ? this.imageClass : \"image-lightbox-image\";\r\n  }\r\n\r\n  initialize() {\r\n    this.open = this.open.bind(this);\r\n    this.close = this.close.bind(this);\r\n  }\r\n\r\n  connect() {\r\n  }\r\n\r\n  open() {\r\n    let element = this.el as HTMLImageElement;\r\n    if (this._dialog) {\r\n      return;\r\n    }\r\n    this._dialog = document.createElement(\"dialog\");\r\n\r\n    let image = document.createElement(\"img\") as HTMLImageElement;\r\n    image.className = this.imageClassName;\r\n    image.src = this.src;\r\n    image.srcset = this.srcSet;\r\n    image.sizes = this.sizes;\r\n    this._dialog.appendChild(image);\r\n\r\n    element.insertAdjacentElement(\"afterend\", this._dialog);\r\n    dialogPolyfill.registerDialog(this._dialog);\r\n    this._dialog.className = this.modalClassName;\r\n    this._dialog.showModal();\r\n    scrollToElement(this._dialog, {behavior: \"smooth\", block: \"end\"}).catch(() => this._dialog!.scrollIntoView(false));\r\n    this._dialog.addEventListener(\"click\", this.close);\r\n    this._dialog.addEventListener(\"cancel\", this.close);\r\n    this._dialog.addEventListener(\"close\", this.close);\r\n  }\r\n\r\n  close() {\r\n    if (this._dialog) {\r\n      this._dialog.close();\r\n      this._dialog.remove();\r\n      this._dialog = null;\r\n      scrollToElement(this.el, {behavior: \"smooth\", block: \"end\"}).catch(() => this.el.scrollIntoView(false));\r\n    }\r\n  }\r\n\r\n} ","import {BaseController} from \"./base_controller\";\n\nexport class LimitedSelectionCheckboxesController extends BaseController {\n\n  static targets = [\"input\", \"error\"];\n  static values = {max: Number, message: String};\n\n  declare readonly hasErrorTarget: boolean;\n  declare readonly errorTarget: HTMLElement;\n  declare readonly inputTargets: HTMLInputElement[];\n  declare readonly maxValue: number;\n  declare readonly messageValue: string;\n\n  initialize() {\n    this.handleInputs = this.handleInputs.bind(this);\n  }\n\n  connect() {\n    this.inputTargets.forEach((el) => el.addEventListener(\"change\", this.handleInputs));\n  }\n\n  disconnect() {\n    this.inputTargets.forEach((el) => el.removeEventListener(\"change\", this.handleInputs));\n  }\n\n  handleInputs(event: Event) {\n    let tickedInputs = this.inputTargets.reduce((previousValue, el) => el.checked ? previousValue + 1 : previousValue, 0);\n    let target = event.target as HTMLInputElement;\n    if (tickedInputs > this.maxValue) {\n      event.preventDefault();\n      target.checked = false;\n      this.dispatch(target, \"change\");\n      this.dispatch(target, \"limited-selection:too-many\");\n      if (this.hasErrorTarget) {\n        this.errorTarget.innerHTML = this.messageValue;\n      }\n    } else {\n      this.dispatch(target, \"limited-selection:selection\");\n      if (this.hasErrorTarget) {\n        this.errorTarget.innerHTML = \"\";\n      }\n    }\n  }\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class NestedFormController extends BaseController {\n  static targets = ['target', 'template'];\n  static values = {\n    insertMode: String,\n    wrapperClass: String,\n  };\n\n  declare readonly targetTarget: HTMLElement;\n  declare readonly templateTarget: HTMLTemplateElement | HTMLScriptElement;\n\n  declare readonly wrapperClassValue: string;\n  declare readonly hasWrapperSelectorValue: boolean;\n  declare readonly insertModeValue: InsertPosition;\n  declare readonly hasInsertModeValue: boolean;\n\n  get wrapperClass() {\n    return this.hasWrapperSelectorValue ? this.wrapperClassValue : 'nested-fields';\n  }\n\n  get insertMode(): InsertPosition {\n    return this.hasInsertModeValue ? this.insertModeValue : 'beforeend';\n  }\n\n  connect() {\n    this.checkStructure();\n  }\n\n  add(event?: Event) {\n    event?.preventDefault();\n\n    const content = this.templateTarget.innerHTML.replace(/NEW_RECORD/g, this.generateID());\n    this.targetTarget.insertAdjacentHTML(this.insertMode, content);\n  }\n\n  remove(event: Event) {\n    event.preventDefault();\n    const wrapper: HTMLElement | null = (event.target as HTMLElement).closest(`.${this.wrapperClass}`);\n    if (wrapper == null) {\n      throw new Error(`#remove was clicked from outside of a child record. Could not find an ancestor with class .${this.wrapperClass}`);\n    }\n\n    if (wrapper.dataset.newRecord === 'true') {\n      wrapper.remove();\n    } else {\n      wrapper.style.display = 'none';\n      let destroyInput = wrapper.querySelector(\"input[name*='_destroy']\") as HTMLInputElement | null;\n      if (destroyInput == null) {\n        throw new Error(`Could not find a hidden input with name '_destroy'. NestedForm cannot remove an already persisted record without it.`);\n      }\n\n      destroyInput.value = \"1\";\n    }\n  }\n\n  generateID(): string {\n    return new Date().getTime().toString() + Math.random().toString().slice(2);\n  }\n\n  private checkStructure() {\n    let template = this.templateTarget.innerHTML;\n\n    if (template.indexOf('NEW_RECORD')) {\n      throw new Error(\"Could not find 'NEW_RECORD' in the provided template. Please make sure you've passed `child_index: 'NEW_RECORD'` to `fields_for`\");\n    }\n  }\n}","import {BaseController} from \"./base_controller\";\n\nexport class PasswordConfirmController extends BaseController {\n\n  static targets = [\"password\"];\n  static classes = [\"error\"];\n\n  declare readonly passwordTargets: HTMLInputElement[];\n\n  declare readonly errorClass: string;\n  declare readonly hasErrorClass: boolean;\n\n  initialize() {\n    this.checkPasswordsMatch = this.checkPasswordsMatch.bind(this);\n  }\n\n  connect() {\n    this.passwordTargets.forEach((el) => el.addEventListener(\"change\", this.checkPasswordsMatch));\n  }\n\n  disconnect() {\n    this.passwordTargets.forEach((el) => el.removeEventListener(\"change\", this.checkPasswordsMatch));\n  }\n\n  private allPasswordsMatch(): boolean {\n    let values = new Set(this.passwordTargets.map(el => el.value));  // Create a unique set of the password values\n    return values.has(\"\") || values.size == 1; // If any of the passwords are still blank, or there is only one distinct password value (i.e. they all are the same)\n  }\n\n  private checkPasswordsMatch() {\n    let element = this.el;\n    if (this.allPasswordsMatch()) {\n      this.dispatch(element, \"password-confirm:match\");\n      if (this.hasErrorClass) {\n        this.passwordTargets.forEach(el => el.classList.remove(this.errorClass));\n      }\n    } else {\n      this.dispatch(element, \"password-confirm:no-match\");\n      if (this.hasErrorClass) {\n        this.passwordTargets.forEach(el => el.classList.add(this.errorClass));\n      }\n    }\n  }\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class PasswordPeekController extends BaseController {\n\n  static targets = [\"password\"];\n\n  declare readonly passwordTarget: HTMLInputElement;\n\n  peak(event?: Event) {\n    event?.preventDefault();\n    this.passwordTarget.type = \"text\";\n  }\n\n  hide(event?: Event) {\n    event?.preventDefault();\n    this.passwordTarget.type = \"password\";\n  }\n\n  toggle(event?: Event) {\n    event?.preventDefault();\n    if (this.passwordTarget.type === \"password\") {\n      this.peak();\n    } else {\n      this.hide();\n    }\n  }\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class RemoteFormController extends BaseController {\r\n  static targets = [];\r\n\r\n  static values = {selector: String};\r\n\r\n  declare readonly hasSelectorValue: boolean;\r\n  declare readonly selectorValue: string;\r\n\r\n  get selector(): string {\r\n    return this.hasSelectorValue ? this.selectorValue : `[data-controller~=\"${this.identifier}\"]`;\r\n  }\r\n\r\n  replace(event: { detail: [Element, any, XMLHttpRequest] }) {\r\n    const [data, status, xhr] = event.detail;\r\n    if (data instanceof Node) {\r\n      let new_element = data.querySelector(this.selector);\r\n\r\n      if (new_element == null) {\r\n        throw new Error(`expected new form DOM with [data-controller=\"${this.identifier}\"] to be present in returned payload`);\r\n      }\r\n\r\n      let parentNode = this.el.parentNode;\r\n      if (parentNode == null) {\r\n        throw new Error('expected form to have a DOM parent, could not execute replaceChild');\r\n      }\r\n      parentNode.replaceChild(new_element, this.el);\r\n    } else {\r\n      console.log('Unknown', data);\r\n    }\r\n  }\r\n}\r\n","import {useDebounce, useWindowResize} from \"stimulus-use\";\nimport {WindowResizePayload} from \"stimulus-use/dist/use-window-resize/use-window-resize\";\nimport {BaseController} from \"./base_controller\";\n\ninterface ResponsiveIframeMessage {\n  name: string,\n  height: number,\n}\n\nexport class ResponsiveIframeWrapperController extends BaseController {\n\n  initialize() {\n    this.messageReceived = this.messageReceived.bind(this);\n  }\n\n  connect() {\n    window.addEventListener(\"message\", this.messageReceived);\n  }\n\n  disconnect() {\n    window.removeEventListener(\"message\", this.messageReceived);\n  }\n\n  messageReceived(message: MessageEvent<ResponsiveIframeMessage>) {\n    let data = message.data;\n    if (data.hasOwnProperty(\"name\") && data.name === \"iframe-body\" && data.hasOwnProperty(\"height\")) {\n      this.resize(data.height);\n    }\n  }\n\n  resize(height: number) {\n    (this.el as HTMLIFrameElement).style.height = `${height}px`;\n  }\n\n}\n\nexport class ResponsiveIframeBodyController extends BaseController {\n\n  static debounces = [\"postUpdate\"];\n\n  declare observe: () => void;\n  declare unobserve: () => void;\n\n  connect() {\n    // If this Window is inside a frame\n    if (window.self !== window.top) {\n      useWindowResize(this);\n      useDebounce(this, {});\n      this.postUpdate();\n    } else {\n      // Not an iframe\n    }\n  }\n\n  windowResize(payload: WindowResizePayload) {\n    this.postUpdate();\n  };\n\n  postUpdate() {\n    let payload: ResponsiveIframeMessage = {name: \"iframe-body\", height: this.getHeight()};\n    window.parent.postMessage(\n      payload,\n      \"*\",\n    );\n  }\n\n  getHeight(): number {\n    const body = document.body;\n    const html = document.documentElement;\n\n    // Get the largest height out of body and html's various height measurements\n    return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n  }\n\n}\n","import camelCase from \"camelcase\";\r\nimport {BaseController} from \"../base_controller\";\r\n\r\nexport class EphemeralController extends BaseController {\r\n\r\n  _cleanupSelf() {\r\n    this.cleanup(this.el);\r\n  }\r\n\r\n  cleanup(element: HTMLElement) {\r\n    element.dataset.controller = element.dataset.controller?.replaceAll(new RegExp(`(\\s|^)${this.identifier}(\\s|$)`, \"g\"), \"\") || \"\";\r\n    if (element.dataset.controller == \"\") {\r\n      // If there are no controllers left, remove the attribute\r\n      delete element.dataset.controller;\r\n    }\r\n\r\n    let substringIdentifierValueRegex = new RegExp(`(\\s|^)${this.identifier}\\\\..+?(\\s|$)`, \"g\");\r\n    element.dataset.target = element.dataset.target?.replaceAll(substringIdentifierValueRegex, \"\") || \"\";\r\n    delete element.dataset[camelCase(`${this.identifier}-target`)];\r\n    if (element.dataset.target == \"\") {\r\n      // If there are no targets left, remove the attribute\r\n      delete element.dataset.target;\r\n    }\r\n\r\n    element.dataset.action = element.dataset.target?.replaceAll(substringIdentifierValueRegex, \"\") || \"\";\r\n    delete element.dataset[camelCase(`${this.identifier}-action`)];\r\n    if (element.dataset.action == \"\") {\r\n      // If there are no actions left, remove the attribute\r\n      delete element.dataset.action;\r\n    }\r\n\r\n    // @ts-ignore\r\n    let values = this.constructor.values;\r\n    if (values) {\r\n      Object.keys(values).forEach(val => delete element.dataset[camelCase(`${this.identifier}-${val}-value`)]);\r\n    }\r\n\r\n    // @ts-ignore\r\n    let classes = this.constructor.classes;\r\n    if (classes) {\r\n      Object.keys(classes).forEach(val => delete element.dataset[camelCase(`${this.identifier}-${val}-class`)]);\r\n    }\r\n  }\r\n\r\n}\r\n","import {EphemeralController} from \"./utilities/ephemeral_controller\";\r\nimport {scrollToElement} from \"./utilities/scroll\";\r\n\r\nexport class ScrollIntoFocusController extends EphemeralController {\r\n\r\n  static values = {\r\n    behavior: String,\r\n    block: String,\r\n    inline: String,\r\n  };\r\n\r\n  declare behaviorValue: ScrollBehavior;\r\n  declare hasBehaviorValue: boolean;\r\n  declare blockValue: ScrollLogicalPosition;\r\n  declare hasBlockValue: boolean;\r\n  declare inlineValue: ScrollLogicalPosition;\r\n  declare hasInlineValue: boolean;\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      // Attempt smooth scrolling, with polyfill\r\n      scrollToElement(\r\n        this.el,\r\n        {\r\n          behavior: this.hasBehaviorValue ? this.behaviorValue : \"smooth\",\r\n          block: this.hasBlockValue ? this.blockValue : \"center\",\r\n          inline: this.hasInlineValue ? this.inlineValue : \"center\",\r\n        },\r\n      ).catch(() => this.el.scrollIntoView()); // Fallback to snap-scrolling\r\n      this._cleanupSelf();\r\n    });\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\nimport {getScrollParent, scrollToElement} from \"./utilities/scroll\";\n\nexport class ScrollToBottomController extends BaseController {\n\n  static values = {\n    mode: String,\n  };\n\n  declare modeValue: \"nearest\" | \"document\";\n  declare hasModeValue: boolean;\n\n  scroll(event?: Event) {\n    event?.preventDefault();\n    let mode = this.hasModeValue ? this.modeValue : \"document\";\n    let target: null | HTMLElement;\n    if (mode == \"document\") {\n      target = document.body;\n    } else {\n      target = getScrollParent(this.el);\n    }\n    if (target == null) {\n      return;\n    }\n    scrollToElement(target!, {behavior: \"smooth\", block: \"end\"}).catch(() => target!.scrollIntoView(false));\n  }\n\n}\n\n","import {BaseController} from \"./base_controller\";\nimport {scrollToElement} from \"./utilities/scroll\";\n\nexport class ScrollToController extends BaseController {\n\n  static values = {\n    selector: String,\n    behavior: String,\n    block: String,\n    inline: String,\n  };\n\n  declare selectorValue: string;\n  declare behaviorValue: ScrollBehavior;\n  declare hasBehaviorValue: boolean;\n  declare blockValue: ScrollLogicalPosition;\n  declare hasBlockValue: boolean;\n  declare inlineValue: ScrollLogicalPosition;\n  declare hasInlineValue: boolean;\n\n  scroll() {\n    let target = document.querySelector(this.selectorValue);\n    if (!target) {\n      console.warn(`Could not find target for '${this.selectorValue}'`);\n      return;\n    }\n\n    scrollToElement(\n      target!,\n      {\n        behavior: this.hasBehaviorValue ? this.behaviorValue : \"smooth\",\n        block: this.hasBlockValue ? this.blockValue : \"center\",\n        inline: this.hasInlineValue ? this.inlineValue : \"center\",\n      },\n    ).catch(() => target!.scrollIntoView()); // Fallback to snap-scrolling\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\nimport {getScrollParent, scrollToElement} from \"./utilities/scroll\";\n\nexport class ScrollToTopController extends BaseController {\n\n  static values = {\n    mode: String,\n  };\n\n  declare modeValue: \"nearest\" | \"document\";\n  declare hasModeValue: boolean;\n\n  scroll(event?: Event) {\n    event?.preventDefault();\n    let mode = this.hasModeValue ? this.modeValue : \"document\";\n    let target: null | HTMLElement;\n    if (mode == \"document\") {\n      target = document.body;\n    } else {\n      target = getScrollParent(this.el);\n    }\n    if (target == null) {\n      return;\n    }\n    scrollToElement(target!, {behavior: \"smooth\", block: \"start\"}).catch(() => target!.scrollIntoView(false));\n  }\n\n}\n\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class SelfDestructController extends BaseController {\r\n\r\n  static values = {seconds: Number};\r\n\r\n  declare readonly secondsValue: number;\r\n  timeout: null | ReturnType<typeof window.setTimeout> = null;\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      // Only start countdown on first paint\r\n      this.timeout = setTimeout(() => this.el.remove(), this.secondsValue * 1000);\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.timeout) {\r\n      clearTimeout(this.timeout);\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class StickyController extends BaseController {\r\n\r\n  static classes = [\"stuck\"];\r\n  static values = {\r\n    mode: String,\r\n  };\r\n\r\n  declare readonly hasStuckClass: boolean;\r\n  declare readonly stuckClass: string;\r\n  declare readonly hasModeValue: \"top\" | \"bottom\";\r\n  declare readonly modeValue: \"top\" | \"bottom\";\r\n\r\n  _magicElement: HTMLDivElement | null = null;\r\n\r\n  get _mode(): \"top\" | \"bottom\" {\r\n    return this.hasModeValue ? this.modeValue : \"top\";\r\n  }\r\n\r\n  createMagicElement() {\r\n    // Magic element placed next to the sticky el that acts as an external border.\r\n    // When the magic element is off the page, we know that the sticky el is \"stuck\"\r\n    if (this._magicElement !== null) {\r\n      return;\r\n    }\r\n\r\n    this._magicElement = document.createElement(\"div\");\r\n    switch (this._mode) {\r\n      case \"top\":\r\n        this.el.insertAdjacentElement(\"beforebegin\", this._magicElement);\r\n        break;\r\n      case \"bottom\":\r\n        this.el.insertAdjacentElement(\"afterend\", this._magicElement);\r\n        break;\r\n    }\r\n  }\r\n\r\n  connect() {\r\n    let element = this.el;\r\n    this.createMagicElement();\r\n\r\n    const observer = new IntersectionObserver(entries => {\r\n      entries.forEach(entry => {\r\n        if (entry.target !== this._magicElement) {\r\n          return;\r\n        }\r\n        if (entry.intersectionRatio === 0) {\r\n          element.classList.add(this.hasStuckClass ? this.stuckClass : \"stuck\");\r\n        } else if (entry.intersectionRatio === 1) {\r\n          element.classList.remove(this.hasStuckClass ? this.stuckClass : \"stuck\");\r\n        }\r\n      });\r\n\r\n    }, {\r\n      threshold: [0, 1],\r\n    });\r\n    observer.observe(this._magicElement!);\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class TableSortController extends BaseController {\r\n\r\n  static values = {startSort: Number};\r\n\r\n  declare readonly startSortValue: number;\r\n  declare readonly hasStartSortValue: boolean;\r\n  _lastIndex: number | null = null;\r\n  _reverse: boolean = false;\r\n\r\n  get _tableHead(): HTMLTableSectionElement {\r\n    let head = (this.el as HTMLTableElement).tHead;\r\n    if (head == null) {\r\n      throw new Error('Expected table to have a <thead> element.');\r\n    }\r\n    return head;\r\n  }\r\n\r\n  get _tableHeaders(): HTMLTableHeaderCellElement[] {\r\n    let rows = this._tableHead.rows;\r\n    if (rows.length == 0) {\r\n      throw new Error('Expected table to have a <thead> element with at least one row.');\r\n    }\r\n    return Array.from(rows[0].cells);\r\n  }\r\n\r\n  get _tableBody() {\r\n    return (this.el as HTMLTableElement).tBodies[0];\r\n  }\r\n\r\n  get _tableRows(): HTMLTableRowElement[] {\r\n    return Array.from(this._tableBody.rows);\r\n  }\r\n\r\n  initialize() {\r\n    this.sort = this.sort.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      this._tableHeaders.forEach(cell => cell.addEventListener(\"click\", this.sort));\r\n      if (this.hasStartSortValue) {\r\n        this._sortByColumn(this.startSortValue);\r\n      }\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    this._tableHeaders.forEach(cell => cell.removeEventListener(\"click\", this.sort));\r\n  }\r\n\r\n  sort(event: Event) {\r\n    event.preventDefault();\r\n    let headerCell = event.target! as HTMLTableHeaderCellElement;\r\n    let headerCellIndex = this._indexOfHeaderCell(headerCell);\r\n    this._sortByColumn(headerCellIndex);\r\n  }\r\n\r\n  private _indexOfHeaderCell(cell: HTMLTableHeaderCellElement) {\r\n    return this._tableHeaders.indexOf(cell);\r\n  }\r\n\r\n  private _sortByColumn(index: number) {\r\n    this._reverse = index === this._lastIndex && !this._reverse;\r\n    let frag = document.createDocumentFragment();\r\n    let rows = this._tableRows;\r\n\r\n    let newRows = rows.sort((row, otherRow) => {\r\n      let cells = Array.from(row.cells);\r\n      let otherCells = Array.from(otherRow.cells);\r\n\r\n      // TODO: Handle colspans?\r\n      let x = cells[index]?.innerText || \"\";\r\n      let y = otherCells[index]?.innerText || \"\";\r\n\r\n      let sortVal = x.localeCompare(y, \"en\", {sensitivity: \"base\", numeric: true, caseFirst: \"upper\"});\r\n\r\n      if (row.dataset.sortTop || otherRow.dataset.sortBottom) {\r\n        if (row.dataset.sortTop && otherRow.dataset.sortTop) {\r\n          return sortVal;\r\n        }\r\n        return -1;\r\n      }\r\n      if (row.dataset.sortBottom || otherRow.dataset.sortTop) {\r\n        if (row.dataset.sortBottom && otherRow.dataset.sortBottom) {\r\n          return sortVal;\r\n        }\r\n        return 1;\r\n      }\r\n\r\n      if (this._reverse) {\r\n        return sortVal > 0 ? -1 : 1;\r\n      }\r\n      return sortVal;\r\n    });\r\n\r\n    newRows.forEach(row => frag.appendChild(row));\r\n\r\n    this._tableBody.innerHTML = \"\";\r\n    this._tableBody.appendChild(frag);\r\n    this._lastIndex = index;\r\n  }\r\n\r\n}","import {useMutation} from \"stimulus-use\";\r\nimport {BaseController} from \"./base_controller\";\r\n\r\nexport class TableTruncateController extends BaseController {\r\n\r\n  static targets = [\"showMore\"];\r\n  static values = {\r\n    limit: Number,\r\n    truncated: Boolean,\r\n  };\r\n\r\n  declare readonly showMoreTarget: HTMLElement;\r\n  declare limitValue: number;\r\n  declare readonly hasLimitValue: boolean;\r\n  declare truncatedValue: boolean;\r\n  declare readonly hasTruncatedValue: boolean;\r\n\r\n  get _truncated(): boolean {\r\n    return this.hasTruncatedValue ? this.truncatedValue : false;\r\n  }\r\n\r\n  set _truncated(value) {\r\n    this.truncatedValue = value;\r\n  }\r\n\r\n  get _tableBody(): HTMLTableSectionElement {\r\n    return (this.el as HTMLTableElement).tBodies[0];\r\n  }\r\n\r\n  get _tableRows(): HTMLTableRowElement[] {\r\n    return Array.from(this._tableBody.rows);\r\n  }\r\n\r\n  get _limit(): number {\r\n    return this.hasLimitValue ? this.limitValue : 20;\r\n  }\r\n\r\n  initialize() {\r\n    this.truncate = this.truncate.bind(this);\r\n    this.expand = this.expand.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    useMutation(this, {childList: true, element: this._tableBody});\r\n\r\n    requestAnimationFrame(() => {\r\n      this.truncate();\r\n      this.showMoreTarget.addEventListener(\"click\", this.expand);\r\n    });\r\n  }\r\n\r\n  truncate(event?: Event) {\r\n    event?.preventDefault();\r\n    this._truncated = true;\r\n    if (this._tableRows.length >= this._limit) {\r\n      this._tableRows.slice(this._limit).forEach((el) => {\r\n        if (el !== this.showMoreTarget) {\r\n          this._hideElement(el);\r\n        }\r\n      });\r\n      this._showElement(this.showMoreTarget);\r\n    } else {\r\n      this._hideElement(this.showMoreTarget);\r\n    }\r\n  }\r\n\r\n  expand(event?: Event) {\r\n    this._truncated = false;\r\n    event?.preventDefault();\r\n    this._tableRows.slice(this._limit).forEach((el) => {\r\n      if (el !== this.showMoreTarget) {\r\n        this._showElement(el);\r\n      }\r\n    });\r\n    this._hideElement(this.showMoreTarget);\r\n  }\r\n\r\n  mutate(entries: MutationRecord[]) {\r\n    if (this._truncated) {\r\n      this._reTruncate();\r\n    }\r\n  }\r\n\r\n  private _showElement(el: HTMLElement): void {\r\n    el.style.display = \"\";\r\n  }\r\n\r\n  private _hideElement(el: HTMLElement): void {\r\n    el.style.display = \"none\";\r\n  }\r\n\r\n  private _reTruncate() {\r\n    this._tableRows.slice(0, this._limit).forEach((el) => {\r\n      if (el !== this.showMoreTarget) {\r\n        this._showElement(el);\r\n      }\r\n    });\r\n    this._tableRows.slice(this._limit).forEach((el) => {\r\n      if (el !== this.showMoreTarget) {\r\n        this._hideElement(el);\r\n      }\r\n    });\r\n    this._showElement(this.showMoreTarget);\r\n  }\r\n\r\n}","import {EphemeralController} from \"./utilities/ephemeral_controller\";\n\nexport class TeleportController extends EphemeralController {\n\n  static values = {target: String, insert: String, immediate: Boolean};\n\n  declare readonly immediateValue: boolean;\n  declare readonly hasImmediateValue: boolean;\n  declare readonly targetValue: string;\n  declare readonly hasInsertValue: boolean;\n  declare readonly insertValue: InsertPosition | \"replaceOuter\" | \"replaceInner\" | \"prepend\" | \"append\";\n\n  connect() {\n    if (!this.hasInsertValue) {\n      throw new Error(\"`insert` value was not specified\");\n    }\n\n    requestAnimationFrame(() => {\n      if (this.hasImmediateValue && this.immediateValue) {\n        this.execute();\n      }\n    });\n  }\n\n  execute(event?: Event) {\n    event?.preventDefault();\n    let element = this.el;\n    let destination = document.querySelector(this.targetValue);\n\n    if (destination == null) {\n      this.dispatch(element, \"teleport:error\");\n      return;\n    }\n\n    let copy = element.cloneNode(true) as HTMLElement;\n    this.cleanup(copy);\n\n    switch (this.insertValue) {\n      case \"beforebegin\":\n      case \"beforeend\":\n      case \"afterend\":\n      case \"afterbegin\":\n        destination.insertAdjacentHTML(this.insertValue, copy.outerHTML);\n        break;\n      case \"replaceOuter\":\n        destination.outerHTML = copy.outerHTML;\n        break;\n      case \"replaceInner\":\n        destination.innerHTML = copy.outerHTML;\n        break;\n      case \"prepend\":\n        destination.insertAdjacentHTML(\"afterbegin\", copy.outerHTML);\n        break;\n      case \"append\":\n        destination.insertAdjacentHTML(\"beforeend\", copy.outerHTML);\n        break;\n      default:\n        throw new Error(\"`insert` value was not specified\");\n\n    }\n    element.remove();\n  }\n\n}\n","import {useClickOutside, useHover} from \"stimulus-use\";\nimport {BaseController} from \"./base_controller\";\n\nexport type ToggleClassMode = \"on\" | \"off\" | \"toggle\"\n\nexport class ToggleClassController extends BaseController {\n\n  static targets = [\"toggle\"];\n  static values = {\n    class: String,\n    mouseEnter: String,\n    mouseLeave: String,\n    clickAway: Boolean,\n    initial: String,\n  };\n\n  declare readonly toggleTargets: HTMLElement[];\n\n  declare readonly classValue: string;\n  declare readonly hasClassValue: boolean;\n\n  declare readonly mouseEnterValue: ToggleClassMode;\n  declare readonly hasMouseEnterValue: boolean;\n\n  declare readonly mouseLeaveValue: ToggleClassMode;\n  declare readonly hasMouseLeaveValue: boolean;\n\n  declare readonly clickAwayValue: boolean;\n  declare readonly hasClickAwayValue: boolean;\n\n  declare readonly initialValue: \"on\" | \"off\";\n  declare readonly hasInitialValue: boolean;\n\n  connect() {\n    if (!this.hasClassValue) {\n      throw new Error(\"data-toggle-class-class-value must not be empty\");\n    }\n\n    if (this.hasMouseEnterValue || this.hasMouseLeaveValue) {\n      useHover(this);\n    }\n\n    if (this.hasClickAwayValue && this.clickAwayValue) {\n      useClickOutside(this);\n    }\n\n    requestAnimationFrame(() => {\n      if (this.hasInitialValue) {\n        if (this.initialValue === \"on\") {\n          this.toggleTargets.forEach((target) => this.elementOn(target));\n        } else {\n          this.toggleTargets.forEach((target) => this.elementOff(target));\n        }\n      }\n    });\n  }\n\n  clickOutside() {\n    this.toggleTargets.forEach((target) => {\n      if (this.elementWasToggled(target)) {\n        this.elementToggleStatus(target);\n        this.elementToggle(target);\n      }\n    });\n  }\n\n  mouseEnter() {\n    if (this.hasMouseEnterValue) {\n      switch (this.mouseEnterValue) {\n        case \"on\":\n          this.on();\n          break;\n        case \"off\":\n          this.off();\n          break;\n        case \"toggle\":\n          this.toggle();\n          break;\n      }\n    }\n    return {};\n  }\n\n  mouseLeave() {\n    if (this.hasMouseLeaveValue) {\n      switch (this.mouseLeaveValue) {\n        case \"on\":\n          this.on();\n          break;\n        case \"off\":\n          this.off();\n          break;\n        case \"toggle\":\n          this.toggle();\n          break;\n      }\n    }\n    return {};\n  }\n\n  on(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementOn(target);\n    });\n  }\n\n  off(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementOff(target);\n    });\n  }\n\n  toggle(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementToggle(target);\n    });\n  }\n\n  private elementWasToggled(el: HTMLElement): boolean {\n    return el.dataset.toggled == \"true\";\n  }\n\n  private elementToggleStatus(el: HTMLElement) {\n    if (this.elementWasToggled(el)) {\n      delete el.dataset.toggled;\n    } else {\n      el.dataset.toggled = \"true\";\n    }\n  }\n\n  private elementToggle(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass));\n  }\n\n  private elementOn(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass, true));\n  }\n\n  private elementOff(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass, false));\n  }\n\n}\n","export function isTurboFrame(element: HTMLElement): element is TurboFrame {\r\n  return element.nodeName == \"TURBO-FRAME\";\r\n}\r\n","import {BaseController} from \"./base_controller\";\nimport {isHTMLAnchorElement} from \"./utilities/elements\";\nimport {isTurboFrame} from \"./utilities/turbo\";\n\nexport class TurboFrameRCController extends BaseController {\n\n  static values = {\n    frameId: String,\n    src: String,\n    loadingMessage: String,\n  };\n\n  declare readonly frameIdValue: string;\n  declare readonly srcValue: string;\n  declare readonly hasSrcValue: boolean;\n  declare readonly loadingMessageValue: string;\n  declare readonly hasLoadingMessageValue: boolean;\n\n  toggle(event?: Event) {\n    event?.preventDefault();\n    let frame = this._getFrame();\n    let frameSrc = frame.src;\n    if (frameSrc == null || frameSrc !== this._getSrc()) {\n      this._setSrc();\n    } else {\n      this._clear();\n    }\n  }\n\n  setSrc(event?: Event) {\n    event?.preventDefault();\n    this._setSrc();\n  }\n\n  clear(event?: Event) {\n    event?.preventDefault();\n    this._clear();\n  }\n\n  private _setSrc() {\n    let frame = this._getFrame();\n    if (this.hasLoadingMessageValue) {\n      frame.innerHTML = this.loadingMessageValue;\n    }\n    frame.src = this._getSrc();\n  }\n\n  private _clear() {\n    let frame = this._getFrame();\n    frame.src = \"\";\n    frame.innerHTML = \"\";\n  }\n\n  private _getFrame(): TurboFrame {\n    let frame = document.getElementById(`${this.frameIdValue}`);\n    if (frame == null) {\n      throw new Error(`Could not find frame with ID '${this.frameIdValue}'`);\n    }\n    if (!isTurboFrame(frame)) {\n      throw new Error(`Element targeted by ID '${this.frameIdValue}'`);\n    } else {\n      return frame;\n    }\n  }\n\n  private _getSrc(): string {\n    let element = this.el;\n    if (this.hasSrcValue) {\n      return this.srcValue;\n    } else if (isHTMLAnchorElement(element)) {\n      return element.href;\n    } else {\n      throw new Error(\"No link given to drive frame to\");\n    }\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\nimport {isTurboFrame} from \"./utilities/turbo\";\n\n// noinspection SillyAssignmentJS\nexport class TurboFrameRefreshController extends BaseController {\n\n  static values = {\n    interval: Number,\n    poll: Boolean,\n  };\n\n  declare readonly intervalValue: number;\n  declare readonly pollValue: boolean;\n  declare readonly hasPollValue: boolean;\n  _timeoutHandle: null | ReturnType<typeof window.setTimeout> = null;\n\n  get poll(): boolean {\n    return this.hasPollValue ? this.pollValue : false;\n  }\n\n  initialize() {\n    this.refresh = this.refresh.bind(this);\n  }\n\n  connect() {\n    let element = this.el;\n    if (isTurboFrame(element)) {\n      if (!!element.src) {\n        throw new Error('The provided <turbo-frame> element has no `src` attribute.');\n      }\n    } else {\n      throw new Error('Expected controller to be mounted on a <turbo-frame> element.');\n    }\n    if (this.poll) {\n      requestAnimationFrame(() => this._timeoutHandle = setTimeout(() => this.refresh(), this.intervalValue));\n    }\n  }\n\n  disconnect() {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle);\n    }\n  }\n\n  refresh(event?: Event) {\n    event?.preventDefault();\n    let element = this.el as TurboFrame;\n    element.src = element.src;\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class WordCountController extends BaseController {\n\n  static targets = [\"input\", \"output\"];\n  static values = {min: Number, max: Number};\n  static classes = [\"error\"];\n\n  declare readonly inputTarget: HTMLInputElement | HTMLTextAreaElement;\n  declare readonly outputTarget: HTMLElement;\n  declare minValue: number;\n  declare hasMinValue: boolean;\n  declare maxValue: number;\n  declare hasMaxValue: boolean;\n  declare errorClass: string;\n  declare hasErrorClass: boolean;\n\n  initialize() {\n    this.updateWordCount = this.updateWordCount.bind(this);\n  }\n\n  connect() {\n    this.updateWordCount();\n    this.inputTarget.addEventListener(\"input\", this.updateWordCount);\n  }\n\n  disconnect() {\n    this.inputTarget.removeEventListener(\"input\", this.updateWordCount);\n  }\n\n  updateWordCount() {\n    let wordCount = 0;\n    let textAreaValue = this.inputTarget.value;\n    let matches = textAreaValue.match(/\\S+/g);\n    wordCount = (matches && matches.length) || 0;\n    this.outputTarget.innerText = wordCount.toString();\n    if (this.hasErrorClass) {\n      if (this.isValidCount(wordCount)) {\n        this.outputTarget.classList.remove(this.errorClass);\n      } else {\n        this.outputTarget.classList.add(this.errorClass);\n      }\n    }\n  }\n\n  isValidCount(count: number) {\n    let min = 0;\n    let max = 99999;\n\n    if (this.hasMinValue) {\n      min = this.minValue;\n    }\n\n    if (this.hasMaxValue) {\n      max = this.maxValue;\n    }\n\n    return count >= min && count <= max;\n  }\n\n}\n"],"names":["BaseController","context","_this","Proxy","get","obj","prop","returnVal","Reflect","self","test","logProperty","toString","apply","target","thisArg","argArray","log","args","dispatch","element","eventName","options","mergedOptions","Object","assign","bubbles","cancelable","detail","event","CustomEvent","dispatchEvent","functionName","this","application","debug","logger","console","groupCollapsed","identifier","groupEnd","Controller","AppearanceController","initialize","_handleVisibility","bind","connect","window","addEventListener","document","disconnect","removeEventListener","appear","el","away","_documentIsActive","visibilityState","hasFocus","AsyncBlockController","loadContent","hasReplaceTarget","replaceTarget","fetch","endpointValue","then","response","text","html","newEl","createElement","innerHTML","hasSelectorValue","selectedContent","querySelectorAll","selectorValue","replaceWith","children","err","_errorMessage","hasErrorMessageValue","errorMessageValue","endpoint","String","errorMessage","selector","AutoSubmitFormController","handler","forEach","_this2","e","method","controller","methodName","composeEventName","name","eventPrefix","composedName","extendedEvent","type","composed","originalEvent","defaultOptions","useIntersection","targetElement","controllerDisconnect","observer","IntersectionObserver","entries","entry","isIntersecting","isVisible","call","appearEvent","dispatchAppear","disappearEvent","dispatchDisappear","observe","unobserve","[object Object]","events","onlyVisible","StimulusUse","_a","_b","_c","controllerId","stimulusUseDebug","id","dataset","controllerInitialize","controllerConnect","UseHover","super","onEnter","onLeave","hover","enhanceController","UseMutation","error","handleError","mutation","MutationObserver","useMutation","useWindowResize","callback","innerWidth","innerHeight","payload","height","Infinity","width","debounce","fn","wait","timeoutId","arguments","clearTimeout","setTimeout","AutosizeController","_handler","style","resize","boxSizing","requestAnimationFrame","windowResize","autosize","offset","offsetHeight","clientHeight","scrollHeight","CharCountController","_updateCharCount","inputTarget","charCount","value","length","outputTarget","innerText","hasErrorClass","_isValidCount","classList","remove","errorClass","add","count","min","max","hasMinValue","minValue","hasMaxValue","maxValue","Number","CheckboxSelectAllController","toggle","refresh","hasSelectAllTarget","selectAllTarget","checkboxTargets","checkbox","preventDefault","checked","checkboxesCount","checkboxesCheckedCount","indeterminate","filter","ClipboardController","supported","queryCommandSupported","hasRemoveUnusedValue","removeUnusedValue","hasFallbackTarget","fallbackTarget","hasCopyTarget","copyTarget","select","sourceTarget","copy","execCommand","isHTMLAnchorElement","nodeName","isHTMLFormElement","isHTMLInputElement","isHTMLButtonElement","isHTMLSelectElement","isElementCheckable","removeUnused","Boolean","ConfirmController","confirm","Error","message","hasMessageValue","messageValue","ConfirmNavigationController","handlePopstate","handleTurboNavigation","onbeforeunload","_message","_event","_messageValue","DebugController","testTargets","DetectDirtyController","_checkDirty","_cacheLoadValues","restore","_restoreElementFromLoadValue","_getElementValue","_getElementLoadValue","getAttribute","_cacheAttrName","defaultChecked","Array","from","option","defaultSelected","_elementHasCachedLoadValue","hasAttribute","_isElementDirty","setAttribute","removeAttribute","cacheValue","defaultValue","DetectDirtyFormController","_formElements","_checkElementDirty","_cacheElementLoadValue","_this3","some","DisableInputsController","hasDisablerTarget","disablerTarget","disableInputs","enableInputs","shouldClear","hasClearValue","clearValue","disableTargets","_","disabled","clear","DisableWithController","enable","disable","_timeoutHandle","_isDisabled","stopImmediatePropagation","_cacheText","_getElText","_setElText","_disable","_timeout","_enable","str","undefined","hasTimeoutValue","timeoutValue","timeout","DismissableController","dismiss","ElementSaveController","_restoreOnLoad","localStorage","removeItem","_uniqueIdentifier","_element","save","attributes","attributesValue","split","data","attr","_get","setItem","JSON","stringify","getItem","savedData","parse","keys","_set","hasIdValue","idValue","elementID","location","href","_id","hasRestoreOnLoadValue","restoreOnLoadValue","hasElementTarget","elementTarget","restoreOnLoad","EmptyDomController","childList","checkEmpty","mutate","_removeNotEmptyClasses","_addEmptyClasses","_addNotEmptyClasses","_removeEmptyClasses","hasEmptyClass","emptyClasses","hasNotEmptyClass","notEmptyClasses","emptyClass","notEmptyClass","hasScopeSelectorValue","scopeSelectorValue","scopeSelector","EnableInputsController","hasEnablerTarget","enablerTarget","enableTargets","FallbackImageController","onerror","hasPlaceholderValue","src","placeholderValue","display","placeholder","FormRcController","submit","formTarget","reset","FormSaveController","_clear","clearOnSubmit","formIdentifier","formData","formElements","formID","elements","hasClearOnSubmitValue","clearOnSubmitValue","IntersectionController","threshold","disappear","hasThresholdValue","thresholdValue","map","val","parseFloat","trim","smoothPolyfilled","LazyBlockController","scrollToElement","behavior","block","inline","scrollIntoView","smoothSupported","import","polyfill","polyfillSmooth","documentElement","getScrollParent","node","overflowY","getComputedStyle","parentElement","body","LightboxImageController","open","close","_dialog","image","className","imageClassName","srcset","srcSet","sizes","appendChild","insertAdjacentElement","dialogPolyfill","registerDialog","modalClassName","showModal","hasSrcValue","srcValue","hasSrcSetValue","srcSetValue","hasSizesValue","sizesValue","hasModalClass","modalClass","hasImageClass","imageClass","LimitedSelectionCheckboxesController","handleInputs","inputTargets","tickedInputs","reduce","previousValue","hasErrorTarget","errorTarget","NestedFormController","checkStructure","content","templateTarget","replace","generateID","targetTarget","insertAdjacentHTML","insertMode","wrapper","closest","wrapperClass","newRecord","destroyInput","querySelector","Date","getTime","Math","random","slice","indexOf","hasWrapperSelectorValue","wrapperClassValue","hasInsertModeValue","insertModeValue","PasswordConfirmController","checkPasswordsMatch","passwordTargets","allPasswordsMatch","values","Set","has","size","PasswordPeekController","peak","passwordTarget","hide","RemoteFormController","Node","new_element","parentNode","replaceChild","ResponsiveIframeWrapperController","messageReceived","hasOwnProperty","ResponsiveIframeBodyController","top","constructor","debounces","func","postUpdate","getHeight","parent","postMessage","EphemeralController","_cleanupSelf","cleanup","replaceAll","RegExp","substringIdentifierValueRegex","camelCase","action","classes","ScrollIntoFocusController","hasBehaviorValue","behaviorValue","hasBlockValue","blockValue","hasInlineValue","inlineValue","ScrollToBottomController","scroll","hasModeValue","modeValue","mode","ScrollToController","warn","ScrollToTopController","SelfDestructController","secondsValue","seconds","StickyController","createMagicElement","_magicElement","_mode","intersectionRatio","hasStuckClass","stuckClass","TableSortController","sort","_tableHeaders","cell","hasStartSortValue","_sortByColumn","startSortValue","headerCellIndex","_indexOfHeaderCell","index","_reverse","_lastIndex","frag","createDocumentFragment","_tableRows","row","otherRow","cells","otherCells","x","y","sortVal","localeCompare","sensitivity","numeric","caseFirst","sortTop","sortBottom","_this4","_tableBody","head","tHead","rows","_tableHead","tBodies","startSort","TableTruncateController","truncate","expand","showMoreTarget","_truncated","_limit","_hideElement","_showElement","_reTruncate","hasTruncatedValue","truncatedValue","hasLimitValue","limitValue","limit","truncated","TeleportController","hasInsertValue","hasImmediateValue","immediateValue","execute","destination","targetValue","cloneNode","insertValue","outerHTML","insert","immediate","ToggleClassController","hasClassValue","hasMouseEnterValue","hasMouseLeaveValue","useHover","hasClickAwayValue","clickAwayValue","onEvent","contains","rect","getBoundingClientRect","windowHeight","windowWidth","clientWidth","left","isElementInViewport","clickOutside","clickOutsideEvent","useClickOutside","hasInitialValue","toggleTargets","initialValue","elementOn","elementOff","elementWasToggled","elementToggleStatus","elementToggle","mouseEnter","mouseEnterValue","on","off","mouseLeave","mouseLeaveValue","_this5","toggled","classValue","klass","isTurboFrame","class","clickAway","initial","TurboFrameRCController","frameSrc","_getFrame","_getSrc","_setSrc","setSrc","frame","hasLoadingMessageValue","loadingMessageValue","getElementById","frameIdValue","frameId","loadingMessage","TurboFrameRefreshController","poll","intervalValue","hasPollValue","pollValue","interval","WordCountController","updateWordCount","wordCount","matches","match","isValidCount"],"mappings":"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"}