{"version":3,"file":"stimulus-library.modern.js","sources":["../src/base_controller.ts","../src/appearance_controller.ts","../src/async_block_controller.ts","../src/auto_submit_form_controller.ts","../node_modules/stimulus-use/dist/support/index.js","../node_modules/stimulus-use/dist/use-intersection/use-intersection.js","../node_modules/stimulus-use/dist/use-click-outside/use-click-outside.js","../node_modules/stimulus-use/dist/stimulus_use.js","../node_modules/stimulus-use/dist/use-hover/use-hover.js","../node_modules/stimulus-use/dist/use-mutation/use-mutation.js","../node_modules/stimulus-use/dist/use-window-resize/use-window-resize.js","../node_modules/stimulus-use/dist/use-debounce/use-debounce.js","../src/autosize_controller.ts","../src/char_count_controller.ts","../src/checkbox_select_all_controller.ts","../src/clipboard_controller.ts","../src/utilities/elements.ts","../src/confirm_controller.ts","../src/confirm_navigation_controller.ts","../src/debug_controller.ts","../src/detect_dirty_controller.ts","../src/disable_inputs_controller.ts","../src/dismissable_controller.ts","../src/empty_dom_controller.ts","../src/enable_inputs_controller.ts","../src/fallback_image_controller.ts","../src/form_save_controller.ts","../src/intersection_controller.ts","../src/lazy_block_controller.ts","../src/utilities/scroll.ts","../src/lightbox_image_controller.ts","../src/limited_selection_checkboxes_controller.ts","../src/nested_form_controller.ts","../src/password_confirm_controller.ts","../src/password_peek_controller.ts","../src/responsive_iframe_controller.ts","../src/utilities/ephemeral_controller.ts","../src/scroll_into_focus_controller.ts","../src/scroll_to_bottom_controller.ts","../src/scroll_to_controller.ts","../src/scroll_to_top_controller.ts","../src/self_destruct_controller.ts","../src/sticky_controller.ts","../src/teleport_controller.ts","../src/toggle_class_controller.ts","../src/turbo_frame_rc_controller.ts","../src/utilities/turbo.ts","../src/word_count_controller.ts"],"sourcesContent":["import {Context, Controller} from \"stimulus\";\n\nexport class BaseController extends Controller {\n\n  constructor(context: Context) {\n    super(context);\n    return new Proxy(this, {\n      get: (obj, prop) => {\n        let returnVal = Reflect.get(obj, prop);\n        let self = this;\n        if (logProperty(prop.toString())) {\n          if (typeof returnVal == \"function\") {\n            return new Proxy(returnVal, {\n              apply(target: any, thisArg: any, argArray?: any): any {\n                self.log(prop.toString(), {\n                  args: argArray,\n                });\n                return Reflect.apply(target, thisArg, argArray);\n              },\n            });\n          } else {\n            this.log(prop.toString());\n          }\n        }\n        return returnVal;\n      },\n    });\n  }\n\n  dispatch(element: HTMLElement, eventName: string, options: CustomEventInit = {bubbles: true, cancelable: true, detail: {target: element}}) {\n    let event = new CustomEvent(eventName, options);\n    element.dispatchEvent(event);\n  }\n\n  log(functionName: string, args: {} = {}): void {\n    // @ts-ignore\n    if (!this.application.debug) {\n      return;\n    }\n    let logger = console;\n    logger.groupCollapsed(`%c${this.identifier} %c#${functionName}`, \"color: #3B82F6\", \"color: unset\");\n    logger.log({\n      element: this.element,\n      ...args,\n    });\n    logger.groupEnd();\n  }\n\n}\n\nfunction logProperty(prop: string): boolean {\n  switch (prop) {\n    case \"application\":\n    case \"element\":\n    case \"constructor\":\n    case \"initialize\":\n    case \"log\":\n    case \"data\":\n    case \"valueDescriptorMap\":\n    case \"identifier\":\n      return false;\n  }\n\n  if (/^_.*?$/.test(prop)) {\n    return false;\n  }\n  if (/^.*?Target(s)?$/.test(prop)) {\n    return false;\n  }\n  if (/^.*?Value$/.test(prop)) {\n    return false;\n  }\n  if (/^.*?ValueChanged$/.test(prop)) {\n    return false;\n  }\n  if (/^.*?Class$/.test(prop)) {\n    return false;\n  }\n\n  return true;\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class AppearanceController extends BaseController {\r\n\r\n  initialize() {\r\n    this._handleVisibility = this._handleVisibility.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    window.addEventListener(\"focus\", this._handleVisibility);\r\n    window.addEventListener(\"blur\", this._handleVisibility);\r\n    document.addEventListener(\"visibilitychange\", this._handleVisibility);\r\n    this._handleVisibility();\r\n  }\r\n\r\n  disconnect() {\r\n    window.removeEventListener(\"focus\", this._handleVisibility);\r\n    window.removeEventListener(\"blur\", this._handleVisibility);\r\n    document.removeEventListener(\"visibilitychange\", this._handleVisibility);\r\n  }\r\n\r\n  appear() {\r\n    this.dispatch(this.element as HTMLElement, \"appearance:appear\");\r\n  }\r\n\r\n  away() {\r\n    this.dispatch(this.element as HTMLElement, \"appearance:away\");\r\n  }\r\n\r\n  _handleVisibility(): any {\r\n    this._documentIsActive() ? this.appear() : this.away();\r\n  }\r\n\r\n  _documentIsActive() {\r\n    return document.visibilityState == \"visible\" && document.hasFocus();\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\n\nexport class AsyncBlockController extends BaseController {\n  static targets = [\"replace\"];\n  static values = {endpoint: String, errorMessage: String, selector: String};\n\n  declare readonly replaceTarget: HTMLElement;\n  declare readonly hasReplaceTarget: boolean;\n  declare readonly endpointValue: string;\n\n  declare readonly hasSelectorValue: boolean;\n  declare readonly selectorValue: string;\n\n  declare readonly hasErrorMessageValue: boolean;\n  declare readonly errorMessageValue: string;\n\n  get _errorMessage(): string {\n    return this.hasErrorMessageValue ? this.errorMessageValue : \"This content failed to load\";\n  }\n\n  // This is a simple controller to load a block of content when the page loads.\n  // It should be used to give a quick initial response before calling out to an\n  // an AJAX endpoint to do some expensive work.\n  connect() {\n    this.loadContent();\n  }\n\n  loadContent() {\n    let el = (this.hasReplaceTarget ? this.replaceTarget : this.element) as HTMLElement;\n    fetch(this.endpointValue)\n    .then((response) => response.text())\n    .then((html) => {\n      let newEl = document.createElement(\"div\");\n      newEl.innerHTML = html;\n      if (this.hasSelectorValue) {\n        let selectedContent = newEl.querySelectorAll(this.selectorValue);\n        el.replaceWith(...selectedContent);\n      } else {\n        el.replaceWith(...newEl.children);\n      }\n      // Trigger event to show block has loaded\n      let event = new CustomEvent(\"ajax:success\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    })\n    .catch(err => {\n      el.replaceWith(this._errorMessage);\n\n      let event = new CustomEvent(\"ajax:error\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    })\n    .finally(() => {\n      let event = new CustomEvent(\"ajax:complete\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    });\n  }\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class AutoSubmitFormController extends BaseController {\n\n  private boundHandler = this.handler.bind(this);\n\n  connect() {\n    (this.element as HTMLElement).querySelectorAll(\"input, select, textarea\").forEach(el => el.addEventListener(\"change\", this.boundHandler));\n  }\n\n  disconnect() {\n    (this.element as HTMLElement).querySelectorAll(\"input, select, textarea\").forEach(el => el.removeEventListener(\"change\", this.boundHandler));\n  }\n\n  private handler(e: Event) {\n    // this.element.submit()\n    // Moved to this to support remote forms and CSRF properly\n    this.element.dispatchEvent(\n      new CustomEvent(\"submit\", {\n        bubbles: true,\n        cancelable: true,\n      }),\n    );\n  }\n}\n","export const method = (controller, methodName) => {\n    const method = controller[methodName];\n    if (typeof method == 'function') {\n        return method;\n    }\n    else {\n        return (...args) => { };\n    }\n};\nexport const composeEventName = (name, controller, eventPrefix) => {\n    let composedName = name;\n    if (eventPrefix === true) {\n        composedName = `${controller.identifier}:${name}`;\n    }\n    else if (typeof eventPrefix === 'string') {\n        composedName = `${eventPrefix}:${name}`;\n    }\n    return composedName;\n};\nexport const extendedEvent = (type, event, detail) => {\n    const { bubbles, cancelable, composed } = event || { bubbles: true, cancelable: true, composed: true };\n    if (event) {\n        Object.assign(detail, { originalEvent: event });\n    }\n    const customEvent = new CustomEvent(type, {\n        bubbles,\n        cancelable,\n        composed,\n        detail,\n    });\n    return customEvent;\n};\nexport function isElementInViewport(el) {\n    const rect = el.getBoundingClientRect();\n    const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n    const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n    const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n    const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) >= 0);\n    return (vertInView && horInView);\n}\n//# sourceMappingURL=index.js.map","import { method, extendedEvent, composeEventName } from '../support/index';\nconst defaultOptions = {\n    dispatchEvent: true,\n    eventPrefix: true,\n};\nexport const useIntersection = (controller, options = {}) => {\n    const { dispatchEvent, eventPrefix } = Object.assign({}, defaultOptions, options);\n    const targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n    const callback = (entries) => {\n        const [entry] = entries;\n        if (entry.isIntersecting) {\n            dispatchAppear(entry);\n        }\n        else if (controller.isVisible) {\n            dispatchDisappear(entry);\n        }\n    };\n    const dispatchAppear = (entry) => {\n        controller.isVisible = true;\n        method(controller, 'appear').call(controller, entry);\n        // emit a custom \"appear\" event\n        if (dispatchEvent) {\n            const eventName = composeEventName('appear', controller, eventPrefix);\n            const appearEvent = extendedEvent(eventName, null, { controller, entry });\n            targetElement.dispatchEvent(appearEvent);\n        }\n    };\n    const dispatchDisappear = (entry) => {\n        controller.isVisible = false;\n        method(controller, 'disappear').call(controller, entry);\n        // emit a custom \"disappear\" event\n        if (dispatchEvent) {\n            const eventName = composeEventName('disappear', controller, eventPrefix);\n            const disappearEvent = extendedEvent(eventName, null, { controller, entry });\n            targetElement.dispatchEvent(disappearEvent);\n        }\n    };\n    // keep a copy of the current disconnect() function of the controller\n    // to support composing several behaviors\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    const observer = new IntersectionObserver(callback, options);\n    const observe = () => {\n        observer.observe(targetElement);\n    };\n    const unobserve = () => {\n        observer.unobserve(targetElement);\n    };\n    Object.assign(controller, {\n        isVisible: false,\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-intersection.js.map","import { composeEventName, extendedEvent, isElementInViewport } from '../support/index';\nconst defaultOptions = {\n    events: ['click', 'touchend'],\n    onlyVisible: true,\n    dispatchEvent: true,\n    eventPrefix: true,\n};\nexport const useClickOutside = (controller, options = {}) => {\n    const { onlyVisible, dispatchEvent, events, eventPrefix } = Object.assign({}, defaultOptions, options);\n    const onEvent = (event) => {\n        const targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        if (targetElement.contains(event.target) || (!isElementInViewport(targetElement) && onlyVisible)) {\n            return;\n        }\n        // call the clickOutside method of the Stimulus controller\n        if (controller.clickOutside) {\n            controller.clickOutside(event);\n        }\n        // emit a custom event\n        if (dispatchEvent) {\n            const eventName = composeEventName('click:outside', controller, eventPrefix);\n            const clickOutsideEvent = extendedEvent(eventName, event, { controller });\n            targetElement.dispatchEvent(clickOutsideEvent);\n        }\n    };\n    const observe = () => {\n        events === null || events === void 0 ? void 0 : events.forEach(event => {\n            window.addEventListener(event, onEvent, false);\n        });\n    };\n    const unobserve = () => {\n        events === null || events === void 0 ? void 0 : events.forEach(event => {\n            window.removeEventListener(event, onEvent, false);\n        });\n    };\n    // keep a copy of the current disconnect() function of the controller\n    // to support composing several behaviors\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    Object.assign(controller, {\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-click-outside.js.map","const defaultOptions = {\n    debug: false,\n    logger: console\n};\nexport class StimulusUse {\n    constructor(controller, options = {}) {\n        var _a, _b, _c;\n        this.log = (functionName, args) => {\n            if (!this.debug)\n                return;\n            this.logger.groupCollapsed(`%c${this.controller.identifier} %c#${functionName}`, 'color: #3B82F6', 'color: unset');\n            this.logger.log(Object.assign({ controllerId: this.controllerId }, args));\n            this.logger.groupEnd();\n        };\n        this.debug = (_b = (_a = options === null || options === void 0 ? void 0 : options.debug) !== null && _a !== void 0 ? _a : controller.application.stimulusUseDebug) !== null && _b !== void 0 ? _b : defaultOptions.debug;\n        this.logger = (_c = options === null || options === void 0 ? void 0 : options.logger) !== null && _c !== void 0 ? _c : defaultOptions.logger;\n        this.controller = controller;\n        this.controllerId = controller.element.id || controller.element.dataset.id;\n        // make copies of lifecycle functions\n        this.controllerInitialize = controller.initialize.bind(controller);\n        this.controllerConnect = controller.connect.bind(controller);\n        this.controllerDisconnect = controller.disconnect.bind(controller);\n    }\n}\n//# sourceMappingURL=stimulus_use.js.map","import { StimulusUse } from '../stimulus_use';\nimport { method } from '../support/index';\nexport class UseHover extends StimulusUse {\n    constructor(controller, options = {}) {\n        super(controller, options);\n        this.observe = () => {\n            this.targetElement.addEventListener('mouseenter', this.onEnter);\n            this.targetElement.addEventListener('mouseleave', this.onLeave);\n        };\n        this.unobserve = () => {\n            this.targetElement.removeEventListener('mouseenter', this.onEnter);\n            this.targetElement.removeEventListener('mouseleave', this.onLeave);\n        };\n        this.onEnter = () => {\n            method(this.controller, 'mouseEnter').call(this.controller);\n            this.log('mouseEnter', { hover: true });\n        };\n        this.onLeave = () => {\n            method(this.controller, 'mouseLeave').call(this.controller);\n            this.log('mouseLeave', { hover: false });\n        };\n        this.targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        this.controller = controller;\n        this.enhanceController();\n        this.observe();\n    }\n    enhanceController() {\n        const controllerDisconnect = this.controller.disconnect.bind(this.controller);\n        const disconnect = () => {\n            this.unobserve();\n            controllerDisconnect();\n        };\n        Object.assign(this.controller, { disconnect });\n    }\n}\nexport const useHover = (controller, options = {}) => {\n    const observer = new UseHover(controller, options);\n    return [observer.observe, observer.unobserve];\n};\n//# sourceMappingURL=use-hover.js.map","import { StimulusUse } from '../stimulus_use';\nimport { method } from '../support/index';\nexport class UseMutation extends StimulusUse {\n    constructor(controller, options = {}) {\n        super(controller, options);\n        this.observe = () => {\n            try {\n                this.observer.observe(this.targetElement, this.options);\n            }\n            catch (error) {\n                this.controller.application.handleError(error, \"At a minimum, one of childList, attributes, and/or characterData must be true\", {});\n            }\n        };\n        this.unobserve = () => {\n            this.observer.disconnect();\n        };\n        this.mutation = (entries) => {\n            method(this.controller, 'mutate').call(this.controller, entries);\n            this.log('mutate', { entries });\n        };\n        this.targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        this.controller = controller;\n        this.options = options;\n        this.observer = new MutationObserver(this.mutation);\n        this.enhanceController();\n        this.observe();\n    }\n    enhanceController() {\n        const controllerDisconnect = this.controller.disconnect.bind(this.controller);\n        const disconnect = () => {\n            this.unobserve();\n            controllerDisconnect();\n        };\n        Object.assign(this.controller, { disconnect });\n    }\n}\nexport const useMutation = (controller, options = {}) => {\n    const observer = new UseMutation(controller, options);\n    return [observer.observe, observer.unobserve];\n};\n//# sourceMappingURL=use-mutation.js.map","import { method } from '../support/index';\nexport const useWindowResize = (controller) => {\n    const callback = (event) => {\n        const { innerWidth, innerHeight } = window;\n        const payload = {\n            height: innerHeight || Infinity,\n            width: innerWidth || Infinity,\n            event\n        };\n        method(controller, 'windowResize').call(controller, payload);\n    };\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    const observe = () => {\n        window.addEventListener('resize', callback);\n        callback();\n    };\n    const unobserve = () => {\n        window.removeEventListener('resize', callback);\n    };\n    Object.assign(controller, {\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-window-resize.js.map","import { Controller } from 'stimulus';\nclass DebounceController extends Controller {\n}\nDebounceController.debounces = [];\nconst defaultWait = 200;\nconst debounce = (fn, wait = defaultWait) => {\n    let timeoutId = null;\n    return function () {\n        const args = arguments;\n        const context = this;\n        const callback = () => fn.apply(context, args);\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(callback, wait);\n    };\n};\nexport const useDebounce = (controller, options) => {\n    var _a;\n    const constructor = controller.constructor;\n    (_a = constructor.debounces) === null || _a === void 0 ? void 0 : _a.forEach((func) => {\n        if (typeof func === \"string\") {\n            controller[func] = debounce(controller[func], options === null || options === void 0 ? void 0 : options.wait);\n        }\n        if (typeof func === \"object\") {\n            const { name, wait } = func;\n            if (!name)\n                return;\n            controller[name] = debounce(controller[name], wait || (options === null || options === void 0 ? void 0 : options.wait));\n        }\n    });\n};\n//# sourceMappingURL=use-debounce.js.map","import {useWindowResize} from \"stimulus-use\";\nimport {BaseController} from \"./base_controller\";\n\nexport class AutosizeController extends BaseController {\n\n  private boundHandler = this.handler.bind(this);\n\n  connect() {\n    let target = this.element as HTMLTextAreaElement;\n    target.style.resize = \"none\";\n    target.style.boxSizing = \"border-box\";\n    target.addEventListener(\"input\", this.boundHandler);\n    target.addEventListener(\"focus\", this.boundHandler);\n    useWindowResize(this);\n    requestAnimationFrame(this.boundHandler);\n  }\n\n  windowResize() {\n    this.handler();\n  }\n\n  private handler() {\n    this.autosize(this.element as HTMLTextAreaElement);\n  };\n\n  private autosize(element: HTMLTextAreaElement) {\n    let offset = element.offsetHeight - element.clientHeight;\n    element.style.height = \"auto\";\n    element.style.height = element.scrollHeight + offset + \"px\";\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class CharCountController extends BaseController {\n\n  static targets = [\"input\", \"output\"];\n  static values = {min: Number, max: Number};\n  static classes = [\"error\"];\n\n  declare readonly inputTarget: HTMLInputElement | HTMLTextAreaElement;\n  declare readonly outputTarget: HTMLElement;\n  declare minValue: number;\n  declare hasMinValue: boolean;\n  declare maxValue: number;\n  declare hasMaxValue: boolean;\n  declare errorClass: string;\n  declare hasErrorClass: boolean;\n\n  boundHandler = this.updateCharCount.bind(this);\n\n  connect() {\n    this.updateCharCount();\n    this.inputTarget.addEventListener(\"input\", this.boundHandler);\n  }\n\n  disconnect() {\n    this.inputTarget.removeEventListener(\"input\", this.boundHandler);\n  }\n\n  updateCharCount() {\n    let charCount = this.inputTarget.value.length;\n    this.outputTarget.innerText = charCount.toString();\n    if (this.hasErrorClass) {\n      if (this.isValidCount(charCount)) {\n        this.outputTarget.classList.remove(this.errorClass);\n      } else {\n        this.outputTarget.classList.add(this.errorClass);\n      }\n    }\n  }\n\n  isValidCount(count: number) {\n    let min = 0;\n    let max = 99999;\n\n    if (this.hasMinValue) {\n      min = this.minValue;\n    }\n\n    if (this.hasMaxValue) {\n      max = this.maxValue;\n    }\n\n    return count >= min && count <= max;\n  }\n\n}\n","import {BaseController} from './base_controller';\n\nexport class CheckboxSelectAllController extends BaseController {\n  static targets = ['selectAll', 'checkbox'];\n\n  declare readonly hasSelectAllTarget: boolean;\n  declare readonly selectAllTarget: HTMLInputElement;\n  declare readonly checkboxTargets: HTMLInputElement[];\n\n  private get checked() {\n    return this.checkboxTargets.filter(checkbox => checkbox.checked);\n  }\n\n  private get unchecked() {\n    return this.checkboxTargets.filter(checkbox => !checkbox.checked);\n  }\n\n  initialize() {\n    this.toggle = this.toggle.bind(this);\n    this.refresh = this.refresh.bind(this);\n  }\n\n  connect() {\n    requestAnimationFrame(() => {\n      if (!this.hasSelectAllTarget) {\n        return;\n      }\n\n      this.selectAllTarget.addEventListener('change', this.toggle);\n      this.checkboxTargets.forEach(checkbox => checkbox.addEventListener('change', this.refresh));\n      this.refresh();\n    });\n  }\n\n  disconnect() {\n    if (!this.hasSelectAllTarget) {\n      return;\n    }\n\n    this.selectAllTarget.removeEventListener('change', this.toggle);\n    this.checkboxTargets.forEach((checkbox) => checkbox.removeEventListener('change', this.refresh));\n  }\n\n  private toggle(event: Event) {\n    event.preventDefault();\n    let target = event.target as HTMLInputElement;\n    this.checkboxTargets.forEach((checkbox) => checkbox.checked = target.checked);\n  }\n\n  private refresh() {\n    const checkboxesCount = this.checkboxTargets.length;\n    const checkboxesCheckedCount = this.checked.length;\n\n    this.selectAllTarget.checked = checkboxesCheckedCount > 0;\n    this.selectAllTarget.indeterminate = checkboxesCheckedCount > 0 && checkboxesCheckedCount < checkboxesCount;\n  }\n}","import {BaseController} from \"./base_controller\";\r\n\r\nexport class ClipboardController extends BaseController {\r\n\r\n  static targets = [\"button\", \"copy\", \"fallback\"];\r\n  static values = {removeUnused: Boolean};\r\n\r\n  declare readonly sourceTarget: HTMLElement;\r\n  declare readonly copyTarget: HTMLElement;\r\n  declare readonly hasCopyTarget: boolean;\r\n  declare readonly fallbackTarget: HTMLElement;\r\n  declare readonly hasFallbackTarget: boolean;\r\n\r\n  declare readonly hasRemoveUnusedValue: boolean;\r\n  declare readonly removeUnusedValue: boolean;\r\n\r\n  supported = false;\r\n\r\n  connect() {\r\n    this.supported = document.queryCommandSupported(\"copy\");\r\n\r\n    if (this.hasRemoveUnusedValue && this.removeUnusedValue) {\r\n      if (this.supported && this.hasFallbackTarget) {\r\n        this.fallbackTarget.remove();\r\n      } else if (this.hasCopyTarget) {\r\n        this.copyTarget.remove();\r\n      }\r\n    }\r\n  }\r\n\r\n  select(event: MouseEvent) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    (this.sourceTarget as HTMLInputElement | HTMLTextAreaElement).select();\r\n  }\r\n\r\n  copy(event: ClipboardEvent) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    (this.sourceTarget as HTMLInputElement | HTMLTextAreaElement).select();\r\n    if (this.supported) {\r\n      document.execCommand(\"copy\");\r\n    }\r\n  }\r\n}\r\n","export function isHTMLLinkElement(element: Element): element is HTMLLinkElement {\n  return element.nodeName == \"A\";\n}\n\nexport function isHTMLFormElement(element: Element): element is HTMLFormElement {\n  return element.nodeName == \"FORM\";\n}\n\nexport function isHTMLInputElement(element: Element): element is HTMLInputElement {\n  return element.nodeName == \"INPUT\";\n}\n\nexport function isHTMLImageElement(element: Element): element is HTMLImageElement {\n  return element.nodeName == \"IMG\";\n}\n\n","import {BaseController} from './base_controller';\r\nimport {isHTMLFormElement, isHTMLLinkElement} from \"./utilities/elements\";\r\n\r\nexport class ConfirmController extends BaseController {\r\n\r\n  static values = {\r\n    message: String,\r\n  };\r\n\r\n  declare readonly messageValue: string;\r\n  declare readonly hasMessageValue: boolean;\r\n\r\n  get message(): string {\r\n    return this.hasMessageValue ? this.messageValue : 'Are you sure?';\r\n  }\r\n\r\n  initialize() {\r\n    this.confirm = this.confirm.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      let element = this.element as HTMLElement;\r\n      if (isHTMLFormElement(element)) {\r\n        element.addEventListener(\"submit\", this.confirm);\r\n      } else if (isHTMLLinkElement(element)) {\r\n        element.addEventListener(\"click\", this.confirm);\r\n      } else {\r\n        throw new Error(\"Can't handle confirmation on attached element\");\r\n      }\r\n    });\r\n  }\r\n\r\n  confirm(event: Event) {\r\n    if (!(window.confirm(this.message))) {\r\n      event.preventDefault();\r\n      this.dispatch(this.element as HTMLElement, \"confirm:cancelled\");\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\n\nexport class ConfirmNavigationController extends BaseController {\n\n  static values = {message: String};\n\n  declare readonly messageValue: string;\n\n  connect() {\n    let confirmMessage = this.messageValue;\n    window.onbeforeunload = () => (confirmMessage == null ? true : confirmMessage);\n    window.addEventListener(\"popstate\", this.handlePopstate);\n    window.addEventListener(\"submit\", () => {\n      window.removeEventListener(\"popstate\", this.handlePopstate);\n      window.onbeforeunload = null;\n    });\n    // TODO: Turbo navigation events\n  }\n\n  handlePopstate(event: PopStateEvent) {\n    return false;\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class DebugController extends BaseController {\n\n  static targets = [\"test\"];\n  declare testTargets: HTMLElement[];\n\n  connect() {\n    console.log(\"Debug Controller\", this, this.testTargets);\n  }\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class DetectDirtyController extends BaseController {\n\n  initialValue: string | boolean | null = null;\n\n  boundHandler = this.handler.bind(this);\n\n  connect() {\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n    if (this.isInputElement(element) && this.isCheckable(element)) {\n      this.initialValue = element.checked;\n    } else {\n      this.initialValue = element.value;\n    }\n    element.addEventListener(\"input\", this.boundHandler);\n    element.addEventListener(\"change\", this.boundHandler);\n  }\n\n  disconnect() {\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n    element.removeEventListener(\"input\", this.boundHandler);\n    element.removeEventListener(\"change\", this.boundHandler);\n  }\n\n  restore() {\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n    if (this.isInputElement(element) && this.isCheckable(element)) {\n      element.checked = this.initialValue as boolean;\n    } else {\n      element.value = this.initialValue as string;\n    }\n  }\n\n  private handler(event?: Event) {\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n\n    if (this.initialValue !== element.value) {\n      element.setAttribute(\"data-dirty\", \"true\");\n    } else {\n      element.removeAttribute(\"data-dirty\");\n    }\n  }\n\n  private isCheckable(element: HTMLInputElement): boolean {\n    return (element.type === \"radio\" || element.type === \"checkbox\");\n  }\n\n  private isInputElement(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement): element is HTMLInputElement {\n    return element.tagName === \"INPUT\";\n  }\n\n}\n\nexport function isDirty(element: HTMLElement) {\n  return element.hasAttribute(\"data-dirty\");\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class DisableInputsController extends BaseController {\r\n\r\n  static targets = [\"disabler\", \"disable\"];\r\n\r\n  static values = {\r\n    clear: Boolean,\r\n  };\r\n\r\n  declare readonly hasDisablerTarget: boolean;\r\n  declare readonly disablerTarget: HTMLInputElement;\r\n  declare readonly disableTargets: Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\r\n  declare readonly clearValue: boolean;\r\n  declare readonly hasClearValue: boolean;\r\n\r\n  connect() {\r\n    this.toggle();\r\n  }\r\n\r\n  toggle() {\r\n    if (this.hasDisablerTarget && this.disablerTarget.checked) {\r\n      this.disableInputs();\r\n    } else {\r\n      this.enableInputs();\r\n    }\r\n  }\r\n\r\n  disableInputs() {\r\n    let shouldClear = this.hasClearValue && this.clearValue;\r\n    this.disableTargets.forEach((el, _) => {\r\n      if (shouldClear) {\r\n        el.value = \"\";\r\n      }\r\n      el.disabled = true;\r\n    });\r\n  }\r\n\r\n  enableInputs() {\r\n    this.disableTargets.forEach((el, _) => {\r\n      el.disabled = false;\r\n    });\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\n\nexport class DismissableController extends BaseController {\n\n\n  dismiss() {\n    this.element.remove();\n  }\n\n}\n","import {useMutation} from \"stimulus-use\";\nimport {BaseController} from \"./base_controller\";\n\nexport class EmptyDomController extends BaseController {\n\n  static classes = [\"empty\", \"notEmpty\"];\n  static values = {scopeSelector: String};\n\n  declare hasEmptyClass: boolean;\n  declare emptyClass: string;\n  declare hasNotEmptyClass: boolean;\n  declare notEmptyClass: string;\n\n  declare hasScopeSelectorValue: boolean;\n  declare scopeSelectorValue: string;\n\n  connect() {\n    useMutation(this, {element: this.element, childList: true});\n    this.checkEmpty();\n  }\n\n  mutate(entries: MutationRecord[]) {\n    this.checkEmpty();\n  }\n\n  checkEmpty() {\n    let children;\n    if (this.hasScopeSelectorValue) {\n      children = this.element.querySelectorAll(this.scopeSelectorValue);\n    } else {\n      children = this.element.children;\n    }\n\n    if (children.length === 0) {\n      if (this.hasNotEmptyClass) {\n        let classes = this.notEmptyClass.split(\" \");\n        classes.forEach(klass => this.element.classList.remove(klass));\n      }\n      if (this.hasEmptyClass) {\n        let classes = this.emptyClass.split(\" \");\n        classes.forEach(klass => this.element.classList.add(klass));\n      }\n      this.element.dispatchEvent(\n        new CustomEvent(\"dom:empty\", {\n          bubbles: true,\n          cancelable: true,\n        }),\n      );\n    } else {\n      if (this.hasNotEmptyClass) {\n        let classes = this.notEmptyClass.split(\" \");\n        classes.forEach(klass => this.element.classList.add(klass));\n      }\n      if (this.hasEmptyClass) {\n        let classes = this.emptyClass.split(\" \");\n        classes.forEach(klass => this.element.classList.remove(klass));\n      }\n      this.element.dispatchEvent(\n        new CustomEvent(\"dom:not-empty\", {\n          bubbles: true,\n          cancelable: true,\n          detail: {\n            count: children.length,\n          },\n        }),\n      );\n    }\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class EnableInputsController extends BaseController {\r\n\r\n  static targets = [\"enabler\", \"enable\"];\r\n\r\n  static values = {\r\n    clear: Boolean,\r\n  };\r\n\r\n  declare readonly hasEnablerTarget: boolean;\r\n  declare readonly enablerTarget: HTMLInputElement;\r\n  declare readonly enableTargets: Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\r\n  declare readonly clearValue: boolean;\r\n  declare readonly hasClearValue: boolean;\r\n\r\n  connect() {\r\n    this.toggle();\r\n  }\r\n\r\n  toggle() {\r\n    if (this.hasEnablerTarget && this.enablerTarget.checked) {\r\n      this.enableInputs();\r\n    } else {\r\n      this.disableInputs();\r\n    }\r\n  }\r\n\r\n  disableInputs() {\r\n    let shouldClear = this.hasClearValue && this.clearValue;\r\n    this.enableTargets.forEach((el, _) => {\r\n      if (shouldClear) {\r\n        el.value = \"\";\r\n      }\r\n      el.disabled = true;\r\n    });\r\n  }\r\n\r\n  enableInputs() {\r\n    this.enableTargets.forEach((el, _) => {\r\n      el.disabled = false;\r\n    });\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class FallbackImageController extends BaseController {\r\n\r\n  static values = {placeholder: String};\r\n\r\n  declare readonly placeholderValue: string;\r\n  declare readonly hasPlaceholderValue: boolean;\r\n\r\n  connect() {\r\n    let element = this.element as HTMLImageElement;\r\n\r\n    element.onerror = () => {\r\n      if (this.hasPlaceholderValue) {\r\n        element.src = this.placeholderValue;\r\n      } else {\r\n        element.style.display = \"none\";\r\n      }\r\n    };\r\n  }\r\n\r\n}\r\n","import {BaseController} from './base_controller';\r\nimport {isHTMLFormElement, isHTMLInputElement} from \"./utilities/elements\";\r\n\r\ninterface FormSavePayload {\r\n  [idx: string]: {\r\n    [idx: string]: string | boolean\r\n  }\r\n}\r\n\r\nexport class FormSaveController extends BaseController {\r\n\r\n  static values = {\r\n    id: String,\r\n    restoreOnLoad: Boolean,\r\n    clearOnSubmit: Boolean,\r\n  };\r\n\r\n  declare readonly idValue: string;\r\n  declare readonly hasIdValue: boolean;\r\n  declare readonly restoreOnLoadValue: boolean;\r\n  declare readonly hasRestoreOnLoadValue: boolean;\r\n  declare readonly clearOnSubmitValue: boolean;\r\n  declare readonly hasClearOnSubmitValue: boolean;\r\n\r\n  get formID() {\r\n    if (this.hasIdValue) {\r\n      return this.idValue;\r\n    }\r\n    let elementID = (this.element as HTMLFormElement).id;\r\n\r\n    if (elementID !== \"\") {\r\n      return elementID;\r\n    } else {\r\n      throw new Error(`No ID value to uniquely identify this form. Please either specify data-${this.identifier}-id-value or give this form an 'id' attribute. `);\r\n    }\r\n  }\r\n\r\n  get formIdentifier() {\r\n    const url = location.href;\r\n    return `${url} ${this.formID}`;\r\n  }\r\n\r\n  get formElements() {\r\n    return (this.element as HTMLFormElement).elements;\r\n  }\r\n\r\n  get formData(): FormSavePayload {\r\n    let data: FormSavePayload = {[this.formIdentifier]: {}};\r\n    for (const element of this.formElements) {\r\n      let el = element as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\r\n      if (el.name.length > 0) {\r\n        if (isHTMLInputElement(el) && el.type == \"checkbox\") {\r\n          data[this.formIdentifier][el.name] = el.checked;\r\n        } else if (isHTMLInputElement(el) && el.type == \"radio\") {\r\n          if (el.checked) {\r\n            data[this.formIdentifier][el.name] = el.value;\r\n          }\r\n        } else {\r\n          data[this.formIdentifier][el.name] = el.value;\r\n        }\r\n      }\r\n    }\r\n    return data;\r\n  }\r\n\r\n  get restoreOnLoad() {\r\n    return this.hasRestoreOnLoadValue ? this.restoreOnLoadValue : true;\r\n  }\r\n\r\n  get clearOnSubmit() {\r\n    return this.hasClearOnSubmitValue ? this.clearOnSubmitValue : true;\r\n  }\r\n\r\n  initialize() {\r\n    this._clear = this._clear.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      let element = this.element;\r\n      if (!isHTMLFormElement(element)) {\r\n        throw new Error('Expected controller to be mounted on a form element.');\r\n      }\r\n\r\n      if (this.restoreOnLoad) {\r\n        this.restore();\r\n      }\r\n      if (this.clearOnSubmit) {\r\n        this.element.addEventListener('submit', this._clear);\r\n      }\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.clearOnSubmit) {\r\n      this.element.removeEventListener('submit', this._clear);\r\n    }\r\n  }\r\n\r\n  _clear() {\r\n    localStorage.removeItem(this.formIdentifier);\r\n    this.dispatch(this.element as HTMLElement, `form-save:cleared`);\r\n  }\r\n\r\n  clear(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    this._clear();\r\n  }\r\n\r\n  save(event: Event) {\r\n    event.preventDefault();\r\n    let data = this.formData;\r\n    localStorage.setItem(this.formIdentifier, JSON.stringify(data[this.formIdentifier]));\r\n    this.dispatch(this.element as HTMLElement, `form-save:save:success`);\r\n  }\r\n\r\n  restore(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    if (localStorage.getItem(this.formIdentifier)) {\r\n      const savedData = JSON.parse(localStorage.getItem(this.formIdentifier)!); // get and parse the saved data from localStorage\r\n      for (const element of this.formElements) {\r\n        let el = element as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\r\n        if (el.name in savedData) {\r\n          if (isHTMLInputElement(el) && el.type == \"checkbox\") {\r\n            el.checked = savedData[el.name];\r\n          } else if (isHTMLInputElement(el) && el.type == \"radio\") {\r\n            if (el.value == savedData[el.name]) {\r\n              el.checked = true;\r\n            }\r\n          } else {\r\n            el.value = savedData[el.name];\r\n          }\r\n        }\r\n      }\r\n      this.dispatch(this.element as HTMLElement, `form-save:restore:success`);\r\n    } else {\r\n      this.dispatch(this.element as HTMLElement, `form-save:restore:empty`);\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\nimport {useIntersection} from \"stimulus-use\";\n\nexport class IntersectionController extends BaseController {\n\n  static values = {threshold: String};\n\n  declare readonly isVisible: boolean;\n  declare readonly thresholdValue: string;\n  declare readonly hasThresholdValue: boolean;\n\n  get threshold(): number[] {\n    if (this.hasThresholdValue) {\n      return this.thresholdValue.split(',').map(val => Number.parseFloat(val.trim())).filter(val => val >= 0 && val <= 1);\n    } else {\n      return [0, 1];\n    }\n  }\n\n  connect() {\n    useIntersection(this, {\n      threshold: this.threshold,\n      element: this.element,\n    });\n  }\n\n  appear(entry: IntersectionObserverEntry) {\n    this.dispatch(\n      this.element as HTMLElement,\n      \"intersection:appear\",\n      {\n        cancelable: true,\n        bubbles: true,\n        detail: {\n          element: this.element,\n        },\n      },\n    );\n  };\n\n  disappear(entry: IntersectionObserverEntry) {\n    this.dispatch(\n      this.element as HTMLElement,\n      \"intersection:disappear\",\n      {\n        cancelable: true,\n        bubbles: true,\n        detail: {\n          element: this.element,\n        },\n      },\n    );\n  };\n\n}\n","import {useIntersection} from \"stimulus-use\";\nimport {AsyncBlockController} from \"./async_block_controller\";\n\nexport class LazyBlockController extends AsyncBlockController {\n\n  declare observe: () => void;\n  declare unobserve: () => void;\n  declare isVisible: boolean;\n  declare disappear: () => void;\n\n  connect() {\n    let element = this.element;\n\n    if (\"IntersectionObserver\" in window) {\n      [this.observe, this.unobserve] = useIntersection(this, {element, threshold: 0.3});\n    } else {\n      // Client doesn't support intersection observer, fallback to pre-loading\n      this.loadContent();\n    }\n  }\n\n  appear(entry: IntersectionObserverEntry) {\n    if (entry.target === this.element && entry.isIntersecting) {\n      this.loadContent();\n      if (this.unobserve) {\n        this.unobserve();\n      }\n    }\n  }\n\n}\n","const smoothSupported = \"scrollBehavior\" in document.documentElement.style;\r\nlet smoothPolyfilled: boolean;\r\n\r\nexport async function scrollToElement(element: Element, {behavior = \"smooth\", block = \"start\", inline = \"nearest\"}: ScrollIntoViewOptions = {}) {\r\n  if (behavior == \"smooth\" && !smoothSupported) {\r\n    await polyfillSmooth();\r\n  }\r\n  element.scrollIntoView({behavior, block, inline});\r\n}\r\n\r\nasync function polyfillSmooth() {\r\n  const {polyfill} = await import(/* webpackChunkName: \"smoothscroll-polyfill\" */ \"smoothscroll-polyfill\");\r\n  if (smoothPolyfilled) {\r\n    return;\r\n  }\r\n  smoothPolyfilled = true;\r\n  polyfill();\r\n}\r\n\r\nexport function getScrollParent(node: HTMLElement | null): HTMLElement | null {\r\n  if (!node) {\r\n    return null;\r\n  }\r\n  const overflowY = getComputedStyle(node).overflowY;\r\n  const isScrollable = overflowY !== \"visible\" && overflowY !== \"hidden\";\r\n\r\n  if (isScrollable && node.scrollHeight >= node.clientHeight) {\r\n    return node;\r\n  }\r\n\r\n  return getScrollParent(node.parentElement) || document.body;\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\nimport {scrollToElement} from \"./utilities/scroll\";\r\nimport dialogPolyfill from \"dialog-polyfill\";\r\n\r\nexport class LightboxImageController extends BaseController {\r\n\r\n  static values = {\r\n    src: String,\r\n    srcSet: String,\r\n    sizes: String,\r\n  };\r\n  static classes = [\"modal\", \"image\"];\r\n\r\n  declare readonly hasModalClass: boolean;\r\n  declare readonly modalClass: string;\r\n  declare readonly hasImageClass: boolean;\r\n  declare readonly imageClass: string;\r\n  declare readonly hasSrcValue: boolean;\r\n  declare readonly srcValue: string;\r\n  declare readonly hasSrcSetValue: boolean;\r\n  declare readonly srcSetValue: string;\r\n  declare readonly hasSizesValue: boolean;\r\n  declare readonly sizesValue: string;\r\n  _dialog: HTMLDialogElement | null = null;\r\n\r\n  get src(): string {\r\n    return this.hasSrcValue ? this.srcValue : (this.element as HTMLImageElement).src;\r\n  }\r\n\r\n  get srcSet(): string {\r\n    return this.hasSrcSetValue ? this.srcSetValue : (this.element as HTMLImageElement).srcset;\r\n  }\r\n\r\n  get sizes(): string {\r\n    return this.hasSizesValue ? this.sizesValue : (this.element as HTMLImageElement).sizes;\r\n  }\r\n\r\n  get modalClassName() {\r\n    return this.hasModalClass ? this.modalClass : \"image-lightbox-dialog\";\r\n  }\r\n\r\n  get imageClassName() {\r\n    return this.hasImageClass ? this.imageClass : \"image-lightbox-image\";\r\n  }\r\n\r\n  initialize() {\r\n    this.open = this.open.bind(this);\r\n    this.close = this.close.bind(this);\r\n  }\r\n\r\n  connect() {\r\n  }\r\n\r\n  open() {\r\n    let element = this.element as HTMLImageElement;\r\n    if (this._dialog) {\r\n      return;\r\n    }\r\n    this._dialog = document.createElement(\"dialog\");\r\n\r\n    let image = document.createElement(\"img\") as HTMLImageElement;\r\n    image.className = this.imageClassName;\r\n    image.src = this.src;\r\n    image.srcset = this.srcSet;\r\n    image.sizes = this.sizes;\r\n    this._dialog.appendChild(image);\r\n\r\n    element.insertAdjacentElement(\"afterend\", this._dialog);\r\n    dialogPolyfill.registerDialog(this._dialog);\r\n    this._dialog.className = this.modalClassName;\r\n    this._dialog.showModal();\r\n    scrollToElement(this._dialog, {behavior: \"smooth\", block: \"end\"}).catch(() => this._dialog!.scrollIntoView(false));\r\n    this._dialog.addEventListener(\"click\", this.close);\r\n    this._dialog.addEventListener(\"cancel\", this.close);\r\n    this._dialog.addEventListener(\"close\", this.close);\r\n  }\r\n\r\n  close() {\r\n    if (this._dialog) {\r\n      this._dialog.close();\r\n      this._dialog.remove();\r\n      this._dialog = null;\r\n      scrollToElement(this.element, {behavior: \"smooth\", block: \"end\"}).catch(() => this.element.scrollIntoView(false));\r\n    }\r\n  }\r\n\r\n} ","import {BaseController} from \"./base_controller\";\n\nexport class LimitedSelectionCheckboxesController extends BaseController {\n\n  static targets = [\"input\", \"error\"];\n  static values = {max: Number, message: String};\n\n  declare readonly hasErrorTarget: boolean;\n  declare readonly errorTarget: HTMLElement;\n  declare readonly inputTargets: HTMLInputElement[];\n  declare readonly maxValue: number;\n  declare readonly messageValue: string;\n\n  maxSelections = 0;\n\n  boundHandleInputs = this.handleInputs.bind(this);\n\n  connect() {\n    this.inputTargets.forEach((el) => el.addEventListener(\"change\", this.boundHandleInputs));\n  }\n\n  disconnect() {\n    this.inputTargets.forEach((el) => el.removeEventListener(\"change\", this.boundHandleInputs));\n  }\n\n  handleInputs(event: Event) {\n    let tickedInputs = this.inputTargets.reduce((previousValue, el) => el.checked ? previousValue + 1 : previousValue, 0);\n    let target = event.target as HTMLInputElement;\n    if (tickedInputs > this.maxValue) {\n      event.preventDefault();\n      target.checked = false;\n      target.dispatchEvent(new CustomEvent(\"change\", {bubbles: true, cancelable: true}));\n      target.dispatchEvent(new CustomEvent(\"limited-selection:too-many\", {bubbles: true, cancelable: true, detail: {target}}));\n      if (this.hasErrorTarget) {\n        this.errorTarget.innerHTML = this.messageValue;\n      }\n    } else {\n      target.dispatchEvent(new CustomEvent(\"limited-selection:selection\", {bubbles: true, cancelable: true, detail: {target}}));\n      if (this.hasErrorTarget) {\n        this.errorTarget.innerHTML = \"\";\n      }\n    }\n  }\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class NestedFormController extends BaseController {\n  static targets = ['target', 'template'];\n  static values = {\n    insertMode: String,\n    wrapperClass: String,\n  };\n\n  declare readonly targetTarget: HTMLElement;\n  declare readonly templateTarget: HTMLTemplateElement | HTMLScriptElement;\n\n  declare readonly wrapperClassValue: string;\n  declare readonly hasWrapperSelectorValue: boolean;\n  declare readonly insertModeValue: InsertPosition;\n  declare readonly hasInsertModeValue: boolean;\n\n  get wrapperClass() {\n    return this.hasWrapperSelectorValue ? this.wrapperClassValue : 'nested-fields';\n  }\n\n  get insertMode(): InsertPosition {\n    return this.hasInsertModeValue ? this.insertModeValue : 'beforeend';\n  }\n\n  connect() {\n    this.checkStructure();\n  }\n\n  add(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const content = this.templateTarget.innerHTML.replace(/NEW_RECORD/g, this.generateID());\n    this.targetTarget.insertAdjacentHTML(this.insertMode, content);\n  }\n\n  remove(event: Event) {\n    event.preventDefault();\n    const wrapper: HTMLElement | null = (event.target as HTMLElement).closest(`.${this.wrapperClass}`);\n    if (wrapper == null) {\n      throw new Error(`#remove was clicked from outside of a child record. Could not find an ancestor with class .${this.wrapperClass}`);\n    }\n\n    if (wrapper.dataset.newRecord === 'true') {\n      wrapper.remove();\n    } else {\n      wrapper.style.display = 'none';\n      let destroyInput = wrapper.querySelector(\"input[name*='_destroy']\") as HTMLInputElement | null;\n      if (destroyInput == null) {\n        throw new Error(`Could not find a hidden input with name '_destroy'. NestedForm cannot remove an already persisted record without it.`);\n      }\n\n      destroyInput.value = \"1\";\n    }\n  }\n\n  generateID(): string {\n    return new Date().getTime().toString() + Math.random().toString().slice(2);\n  }\n\n  private checkStructure() {\n    let template = this.templateTarget.innerHTML;\n\n    if (template.indexOf('NEW_RECORD')) {\n      throw new Error(\"Could not find 'NEW_RECORD' in the provided template. Please make sure you've passed `child_index: 'NEW_RECORD'` to `fields_for`\")\n    }\n  }\n}","import {BaseController} from \"./base_controller\";\n\nexport class PasswordConfirmController extends BaseController {\n\n  static targets = [\"password\"];\n  static classes = [\"error\"];\n\n  declare readonly passwordTargets: HTMLInputElement[];\n\n  declare readonly errorClass: string;\n  declare readonly hasErrorClass: boolean;\n\n  private boundCheckPasswordsMatch = this.checkPasswordsMatch.bind(this);\n\n  connect() {\n    this.passwordTargets.forEach((el) => el.addEventListener(\"change\", this.boundCheckPasswordsMatch));\n  }\n\n  disconnect() {\n    this.passwordTargets.forEach((el) => el.removeEventListener(\"change\", this.boundCheckPasswordsMatch));\n  }\n\n  private allPasswordsMatch() {\n    let values = new Set(this.passwordTargets.map(el => el.value));  // Create a unique set of the password values\n    return values.has(\"\") || values.size == 1; // If any of the passwords are still blank, or there is only one distinct password value (i.e. they all are the same)\n  }\n\n  private checkPasswordsMatch() {\n    if (this.allPasswordsMatch()) {\n      this.element.dispatchEvent(new CustomEvent(\"password-confirm:match\"));\n      if (this.hasErrorClass) {\n        this.passwordTargets.forEach(el => el.classList.remove(this.errorClass));\n      }\n    } else {\n      this.element.dispatchEvent(new CustomEvent(\"password-confirm:no-match\"));\n      if (this.hasErrorClass) {\n        this.passwordTargets.forEach(el => el.classList.add(this.errorClass));\n      }\n    }\n  }\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class PasswordPeekController extends BaseController {\n\n  static targets = [\"password\"];\n\n  declare readonly passwordTarget: HTMLInputElement;\n\n\n  peak(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    this.passwordTarget.type = \"text\";\n  }\n\n  hide(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    this.passwordTarget.type = \"password\";\n  }\n\n  toggle(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    if (this.passwordTarget.type === \"password\") {\n      this.peak();\n    } else {\n      this.hide();\n    }\n  }\n}\n","import {useDebounce, useWindowResize} from \"stimulus-use\";\nimport {WindowResizePayload} from \"stimulus-use/dist/use-window-resize/use-window-resize\";\nimport {BaseController} from \"./base_controller\";\n\ninterface ResponsiveIframeMessage {\n  name: string,\n  height: number,\n}\n\nexport class ResponsiveIframeWrapperController extends BaseController {\n\n  boundMessageReceived = this.messageReceived.bind(this);\n\n  connect() {\n    window.addEventListener(\"message\", this.boundMessageReceived);\n  }\n\n  disconnect() {\n    window.removeEventListener(\"message\", this.boundMessageReceived);\n  }\n\n  messageReceived(message: MessageEvent<ResponsiveIframeMessage>) {\n    let data = message.data;\n    if (data.hasOwnProperty(\"name\") && data.name === \"iframe-body\" && data.hasOwnProperty(\"height\")) {\n      this.resize(data.height);\n    }\n  }\n\n  resize(height: number) {\n    (this.element as HTMLIFrameElement).style.height = `${height}px`;\n  }\n\n}\n\nexport class ResponsiveIframeBodyController extends BaseController {\n\n  static debounces = [\"postUpdate\"];\n\n  declare observe: () => void;\n  declare unobserve: () => void;\n\n  connect() {\n    // If this Window is inside a frame\n    if (window.self !== window.top) {\n      useWindowResize(this);\n      useDebounce(this, {});\n      this.postUpdate();\n    } else {\n      // Not an iframe\n    }\n  }\n\n  windowResize(payload: WindowResizePayload) {\n    this.postUpdate();\n  };\n\n  postUpdate() {\n    let payload: ResponsiveIframeMessage = {name: \"iframe-body\", height: this.getHeight()};\n    window.parent.postMessage(\n      payload,\n      \"*\",\n    );\n  }\n\n  getHeight(): number {\n    const body = document.body;\n    const html = document.documentElement;\n\n    // Get the largest height out of body and html's various height measurements\n    return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n  }\n\n}\n","import camelCase from \"camelcase\";\r\nimport {BaseController} from \"../base_controller\";\r\n\r\nexport class EphemeralController extends BaseController {\r\n\r\n  _cleanupSelf() {\r\n    this.cleanup(this.element as HTMLElement);\r\n  }\r\n\r\n  cleanup(element: HTMLElement) {\r\n    element.dataset.controller = element.dataset.controller?.replaceAll(new RegExp(`(\\s|^)${this.identifier}(\\s|$)`, \"g\"), \"\") || \"\";\r\n    if (element.dataset.controller == \"\") {\r\n      // If there are no controllers left, remove the attribute\r\n      delete element.dataset.controller;\r\n    }\r\n\r\n    let substringIdentifierValueRegex = new RegExp(`(\\s|^)${this.identifier}\\\\..+?(\\s|$)`, \"g\");\r\n    element.dataset.target = element.dataset.target?.replaceAll(substringIdentifierValueRegex, \"\") || \"\";\r\n    delete element.dataset[camelCase(`${this.identifier}-target`)];\r\n    if (element.dataset.target == \"\") {\r\n      // If there are no targets left, remove the attribute\r\n      delete element.dataset.target;\r\n    }\r\n\r\n    element.dataset.action = element.dataset.target?.replaceAll(substringIdentifierValueRegex, \"\") || \"\";\r\n    delete element.dataset[camelCase(`${this.identifier}-action`)];\r\n    if (element.dataset.action == \"\") {\r\n      // If there are no actions left, remove the attribute\r\n      delete element.dataset.action;\r\n    }\r\n\r\n    // @ts-ignore\r\n    let values = this.constructor.values;\r\n    if (values) {\r\n      Object.keys(values).forEach(val => delete element.dataset[camelCase(`${this.identifier}-${val}-value`)]);\r\n    }\r\n\r\n    // @ts-ignore\r\n    let classes = this.constructor.classes;\r\n    if (classes) {\r\n      Object.keys(classes).forEach(val => delete element.dataset[camelCase(`${this.identifier}-${val}-class`)]);\r\n    }\r\n  }\r\n\r\n}\r\n","import {EphemeralController} from \"./utilities/ephemeral_controller\";\r\nimport {scrollToElement} from \"./utilities/scroll\";\r\n\r\nexport class ScrollIntoFocusController extends EphemeralController {\r\n\r\n  static values = {\r\n    behavior: String,\r\n    block: String,\r\n    inline: String,\r\n  };\r\n\r\n  declare behaviorValue: ScrollBehavior;\r\n  declare hasBehaviorValue: boolean;\r\n  declare blockValue: ScrollLogicalPosition;\r\n  declare hasBlockValue: boolean;\r\n  declare inlineValue: ScrollLogicalPosition;\r\n  declare hasInlineValue: boolean;\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      // Attempt smooth scrolling, with polyfill\r\n      scrollToElement(\r\n        this.element,\r\n        {\r\n          behavior: this.hasBehaviorValue ? this.behaviorValue : \"smooth\",\r\n          block: this.hasBlockValue ? this.blockValue : \"center\",\r\n          inline: this.hasInlineValue ? this.inlineValue : \"center\",\r\n        },\r\n      ).catch(() => this.element.scrollIntoView()); // Fallback to snap-scrolling\r\n      this._cleanupSelf();\r\n    });\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\nimport {getScrollParent, scrollToElement} from \"./utilities/scroll\";\n\nexport class ScrollToBottomController extends BaseController {\n\n  static values = {\n    mode: String,\n  };\n\n  declare modeValue: \"nearest\" | \"document\";\n  declare hasModeValue: boolean;\n\n\n  scroll(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    let mode = this.hasModeValue ? this.modeValue : \"document\";\n    let target: null | HTMLElement;\n    if (mode == \"document\") {\n      target = document.body;\n    } else {\n      target = getScrollParent(this.element as HTMLElement);\n    }\n    if (target == null) {\n      return;\n    }\n    scrollToElement(target!, {behavior: \"smooth\", block: \"end\"}).catch(() => target!.scrollIntoView(false));\n  }\n\n}\n\n","import {BaseController} from \"./base_controller\";\nimport {scrollToElement} from \"./utilities/scroll\";\n\nexport class ScrollToController extends BaseController {\n\n  static values = {\n    selector: String,\n    behavior: String,\n    block: String,\n    inline: String,\n  };\n\n  declare selectorValue: string;\n  declare behaviorValue: ScrollBehavior;\n  declare hasBehaviorValue: boolean;\n  declare blockValue: ScrollLogicalPosition;\n  declare hasBlockValue: boolean;\n  declare inlineValue: ScrollLogicalPosition;\n  declare hasInlineValue: boolean;\n\n\n  scroll() {\n    let target = document.querySelector(this.selectorValue);\n    if (!target) {\n      console.warn(`Could not find target for '${this.selectorValue}'`);\n      return;\n    }\n\n    scrollToElement(\n      target!,\n      {\n        behavior: this.hasBehaviorValue ? this.behaviorValue : \"smooth\",\n        block: this.hasBlockValue ? this.blockValue : \"center\",\n        inline: this.hasInlineValue ? this.inlineValue : \"center\",\n      },\n    ).catch(() => target!.scrollIntoView()); // Fallback to snap-scrolling\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\nimport {getScrollParent, scrollToElement} from \"./utilities/scroll\";\n\nexport class ScrollToTopController extends BaseController {\n\n  static values = {\n    mode: String,\n  };\n\n  declare modeValue: \"nearest\" | \"document\";\n  declare hasModeValue: boolean;\n\n\n  scroll(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    let mode = this.hasModeValue ? this.modeValue : \"document\";\n    let target: null | HTMLElement;\n    if (mode == \"document\") {\n      target = document.body;\n    } else {\n      target = getScrollParent(this.element as HTMLElement);\n    }\n    if (target == null) {\n      return;\n    }\n    scrollToElement(target!, {behavior: \"smooth\", block: \"start\"}).catch(() => target!.scrollIntoView(false));\n  }\n\n}\n\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class SelfDestructController extends BaseController {\r\n\r\n  static values = {seconds: Number};\r\n\r\n  declare readonly secondsValue: number;\r\n  timeout: null | ReturnType<typeof setTimeout> = null;\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      // Only start countdown on first paint\r\n      this.timeout = setTimeout(() => this.element.remove(), this.secondsValue * 1000);\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.timeout) {\r\n      clearTimeout(this.timeout);\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class StickyController extends BaseController {\r\n\r\n  static classes = [\"stuck\"];\r\n  static values = {\r\n    mode: String,\r\n  };\r\n\r\n  declare readonly hasStuckClass: boolean;\r\n  declare readonly stuckClass: string;\r\n  declare readonly hasModeValue: \"top\" | \"bottom\";\r\n  declare readonly modeValue: \"top\" | \"bottom\";\r\n\r\n  _magicElement: HTMLDivElement | null = null;\r\n\r\n  get _mode(): \"top\" | \"bottom\" {\r\n    return this.hasModeValue ? this.modeValue : \"top\";\r\n  }\r\n\r\n  createMagicElement() {\r\n    // Magic element placed next to the sticky el that acts as an external border.\r\n    // When the magic element is off the page, we know that the sticky el is \"stuck\"\r\n    if (this._magicElement !== null) {\r\n      return;\r\n    }\r\n\r\n    this._magicElement = document.createElement(\"div\");\r\n    switch (this._mode) {\r\n      case \"top\":\r\n        this.element.insertAdjacentElement(\"beforebegin\", this._magicElement);\r\n        break;\r\n      case \"bottom\":\r\n        this.element.insertAdjacentElement(\"afterend\", this._magicElement);\r\n        break;\r\n    }\r\n  }\r\n\r\n  connect() {\r\n    let element = this.element as HTMLElement;\r\n    this.createMagicElement();\r\n\r\n    const observer = new IntersectionObserver(entries => {\r\n      entries.forEach(entry => {\r\n        if (entry.target !== this._magicElement) {\r\n          return;\r\n        }\r\n        if (entry.intersectionRatio === 0) {\r\n          element.classList.add(this.hasStuckClass ? this.stuckClass : \"stuck\");\r\n        } else if (entry.intersectionRatio === 1) {\r\n          element.classList.remove(this.hasStuckClass ? this.stuckClass : \"stuck\");\r\n        }\r\n      });\r\n\r\n    }, {\r\n      threshold: [0, 1],\r\n    });\r\n    observer.observe(this._magicElement!);\r\n  }\r\n\r\n}\r\n","import {EphemeralController} from \"./utilities/ephemeral_controller\";\n\nexport class TeleportController extends EphemeralController {\n\n  static values = {target: String, insert: String, immediate: Boolean};\n\n  declare readonly immediateValue: boolean;\n  declare readonly hasImmediateValue: boolean;\n  declare readonly targetValue: string;\n  declare readonly hasInsertValue: boolean;\n  declare readonly insertValue: InsertPosition | \"replaceOuter\" | \"replaceInner\" | \"prepend\" | \"append\";\n\n  connect() {\n    if (!this.hasInsertValue) {\n      throw new Error(\"`insert` value was not specified\");\n    }\n\n    requestAnimationFrame(() => {\n      if (this.hasImmediateValue && this.immediateValue) {\n        this.execute();\n      }\n    });\n  }\n\n  execute(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    let destination = document.querySelector(this.targetValue);\n\n    if (destination == null) {\n      this.element.dispatchEvent(new CustomEvent(\"teleport:error\", {bubbles: true, cancelable: true}));\n      return;\n    }\n\n    let copy = this.element.cloneNode(true) as HTMLElement;\n    this.cleanup(copy);\n\n    switch (this.insertValue) {\n      case \"beforebegin\":\n      case \"beforeend\":\n      case \"afterend\":\n      case \"afterbegin\":\n        destination.insertAdjacentHTML(this.insertValue, copy.outerHTML);\n        break;\n      case \"replaceOuter\":\n        destination.outerHTML = copy.outerHTML;\n        break;\n      case \"replaceInner\":\n        destination.innerHTML = copy.outerHTML;\n        break;\n      case \"prepend\":\n        destination.insertAdjacentHTML(\"afterbegin\", copy.outerHTML);\n        break;\n      case \"append\":\n        destination.insertAdjacentHTML(\"beforeend\", copy.outerHTML);\n        break;\n      default:\n        throw new Error(\"`insert` value was not specified\");\n\n    }\n    this.element.remove();\n  }\n\n}\n","import {useClickOutside, useHover} from \"stimulus-use\";\nimport {BaseController} from \"./base_controller\";\n\nexport type ToggleClassMode = \"on\" | \"off\" | \"toggle\"\n\nexport class ToggleClassController extends BaseController {\n\n  static targets = [\"toggle\"];\n  static values = {\n    class: String,\n    mouseEnter: String,\n    mouseLeave: String,\n    clickAway: Boolean,\n    initial: String,\n  };\n\n  declare readonly toggleTargets: HTMLElement[];\n\n  declare readonly classValue: string;\n  declare readonly hasClassValue: boolean;\n\n  declare readonly mouseEnterValue: ToggleClassMode;\n  declare readonly hasMouseEnterValue: boolean;\n\n  declare readonly mouseLeaveValue: ToggleClassMode;\n  declare readonly hasMouseLeaveValue: boolean;\n\n  declare readonly clickAwayValue: boolean;\n  declare readonly hasClickAwayValue: boolean;\n\n  declare readonly initialValue: \"on\" | \"off\";\n  declare readonly hasInitialValue: boolean;\n\n  connect() {\n    if (!this.hasClassValue) {\n      throw new Error(\"data-toggle-class-class-value must not be empty\");\n    }\n\n    if (this.hasMouseEnterValue || this.hasMouseLeaveValue) {\n      useHover(this);\n    }\n\n    if (this.hasClickAwayValue && this.clickAwayValue) {\n      useClickOutside(this);\n    }\n\n    requestAnimationFrame(() => {\n      if (this.hasInitialValue) {\n        if (this.initialValue === \"on\") {\n          this.toggleTargets.forEach((target) => this.elementOn(target));\n        } else {\n          this.toggleTargets.forEach((target) => this.elementOff(target));\n        }\n      }\n    });\n  }\n\n  clickOutside() {\n    this.toggleTargets.forEach((target) => {\n      if (this.elementWasToggled(target)) {\n        this.elementToggleStatus(target);\n        this.elementToggle(target);\n      }\n    });\n  }\n\n  mouseEnter() {\n    if (this.hasMouseEnterValue) {\n      switch (this.mouseEnterValue) {\n        case \"on\":\n          this.on();\n          break;\n        case \"off\":\n          this.off();\n          break;\n        case \"toggle\":\n          this.toggle();\n          break;\n      }\n    }\n    return {};\n  }\n\n  mouseLeave() {\n    if (this.hasMouseLeaveValue) {\n      switch (this.mouseLeaveValue) {\n        case \"on\":\n          this.on();\n          break;\n        case \"off\":\n          this.off();\n          break;\n        case \"toggle\":\n          this.toggle();\n          break;\n      }\n    }\n    return {};\n  }\n\n  on(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementOn(target);\n    });\n  }\n\n  off(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementOff(target);\n    });\n  }\n\n  toggle(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementToggle(target);\n    });\n  }\n\n  private elementWasToggled(el: HTMLElement): boolean {\n    return el.dataset.toggled == \"true\";\n  }\n\n  private elementToggleStatus(el: HTMLElement) {\n    if (this.elementWasToggled(el)) {\n      delete el.dataset.toggled;\n    } else {\n      el.dataset.toggled = \"true\";\n    }\n  }\n\n  private elementToggle(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass));\n  }\n\n  private elementOn(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass, true));\n  }\n\n  private elementOff(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass, false));\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\nimport {isHTMLLinkElement} from \"./utilities/elements\";\nimport {isTurboFrame} from \"./utilities/turbo\";\n\nexport class TurboFrameRCController extends BaseController {\n\n  static values = {\n    frameId: String,\n    src: String,\n    loadingMessage: String,\n  };\n\n  declare readonly frameIdValue: string;\n  declare readonly srcValue: string;\n  declare readonly hasSrcValue: boolean;\n  declare readonly loadingMessageValue: string;\n  declare readonly hasLoadingMessageValue: boolean;\n\n  toggle(event?: Event | null) {\n    if (event) {\n      event.preventDefault();\n    }\n    let frame = this._getFrame();\n    let frameSrc = frame.src;\n    if (frameSrc == null || frameSrc !== this._getSrc()) {\n      this._setSrc();\n    } else {\n      this._clear();\n    }\n  }\n\n  setSrc(event?: Event | null) {\n    if (event) {\n      event.preventDefault();\n    }\n    this._setSrc();\n  }\n\n  clear(event?: Event | null) {\n    if (event) {\n      event.preventDefault();\n    }\n    this._clear();\n  }\n\n  private _setSrc() {\n    let frame = this._getFrame();\n    if (this.hasLoadingMessageValue) {\n      frame.innerHTML = this.loadingMessageValue;\n    }\n    frame.src = this._getSrc();\n  }\n\n  private _clear() {\n    let frame = this._getFrame();\n    frame.src = \"\";\n    frame.innerHTML = \"\";\n  }\n\n  private _getFrame(): TurboFrame {\n    let frame = document.getElementById(`${this.frameIdValue}`);\n    if (frame == null) {\n      throw new Error(`Could not find frame with ID '${this.frameIdValue}'`);\n    }\n    if (!isTurboFrame(frame)) {\n      throw new Error(`Element targeted by ID '${this.frameIdValue}'`);\n    } else {\n      return frame;\n    }\n  }\n\n  private _getSrc(): string {\n    let element = this.element as HTMLElement;\n    if (this.hasSrcValue) {\n      return this.srcValue;\n    } else if (isHTMLLinkElement(element)) {\n      return element.href;\n    } else {\n      throw new Error(\"No link given to drive frame to\");\n    }\n  }\n\n}\n","export function isTurboFrame(element: HTMLElement): element is TurboFrame {\r\n  return element.nodeName == \"TURBO-FRAME\";\r\n}\r\n","import {BaseController} from \"./base_controller\";\n\nexport class WordCountController extends BaseController {\n\n  static targets = [\"input\", \"output\"];\n  static values = {min: Number, max: Number};\n  static classes = [\"error\"];\n\n  declare readonly inputTarget: HTMLInputElement | HTMLTextAreaElement;\n  declare readonly outputTarget: HTMLElement;\n  declare minValue: number;\n  declare hasMinValue: boolean;\n  declare maxValue: number;\n  declare hasMaxValue: boolean;\n  declare errorClass: string;\n  declare hasErrorClass: boolean;\n\n  boundHandler = this.updateWordCount.bind(this);\n\n  connect() {\n    this.updateWordCount();\n    this.inputTarget.addEventListener(\"input\", this.boundHandler);\n  }\n\n  disconnect() {\n    this.inputTarget.removeEventListener(\"input\", this.boundHandler);\n  }\n\n  updateWordCount() {\n    let wordCount = 0;\n    let textAreaValue = this.inputTarget.value;\n    let matches = textAreaValue.match(/\\S+/g);\n    wordCount = (matches && matches.length) || 0;\n    this.outputTarget.innerText = wordCount.toString();\n    if (this.hasErrorClass) {\n      if (this.isValidCount(wordCount)) {\n        this.outputTarget.classList.remove(this.errorClass);\n      } else {\n        this.outputTarget.classList.add(this.errorClass);\n      }\n    }\n  }\n\n  isValidCount(count: number) {\n    let min = 0;\n    let max = 99999;\n\n    if (this.hasMinValue) {\n      min = this.minValue;\n    }\n\n    if (this.hasMaxValue) {\n      max = this.maxValue;\n    }\n\n    return count >= min && count <= max;\n  }\n\n}\n"],"names":["BaseController","Controller","constructor","context","super","Proxy","this","get","obj","prop","returnVal","Reflect","self","test","logProperty","toString","apply","target","thisArg","argArray","log","args","dispatch","element","eventName","options","bubbles","cancelable","detail","event","CustomEvent","dispatchEvent","functionName","application","debug","logger","console","groupCollapsed","identifier","groupEnd","AppearanceController","initialize","_handleVisibility","bind","connect","window","addEventListener","document","disconnect","removeEventListener","appear","away","_documentIsActive","visibilityState","hasFocus","AsyncBlockController","_errorMessage","hasErrorMessageValue","errorMessageValue","loadContent","el","hasReplaceTarget","replaceTarget","fetch","endpointValue","then","response","text","html","newEl","createElement","innerHTML","hasSelectorValue","selectedContent","querySelectorAll","selectorValue","replaceWith","children","catch","err","finally","endpoint","String","errorMessage","selector","AutoSubmitFormController","handler","forEach","boundHandler","e","method","controller","methodName","composeEventName","name","eventPrefix","composedName","extendedEvent","type","composed","Object","assign","originalEvent","defaultOptions","useIntersection","targetElement","controllerDisconnect","observer","IntersectionObserver","entries","entry","isIntersecting","isVisible","call","appearEvent","dispatchAppear","disappearEvent","dispatchDisappear","observe","unobserve","[object Object]","events","onlyVisible","StimulusUse","_a","_b","_c","controllerId","stimulusUseDebug","id","dataset","controllerInitialize","controllerConnect","UseHover","onEnter","onLeave","hover","enhanceController","UseMutation","error","handleError","mutation","MutationObserver","useWindowResize","callback","innerWidth","innerHeight","payload","height","Infinity","width","debounce","fn","wait","timeoutId","arguments","clearTimeout","setTimeout","AutosizeController","style","resize","boxSizing","requestAnimationFrame","windowResize","autosize","offset","offsetHeight","clientHeight","scrollHeight","CharCountController","updateCharCount","inputTarget","charCount","value","length","outputTarget","innerText","hasErrorClass","isValidCount","classList","remove","errorClass","add","count","min","max","hasMinValue","minValue","hasMaxValue","maxValue","Number","CheckboxSelectAllController","checked","checkboxTargets","filter","checkbox","unchecked","toggle","refresh","hasSelectAllTarget","selectAllTarget","preventDefault","checkboxesCount","checkboxesCheckedCount","indeterminate","ClipboardController","supported","queryCommandSupported","hasRemoveUnusedValue","removeUnusedValue","hasFallbackTarget","fallbackTarget","hasCopyTarget","copyTarget","select","sourceTarget","copy","execCommand","isHTMLLinkElement","nodeName","isHTMLFormElement","isHTMLInputElement","removeUnused","Boolean","ConfirmController","message","hasMessageValue","messageValue","confirm","Error","ConfirmNavigationController","confirmMessage","onbeforeunload","handlePopstate","DebugController","testTargets","DetectDirtyController","initialValue","isInputElement","isCheckable","restore","setAttribute","removeAttribute","tagName","DisableInputsController","hasDisablerTarget","disablerTarget","disableInputs","enableInputs","shouldClear","hasClearValue","clearValue","disableTargets","_","disabled","clear","DismissableController","dismiss","EmptyDomController","useMutation","childList","checkEmpty","mutate","hasScopeSelectorValue","scopeSelectorValue","hasNotEmptyClass","notEmptyClass","split","klass","hasEmptyClass","emptyClass","scopeSelector","EnableInputsController","hasEnablerTarget","enablerTarget","enableTargets","FallbackImageController","onerror","hasPlaceholderValue","src","placeholderValue","display","placeholder","FormSaveController","formID","hasIdValue","idValue","elementID","formIdentifier","location","href","formElements","elements","formData","data","restoreOnLoad","hasRestoreOnLoadValue","restoreOnLoadValue","clearOnSubmit","hasClearOnSubmitValue","clearOnSubmitValue","_clear","localStorage","removeItem","save","setItem","JSON","stringify","getItem","savedData","parse","IntersectionController","threshold","hasThresholdValue","thresholdValue","map","val","parseFloat","trim","disappear","LazyBlockController","smoothSupported","documentElement","smoothPolyfilled","scrollToElement","behavior","block","inline","async","polyfill","polyfillSmooth","scrollIntoView","getScrollParent","node","overflowY","getComputedStyle","parentElement","body","LightboxImageController","hasSrcValue","srcValue","srcSet","hasSrcSetValue","srcSetValue","srcset","sizes","hasSizesValue","sizesValue","modalClassName","hasModalClass","modalClass","imageClassName","hasImageClass","imageClass","open","close","_dialog","image","className","appendChild","insertAdjacentElement","dialogPolyfill","registerDialog","showModal","LimitedSelectionCheckboxesController","handleInputs","inputTargets","boundHandleInputs","tickedInputs","reduce","previousValue","hasErrorTarget","errorTarget","NestedFormController","wrapperClass","hasWrapperSelectorValue","wrapperClassValue","insertMode","hasInsertModeValue","insertModeValue","checkStructure","content","templateTarget","replace","generateID","targetTarget","insertAdjacentHTML","wrapper","closest","newRecord","destroyInput","querySelector","Date","getTime","Math","random","slice","indexOf","PasswordConfirmController","checkPasswordsMatch","passwordTargets","boundCheckPasswordsMatch","allPasswordsMatch","values","Set","has","size","PasswordPeekController","peak","passwordTarget","hide","ResponsiveIframeWrapperController","messageReceived","boundMessageReceived","hasOwnProperty","ResponsiveIframeBodyController","top","debounces","func","postUpdate","getHeight","parent","postMessage","EphemeralController","_cleanupSelf","cleanup","replaceAll","RegExp","substringIdentifierValueRegex","camelCase","action","keys","classes","ScrollIntoFocusController","hasBehaviorValue","behaviorValue","hasBlockValue","blockValue","hasInlineValue","inlineValue","ScrollToBottomController","scroll","hasModeValue","modeValue","mode","ScrollToController","warn","ScrollToTopController","SelfDestructController","timeout","secondsValue","seconds","StickyController","_mode","createMagicElement","_magicElement","intersectionRatio","hasStuckClass","stuckClass","TeleportController","hasInsertValue","hasImmediateValue","immediateValue","execute","destination","targetValue","cloneNode","insertValue","outerHTML","insert","immediate","ToggleClassController","hasClassValue","hasMouseEnterValue","hasMouseLeaveValue","useHover","hasClickAwayValue","clickAwayValue","onEvent","contains","rect","getBoundingClientRect","windowHeight","windowWidth","clientWidth","left","isElementInViewport","clickOutside","clickOutsideEvent","useClickOutside","hasInitialValue","toggleTargets","elementOn","elementOff","elementWasToggled","elementToggleStatus","elementToggle","mouseEnter","mouseEnterValue","on","off","mouseLeave","mouseLeaveValue","toggled","classValue","class","clickAway","initial","TurboFrameRCController","frameSrc","_getFrame","_getSrc","_setSrc","setSrc","frame","hasLoadingMessageValue","loadingMessageValue","getElementById","frameIdValue","frameId","loadingMessage","WordCountController","updateWordCount","wordCount","matches","match"],"mappings":"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"}