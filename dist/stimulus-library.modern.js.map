{"version":3,"file":"stimulus-library.modern.js","sources":["../src/base_controller.ts","../src/appearance_controller.ts","../src/async_block_controller.ts","../src/auto_submit_form_controller.ts","../node_modules/stimulus-use/dist/support/index.js","../node_modules/stimulus-use/dist/use-intersection/use-intersection.js","../node_modules/stimulus-use/dist/use-click-outside/use-click-outside.js","../node_modules/stimulus-use/dist/stimulus_use.js","../node_modules/stimulus-use/dist/use-hover/use-hover.js","../node_modules/stimulus-use/dist/use-mutation/use-mutation.js","../node_modules/stimulus-use/dist/use-window-resize/use-window-resize.js","../node_modules/stimulus-use/dist/use-debounce/use-debounce.js","../src/autosize_controller.ts","../src/char_count_controller.ts","../src/checkbox_select_all_controller.ts","../src/clipboard_controller.ts","../src/utilities/elements.ts","../src/confirm_controller.ts","../src/confirm_navigation_controller.ts","../src/debug_controller.ts","../src/detect_dirty_controller.ts","../src/disable_inputs_controller.ts","../src/dismissable_controller.ts","../src/empty_dom_controller.ts","../src/enable_inputs_controller.ts","../src/fallback_image_controller.ts","../src/form_save_controller.ts","../src/intersection_controller.ts","../src/lazy_block_controller.ts","../src/utilities/scroll.ts","../src/lightbox_image_controller.ts","../src/limited_selection_checkboxes_controller.ts","../src/nested_form_controller.ts","../src/password_confirm_controller.ts","../src/password_peek_controller.ts","../src/responsive_iframe_controller.ts","../src/utilities/ephemeral_controller.ts","../src/scroll_into_focus_controller.ts","../src/scroll_to_bottom_controller.ts","../src/scroll_to_controller.ts","../src/scroll_to_top_controller.ts","../src/self_destruct_controller.ts","../src/sticky_controller.ts","../src/teleport_controller.ts","../src/toggle_class_controller.ts","../src/turbo_frame_rc_controller.ts","../src/utilities/turbo.ts","../src/word_count_controller.ts"],"sourcesContent":["import {Context, Controller} from \"stimulus\";\r\n\r\nexport class BaseController extends Controller {\r\n\r\n  constructor(context: Context) {\r\n    super(context);\r\n    return new Proxy(this, {\r\n      get: (obj, prop) => {\r\n        let returnVal = Reflect.get(obj, prop);\r\n        let self = this;\r\n        if (logProperty(prop.toString())) {\r\n          if (typeof returnVal == \"function\") {\r\n            return new Proxy(returnVal, {\r\n              apply(target: any, thisArg: any, argArray?: any): any {\r\n                self.log(prop.toString(), {\r\n                  args: argArray,\r\n                });\r\n                return Reflect.apply(target, thisArg, argArray);\r\n              },\r\n            });\r\n          } else {\r\n            this.log(prop.toString());\r\n          }\r\n        }\r\n        return returnVal;\r\n      },\r\n    });\r\n  }\r\n\r\n  dispatch(element: HTMLElement, eventName: string, options: CustomEventInit = {bubbles: true, cancelable: true, detail: {target: element}}) {\r\n    let event = new CustomEvent(eventName, options);\r\n    element.dispatchEvent(event);\r\n  }\r\n\r\n  log(functionName: string, args: {} = {}): void {\r\n    // @ts-ignore\r\n    if (!this.application.debug) {\r\n      return;\r\n    }\r\n    let logger = console;\r\n    logger.groupCollapsed(`%c${this.identifier} %c#${functionName}`, \"color: #3B82F6\", \"color: unset\");\r\n    logger.log({\r\n      element: this.element,\r\n      ...args,\r\n    });\r\n    logger.groupEnd();\r\n  }\r\n\r\n}\r\n\r\nfunction logProperty(prop: string): boolean {\r\n  switch (prop) {\r\n    case \"application\":\r\n    case \"element\":\r\n    case \"constructor\":\r\n    case \"initialize\":\r\n    case \"log\":\r\n    case \"data\":\r\n    case \"valueDescriptorMap\":\r\n    case \"identifier\":\r\n      return false;\r\n  }\r\n\r\n  if (/^_.*?$/.test(prop)) {\r\n    return false;\r\n  }\r\n  if (/^.*?Target(s)?$/.test(prop)) {\r\n    return false;\r\n  }\r\n  if (/^.*?Value$/.test(prop)) {\r\n    return false;\r\n  }\r\n  if (/^.*?ValueChanged$/.test(prop)) {\r\n    return false;\r\n  }\r\n  if (/^.*?Class$/.test(prop)) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class AppearanceController extends BaseController {\r\n\r\n  initialize() {\r\n    this._handleVisibility = this._handleVisibility.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    window.addEventListener(\"focus\", this._handleVisibility);\r\n    window.addEventListener(\"blur\", this._handleVisibility);\r\n    document.addEventListener(\"visibilitychange\", this._handleVisibility);\r\n    this._handleVisibility();\r\n  }\r\n\r\n  disconnect() {\r\n    window.removeEventListener(\"focus\", this._handleVisibility);\r\n    window.removeEventListener(\"blur\", this._handleVisibility);\r\n    document.removeEventListener(\"visibilitychange\", this._handleVisibility);\r\n  }\r\n\r\n  appear() {\r\n    this.dispatch(this.element as HTMLElement, \"appearance:appear\");\r\n  }\r\n\r\n  away() {\r\n    this.dispatch(this.element as HTMLElement, \"appearance:away\");\r\n  }\r\n\r\n  _handleVisibility(): any {\r\n    this._documentIsActive() ? this.appear() : this.away();\r\n  }\r\n\r\n  _documentIsActive() {\r\n    return document.visibilityState == \"visible\" && document.hasFocus();\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\n\nexport class AsyncBlockController extends BaseController {\n  static targets = [\"replace\"];\n  static values = {endpoint: String};\n\n  declare readonly replaceTarget: HTMLElement;\n  declare readonly hasReplaceTarget: boolean;\n  declare readonly endpointValue: string;\n\n\n  // This is a simple controller to load a block of content when the page loads.\n  // It should be used to give a quick initial response before calling out to an\n  // an AJAX endpoint to do some expensive work.\n  connect() {\n    this.loadContent();\n  }\n\n  loadContent() {\n    let el = (this.hasReplaceTarget ? this.replaceTarget : this.element) as HTMLElement;\n    fetch(this.endpointValue)\n    .then((response) => response.text())\n    .then((html) => {\n      let newEl = document.createElement(\"div\");\n      newEl.innerHTML = html;\n      el.replaceWith(newEl);\n\n      // Trigger event to show block has loaded\n      let event = new CustomEvent(\"ajax:success\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    })\n    .catch(err => {\n      el.replaceWith(\"Sorry, this content failed to load\");\n\n      let event = new CustomEvent(\"ajax:error\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    })\n    .finally(() => {\n      let event = new CustomEvent(\"ajax:complete\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    });\n  }\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class AutoSubmitFormController extends BaseController {\n\n  private boundHandler = this.handler.bind(this);\n\n  connect() {\n    (this.element as HTMLElement).querySelectorAll(\"input, select, textarea\").forEach(el => el.addEventListener(\"change\", this.boundHandler));\n  }\n\n  disconnect() {\n    (this.element as HTMLElement).querySelectorAll(\"input, select, textarea\").forEach(el => el.removeEventListener(\"change\", this.boundHandler));\n  }\n\n  private handler(e: Event) {\n    // this.element.submit()\n    // Moved to this to support remote forms and CSRF properly\n    this.element.dispatchEvent(\n      new CustomEvent(\"submit\", {\n        bubbles: true,\n        cancelable: true,\n      }),\n    );\n  }\n}\n","export const method = (controller, methodName) => {\n    const method = controller[methodName];\n    if (typeof method == 'function') {\n        return method;\n    }\n    else {\n        return (...args) => { };\n    }\n};\nexport const composeEventName = (name, controller, eventPrefix) => {\n    let composedName = name;\n    if (eventPrefix === true) {\n        composedName = `${controller.identifier}:${name}`;\n    }\n    else if (typeof eventPrefix === 'string') {\n        composedName = `${eventPrefix}:${name}`;\n    }\n    return composedName;\n};\nexport const extendedEvent = (type, event, detail) => {\n    const { bubbles, cancelable, composed } = event || { bubbles: true, cancelable: true, composed: true };\n    if (event) {\n        Object.assign(detail, { originalEvent: event });\n    }\n    const customEvent = new CustomEvent(type, {\n        bubbles,\n        cancelable,\n        composed,\n        detail,\n    });\n    return customEvent;\n};\nexport function isElementInViewport(el) {\n    const rect = el.getBoundingClientRect();\n    const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n    const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n    const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n    const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) >= 0);\n    return (vertInView && horInView);\n}\n//# sourceMappingURL=index.js.map","import { method, extendedEvent, composeEventName } from '../support/index';\nconst defaultOptions = {\n    dispatchEvent: true,\n    eventPrefix: true,\n};\nexport const useIntersection = (controller, options = {}) => {\n    const { dispatchEvent, eventPrefix } = Object.assign({}, defaultOptions, options);\n    const targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n    const callback = (entries) => {\n        const [entry] = entries;\n        if (entry.isIntersecting) {\n            dispatchAppear(entry);\n        }\n        else if (controller.isVisible) {\n            dispatchDisappear(entry);\n        }\n    };\n    const dispatchAppear = (entry) => {\n        controller.isVisible = true;\n        method(controller, 'appear').call(controller, entry);\n        // emit a custom \"appear\" event\n        if (dispatchEvent) {\n            const eventName = composeEventName('appear', controller, eventPrefix);\n            const appearEvent = extendedEvent(eventName, null, { controller, entry });\n            targetElement.dispatchEvent(appearEvent);\n        }\n    };\n    const dispatchDisappear = (entry) => {\n        controller.isVisible = false;\n        method(controller, 'disappear').call(controller, entry);\n        // emit a custom \"disappear\" event\n        if (dispatchEvent) {\n            const eventName = composeEventName('disappear', controller, eventPrefix);\n            const disappearEvent = extendedEvent(eventName, null, { controller, entry });\n            targetElement.dispatchEvent(disappearEvent);\n        }\n    };\n    // keep a copy of the current disconnect() function of the controller\n    // to support composing several behaviors\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    const observer = new IntersectionObserver(callback, options);\n    const observe = () => {\n        observer.observe(targetElement);\n    };\n    const unobserve = () => {\n        observer.unobserve(targetElement);\n    };\n    Object.assign(controller, {\n        isVisible: false,\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-intersection.js.map","import { composeEventName, extendedEvent, isElementInViewport } from '../support/index';\nconst defaultOptions = {\n    events: ['click', 'touchend'],\n    onlyVisible: true,\n    dispatchEvent: true,\n    eventPrefix: true,\n};\nexport const useClickOutside = (controller, options = {}) => {\n    const { onlyVisible, dispatchEvent, events, eventPrefix } = Object.assign({}, defaultOptions, options);\n    const onEvent = (event) => {\n        const targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        if (targetElement.contains(event.target) || (!isElementInViewport(targetElement) && onlyVisible)) {\n            return;\n        }\n        // call the clickOutside method of the Stimulus controller\n        if (controller.clickOutside) {\n            controller.clickOutside(event);\n        }\n        // emit a custom event\n        if (dispatchEvent) {\n            const eventName = composeEventName('click:outside', controller, eventPrefix);\n            const clickOutsideEvent = extendedEvent(eventName, event, { controller });\n            targetElement.dispatchEvent(clickOutsideEvent);\n        }\n    };\n    const observe = () => {\n        events === null || events === void 0 ? void 0 : events.forEach(event => {\n            window.addEventListener(event, onEvent, false);\n        });\n    };\n    const unobserve = () => {\n        events === null || events === void 0 ? void 0 : events.forEach(event => {\n            window.removeEventListener(event, onEvent, false);\n        });\n    };\n    // keep a copy of the current disconnect() function of the controller\n    // to support composing several behaviors\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    Object.assign(controller, {\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-click-outside.js.map","const defaultOptions = {\n    debug: false,\n    logger: console\n};\nexport class StimulusUse {\n    constructor(controller, options = {}) {\n        var _a, _b, _c;\n        this.log = (functionName, args) => {\n            if (!this.debug)\n                return;\n            this.logger.groupCollapsed(`%c${this.controller.identifier} %c#${functionName}`, 'color: #3B82F6', 'color: unset');\n            this.logger.log(Object.assign({ controllerId: this.controllerId }, args));\n            this.logger.groupEnd();\n        };\n        this.debug = (_b = (_a = options === null || options === void 0 ? void 0 : options.debug) !== null && _a !== void 0 ? _a : controller.application.stimulusUseDebug) !== null && _b !== void 0 ? _b : defaultOptions.debug;\n        this.logger = (_c = options === null || options === void 0 ? void 0 : options.logger) !== null && _c !== void 0 ? _c : defaultOptions.logger;\n        this.controller = controller;\n        this.controllerId = controller.element.id || controller.element.dataset.id;\n        // make copies of lifecycle functions\n        this.controllerInitialize = controller.initialize.bind(controller);\n        this.controllerConnect = controller.connect.bind(controller);\n        this.controllerDisconnect = controller.disconnect.bind(controller);\n    }\n}\n//# sourceMappingURL=stimulus_use.js.map","import { StimulusUse } from '../stimulus_use';\nimport { method } from '../support/index';\nexport class UseHover extends StimulusUse {\n    constructor(controller, options = {}) {\n        super(controller, options);\n        this.observe = () => {\n            this.targetElement.addEventListener('mouseenter', this.onEnter);\n            this.targetElement.addEventListener('mouseleave', this.onLeave);\n        };\n        this.unobserve = () => {\n            this.targetElement.removeEventListener('mouseenter', this.onEnter);\n            this.targetElement.removeEventListener('mouseleave', this.onLeave);\n        };\n        this.onEnter = () => {\n            method(this.controller, 'mouseEnter').call(this.controller);\n            this.log('mouseEnter', { hover: true });\n        };\n        this.onLeave = () => {\n            method(this.controller, 'mouseLeave').call(this.controller);\n            this.log('mouseLeave', { hover: false });\n        };\n        this.targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        this.controller = controller;\n        this.enhanceController();\n        this.observe();\n    }\n    enhanceController() {\n        const controllerDisconnect = this.controller.disconnect.bind(this.controller);\n        const disconnect = () => {\n            this.unobserve();\n            controllerDisconnect();\n        };\n        Object.assign(this.controller, { disconnect });\n    }\n}\nexport const useHover = (controller, options = {}) => {\n    const observer = new UseHover(controller, options);\n    return [observer.observe, observer.unobserve];\n};\n//# sourceMappingURL=use-hover.js.map","import { StimulusUse } from '../stimulus_use';\nimport { method } from '../support/index';\nexport class UseMutation extends StimulusUse {\n    constructor(controller, options = {}) {\n        super(controller, options);\n        this.observe = () => {\n            try {\n                this.observer.observe(this.targetElement, this.options);\n            }\n            catch (error) {\n                this.controller.application.handleError(error, \"At a minimum, one of childList, attributes, and/or characterData must be true\", {});\n            }\n        };\n        this.unobserve = () => {\n            this.observer.disconnect();\n        };\n        this.mutation = (entries) => {\n            method(this.controller, 'mutate').call(this.controller, entries);\n            this.log('mutate', { entries });\n        };\n        this.targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        this.controller = controller;\n        this.options = options;\n        this.observer = new MutationObserver(this.mutation);\n        this.enhanceController();\n        this.observe();\n    }\n    enhanceController() {\n        const controllerDisconnect = this.controller.disconnect.bind(this.controller);\n        const disconnect = () => {\n            this.unobserve();\n            controllerDisconnect();\n        };\n        Object.assign(this.controller, { disconnect });\n    }\n}\nexport const useMutation = (controller, options = {}) => {\n    const observer = new UseMutation(controller, options);\n    return [observer.observe, observer.unobserve];\n};\n//# sourceMappingURL=use-mutation.js.map","import { method } from '../support/index';\nexport const useWindowResize = (controller) => {\n    const callback = (event) => {\n        const { innerWidth, innerHeight } = window;\n        const payload = {\n            height: innerHeight || Infinity,\n            width: innerWidth || Infinity,\n            event\n        };\n        method(controller, 'windowResize').call(controller, payload);\n    };\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    const observe = () => {\n        window.addEventListener('resize', callback);\n        callback();\n    };\n    const unobserve = () => {\n        window.removeEventListener('resize', callback);\n    };\n    Object.assign(controller, {\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-window-resize.js.map","import { Controller } from 'stimulus';\nclass DebounceController extends Controller {\n}\nDebounceController.debounces = [];\nconst defaultWait = 200;\nconst debounce = (fn, wait = defaultWait) => {\n    let timeoutId = null;\n    return function () {\n        const args = arguments;\n        const context = this;\n        const callback = () => fn.apply(context, args);\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(callback, wait);\n    };\n};\nexport const useDebounce = (controller, options) => {\n    var _a;\n    const constructor = controller.constructor;\n    (_a = constructor.debounces) === null || _a === void 0 ? void 0 : _a.forEach((func) => {\n        if (typeof func === \"string\") {\n            controller[func] = debounce(controller[func], options === null || options === void 0 ? void 0 : options.wait);\n        }\n        if (typeof func === \"object\") {\n            const { name, wait } = func;\n            if (!name)\n                return;\n            controller[name] = debounce(controller[name], wait || (options === null || options === void 0 ? void 0 : options.wait));\n        }\n    });\n};\n//# sourceMappingURL=use-debounce.js.map","import {useWindowResize} from \"stimulus-use\";\nimport {BaseController} from \"./base_controller\";\n\nexport class AutosizeController extends BaseController {\n\n  private boundHandler = this.handler.bind(this);\n\n  connect() {\n    let target = this.element as HTMLTextAreaElement;\n    target.style.resize = \"none\";\n    target.style.boxSizing = \"border-box\";\n    target.addEventListener(\"input\", this.boundHandler);\n    target.addEventListener(\"focus\", this.boundHandler);\n    useWindowResize(this);\n    requestAnimationFrame(this.boundHandler);\n  }\n\n  windowResize() {\n    this.handler();\n  }\n\n  private handler() {\n    this.autosize(this.element as HTMLTextAreaElement);\n  };\n\n  private autosize(element: HTMLTextAreaElement) {\n    let offset = element.offsetHeight - element.clientHeight;\n    element.style.height = \"auto\";\n    element.style.height = element.scrollHeight + offset + \"px\";\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class CharCountController extends BaseController {\r\n\r\n  static targets = [\"input\", \"output\"];\r\n  static values = {min: Number, max: Number};\r\n  static classes = [\"error\"];\r\n\r\n  declare readonly inputTarget: HTMLInputElement | HTMLTextAreaElement;\r\n  declare readonly outputTarget: HTMLElement;\r\n  declare minValue: number;\r\n  declare hasMinValue: boolean;\r\n  declare maxValue: number;\r\n  declare hasMaxValue: boolean;\r\n  declare errorClass: string;\r\n  declare hasErrorClass: boolean;\r\n\r\n  boundHandler = this.updateCharCount.bind(this);\r\n\r\n  connect() {\r\n    this.updateCharCount();\r\n    this.inputTarget.addEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  disconnect() {\r\n    this.inputTarget.removeEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  updateCharCount() {\r\n    let charCount = this.inputTarget.value.length;\r\n    this.outputTarget.innerText = charCount.toString();\r\n    if (this.hasErrorClass) {\r\n      if (this.isValidCount(charCount)) {\r\n        this.outputTarget.classList.remove(this.errorClass);\r\n      } else {\r\n        this.outputTarget.classList.add(this.errorClass);\r\n      }\r\n    }\r\n  }\r\n\r\n  isValidCount(count: number) {\r\n    let min = 0;\r\n    let max = 99999;\r\n\r\n    if (this.hasMinValue) {\r\n      min = this.minValue;\r\n    }\r\n\r\n    if (this.hasMaxValue) {\r\n      max = this.maxValue;\r\n    }\r\n\r\n    return count >= min && count <= max;\r\n  }\r\n\r\n}\r\n","import {BaseController} from './base_controller';\n\nexport class CheckboxSelectAllController extends BaseController {\n  static targets = ['selectAll', 'checkbox'];\n\n  declare readonly hasSelectAllTarget: boolean;\n  declare readonly selectAllTarget: HTMLInputElement;\n  declare readonly checkboxTargets: HTMLInputElement[];\n\n  private get checked() {\n    return this.checkboxTargets.filter(checkbox => checkbox.checked);\n  }\n\n  private get unchecked() {\n    return this.checkboxTargets.filter(checkbox => !checkbox.checked);\n  }\n\n  initialize() {\n    this.toggle = this.toggle.bind(this);\n    this.refresh = this.refresh.bind(this);\n  }\n\n  connect() {\n    requestAnimationFrame(() => {\n      if (!this.hasSelectAllTarget) {\n        return;\n      }\n\n      this.selectAllTarget.addEventListener('change', this.toggle);\n      this.checkboxTargets.forEach(checkbox => checkbox.addEventListener('change', this.refresh));\n      this.refresh();\n    });\n  }\n\n  disconnect() {\n    if (!this.hasSelectAllTarget) {\n      return;\n    }\n\n    this.selectAllTarget.removeEventListener('change', this.toggle);\n    this.checkboxTargets.forEach((checkbox) => checkbox.removeEventListener('change', this.refresh));\n  }\n\n  private toggle(event: Event) {\n    event.preventDefault();\n    let target = event.target as HTMLInputElement;\n    this.checkboxTargets.forEach((checkbox) => checkbox.checked = target.checked);\n  }\n\n  private refresh() {\n    const checkboxesCount = this.checkboxTargets.length;\n    const checkboxesCheckedCount = this.checked.length;\n\n    this.selectAllTarget.checked = checkboxesCheckedCount > 0;\n    this.selectAllTarget.indeterminate = checkboxesCheckedCount > 0 && checkboxesCheckedCount < checkboxesCount;\n  }\n}","import {BaseController} from \"./base_controller\";\r\n\r\nexport class ClipboardController extends BaseController {\r\n\r\n  static targets = [\"button\", \"copy\", \"fallback\"];\r\n  static values = {removeUnused: Boolean};\r\n\r\n  declare readonly sourceTarget: HTMLElement;\r\n  declare readonly copyTarget: HTMLElement;\r\n  declare readonly hasCopyTarget: boolean;\r\n  declare readonly fallbackTarget: HTMLElement;\r\n  declare readonly hasFallbackTarget: boolean;\r\n\r\n  declare readonly hasRemoveUnusedValue: boolean;\r\n  declare readonly removeUnusedValue: boolean;\r\n\r\n  supported = false;\r\n\r\n  connect() {\r\n    this.supported = document.queryCommandSupported(\"copy\");\r\n\r\n    if (this.hasRemoveUnusedValue && this.removeUnusedValue) {\r\n      if (this.supported && this.hasFallbackTarget) {\r\n        this.fallbackTarget.remove();\r\n      } else if (this.hasCopyTarget) {\r\n        this.copyTarget.remove();\r\n      }\r\n    }\r\n  }\r\n\r\n  select(event: MouseEvent) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    (this.sourceTarget as HTMLInputElement | HTMLTextAreaElement).select();\r\n  }\r\n\r\n  copy(event: ClipboardEvent) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    (this.sourceTarget as HTMLInputElement | HTMLTextAreaElement).select();\r\n    if (this.supported) {\r\n      document.execCommand(\"copy\");\r\n    }\r\n  }\r\n}\r\n","export function isHTMLLinkElement(element: Element): element is HTMLLinkElement {\n  return element.nodeName == \"A\";\n}\n\nexport function isHTMLFormElement(element: Element): element is HTMLFormElement {\n  return element.nodeName == \"FORM\";\n}\n\nexport function isHTMLInputElement(element: Element): element is HTMLInputElement {\n  return element.nodeName == \"INPUT\";\n}\n\nexport function isHTMLImageElement(element: Element): element is HTMLImageElement {\n  return element.nodeName == \"IMG\";\n}\n\n","import {BaseController} from './base_controller';\r\nimport {isHTMLFormElement, isHTMLLinkElement} from \"./utilities/elements\";\r\n\r\nexport class ConfirmController extends BaseController {\r\n\r\n  static values = {\r\n    message: String,\r\n  };\r\n\r\n  declare readonly messageValue: string;\r\n  declare readonly hasMessageValue: boolean;\r\n\r\n  get message(): string {\r\n    return this.hasMessageValue ? this.messageValue : 'Are you sure?';\r\n  }\r\n\r\n  initialize() {\r\n    this.confirm = this.confirm.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      let element = this.element as HTMLElement;\r\n      if (isHTMLFormElement(element)) {\r\n        element.addEventListener(\"submit\", this.confirm);\r\n      } else if (isHTMLLinkElement(element)) {\r\n        element.addEventListener(\"click\", this.confirm);\r\n      } else {\r\n        throw new Error(\"Can't handle confirmation on attached element\");\r\n      }\r\n    });\r\n  }\r\n\r\n  confirm(event: Event) {\r\n    if (!(window.confirm(this.message))) {\r\n      event.preventDefault();\r\n      this.dispatch(this.element as HTMLElement, \"confirm:cancelled\");\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\n\nexport class ConfirmNavigationController extends BaseController {\n\n  static values = {message: String};\n\n  declare readonly messageValue: string;\n\n  connect() {\n    let confirmMessage = this.messageValue;\n    window.onbeforeunload = () => (confirmMessage == null ? true : confirmMessage);\n    window.addEventListener(\"popstate\", this.handlePopstate);\n    window.addEventListener(\"submit\", () => {\n      window.removeEventListener(\"popstate\", this.handlePopstate);\n      window.onbeforeunload = null;\n    });\n    // TODO: Turbo navigation events\n  }\n\n  handlePopstate(event: PopStateEvent) {\n    return false;\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class DebugController extends BaseController {\n\n  static targets = [\"test\"];\n  declare testTargets: HTMLElement[];\n\n  connect() {\n    console.log(\"Debug Controller\", this, this.testTargets);\n  }\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class DetectDirtyController extends BaseController {\r\n\r\n  initialValue: string | boolean | null = null;\r\n\r\n  boundHandler = this.handler.bind(this);\r\n\r\n  connect() {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    if (this.isInputElement(element) && this.isCheckable(element)) {\r\n      this.initialValue = element.checked;\r\n    } else {\r\n      this.initialValue = element.value;\r\n    }\r\n    element.addEventListener(\"input\", this.boundHandler);\r\n    element.addEventListener(\"change\", this.boundHandler);\r\n  }\r\n\r\n  disconnect() {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    element.removeEventListener(\"input\", this.boundHandler);\r\n    element.removeEventListener(\"change\", this.boundHandler);\r\n  }\r\n\r\n  restore() {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    if (this.isInputElement(element) && this.isCheckable(element)) {\r\n      element.checked = this.initialValue as boolean;\r\n    } else {\r\n      element.value = this.initialValue as string;\r\n    }\r\n  }\r\n\r\n  private handler(event?: Event) {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n\r\n    if (this.initialValue !== element.value) {\r\n      element.setAttribute(\"data-dirty\", \"true\");\r\n    } else {\r\n      element.removeAttribute(\"data-dirty\");\r\n    }\r\n  }\r\n\r\n  private isCheckable(element: HTMLInputElement): boolean {\r\n    return (element.type === \"radio\" || element.type === \"checkbox\");\r\n  }\r\n\r\n  private isInputElement(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement): element is HTMLInputElement {\r\n    return element.tagName === \"INPUT\";\r\n  }\r\n\r\n}\r\n\r\nexport function isDirty(element: HTMLElement) {\r\n  return element.hasAttribute(\"data-dirty\");\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class DisableInputsController extends BaseController {\r\n\r\n  static targets = [\"disabler\", \"disable\"];\r\n\r\n  static values = {\r\n    clear: Boolean,\r\n  };\r\n\r\n  declare readonly hasDisablerTarget: boolean;\r\n  declare readonly disablerTarget: HTMLInputElement;\r\n  declare readonly disableTargets: Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\r\n  declare readonly clearValue: boolean;\r\n  declare readonly hasClearValue: boolean;\r\n\r\n  connect() {\r\n    this.toggle();\r\n  }\r\n\r\n  toggle() {\r\n    if (this.hasDisablerTarget && this.disablerTarget.checked) {\r\n      this.disableInputs();\r\n    } else {\r\n      this.enableInputs();\r\n    }\r\n  }\r\n\r\n  disableInputs() {\r\n    let shouldClear = this.hasClearValue && this.clearValue;\r\n    this.disableTargets.forEach((el, _) => {\r\n      if (shouldClear) {\r\n        el.value = \"\";\r\n      }\r\n      el.disabled = true;\r\n    });\r\n  }\r\n\r\n  enableInputs() {\r\n    this.disableTargets.forEach((el, _) => {\r\n      el.disabled = false;\r\n    });\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class DismissableController extends BaseController {\r\n\r\n\r\n  dismiss() {\r\n    this.element.remove();\r\n  }\r\n\r\n}\r\n","import {useMutation} from \"stimulus-use\";\r\nimport {BaseController} from \"./base_controller\";\r\n\r\nexport class EmptyDomController extends BaseController {\r\n\r\n  static classes = [\"empty\", \"notEmpty\"];\r\n  static values = {scopeSelector: String};\r\n\r\n  declare hasEmptyClass: boolean;\r\n  declare emptyClass: string;\r\n  declare hasNotEmptyClass: boolean;\r\n  declare notEmptyClass: string;\r\n\r\n  declare hasScopeSelectorValue: boolean;\r\n  declare scopeSelectorValue: string;\r\n\r\n  connect() {\r\n    useMutation(this, {element: this.element, childList: true});\r\n    this.checkEmpty();\r\n  }\r\n\r\n  mutate(entries: MutationRecord[]) {\r\n    this.checkEmpty();\r\n  }\r\n\r\n  checkEmpty() {\r\n    let children;\r\n    if (this.hasScopeSelectorValue) {\r\n      children = this.element.querySelectorAll(this.scopeSelectorValue);\r\n    } else {\r\n      children = this.element.children;\r\n    }\r\n\r\n    if (children.length === 0) {\r\n      if (this.hasNotEmptyClass) {\r\n        let classes = this.notEmptyClass.split(\" \");\r\n        classes.forEach(klass => this.element.classList.remove(klass));\r\n      }\r\n      if (this.hasEmptyClass) {\r\n        let classes = this.emptyClass.split(\" \");\r\n        classes.forEach(klass => this.element.classList.add(klass));\r\n      }\r\n      this.element.dispatchEvent(\r\n        new CustomEvent(\"dom:empty\", {\r\n          bubbles: true,\r\n          cancelable: true,\r\n        }),\r\n      );\r\n    } else {\r\n      if (this.hasNotEmptyClass) {\r\n        let classes = this.notEmptyClass.split(\" \");\r\n        classes.forEach(klass => this.element.classList.add(klass));\r\n      }\r\n      if (this.hasEmptyClass) {\r\n        let classes = this.emptyClass.split(\" \");\r\n        classes.forEach(klass => this.element.classList.remove(klass));\r\n      }\r\n      this.element.dispatchEvent(\r\n        new CustomEvent(\"dom:not-empty\", {\r\n          bubbles: true,\r\n          cancelable: true,\r\n          detail: {\r\n            count: children.length,\r\n          },\r\n        }),\r\n      );\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class EnableInputsController extends BaseController {\r\n\r\n  static targets = [\"enabler\", \"enable\"];\r\n\r\n  static values = {\r\n    clear: Boolean,\r\n  };\r\n\r\n  declare readonly hasEnablerTarget: boolean;\r\n  declare readonly enablerTarget: HTMLInputElement;\r\n  declare readonly enableTargets: Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\r\n  declare readonly clearValue: boolean;\r\n  declare readonly hasClearValue: boolean;\r\n\r\n  connect() {\r\n    this.toggle();\r\n  }\r\n\r\n  toggle() {\r\n    if (this.hasEnablerTarget && this.enablerTarget.checked) {\r\n      this.enableInputs();\r\n    } else {\r\n      this.disableInputs();\r\n    }\r\n  }\r\n\r\n  disableInputs() {\r\n    let shouldClear = this.hasClearValue && this.clearValue;\r\n    this.enableTargets.forEach((el, _) => {\r\n      if (shouldClear) {\r\n        el.value = \"\";\r\n      }\r\n      el.disabled = true;\r\n    });\r\n  }\r\n\r\n  enableInputs() {\r\n    this.enableTargets.forEach((el, _) => {\r\n      el.disabled = false;\r\n    });\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class FallbackImageController extends BaseController {\r\n\r\n  static values = {placeholder: String};\r\n\r\n  declare readonly placeholderValue: string;\r\n  declare readonly hasPlaceholderValue: boolean;\r\n\r\n  connect() {\r\n    let element = this.element as HTMLImageElement;\r\n\r\n    element.onerror = () => {\r\n      if (this.hasPlaceholderValue) {\r\n        element.src = this.placeholderValue;\r\n      } else {\r\n        element.style.display = \"none\";\r\n      }\r\n    };\r\n  }\r\n\r\n}\r\n","import {BaseController} from './base_controller';\r\nimport {isHTMLFormElement, isHTMLInputElement} from \"./utilities/elements\";\r\n\r\ninterface FormSavePayload {\r\n  [idx: string]: {\r\n    [idx: string]: string | boolean\r\n  }\r\n}\r\n\r\nexport class FormSaveController extends BaseController {\r\n\r\n  static values = {\r\n    id: String,\r\n    restoreOnLoad: Boolean,\r\n    clearOnSubmit: Boolean,\r\n  };\r\n\r\n  declare readonly idValue: string;\r\n  declare readonly hasIdValue: boolean;\r\n  declare readonly restoreOnLoadValue: boolean;\r\n  declare readonly hasRestoreOnLoadValue: boolean;\r\n  declare readonly clearOnSubmitValue: boolean;\r\n  declare readonly hasClearOnSubmitValue: boolean;\r\n\r\n  get formID() {\r\n    if (this.hasIdValue) {\r\n      return this.idValue;\r\n    }\r\n    let elementID = (this.element as HTMLFormElement).id;\r\n\r\n    if (elementID !== \"\") {\r\n      return elementID;\r\n    } else {\r\n      throw new Error(`No ID value to uniquely identify this form. Please either specify data-${this.identifier}-id-value or give this form an 'id' attribute. `);\r\n    }\r\n  }\r\n\r\n  get formIdentifier() {\r\n    const url = location.href;\r\n    return `${url} ${this.formID}`;\r\n  }\r\n\r\n  get formElements() {\r\n    return (this.element as HTMLFormElement).elements;\r\n  }\r\n\r\n  get formData(): FormSavePayload {\r\n    let data: FormSavePayload = {[this.formIdentifier]: {}};\r\n    for (const element of this.formElements) {\r\n      let el = element as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\r\n      if (el.name.length > 0) {\r\n        if (isHTMLInputElement(el) && el.type == \"checkbox\") {\r\n          data[this.formIdentifier][el.name] = el.checked;\r\n        } else if (isHTMLInputElement(el) && el.type == \"radio\") {\r\n          if (el.checked) {\r\n            data[this.formIdentifier][el.name] = el.value;\r\n          }\r\n        } else {\r\n          data[this.formIdentifier][el.name] = el.value;\r\n        }\r\n      }\r\n    }\r\n    return data;\r\n  }\r\n\r\n  get restoreOnLoad() {\r\n    return this.hasRestoreOnLoadValue ? this.restoreOnLoadValue : true;\r\n  }\r\n\r\n  get clearOnSubmit() {\r\n    return this.hasClearOnSubmitValue ? this.clearOnSubmitValue : true;\r\n  }\r\n\r\n  initialize() {\r\n    this._clear = this._clear.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      let element = this.element;\r\n      if (!isHTMLFormElement(element)) {\r\n        throw new Error('Expected controller to be mounted on a form element.');\r\n      }\r\n\r\n      if (this.restoreOnLoad) {\r\n        this.restore();\r\n      }\r\n      if (this.clearOnSubmit) {\r\n        this.element.addEventListener('submit', this._clear);\r\n      }\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.clearOnSubmit) {\r\n      this.element.removeEventListener('submit', this._clear);\r\n    }\r\n  }\r\n\r\n  _clear() {\r\n    localStorage.removeItem(this.formIdentifier);\r\n    this.dispatch(this.element as HTMLElement, `form-save:cleared`);\r\n  }\r\n\r\n  clear(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    this._clear();\r\n  }\r\n\r\n  save(event: Event) {\r\n    event.preventDefault();\r\n    let data = this.formData;\r\n    localStorage.setItem(this.formIdentifier, JSON.stringify(data[this.formIdentifier]));\r\n    this.dispatch(this.element as HTMLElement, `form-save:save:success`);\r\n  }\r\n\r\n  restore(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    if (localStorage.getItem(this.formIdentifier)) {\r\n      const savedData = JSON.parse(localStorage.getItem(this.formIdentifier)!); // get and parse the saved data from localStorage\r\n      for (const element of this.formElements) {\r\n        let el = element as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\r\n        if (el.name in savedData) {\r\n          if (isHTMLInputElement(el) && el.type == \"checkbox\") {\r\n            el.checked = savedData[el.name];\r\n          } else if (isHTMLInputElement(el) && el.type == \"radio\") {\r\n            if (el.value == savedData[el.name]) {\r\n              el.checked = true;\r\n            }\r\n          } else {\r\n            el.value = savedData[el.name];\r\n          }\r\n        }\r\n      }\r\n      this.dispatch(this.element as HTMLElement, `form-save:restore:success`);\r\n    } else {\r\n      this.dispatch(this.element as HTMLElement, `form-save:restore:empty`);\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\nimport {useIntersection} from \"stimulus-use\";\r\n\r\nexport class IntersectionController extends BaseController {\r\n\r\n  static values = {threshold: String};\r\n\r\n  declare readonly isVisible: boolean;\r\n  declare readonly thresholdValue: string;\r\n  declare readonly hasThresholdValue: boolean;\r\n\r\n  get threshold(): number[] {\r\n    if (this.hasThresholdValue) {\r\n      return this.thresholdValue.split(',').map(val => Number.parseFloat(val.trim())).filter(val => val >= 0 && val <= 1);\r\n    } else {\r\n      return [0, 1];\r\n    }\r\n  }\r\n\r\n  connect() {\r\n    useIntersection(this, {\r\n      threshold: this.threshold,\r\n      element: this.element,\r\n    });\r\n  }\r\n\r\n  appear(entry: IntersectionObserverEntry) {\r\n    this.dispatch(\r\n      this.element as HTMLElement,\r\n      \"intersection:appear\",\r\n      {\r\n        cancelable: true,\r\n        bubbles: true,\r\n        detail: {\r\n          element: this.element,\r\n        },\r\n      },\r\n    );\r\n  };\r\n\r\n  disappear(entry: IntersectionObserverEntry) {\r\n    this.dispatch(\r\n      this.element as HTMLElement,\r\n      \"intersection:disappear\",\r\n      {\r\n        cancelable: true,\r\n        bubbles: true,\r\n        detail: {\r\n          element: this.element,\r\n        },\r\n      },\r\n    );\r\n  };\r\n\r\n}\r\n","import {useIntersection} from \"stimulus-use\";\nimport {IntersectionOptions} from \"stimulus-use/dist/use-intersection/use-intersection\";\nimport {AsyncBlockController} from \"./async_block_controller\";\n\nexport class LazyBlockController extends AsyncBlockController {\n\n  declare observe: () => void;\n  declare unobserve: () => void;\n  declare options: IntersectionOptions;\n  declare isVisible: boolean;\n  declare disappear: () => void;\n\n  connect() {\n    let element = this.element;\n    this.options = {element, threshold: 0.3};\n\n    if (\"IntersectionObserver\" in window) {\n      [this.observe, this.unobserve] = useIntersection(this, this.options);\n    } else {\n      // Client doesn't support intersection observer, fallback to pre-loading\n      this.loadContent();\n    }\n  }\n\n  appear(entry: IntersectionObserverEntry) {\n    let element = this.element as HTMLImageElement;\n    if (element.src !== \"\") {\n      return;\n    }\n    if (entry.target === element && entry.isIntersecting) {\n      this.loadContent();\n      if (this.unobserve) {\n        this.unobserve();\n      }\n    }\n  }\n\n}\n","const smoothSupported = \"scrollBehavior\" in document.documentElement.style;\r\nlet smoothPolyfilled: boolean;\r\n\r\nexport async function scrollToElement(element: Element, {behavior = \"smooth\", block = \"start\", inline = \"nearest\"}: ScrollIntoViewOptions = {}) {\r\n  if (behavior == \"smooth\" && !smoothSupported) {\r\n    await polyfillSmooth();\r\n  }\r\n  element.scrollIntoView({behavior, block, inline});\r\n}\r\n\r\nasync function polyfillSmooth() {\r\n  const {polyfill} = await import(/* webpackChunkName: \"smoothscroll-polyfill\" */ \"smoothscroll-polyfill\");\r\n  if (smoothPolyfilled) {\r\n    return;\r\n  }\r\n  smoothPolyfilled = true;\r\n  polyfill();\r\n}\r\n\r\nexport function getScrollParent(node: HTMLElement | null): HTMLElement | null {\r\n  if (!node) {\r\n    return null;\r\n  }\r\n  const overflowY = getComputedStyle(node).overflowY;\r\n  const isScrollable = overflowY !== \"visible\" && overflowY !== \"hidden\";\r\n\r\n  if (isScrollable && node.scrollHeight >= node.clientHeight) {\r\n    return node;\r\n  }\r\n\r\n  return getScrollParent(node.parentElement) || document.body;\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\nimport {scrollToElement} from \"./utilities/scroll\";\r\nimport dialogPolyfill from \"dialog-polyfill\";\r\n\r\nexport class LightboxImageController extends BaseController {\r\n\r\n  static values = {\r\n    src: String,\r\n    srcSet: String,\r\n    sizes: String,\r\n  };\r\n  static classes = [\"modal\", \"image\"];\r\n\r\n  declare readonly hasModalClass: boolean;\r\n  declare readonly modalClass: string;\r\n  declare readonly hasImageClass: boolean;\r\n  declare readonly imageClass: string;\r\n  declare readonly hasSrcValue: boolean;\r\n  declare readonly srcValue: string;\r\n  declare readonly hasSrcSetValue: boolean;\r\n  declare readonly srcSetValue: string;\r\n  declare readonly hasSizesValue: boolean;\r\n  declare readonly sizesValue: string;\r\n  _dialog: HTMLDialogElement | null = null;\r\n\r\n  get src(): string {\r\n    return this.hasSrcValue ? this.srcValue : (this.element as HTMLImageElement).src;\r\n  }\r\n\r\n  get srcSet(): string {\r\n    return this.hasSrcSetValue ? this.srcSetValue : (this.element as HTMLImageElement).srcset;\r\n  }\r\n\r\n  get sizes(): string {\r\n    return this.hasSizesValue ? this.sizesValue : (this.element as HTMLImageElement).sizes;\r\n  }\r\n\r\n  get modalClassName() {\r\n    return this.hasModalClass ? this.modalClass : \"image-lightbox-dialog\";\r\n  }\r\n\r\n  get imageClassName() {\r\n    return this.hasImageClass ? this.imageClass : \"image-lightbox-image\";\r\n  }\r\n\r\n  initialize() {\r\n    this.open = this.open.bind(this);\r\n    this.close = this.close.bind(this);\r\n  }\r\n\r\n  connect() {\r\n  }\r\n\r\n  open() {\r\n    let element = this.element as HTMLImageElement;\r\n    if (this._dialog) {\r\n      return;\r\n    }\r\n    this._dialog = document.createElement(\"dialog\");\r\n\r\n    let image = document.createElement(\"img\") as HTMLImageElement;\r\n    image.className = this.imageClassName;\r\n    image.src = this.src;\r\n    image.srcset = this.srcSet;\r\n    image.sizes = this.sizes;\r\n    this._dialog.appendChild(image);\r\n\r\n    element.insertAdjacentElement(\"afterend\", this._dialog);\r\n    dialogPolyfill.registerDialog(this._dialog);\r\n    this._dialog.className = this.modalClassName;\r\n    this._dialog.showModal();\r\n    scrollToElement(this._dialog, {behavior: \"smooth\", block: \"end\"}).catch(() => this._dialog!.scrollIntoView(false));\r\n    this._dialog.addEventListener(\"click\", this.close);\r\n    this._dialog.addEventListener(\"cancel\", this.close);\r\n    this._dialog.addEventListener(\"close\", this.close);\r\n  }\r\n\r\n  close() {\r\n    if (this._dialog) {\r\n      this._dialog.close();\r\n      this._dialog.remove();\r\n      this._dialog = null;\r\n      scrollToElement(this.element, {behavior: \"smooth\", block: \"end\"}).catch(() => this.element.scrollIntoView(false));\r\n    }\r\n  }\r\n\r\n} ","import {BaseController} from \"./base_controller\";\r\n\r\nexport class LimitedSelectionCheckboxesController extends BaseController {\r\n\r\n  static targets = [\"input\", \"error\"];\r\n  static values = {max: Number, message: String};\r\n\r\n  declare readonly hasErrorTarget: boolean;\r\n  declare readonly errorTarget: HTMLElement;\r\n  declare readonly inputTargets: HTMLInputElement[];\r\n  declare readonly maxValue: number;\r\n  declare readonly messageValue: string;\r\n\r\n  maxSelections = 0;\r\n\r\n  boundHandleInputs = this.handleInputs.bind(this);\r\n\r\n  connect() {\r\n    this.inputTargets.forEach((el) => el.addEventListener(\"change\", this.boundHandleInputs));\r\n  }\r\n\r\n  disconnect() {\r\n    this.inputTargets.forEach((el) => el.removeEventListener(\"change\", this.boundHandleInputs));\r\n  }\r\n\r\n  handleInputs(event: Event) {\r\n    let tickedInputs = this.inputTargets.reduce((previousValue, el) => el.checked ? previousValue + 1 : previousValue, 0);\r\n    let target = event.target as HTMLInputElement;\r\n    if (tickedInputs > this.maxSelections) {\r\n      event.preventDefault();\r\n      target.checked = false;\r\n      target.dispatchEvent(new CustomEvent(\"change\", {bubbles: true, cancelable: true}));\r\n      target.dispatchEvent(new CustomEvent(\"limited-selection:too-many\", {bubbles: true, cancelable: true, detail: {target}}));\r\n      if (this.hasErrorTarget) {\r\n        this.errorTarget.innerHTML = this.messageValue;\r\n      }\r\n    } else {\r\n      target.dispatchEvent(new CustomEvent(\"limited-selection:selection\", {bubbles: true, cancelable: true, detail: {target}}));\r\n      if (this.hasErrorTarget) {\r\n        this.errorTarget.innerHTML = \"\";\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class NestedFormController extends BaseController {\r\n  static targets = ['target', 'template'];\r\n  static values = {\r\n    insertMode: String,\r\n    wrapperClass: String,\r\n  };\r\n\r\n  declare readonly targetTarget: HTMLElement;\r\n  declare readonly templateTarget: HTMLTemplateElement | HTMLScriptElement;\r\n\r\n  declare readonly wrapperClassValue: string;\r\n  declare readonly hasWrapperSelectorValue: boolean;\r\n  declare readonly insertModeValue: InsertPosition;\r\n  declare readonly hasInsertModeValue: boolean;\r\n\r\n  get wrapperClass() {\r\n    return this.hasWrapperSelectorValue ? this.wrapperClassValue : 'nested-fields';\r\n  }\r\n\r\n  get insertMode(): InsertPosition {\r\n    return this.hasInsertModeValue ? this.insertModeValue : 'beforeend';\r\n  }\r\n\r\n  connect() {\r\n    this.checkStructure();\r\n  }\r\n\r\n  add(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    const content = this.templateTarget.innerHTML.replace(/NEW_RECORD/g, this.generateID());\r\n    this.targetTarget.insertAdjacentHTML(this.insertMode, content);\r\n  }\r\n\r\n  remove(event: Event) {\r\n    event.preventDefault();\r\n    const wrapper: HTMLElement | null = (event.target as HTMLElement).closest(`.${this.wrapperClass}`);\r\n    if (wrapper == null) {\r\n      throw new Error(`#remove was clicked from outside of a child record. Could not find an ancestor with class .${this.wrapperClass}`);\r\n    }\r\n\r\n    if (wrapper.dataset.newRecord === 'true') {\r\n      wrapper.remove();\r\n    } else {\r\n      wrapper.style.display = 'none';\r\n      let destroyInput = wrapper.querySelector(\"input[name*='_destroy']\") as HTMLInputElement | null;\r\n      if (destroyInput == null) {\r\n        throw new Error(`Could not find a hidden input with name '_destroy'. NestedForm cannot remove an already persisted record without it.`);\r\n      }\r\n\r\n      destroyInput.value = \"1\";\r\n    }\r\n  }\r\n\r\n  generateID(): string {\r\n    return new Date().getTime().toString() + Math.random().toString().slice(2);\r\n  }\r\n\r\n  private checkStructure() {\r\n    let template = this.templateTarget.innerHTML;\r\n\r\n    if (template.indexOf('NEW_RECORD')) {\r\n      throw new Error(\"Could not find 'NEW_RECORD' in the provided template. Please make sure you've passed `child_index: 'NEW_RECORD'` to `fields_for`\")\r\n    }\r\n  }\r\n}","import {BaseController} from \"./base_controller\";\r\n\r\nexport class PasswordConfirmController extends BaseController {\r\n\r\n  static targets = [\"password\"];\r\n  static classes = [\"error\"];\r\n\r\n  declare readonly passwordTargets: HTMLInputElement[];\r\n\r\n  declare readonly errorClass: string;\r\n  declare readonly hasErrorClass: boolean;\r\n\r\n  private boundCheckPasswordsMatch = this.checkPasswordsMatch.bind(this);\r\n\r\n  connect() {\r\n    this.passwordTargets.forEach((el) => el.addEventListener(\"change\", this.boundCheckPasswordsMatch));\r\n  }\r\n\r\n  disconnect() {\r\n    this.passwordTargets.forEach((el) => el.removeEventListener(\"change\", this.boundCheckPasswordsMatch));\r\n  }\r\n\r\n  private allPasswordsMatch() {\r\n    let values = new Set(this.passwordTargets.map(el => el.value));  // Create a unique set of the password values\r\n    return values.has(\"\") || values.size == 1; // If any of the passwords are still blank, or there is only one distinct password value (i.e. they all are the same)\r\n  }\r\n\r\n  private checkPasswordsMatch() {\r\n    if (this.allPasswordsMatch()) {\r\n      this.element.dispatchEvent(new CustomEvent(\"password-confirm:match\"));\r\n      if (this.hasErrorClass) {\r\n        this.passwordTargets.forEach(el => el.classList.remove(this.errorClass));\r\n      }\r\n    } else {\r\n      this.element.dispatchEvent(new CustomEvent(\"password-confirm:no-match\"));\r\n      if (this.hasErrorClass) {\r\n        this.passwordTargets.forEach(el => el.classList.add(this.errorClass));\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class PasswordPeekController extends BaseController {\r\n\r\n  static targets = [\"password\"];\r\n\r\n  declare readonly passwordTarget: HTMLInputElement;\r\n\r\n\r\n  peak(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    this.passwordTarget.type = \"text\";\r\n  }\r\n\r\n  hide(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    this.passwordTarget.type = \"password\";\r\n  }\r\n\r\n  toggle(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    if (this.passwordTarget.type === \"password\") {\r\n      this.peak();\r\n    } else {\r\n      this.hide();\r\n    }\r\n  }\r\n}\r\n","import {useDebounce, useWindowResize} from \"stimulus-use\";\nimport {WindowResizePayload} from \"stimulus-use/dist/use-window-resize/use-window-resize\";\nimport {BaseController} from \"./base_controller\";\n\ninterface ResponsiveIframeMessage {\n  name: string,\n  height: number,\n}\n\nexport class ResponsiveIframeWrapperController extends BaseController {\n\n  boundMessageReceived = this.messageReceived.bind(this);\n\n  connect() {\n    window.addEventListener(\"message\", this.boundMessageReceived);\n  }\n\n  disconnect() {\n    window.removeEventListener(\"message\", this.boundMessageReceived);\n  }\n\n  messageReceived(message: MessageEvent<ResponsiveIframeMessage>) {\n    let data = message.data;\n    if (data.hasOwnProperty(\"name\") && data.name === \"iframe-body\" && data.hasOwnProperty(\"height\")) {\n      this.resize(data.height);\n    }\n  }\n\n  resize(height: number) {\n    (this.element as HTMLIFrameElement).style.height = `${height}px`;\n  }\n\n}\n\nexport class ResponsiveIframeBodyController extends BaseController {\n\n  static debounces = [\"postUpdate\"];\n\n  declare observe: () => void;\n  declare unobserve: () => void;\n\n  connect() {\n    // If this Window is inside a frame\n    if (window.self !== window.top) {\n      useWindowResize(this);\n      useDebounce(this, {});\n      this.postUpdate();\n    } else {\n      // Not an iframe\n    }\n  }\n\n  windowResize(payload: WindowResizePayload) {\n    this.postUpdate();\n  };\n\n  postUpdate() {\n    let payload: ResponsiveIframeMessage = {name: \"iframe-body\", height: this.getHeight()};\n    window.parent.postMessage(\n      payload,\n      \"*\",\n    );\n  }\n\n  getHeight(): number {\n    const body = document.body;\n    const html = document.documentElement;\n\n    // Get the largest height out of body and html's various height measurements\n    return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n  }\n\n}\n","import camelCase from \"lodash/camelCase\";\r\nimport {BaseController} from \"../base_controller\";\r\n\r\nexport class EphemeralController extends BaseController {\r\n\r\n  cleanupSelf() {\r\n    this.cleanup(this.element as HTMLElement);\r\n  }\r\n\r\n  cleanup(element: HTMLElement) {\r\n    element.dataset.controller = element.dataset.controller?.replaceAll(new RegExp(`(\\s|^)${this.identifier}(\\s|$)`, \"g\"), \"\") || \"\";\r\n    if (element.dataset.controller == \"\") {\r\n      // If there are no controllers left, remove the attribute\r\n      delete element.dataset.controller;\r\n    }\r\n\r\n    let substringIdentifierValueRegex = new RegExp(`(\\s|^)${this.identifier}\\\\..+?(\\s|$)`, \"g\");\r\n    element.dataset.target = element.dataset.target?.replaceAll(substringIdentifierValueRegex, \"\") || \"\";\r\n    delete element.dataset[camelCase(`${this.identifier}-target`)];\r\n    if (element.dataset.target == \"\") {\r\n      // If there are no targets left, remove the attribute\r\n      delete element.dataset.target;\r\n    }\r\n\r\n    element.dataset.action = element.dataset.target?.replaceAll(substringIdentifierValueRegex, \"\") || \"\";\r\n    delete element.dataset[camelCase(`${this.identifier}-action`)];\r\n    if (element.dataset.action == \"\") {\r\n      // If there are no actions left, remove the attribute\r\n      delete element.dataset.action;\r\n    }\r\n\r\n    // @ts-ignore\r\n    let values = this.constructor.values;\r\n    if (values) {\r\n      Object.keys(values).forEach(val => delete element.dataset[camelCase(`${this.identifier}-${val}-value`)]);\r\n    }\r\n\r\n    // @ts-ignore\r\n    let classes = this.constructor.classes;\r\n    if (classes) {\r\n      Object.keys(classes).forEach(val => delete element.dataset[camelCase(`${this.identifier}-${val}-class`)]);\r\n    }\r\n  }\r\n\r\n}\r\n","import {EphemeralController} from \"./utilities/ephemeral_controller\";\r\nimport {scrollToElement} from \"./utilities/scroll\";\r\n\r\nexport class ScrollIntoFocusController extends EphemeralController {\r\n\r\n  static values = {\r\n    behavior: String,\r\n    block: String,\r\n    inline: String,\r\n  };\r\n\r\n  declare behaviorValue: ScrollBehavior;\r\n  declare hasBehaviorValue: boolean;\r\n  declare blockValue: ScrollLogicalPosition;\r\n  declare hasBlockValue: boolean;\r\n  declare inlineValue: ScrollLogicalPosition;\r\n  declare hasInlineValue: boolean;\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      // Attempt smooth scrolling, with polyfill\r\n      scrollToElement(\r\n        this.element,\r\n        {\r\n          behavior: this.hasBehaviorValue ? this.behaviorValue : \"smooth\",\r\n          block: this.hasBlockValue ? this.blockValue : \"center\",\r\n          inline: this.hasInlineValue ? this.inlineValue : \"center\",\r\n        },\r\n      ).catch(() => this.element.scrollIntoView()); // Fallback to snap-scrolling\r\n      this.cleanupSelf();\r\n    });\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\nimport {getScrollParent, scrollToElement} from \"./utilities/scroll\";\r\n\r\nexport class ScrollToBottomController extends BaseController {\r\n\r\n  static values = {\r\n    mode: String,\r\n  };\r\n\r\n  declare modeValue: \"nearest\" | \"document\";\r\n  declare hasModeValue: boolean;\r\n\r\n\r\n  scroll(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    let mode = this.hasModeValue ? this.modeValue : \"document\";\r\n    let target: null | HTMLElement;\r\n    if (mode == \"document\") {\r\n      target = document.body;\r\n    } else {\r\n      target = getScrollParent(this.element as HTMLElement);\r\n    }\r\n    if (target == null) {\r\n      return;\r\n    }\r\n    scrollToElement(target!, {behavior: \"smooth\", block: \"end\"}).catch(() => target!.scrollIntoView(false));\r\n  }\r\n\r\n}\r\n\r\n","import {BaseController} from \"./base_controller\";\r\nimport {scrollToElement} from \"./utilities/scroll\";\r\n\r\nexport class ScrollToController extends BaseController {\r\n\r\n  static values = {\r\n    selector: String,\r\n    behavior: String,\r\n    block: String,\r\n    inline: String,\r\n  };\r\n\r\n  declare selectorValue: string;\r\n  declare behaviorValue: ScrollBehavior;\r\n  declare hasBehaviorValue: boolean;\r\n  declare blockValue: ScrollLogicalPosition;\r\n  declare hasBlockValue: boolean;\r\n  declare inlineValue: ScrollLogicalPosition;\r\n  declare hasInlineValue: boolean;\r\n\r\n\r\n  scroll() {\r\n    let target = document.querySelector(this.selectorValue);\r\n    if (!target) {\r\n      console.warn(`Could not find target for '${this.selectorValue}'`);\r\n      return;\r\n    }\r\n\r\n    scrollToElement(\r\n      target!,\r\n      {\r\n        behavior: this.hasBehaviorValue ? this.behaviorValue : \"smooth\",\r\n        block: this.hasBlockValue ? this.blockValue : \"center\",\r\n        inline: this.hasInlineValue ? this.inlineValue : \"center\",\r\n      },\r\n    ).catch(() => target!.scrollIntoView()); // Fallback to snap-scrolling\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\nimport {getScrollParent, scrollToElement} from \"./utilities/scroll\";\n\nexport class ScrollToTopController extends BaseController {\n\n  static values = {\n    mode: String,\n  };\n\n  declare modeValue: \"nearest\" | \"document\";\n  declare hasModeValue: boolean;\n\n\n  scroll(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    let mode = this.hasModeValue ? this.modeValue : \"document\";\n    let target: null | HTMLElement;\n    if (mode == \"document\") {\n      target = document.body;\n    } else {\n      target = getScrollParent(this.element as HTMLElement);\n    }\n    if (target == null) {\n      return;\n    }\n    scrollToElement(target!, {behavior: \"smooth\", block: \"start\"}).catch(() => target!.scrollIntoView(false));\n  }\n\n}\n\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class SelfDestructController extends BaseController {\r\n\r\n  static values = {seconds: Number};\r\n\r\n  declare readonly secondsValue: number;\r\n  timeout: null | ReturnType<typeof setTimeout> = null;\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      // Only start countdown on first paint\r\n      this.timeout = setTimeout(() => this.element.remove(), this.secondsValue * 1000);\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.timeout) {\r\n      clearTimeout(this.timeout);\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class StickyController extends BaseController {\r\n\r\n  static classes = [\"stuck\"];\r\n  static values = {\r\n    mode: String,\r\n  };\r\n\r\n  declare readonly hasStuckClass: boolean;\r\n  declare readonly stuckClass: string;\r\n  declare readonly hasModeValue: \"top\" | \"bottom\";\r\n  declare readonly modeValue: \"top\" | \"bottom\";\r\n\r\n  _magicElement: HTMLDivElement | null = null;\r\n\r\n  get _mode(): \"top\" | \"bottom\" {\r\n    return this.hasModeValue ? this.modeValue : \"top\";\r\n  }\r\n\r\n  createMagicElement() {\r\n    // Magic element placed next to the sticky el that acts as an external border.\r\n    // When the magic element is off the page, we know that the sticky el is \"stuck\"\r\n    if (this._magicElement !== null) {\r\n      return;\r\n    }\r\n\r\n    this._magicElement = document.createElement(\"div\");\r\n    switch (this._mode) {\r\n      case \"top\":\r\n        this.element.insertAdjacentElement(\"beforebegin\", this._magicElement);\r\n        break;\r\n      case \"bottom\":\r\n        this.element.insertAdjacentElement(\"afterend\", this._magicElement);\r\n        break;\r\n    }\r\n  }\r\n\r\n  connect() {\r\n    let element = this.element as HTMLElement;\r\n    this.createMagicElement();\r\n\r\n    const observer = new IntersectionObserver(entries => {\r\n      entries.forEach(entry => {\r\n        if (entry.target !== this._magicElement) {\r\n          return;\r\n        }\r\n        if (entry.intersectionRatio === 0) {\r\n          element.classList.add(this.hasStuckClass ? this.stuckClass : \"stuck\");\r\n        } else if (entry.intersectionRatio === 1) {\r\n          element.classList.remove(this.hasStuckClass ? this.stuckClass : \"stuck\");\r\n        }\r\n      });\r\n\r\n    }, {\r\n      threshold: [0, 1],\r\n    });\r\n    observer.observe(this._magicElement!);\r\n  }\r\n\r\n}\r\n","import {EphemeralController} from \"./utilities/ephemeral_controller\";\r\n\r\nexport class TeleportController extends EphemeralController {\r\n\r\n  static values = {target: String, insert: String, immediate: Boolean};\r\n\r\n  declare readonly immediateValue: boolean;\r\n  declare readonly hasImmediateValue: boolean;\r\n  declare readonly targetValue: string;\r\n  declare readonly hasInsertValue: boolean;\r\n  declare readonly insertValue: InsertPosition | \"replaceOuter\" | \"replaceInner\" | \"prepend\" | \"append\";\r\n\r\n  connect() {\r\n    if (!this.hasInsertValue) {\r\n      throw new Error(\"`insert` value was not specified\");\r\n    }\r\n\r\n    requestAnimationFrame(() => {\r\n      if (this.hasImmediateValue && this.immediateValue) {\r\n        this.execute();\r\n      }\r\n    });\r\n  }\r\n\r\n  execute(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    let destination = document.querySelector(this.targetValue);\r\n\r\n    if (destination == null) {\r\n      this.element.dispatchEvent(new CustomEvent(\"teleport:error\", {bubbles: true, cancelable: true}));\r\n      return;\r\n    }\r\n\r\n    let copy = this.element.cloneNode(true) as HTMLElement;\r\n    this.cleanup(copy);\r\n\r\n    switch (this.insertValue) {\r\n      case \"beforebegin\":\r\n      case \"beforeend\":\r\n      case \"afterend\":\r\n      case \"afterbegin\":\r\n        destination.insertAdjacentHTML(this.insertValue, copy.outerHTML);\r\n        break;\r\n      case \"replaceOuter\":\r\n        destination.outerHTML = copy.outerHTML;\r\n        break;\r\n      case \"replaceInner\":\r\n        destination.innerHTML = copy.outerHTML;\r\n        break;\r\n      case \"prepend\":\r\n        destination.insertAdjacentHTML(\"afterbegin\", copy.outerHTML);\r\n        break;\r\n      case \"append\":\r\n        destination.insertAdjacentHTML(\"beforeend\", copy.outerHTML);\r\n        break;\r\n      default:\r\n        throw new Error(\"`insert` value was not specified\");\r\n\r\n    }\r\n    this.element.remove();\r\n  }\r\n\r\n}\r\n","import {useClickOutside, useHover} from \"stimulus-use\";\nimport {BaseController} from \"./base_controller\";\n\nexport type ToggleClassMode = \"on\" | \"off\" | \"toggle\"\n\nexport class ToggleClassController extends BaseController {\n\n  static targets = [\"toggle\"];\n  static values = {\n    class: String,\n    mouseEnter: String,\n    mouseLeave: String,\n    clickAway: Boolean,\n    initial: String,\n  };\n\n  declare readonly toggleTargets: HTMLElement[];\n\n  declare readonly classValue: string;\n  declare readonly hasClassValue: boolean;\n\n  declare readonly mouseEnterValue: ToggleClassMode;\n  declare readonly hasMouseEnterValue: boolean;\n\n  declare readonly mouseLeaveValue: ToggleClassMode;\n  declare readonly hasMouseLeaveValue: boolean;\n\n  declare readonly clickAwayValue: boolean;\n  declare readonly hasClickAwayValue: boolean;\n\n  declare readonly initialValue: \"on\" | \"off\";\n  declare readonly hasInitialValue: boolean;\n\n  connect() {\n    if (!this.hasClassValue) {\n      throw new Error(\"data-toggle-class-class-value must not be empty\");\n    }\n\n    if (this.hasMouseEnterValue || this.hasMouseLeaveValue) {\n      useHover(this);\n    }\n\n    if (this.hasClickAwayValue && this.clickAwayValue) {\n      useClickOutside(this);\n    }\n\n    requestAnimationFrame(() => {\n      if (this.hasInitialValue) {\n        if (this.initialValue === \"on\") {\n          this.toggleTargets.forEach((target) => this.elementOn(target));\n        } else {\n          this.toggleTargets.forEach((target) => this.elementOff(target));\n        }\n      }\n    });\n  }\n\n  clickOutside() {\n    this.toggleTargets.forEach((target) => {\n      if (this.elementWasToggled(target)) {\n        this.elementToggleStatus(target);\n        this.elementToggle(target);\n      }\n    });\n  }\n\n  mouseEnter() {\n    if (this.hasMouseEnterValue) {\n      switch (this.mouseEnterValue) {\n        case \"on\":\n          this.on();\n          break;\n        case \"off\":\n          this.off();\n          break;\n        case \"toggle\":\n          this.toggle();\n          break;\n      }\n    }\n    return {};\n  }\n\n  mouseLeave() {\n    if (this.hasMouseLeaveValue) {\n      switch (this.mouseLeaveValue) {\n        case \"on\":\n          this.on();\n          break;\n        case \"off\":\n          this.off();\n          break;\n        case \"toggle\":\n          this.toggle();\n          break;\n      }\n    }\n    return {};\n  }\n\n  on(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementOn(target);\n    });\n  }\n\n  off(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementOff(target);\n    });\n  }\n\n  toggle(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementToggle(target);\n    });\n  }\n\n  private elementWasToggled(el: HTMLElement): boolean {\n    return el.dataset.toggled == \"true\";\n  }\n\n  private elementToggleStatus(el: HTMLElement) {\n    if (this.elementWasToggled(el)) {\n      delete el.dataset.toggled;\n    } else {\n      el.dataset.toggled = \"true\";\n    }\n  }\n\n  private elementToggle(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass));\n  }\n\n  private elementOn(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass, true));\n  }\n\n  private elementOff(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass, false));\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\nimport {isHTMLLinkElement} from \"./utilities/elements\";\nimport {isTurboFrame} from \"./utilities/turbo\";\n\nexport class TurboFrameRCController extends BaseController {\n\n  static values = {\n    frameId: String,\n    src: String,\n    loadingMessage: String,\n  };\n\n  declare readonly frameIdValue: string;\n  declare readonly srcValue: string;\n  declare readonly hasSrcValue: boolean;\n  declare readonly loadingMessageValue: string;\n  declare readonly hasLoadingMessageValue: boolean;\n\n  toggle(event?: Event | null) {\n    if (event) {\n      event.preventDefault();\n    }\n    let frame = this.getFrame();\n    let frameSrc = frame.src;\n    if (frameSrc == null || frameSrc !== this.getSrc()) {\n      this.setSrc();\n    } else {\n      this.clear();\n    }\n  }\n\n  setSrc(event?: Event | null) {\n    if (event) {\n      event.preventDefault();\n    }\n    let frame = this.getFrame();\n    if (this.hasLoadingMessageValue) {\n      frame.innerHTML = this.loadingMessageValue;\n    }\n\n    frame.src = this.getSrc();\n  }\n\n  clear(event?: Event | null) {\n    if (event) {\n      event.preventDefault();\n    }\n    let frame = this.getFrame();\n    frame.src = \"\";\n    frame.innerHTML = \"\";\n  }\n\n  private getFrame(): TurboFrame {\n    let frame = document.getElementById(`${this.frameIdValue}`);\n    if (frame == null) {\n      throw new Error(`Could not find frame with ID '${this.frameIdValue}'`);\n    }\n    if (!isTurboFrame(frame)) {\n      throw new Error(`Element targeted by ID '${this.frameIdValue}'`);\n    } else {\n      return frame;\n    }\n  }\n\n  private getSrc(): string {\n    let element = this.element as HTMLElement;\n    if (this.hasSrcValue) {\n      return this.srcValue;\n    } else if (isHTMLLinkElement(element)) {\n      return element.href;\n    } else {\n      throw new Error(\"No link given to drive frame to\");\n    }\n  }\n\n}\n","export function isTurboFrame(element: HTMLElement): element is TurboFrame {\r\n  return element.nodeName == \"TURBO-FRAME\";\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class WordCountController extends BaseController {\r\n\r\n  static targets = [\"input\", \"output\"];\r\n  static values = {min: Number, max: Number};\r\n  static classes = [\"error\"];\r\n\r\n  declare readonly inputTarget: HTMLInputElement | HTMLTextAreaElement;\r\n  declare readonly outputTarget: HTMLElement;\r\n  declare minValue: number;\r\n  declare hasMinValue: boolean;\r\n  declare maxValue: number;\r\n  declare hasMaxValue: boolean;\r\n  declare errorClass: string;\r\n  declare hasErrorClass: boolean;\r\n\r\n  boundHandler = this.updateWordCount.bind(this);\r\n\r\n  connect() {\r\n    this.updateWordCount();\r\n    this.inputTarget.addEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  disconnect() {\r\n    this.inputTarget.removeEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  updateWordCount() {\r\n    let wordCount = 0;\r\n    let textAreaValue = this.inputTarget.value;\r\n    let matches = textAreaValue.match(/\\S+/g);\r\n    wordCount = (matches && matches.length) || 0;\r\n    this.outputTarget.innerText = wordCount.toString();\r\n    if (this.hasErrorClass) {\r\n      if (this.isValidCount(wordCount)) {\r\n        this.outputTarget.classList.remove(this.errorClass);\r\n      } else {\r\n        this.outputTarget.classList.add(this.errorClass);\r\n      }\r\n    }\r\n  }\r\n\r\n  isValidCount(count: number) {\r\n    let min = 0;\r\n    let max = 99999;\r\n\r\n    if (this.hasMinValue) {\r\n      min = this.minValue;\r\n    }\r\n\r\n    if (this.hasMaxValue) {\r\n      max = this.maxValue;\r\n    }\r\n\r\n    return count >= min && count <= max;\r\n  }\r\n\r\n}\r\n"],"names":["BaseController","Controller","constructor","context","super","Proxy","this","get","obj","prop","returnVal","Reflect","self","test","logProperty","toString","apply","target","thisArg","argArray","log","args","dispatch","element","eventName","options","bubbles","cancelable","detail","event","CustomEvent","dispatchEvent","functionName","application","debug","logger","console","groupCollapsed","identifier","groupEnd","AppearanceController","initialize","_handleVisibility","bind","connect","window","addEventListener","document","disconnect","removeEventListener","appear","away","_documentIsActive","visibilityState","hasFocus","AsyncBlockController","loadContent","el","hasReplaceTarget","replaceTarget","fetch","endpointValue","then","response","text","html","newEl","createElement","innerHTML","replaceWith","catch","err","finally","endpoint","String","AutoSubmitFormController","handler","querySelectorAll","forEach","boundHandler","e","method","controller","methodName","composeEventName","name","eventPrefix","composedName","extendedEvent","type","composed","Object","assign","originalEvent","defaultOptions","useIntersection","targetElement","controllerDisconnect","observer","IntersectionObserver","entries","entry","isIntersecting","isVisible","call","appearEvent","dispatchAppear","disappearEvent","dispatchDisappear","observe","unobserve","[object Object]","events","onlyVisible","StimulusUse","_a","_b","_c","controllerId","stimulusUseDebug","id","dataset","controllerInitialize","controllerConnect","UseHover","onEnter","onLeave","hover","enhanceController","UseMutation","error","handleError","mutation","MutationObserver","useWindowResize","callback","innerWidth","innerHeight","payload","height","Infinity","width","debounce","fn","wait","timeoutId","arguments","clearTimeout","setTimeout","AutosizeController","style","resize","boxSizing","requestAnimationFrame","windowResize","autosize","offset","offsetHeight","clientHeight","scrollHeight","CharCountController","updateCharCount","inputTarget","charCount","value","length","outputTarget","innerText","hasErrorClass","isValidCount","classList","remove","errorClass","add","count","min","max","hasMinValue","minValue","hasMaxValue","maxValue","Number","CheckboxSelectAllController","checked","checkboxTargets","filter","checkbox","unchecked","toggle","refresh","hasSelectAllTarget","selectAllTarget","preventDefault","checkboxesCount","checkboxesCheckedCount","indeterminate","ClipboardController","supported","queryCommandSupported","hasRemoveUnusedValue","removeUnusedValue","hasFallbackTarget","fallbackTarget","hasCopyTarget","copyTarget","select","sourceTarget","copy","execCommand","isHTMLLinkElement","nodeName","isHTMLFormElement","isHTMLInputElement","removeUnused","Boolean","ConfirmController","message","hasMessageValue","messageValue","confirm","Error","ConfirmNavigationController","confirmMessage","onbeforeunload","handlePopstate","DebugController","testTargets","DetectDirtyController","initialValue","isInputElement","isCheckable","restore","setAttribute","removeAttribute","tagName","DisableInputsController","hasDisablerTarget","disablerTarget","disableInputs","enableInputs","shouldClear","hasClearValue","clearValue","disableTargets","_","disabled","clear","DismissableController","dismiss","EmptyDomController","useMutation","childList","checkEmpty","mutate","children","hasScopeSelectorValue","scopeSelectorValue","hasNotEmptyClass","notEmptyClass","split","klass","hasEmptyClass","emptyClass","scopeSelector","EnableInputsController","hasEnablerTarget","enablerTarget","enableTargets","FallbackImageController","onerror","hasPlaceholderValue","src","placeholderValue","display","placeholder","FormSaveController","formID","hasIdValue","idValue","elementID","formIdentifier","location","href","formElements","elements","formData","data","restoreOnLoad","hasRestoreOnLoadValue","restoreOnLoadValue","clearOnSubmit","hasClearOnSubmitValue","clearOnSubmitValue","_clear","localStorage","removeItem","save","setItem","JSON","stringify","getItem","savedData","parse","IntersectionController","threshold","hasThresholdValue","thresholdValue","map","val","parseFloat","trim","disappear","LazyBlockController","smoothSupported","documentElement","smoothPolyfilled","scrollToElement","behavior","block","inline","async","polyfill","polyfillSmooth","scrollIntoView","getScrollParent","node","overflowY","getComputedStyle","parentElement","body","LightboxImageController","hasSrcValue","srcValue","srcSet","hasSrcSetValue","srcSetValue","srcset","sizes","hasSizesValue","sizesValue","modalClassName","hasModalClass","modalClass","imageClassName","hasImageClass","imageClass","open","close","_dialog","image","className","appendChild","insertAdjacentElement","dialogPolyfill","registerDialog","showModal","LimitedSelectionCheckboxesController","handleInputs","inputTargets","boundHandleInputs","tickedInputs","reduce","previousValue","maxSelections","hasErrorTarget","errorTarget","NestedFormController","wrapperClass","hasWrapperSelectorValue","wrapperClassValue","insertMode","hasInsertModeValue","insertModeValue","checkStructure","content","templateTarget","replace","generateID","targetTarget","insertAdjacentHTML","wrapper","closest","newRecord","destroyInput","querySelector","Date","getTime","Math","random","slice","indexOf","PasswordConfirmController","checkPasswordsMatch","passwordTargets","boundCheckPasswordsMatch","allPasswordsMatch","values","Set","has","size","PasswordPeekController","peak","passwordTarget","hide","ResponsiveIframeWrapperController","messageReceived","boundMessageReceived","hasOwnProperty","ResponsiveIframeBodyController","top","debounces","func","postUpdate","getHeight","parent","postMessage","EphemeralController","cleanupSelf","cleanup","replaceAll","RegExp","substringIdentifierValueRegex","camelCase","action","keys","classes","ScrollIntoFocusController","hasBehaviorValue","behaviorValue","hasBlockValue","blockValue","hasInlineValue","inlineValue","ScrollToBottomController","scroll","hasModeValue","modeValue","mode","ScrollToController","selectorValue","warn","selector","ScrollToTopController","SelfDestructController","timeout","secondsValue","seconds","StickyController","_mode","createMagicElement","_magicElement","intersectionRatio","hasStuckClass","stuckClass","TeleportController","hasInsertValue","hasImmediateValue","immediateValue","execute","destination","targetValue","cloneNode","insertValue","outerHTML","insert","immediate","ToggleClassController","hasClassValue","hasMouseEnterValue","hasMouseLeaveValue","useHover","hasClickAwayValue","clickAwayValue","onEvent","contains","rect","getBoundingClientRect","windowHeight","windowWidth","clientWidth","left","isElementInViewport","clickOutside","clickOutsideEvent","useClickOutside","hasInitialValue","toggleTargets","elementOn","elementOff","elementWasToggled","elementToggleStatus","elementToggle","mouseEnter","mouseEnterValue","on","off","mouseLeave","mouseLeaveValue","toggled","classValue","class","clickAway","initial","TurboFrameRCController","frameSrc","getFrame","getSrc","setSrc","frame","hasLoadingMessageValue","loadingMessageValue","getElementById","frameIdValue","frameId","loadingMessage","WordCountController","updateWordCount","wordCount","matches","match"],"mappings":"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"}