{"version":3,"file":"stimulus-library.module.js","sources":["../src/base_controller.ts","../src/appearance_controller.ts","../src/async_block_controller.ts","../src/auto_submit_form_controller.ts","../node_modules/stimulus-use/dist/support/index.js","../node_modules/stimulus-use/dist/use-intersection/use-intersection.js","../node_modules/stimulus-use/dist/use-click-outside/use-click-outside.js","../node_modules/stimulus-use/dist/stimulus_use.js","../node_modules/stimulus-use/dist/use-hover/use-hover.js","../node_modules/stimulus-use/dist/use-mutation/use-mutation.js","../node_modules/stimulus-use/dist/use-window-resize/use-window-resize.js","../node_modules/stimulus-use/dist/use-debounce/use-debounce.js","../src/autosize_controller.ts","../src/char_count_controller.ts","../src/checkbox_select_all_controller.ts","../src/clipboard_controller.ts","../src/utilities/elements.ts","../src/confirm_controller.ts","../src/confirm_navigation_controller.ts","../src/debug_controller.ts","../src/detect_dirty_controller.ts","../src/disable_inputs_controller.ts","../src/dismissable_controller.ts","../src/empty_dom_controller.ts","../src/enable_inputs_controller.ts","../src/fallback_image_controller.ts","../src/form_save_controller.ts","../src/intersection_controller.ts","../src/lazy_block_controller.ts","../src/utilities/scroll.ts","../src/lightbox_image_controller.ts","../src/limited_selection_checkboxes_controller.ts","../src/nested_form_controller.ts","../src/password_confirm_controller.ts","../src/password_peek_controller.ts","../src/responsive_iframe_controller.ts","../src/utilities/ephemeral_controller.ts","../src/scroll_into_focus_controller.ts","../src/scroll_to_bottom_controller.ts","../src/scroll_to_controller.ts","../src/scroll_to_top_controller.ts","../src/self_destruct_controller.ts","../src/sticky_controller.ts","../src/teleport_controller.ts","../src/toggle_class_controller.ts","../src/turbo_frame_rc_controller.ts","../src/utilities/turbo.ts","../src/word_count_controller.ts"],"sourcesContent":["import {Context, Controller} from \"stimulus\";\n\nexport class BaseController extends Controller {\n\n  constructor(context: Context) {\n    super(context);\n    return new Proxy(this, {\n      get: (obj, prop) => {\n        let returnVal = Reflect.get(obj, prop);\n        let self = this;\n        if (logProperty(prop.toString())) {\n          if (typeof returnVal == \"function\") {\n            return new Proxy(returnVal, {\n              apply(target: any, thisArg: any, argArray?: any): any {\n                self.log(prop.toString(), {\n                  args: argArray,\n                });\n                return Reflect.apply(target, thisArg, argArray);\n              },\n            });\n          } else {\n            this.log(prop.toString());\n          }\n        }\n        return returnVal;\n      },\n    });\n  }\n\n  dispatch(element: HTMLElement, eventName: string, options: CustomEventInit = {bubbles: true, cancelable: true, detail: {target: element}}) {\n    let event = new CustomEvent(eventName, options);\n    element.dispatchEvent(event);\n  }\n\n  log(functionName: string, args: {} = {}): void {\n    // @ts-ignore\n    if (!this.application.debug) {\n      return;\n    }\n    let logger = console;\n    logger.groupCollapsed(`%c${this.identifier} %c#${functionName}`, \"color: #3B82F6\", \"color: unset\");\n    logger.log({\n      element: this.element,\n      ...args,\n    });\n    logger.groupEnd();\n  }\n\n}\n\nfunction logProperty(prop: string): boolean {\n  switch (prop) {\n    case \"application\":\n    case \"element\":\n    case \"constructor\":\n    case \"initialize\":\n    case \"log\":\n    case \"data\":\n    case \"valueDescriptorMap\":\n    case \"identifier\":\n      return false;\n  }\n\n  if (/^_.*?$/.test(prop)) {\n    return false;\n  }\n  if (/^.*?Target(s)?$/.test(prop)) {\n    return false;\n  }\n  if (/^.*?Value$/.test(prop)) {\n    return false;\n  }\n  if (/^.*?ValueChanged$/.test(prop)) {\n    return false;\n  }\n  if (/^.*?Class$/.test(prop)) {\n    return false;\n  }\n\n  return true;\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class AppearanceController extends BaseController {\r\n\r\n  initialize() {\r\n    this._handleVisibility = this._handleVisibility.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    window.addEventListener(\"focus\", this._handleVisibility);\r\n    window.addEventListener(\"blur\", this._handleVisibility);\r\n    document.addEventListener(\"visibilitychange\", this._handleVisibility);\r\n    this._handleVisibility();\r\n  }\r\n\r\n  disconnect() {\r\n    window.removeEventListener(\"focus\", this._handleVisibility);\r\n    window.removeEventListener(\"blur\", this._handleVisibility);\r\n    document.removeEventListener(\"visibilitychange\", this._handleVisibility);\r\n  }\r\n\r\n  appear() {\r\n    this.dispatch(this.element as HTMLElement, \"appearance:appear\");\r\n  }\r\n\r\n  away() {\r\n    this.dispatch(this.element as HTMLElement, \"appearance:away\");\r\n  }\r\n\r\n  _handleVisibility(): any {\r\n    this._documentIsActive() ? this.appear() : this.away();\r\n  }\r\n\r\n  _documentIsActive() {\r\n    return document.visibilityState == \"visible\" && document.hasFocus();\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\n\nexport class AsyncBlockController extends BaseController {\n  static targets = [\"replace\"];\n  static values = {endpoint: String, errorMessage: String, selector: String};\n\n  declare readonly replaceTarget: HTMLElement;\n  declare readonly hasReplaceTarget: boolean;\n  declare readonly endpointValue: string;\n\n  declare readonly hasSelectorValue: boolean;\n  declare readonly selectorValue: string;\n\n  declare readonly hasErrorMessageValue: boolean;\n  declare readonly errorMessageValue: string;\n\n  get _errorMessage(): string {\n    return this.hasErrorMessageValue ? this.errorMessageValue : \"This content failed to load\";\n  }\n\n  // This is a simple controller to load a block of content when the page loads.\n  // It should be used to give a quick initial response before calling out to an\n  // an AJAX endpoint to do some expensive work.\n  connect() {\n    this.loadContent();\n  }\n\n  loadContent() {\n    let el = (this.hasReplaceTarget ? this.replaceTarget : this.element) as HTMLElement;\n    fetch(this.endpointValue)\n    .then((response) => response.text())\n    .then((html) => {\n      let newEl = document.createElement(\"div\");\n      newEl.innerHTML = html;\n      if (this.hasSelectorValue) {\n        let selectedContent = newEl.querySelectorAll(this.selectorValue);\n        el.replaceWith(...selectedContent);\n      } else {\n        el.replaceWith(...newEl.children);\n      }\n      // Trigger event to show block has loaded\n      let event = new CustomEvent(\"ajax:success\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    })\n    .catch(err => {\n      el.replaceWith(this._errorMessage);\n\n      let event = new CustomEvent(\"ajax:error\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    })\n    .finally(() => {\n      let event = new CustomEvent(\"ajax:complete\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    });\n  }\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class AutoSubmitFormController extends BaseController {\n\n  private boundHandler = this.handler.bind(this);\n\n  connect() {\n    (this.element as HTMLElement).querySelectorAll(\"input, select, textarea\").forEach(el => el.addEventListener(\"change\", this.boundHandler));\n  }\n\n  disconnect() {\n    (this.element as HTMLElement).querySelectorAll(\"input, select, textarea\").forEach(el => el.removeEventListener(\"change\", this.boundHandler));\n  }\n\n  private handler(e: Event) {\n    // this.element.submit()\n    // Moved to this to support remote forms and CSRF properly\n    this.element.dispatchEvent(\n      new CustomEvent(\"submit\", {\n        bubbles: true,\n        cancelable: true,\n      }),\n    );\n  }\n}\n","export const method = (controller, methodName) => {\n    const method = controller[methodName];\n    if (typeof method == 'function') {\n        return method;\n    }\n    else {\n        return (...args) => { };\n    }\n};\nexport const composeEventName = (name, controller, eventPrefix) => {\n    let composedName = name;\n    if (eventPrefix === true) {\n        composedName = `${controller.identifier}:${name}`;\n    }\n    else if (typeof eventPrefix === 'string') {\n        composedName = `${eventPrefix}:${name}`;\n    }\n    return composedName;\n};\nexport const extendedEvent = (type, event, detail) => {\n    const { bubbles, cancelable, composed } = event || { bubbles: true, cancelable: true, composed: true };\n    if (event) {\n        Object.assign(detail, { originalEvent: event });\n    }\n    const customEvent = new CustomEvent(type, {\n        bubbles,\n        cancelable,\n        composed,\n        detail,\n    });\n    return customEvent;\n};\nexport function isElementInViewport(el) {\n    const rect = el.getBoundingClientRect();\n    const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n    const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n    const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n    const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) >= 0);\n    return (vertInView && horInView);\n}\n//# sourceMappingURL=index.js.map","import { method, extendedEvent, composeEventName } from '../support/index';\nconst defaultOptions = {\n    dispatchEvent: true,\n    eventPrefix: true,\n};\nexport const useIntersection = (controller, options = {}) => {\n    const { dispatchEvent, eventPrefix } = Object.assign({}, defaultOptions, options);\n    const targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n    const callback = (entries) => {\n        const [entry] = entries;\n        if (entry.isIntersecting) {\n            dispatchAppear(entry);\n        }\n        else if (controller.isVisible) {\n            dispatchDisappear(entry);\n        }\n    };\n    const dispatchAppear = (entry) => {\n        controller.isVisible = true;\n        method(controller, 'appear').call(controller, entry);\n        // emit a custom \"appear\" event\n        if (dispatchEvent) {\n            const eventName = composeEventName('appear', controller, eventPrefix);\n            const appearEvent = extendedEvent(eventName, null, { controller, entry });\n            targetElement.dispatchEvent(appearEvent);\n        }\n    };\n    const dispatchDisappear = (entry) => {\n        controller.isVisible = false;\n        method(controller, 'disappear').call(controller, entry);\n        // emit a custom \"disappear\" event\n        if (dispatchEvent) {\n            const eventName = composeEventName('disappear', controller, eventPrefix);\n            const disappearEvent = extendedEvent(eventName, null, { controller, entry });\n            targetElement.dispatchEvent(disappearEvent);\n        }\n    };\n    // keep a copy of the current disconnect() function of the controller\n    // to support composing several behaviors\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    const observer = new IntersectionObserver(callback, options);\n    const observe = () => {\n        observer.observe(targetElement);\n    };\n    const unobserve = () => {\n        observer.unobserve(targetElement);\n    };\n    Object.assign(controller, {\n        isVisible: false,\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-intersection.js.map","import { composeEventName, extendedEvent, isElementInViewport } from '../support/index';\nconst defaultOptions = {\n    events: ['click', 'touchend'],\n    onlyVisible: true,\n    dispatchEvent: true,\n    eventPrefix: true,\n};\nexport const useClickOutside = (controller, options = {}) => {\n    const { onlyVisible, dispatchEvent, events, eventPrefix } = Object.assign({}, defaultOptions, options);\n    const onEvent = (event) => {\n        const targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        if (targetElement.contains(event.target) || (!isElementInViewport(targetElement) && onlyVisible)) {\n            return;\n        }\n        // call the clickOutside method of the Stimulus controller\n        if (controller.clickOutside) {\n            controller.clickOutside(event);\n        }\n        // emit a custom event\n        if (dispatchEvent) {\n            const eventName = composeEventName('click:outside', controller, eventPrefix);\n            const clickOutsideEvent = extendedEvent(eventName, event, { controller });\n            targetElement.dispatchEvent(clickOutsideEvent);\n        }\n    };\n    const observe = () => {\n        events === null || events === void 0 ? void 0 : events.forEach(event => {\n            window.addEventListener(event, onEvent, false);\n        });\n    };\n    const unobserve = () => {\n        events === null || events === void 0 ? void 0 : events.forEach(event => {\n            window.removeEventListener(event, onEvent, false);\n        });\n    };\n    // keep a copy of the current disconnect() function of the controller\n    // to support composing several behaviors\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    Object.assign(controller, {\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-click-outside.js.map","const defaultOptions = {\n    debug: false,\n    logger: console\n};\nexport class StimulusUse {\n    constructor(controller, options = {}) {\n        var _a, _b, _c;\n        this.log = (functionName, args) => {\n            if (!this.debug)\n                return;\n            this.logger.groupCollapsed(`%c${this.controller.identifier} %c#${functionName}`, 'color: #3B82F6', 'color: unset');\n            this.logger.log(Object.assign({ controllerId: this.controllerId }, args));\n            this.logger.groupEnd();\n        };\n        this.debug = (_b = (_a = options === null || options === void 0 ? void 0 : options.debug) !== null && _a !== void 0 ? _a : controller.application.stimulusUseDebug) !== null && _b !== void 0 ? _b : defaultOptions.debug;\n        this.logger = (_c = options === null || options === void 0 ? void 0 : options.logger) !== null && _c !== void 0 ? _c : defaultOptions.logger;\n        this.controller = controller;\n        this.controllerId = controller.element.id || controller.element.dataset.id;\n        // make copies of lifecycle functions\n        this.controllerInitialize = controller.initialize.bind(controller);\n        this.controllerConnect = controller.connect.bind(controller);\n        this.controllerDisconnect = controller.disconnect.bind(controller);\n    }\n}\n//# sourceMappingURL=stimulus_use.js.map","import { StimulusUse } from '../stimulus_use';\nimport { method } from '../support/index';\nexport class UseHover extends StimulusUse {\n    constructor(controller, options = {}) {\n        super(controller, options);\n        this.observe = () => {\n            this.targetElement.addEventListener('mouseenter', this.onEnter);\n            this.targetElement.addEventListener('mouseleave', this.onLeave);\n        };\n        this.unobserve = () => {\n            this.targetElement.removeEventListener('mouseenter', this.onEnter);\n            this.targetElement.removeEventListener('mouseleave', this.onLeave);\n        };\n        this.onEnter = () => {\n            method(this.controller, 'mouseEnter').call(this.controller);\n            this.log('mouseEnter', { hover: true });\n        };\n        this.onLeave = () => {\n            method(this.controller, 'mouseLeave').call(this.controller);\n            this.log('mouseLeave', { hover: false });\n        };\n        this.targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        this.controller = controller;\n        this.enhanceController();\n        this.observe();\n    }\n    enhanceController() {\n        const controllerDisconnect = this.controller.disconnect.bind(this.controller);\n        const disconnect = () => {\n            this.unobserve();\n            controllerDisconnect();\n        };\n        Object.assign(this.controller, { disconnect });\n    }\n}\nexport const useHover = (controller, options = {}) => {\n    const observer = new UseHover(controller, options);\n    return [observer.observe, observer.unobserve];\n};\n//# sourceMappingURL=use-hover.js.map","import { StimulusUse } from '../stimulus_use';\nimport { method } from '../support/index';\nexport class UseMutation extends StimulusUse {\n    constructor(controller, options = {}) {\n        super(controller, options);\n        this.observe = () => {\n            try {\n                this.observer.observe(this.targetElement, this.options);\n            }\n            catch (error) {\n                this.controller.application.handleError(error, \"At a minimum, one of childList, attributes, and/or characterData must be true\", {});\n            }\n        };\n        this.unobserve = () => {\n            this.observer.disconnect();\n        };\n        this.mutation = (entries) => {\n            method(this.controller, 'mutate').call(this.controller, entries);\n            this.log('mutate', { entries });\n        };\n        this.targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        this.controller = controller;\n        this.options = options;\n        this.observer = new MutationObserver(this.mutation);\n        this.enhanceController();\n        this.observe();\n    }\n    enhanceController() {\n        const controllerDisconnect = this.controller.disconnect.bind(this.controller);\n        const disconnect = () => {\n            this.unobserve();\n            controllerDisconnect();\n        };\n        Object.assign(this.controller, { disconnect });\n    }\n}\nexport const useMutation = (controller, options = {}) => {\n    const observer = new UseMutation(controller, options);\n    return [observer.observe, observer.unobserve];\n};\n//# sourceMappingURL=use-mutation.js.map","import { method } from '../support/index';\nexport const useWindowResize = (controller) => {\n    const callback = (event) => {\n        const { innerWidth, innerHeight } = window;\n        const payload = {\n            height: innerHeight || Infinity,\n            width: innerWidth || Infinity,\n            event\n        };\n        method(controller, 'windowResize').call(controller, payload);\n    };\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    const observe = () => {\n        window.addEventListener('resize', callback);\n        callback();\n    };\n    const unobserve = () => {\n        window.removeEventListener('resize', callback);\n    };\n    Object.assign(controller, {\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-window-resize.js.map","import { Controller } from 'stimulus';\nclass DebounceController extends Controller {\n}\nDebounceController.debounces = [];\nconst defaultWait = 200;\nconst debounce = (fn, wait = defaultWait) => {\n    let timeoutId = null;\n    return function () {\n        const args = arguments;\n        const context = this;\n        const callback = () => fn.apply(context, args);\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(callback, wait);\n    };\n};\nexport const useDebounce = (controller, options) => {\n    var _a;\n    const constructor = controller.constructor;\n    (_a = constructor.debounces) === null || _a === void 0 ? void 0 : _a.forEach((func) => {\n        if (typeof func === \"string\") {\n            controller[func] = debounce(controller[func], options === null || options === void 0 ? void 0 : options.wait);\n        }\n        if (typeof func === \"object\") {\n            const { name, wait } = func;\n            if (!name)\n                return;\n            controller[name] = debounce(controller[name], wait || (options === null || options === void 0 ? void 0 : options.wait));\n        }\n    });\n};\n//# sourceMappingURL=use-debounce.js.map","import {useWindowResize} from \"stimulus-use\";\nimport {BaseController} from \"./base_controller\";\n\nexport class AutosizeController extends BaseController {\n\n  private boundHandler = this.handler.bind(this);\n\n  connect() {\n    let target = this.element as HTMLTextAreaElement;\n    target.style.resize = \"none\";\n    target.style.boxSizing = \"border-box\";\n    target.addEventListener(\"input\", this.boundHandler);\n    target.addEventListener(\"focus\", this.boundHandler);\n    useWindowResize(this);\n    requestAnimationFrame(this.boundHandler);\n  }\n\n  windowResize() {\n    this.handler();\n  }\n\n  private handler() {\n    this.autosize(this.element as HTMLTextAreaElement);\n  };\n\n  private autosize(element: HTMLTextAreaElement) {\n    let offset = element.offsetHeight - element.clientHeight;\n    element.style.height = \"auto\";\n    element.style.height = element.scrollHeight + offset + \"px\";\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class CharCountController extends BaseController {\n\n  static targets = [\"input\", \"output\"];\n  static values = {min: Number, max: Number};\n  static classes = [\"error\"];\n\n  declare readonly inputTarget: HTMLInputElement | HTMLTextAreaElement;\n  declare readonly outputTarget: HTMLElement;\n  declare minValue: number;\n  declare hasMinValue: boolean;\n  declare maxValue: number;\n  declare hasMaxValue: boolean;\n  declare errorClass: string;\n  declare hasErrorClass: boolean;\n\n  boundHandler = this.updateCharCount.bind(this);\n\n  connect() {\n    this.updateCharCount();\n    this.inputTarget.addEventListener(\"input\", this.boundHandler);\n  }\n\n  disconnect() {\n    this.inputTarget.removeEventListener(\"input\", this.boundHandler);\n  }\n\n  updateCharCount() {\n    let charCount = this.inputTarget.value.length;\n    this.outputTarget.innerText = charCount.toString();\n    if (this.hasErrorClass) {\n      if (this.isValidCount(charCount)) {\n        this.outputTarget.classList.remove(this.errorClass);\n      } else {\n        this.outputTarget.classList.add(this.errorClass);\n      }\n    }\n  }\n\n  isValidCount(count: number) {\n    let min = 0;\n    let max = 99999;\n\n    if (this.hasMinValue) {\n      min = this.minValue;\n    }\n\n    if (this.hasMaxValue) {\n      max = this.maxValue;\n    }\n\n    return count >= min && count <= max;\n  }\n\n}\n","import {BaseController} from './base_controller';\n\nexport class CheckboxSelectAllController extends BaseController {\n  static targets = ['selectAll', 'checkbox'];\n\n  declare readonly hasSelectAllTarget: boolean;\n  declare readonly selectAllTarget: HTMLInputElement;\n  declare readonly checkboxTargets: HTMLInputElement[];\n\n  private get checked() {\n    return this.checkboxTargets.filter(checkbox => checkbox.checked);\n  }\n\n  private get unchecked() {\n    return this.checkboxTargets.filter(checkbox => !checkbox.checked);\n  }\n\n  initialize() {\n    this.toggle = this.toggle.bind(this);\n    this.refresh = this.refresh.bind(this);\n  }\n\n  connect() {\n    requestAnimationFrame(() => {\n      if (!this.hasSelectAllTarget) {\n        return;\n      }\n\n      this.selectAllTarget.addEventListener('change', this.toggle);\n      this.checkboxTargets.forEach(checkbox => checkbox.addEventListener('change', this.refresh));\n      this.refresh();\n    });\n  }\n\n  disconnect() {\n    if (!this.hasSelectAllTarget) {\n      return;\n    }\n\n    this.selectAllTarget.removeEventListener('change', this.toggle);\n    this.checkboxTargets.forEach((checkbox) => checkbox.removeEventListener('change', this.refresh));\n  }\n\n  private toggle(event: Event) {\n    event.preventDefault();\n    let target = event.target as HTMLInputElement;\n    this.checkboxTargets.forEach((checkbox) => checkbox.checked = target.checked);\n  }\n\n  private refresh() {\n    const checkboxesCount = this.checkboxTargets.length;\n    const checkboxesCheckedCount = this.checked.length;\n\n    this.selectAllTarget.checked = checkboxesCheckedCount > 0;\n    this.selectAllTarget.indeterminate = checkboxesCheckedCount > 0 && checkboxesCheckedCount < checkboxesCount;\n  }\n}","import {BaseController} from \"./base_controller\";\r\n\r\nexport class ClipboardController extends BaseController {\r\n\r\n  static targets = [\"button\", \"copy\", \"fallback\"];\r\n  static values = {removeUnused: Boolean};\r\n\r\n  declare readonly sourceTarget: HTMLElement;\r\n  declare readonly copyTarget: HTMLElement;\r\n  declare readonly hasCopyTarget: boolean;\r\n  declare readonly fallbackTarget: HTMLElement;\r\n  declare readonly hasFallbackTarget: boolean;\r\n\r\n  declare readonly hasRemoveUnusedValue: boolean;\r\n  declare readonly removeUnusedValue: boolean;\r\n\r\n  supported = false;\r\n\r\n  connect() {\r\n    this.supported = document.queryCommandSupported(\"copy\");\r\n\r\n    if (this.hasRemoveUnusedValue && this.removeUnusedValue) {\r\n      if (this.supported && this.hasFallbackTarget) {\r\n        this.fallbackTarget.remove();\r\n      } else if (this.hasCopyTarget) {\r\n        this.copyTarget.remove();\r\n      }\r\n    }\r\n  }\r\n\r\n  select(event: MouseEvent) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    (this.sourceTarget as HTMLInputElement | HTMLTextAreaElement).select();\r\n  }\r\n\r\n  copy(event: ClipboardEvent) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    (this.sourceTarget as HTMLInputElement | HTMLTextAreaElement).select();\r\n    if (this.supported) {\r\n      document.execCommand(\"copy\");\r\n    }\r\n  }\r\n}\r\n","export function isHTMLLinkElement(element: Element): element is HTMLLinkElement {\n  return element.nodeName == \"A\";\n}\n\nexport function isHTMLFormElement(element: Element): element is HTMLFormElement {\n  return element.nodeName == \"FORM\";\n}\n\nexport function isHTMLInputElement(element: Element): element is HTMLInputElement {\n  return element.nodeName == \"INPUT\";\n}\n\nexport function isHTMLImageElement(element: Element): element is HTMLImageElement {\n  return element.nodeName == \"IMG\";\n}\n\nexport function isElementCheckable(element: Element): element is HTMLInputElement & { checked: boolean } {\n  return isHTMLInputElement(element) && (element.type === \"radio\" || element.type === \"checkbox\");\n}\n","import {BaseController} from './base_controller';\r\nimport {isHTMLFormElement, isHTMLLinkElement} from \"./utilities/elements\";\r\n\r\nexport class ConfirmController extends BaseController {\r\n\r\n  static values = {\r\n    message: String,\r\n  };\r\n\r\n  declare readonly messageValue: string;\r\n  declare readonly hasMessageValue: boolean;\r\n\r\n  get message(): string {\r\n    return this.hasMessageValue ? this.messageValue : 'Are you sure?';\r\n  }\r\n\r\n  initialize() {\r\n    this.confirm = this.confirm.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      let element = this.element as HTMLElement;\r\n      if (isHTMLFormElement(element)) {\r\n        element.addEventListener(\"submit\", this.confirm);\r\n      } else if (isHTMLLinkElement(element)) {\r\n        element.addEventListener(\"click\", this.confirm);\r\n      } else {\r\n        throw new Error(\"Can't handle confirmation on attached element\");\r\n      }\r\n    });\r\n  }\r\n\r\n  confirm(event: Event) {\r\n    if (!(window.confirm(this.message))) {\r\n      event.preventDefault();\r\n      this.dispatch(this.element as HTMLElement, \"confirm:cancelled\");\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\n\nexport class ConfirmNavigationController extends BaseController {\n\n  static values = {message: String};\n\n  declare readonly messageValue: string;\n\n  connect() {\n    let confirmMessage = this.messageValue;\n    window.onbeforeunload = () => (confirmMessage == null ? true : confirmMessage);\n    window.addEventListener(\"popstate\", this.handlePopstate);\n    window.addEventListener(\"submit\", () => {\n      window.removeEventListener(\"popstate\", this.handlePopstate);\n      window.onbeforeunload = null;\n    });\n    // TODO: Turbo navigation events\n  }\n\n  handlePopstate(event: PopStateEvent) {\n    return false;\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class DebugController extends BaseController {\n\n  static targets = [\"test\"];\n  declare testTargets: HTMLElement[];\n\n  connect() {\n    console.log(\"Debug Controller\", this, this.testTargets);\n  }\n}\n","import {BaseController} from \"./base_controller\";\nimport {isElementCheckable} from \"./utilities/elements\";\n\nexport class DetectDirtyController extends BaseController {\n\n  initialValue: string | boolean | null = null;\n\n  boundHandler = this.handler.bind(this);\n\n  connect() {\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n    if (isElementCheckable(element)) {\n      this.initialValue = element.checked;\n    } else {\n      this.initialValue = element.value;\n    }\n    element.addEventListener(\"input\", this.boundHandler);\n    element.addEventListener(\"change\", this.boundHandler);\n  }\n\n  disconnect() {\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n    element.removeEventListener(\"input\", this.boundHandler);\n    element.removeEventListener(\"change\", this.boundHandler);\n  }\n\n  restore() {\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n    if (isElementCheckable(element)) {\n      element.checked = this.initialValue as boolean;\n    } else {\n      element.value = this.initialValue as string;\n    }\n  }\n\n  private handler(event?: Event) {\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n\n    if (this.initialValue !== element.value) {\n      element.setAttribute(\"data-dirty\", \"true\");\n    } else {\n      element.removeAttribute(\"data-dirty\");\n    }\n  }\n\n}\n\nexport function isDirty(element: HTMLElement) {\n  return element.hasAttribute(\"data-dirty\");\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class DisableInputsController extends BaseController {\r\n\r\n  static targets = [\"disabler\", \"disable\"];\r\n\r\n  static values = {\r\n    clear: Boolean,\r\n  };\r\n\r\n  declare readonly hasDisablerTarget: boolean;\r\n  declare readonly disablerTarget: HTMLInputElement;\r\n  declare readonly disableTargets: Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\r\n  declare readonly clearValue: boolean;\r\n  declare readonly hasClearValue: boolean;\r\n\r\n  connect() {\r\n    this.toggle();\r\n  }\r\n\r\n  toggle() {\r\n    if (this.hasDisablerTarget && this.disablerTarget.checked) {\r\n      this.disableInputs();\r\n    } else {\r\n      this.enableInputs();\r\n    }\r\n  }\r\n\r\n  disableInputs() {\r\n    let shouldClear = this.hasClearValue && this.clearValue;\r\n    this.disableTargets.forEach((el, _) => {\r\n      if (shouldClear) {\r\n        el.value = \"\";\r\n      }\r\n      el.disabled = true;\r\n    });\r\n  }\r\n\r\n  enableInputs() {\r\n    this.disableTargets.forEach((el, _) => {\r\n      el.disabled = false;\r\n    });\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\n\nexport class DismissableController extends BaseController {\n\n  dismiss() {\n    this.element.remove();\n  }\n\n}\n","import {useMutation} from \"stimulus-use\";\nimport {BaseController} from \"./base_controller\";\n\nexport class EmptyDomController extends BaseController {\n\n  static classes = [\"empty\", \"notEmpty\"];\n  static values = {scopeSelector: String};\n\n  declare hasEmptyClass: boolean;\n  declare emptyClass: string;\n  declare hasNotEmptyClass: boolean;\n  declare notEmptyClass: string;\n\n  declare hasScopeSelectorValue: boolean;\n  declare scopeSelectorValue: string;\n\n  connect() {\n    useMutation(this, {element: this.element, childList: true});\n    this.checkEmpty();\n  }\n\n  mutate(entries: MutationRecord[]) {\n    this.checkEmpty();\n  }\n\n  checkEmpty() {\n    let children;\n    if (this.hasScopeSelectorValue) {\n      children = this.element.querySelectorAll(this.scopeSelectorValue);\n    } else {\n      children = this.element.children;\n    }\n\n    if (children.length === 0) {\n      if (this.hasNotEmptyClass) {\n        let classes = this.notEmptyClass.split(\" \");\n        classes.forEach(klass => this.element.classList.remove(klass));\n      }\n      if (this.hasEmptyClass) {\n        let classes = this.emptyClass.split(\" \");\n        classes.forEach(klass => this.element.classList.add(klass));\n      }\n      this.element.dispatchEvent(\n        new CustomEvent(\"dom:empty\", {\n          bubbles: true,\n          cancelable: true,\n        }),\n      );\n    } else {\n      if (this.hasNotEmptyClass) {\n        let classes = this.notEmptyClass.split(\" \");\n        classes.forEach(klass => this.element.classList.add(klass));\n      }\n      if (this.hasEmptyClass) {\n        let classes = this.emptyClass.split(\" \");\n        classes.forEach(klass => this.element.classList.remove(klass));\n      }\n      this.element.dispatchEvent(\n        new CustomEvent(\"dom:not-empty\", {\n          bubbles: true,\n          cancelable: true,\n          detail: {\n            count: children.length,\n          },\n        }),\n      );\n    }\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class EnableInputsController extends BaseController {\r\n\r\n  static targets = [\"enabler\", \"enable\"];\r\n\r\n  static values = {\r\n    clear: Boolean,\r\n  };\r\n\r\n  declare readonly hasEnablerTarget: boolean;\r\n  declare readonly enablerTarget: HTMLInputElement;\r\n  declare readonly enableTargets: Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\r\n  declare readonly clearValue: boolean;\r\n  declare readonly hasClearValue: boolean;\r\n\r\n  connect() {\r\n    this.toggle();\r\n  }\r\n\r\n  toggle() {\r\n    if (this.hasEnablerTarget && this.enablerTarget.checked) {\r\n      this.enableInputs();\r\n    } else {\r\n      this.disableInputs();\r\n    }\r\n  }\r\n\r\n  disableInputs() {\r\n    let shouldClear = this.hasClearValue && this.clearValue;\r\n    this.enableTargets.forEach((el, _) => {\r\n      if (shouldClear) {\r\n        el.value = \"\";\r\n      }\r\n      el.disabled = true;\r\n    });\r\n  }\r\n\r\n  enableInputs() {\r\n    this.enableTargets.forEach((el, _) => {\r\n      el.disabled = false;\r\n    });\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class FallbackImageController extends BaseController {\r\n\r\n  static values = {placeholder: String};\r\n\r\n  declare readonly placeholderValue: string;\r\n  declare readonly hasPlaceholderValue: boolean;\r\n\r\n  connect() {\r\n    let element = this.element as HTMLImageElement;\r\n\r\n    element.onerror = () => {\r\n      if (this.hasPlaceholderValue) {\r\n        element.src = this.placeholderValue;\r\n      } else {\r\n        element.style.display = \"none\";\r\n      }\r\n    };\r\n  }\r\n\r\n}\r\n","import {BaseController} from './base_controller';\r\nimport {isHTMLFormElement, isHTMLInputElement} from \"./utilities/elements\";\r\n\r\ninterface FormSavePayload {\r\n  [idx: string]: {\r\n    [idx: string]: string | boolean\r\n  }\r\n}\r\n\r\nexport class FormSaveController extends BaseController {\r\n\r\n  static values = {\r\n    id: String,\r\n    restoreOnLoad: Boolean,\r\n    clearOnSubmit: Boolean,\r\n  };\r\n\r\n  declare readonly idValue: string;\r\n  declare readonly hasIdValue: boolean;\r\n  declare readonly restoreOnLoadValue: boolean;\r\n  declare readonly hasRestoreOnLoadValue: boolean;\r\n  declare readonly clearOnSubmitValue: boolean;\r\n  declare readonly hasClearOnSubmitValue: boolean;\r\n\r\n  get formID() {\r\n    if (this.hasIdValue) {\r\n      return this.idValue;\r\n    }\r\n    let elementID = (this.element as HTMLFormElement).id;\r\n\r\n    if (elementID !== \"\") {\r\n      return elementID;\r\n    } else {\r\n      throw new Error(`No ID value to uniquely identify this form. Please either specify data-${this.identifier}-id-value or give this form an 'id' attribute. `);\r\n    }\r\n  }\r\n\r\n  get formIdentifier() {\r\n    const url = location.href;\r\n    return `${url} ${this.formID}`;\r\n  }\r\n\r\n  get formElements() {\r\n    return (this.element as HTMLFormElement).elements;\r\n  }\r\n\r\n  get formData(): FormSavePayload {\r\n    let data: FormSavePayload = {[this.formIdentifier]: {}};\r\n    for (const element of this.formElements) {\r\n      let el = element as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\r\n      if (el.name.length > 0) {\r\n        if (isHTMLInputElement(el) && el.type == \"checkbox\") {\r\n          data[this.formIdentifier][el.name] = el.checked;\r\n        } else if (isHTMLInputElement(el) && el.type == \"radio\") {\r\n          if (el.checked) {\r\n            data[this.formIdentifier][el.name] = el.value;\r\n          }\r\n        } else {\r\n          data[this.formIdentifier][el.name] = el.value;\r\n        }\r\n      }\r\n    }\r\n    return data;\r\n  }\r\n\r\n  get restoreOnLoad() {\r\n    return this.hasRestoreOnLoadValue ? this.restoreOnLoadValue : true;\r\n  }\r\n\r\n  get clearOnSubmit() {\r\n    return this.hasClearOnSubmitValue ? this.clearOnSubmitValue : true;\r\n  }\r\n\r\n  initialize() {\r\n    this._clear = this._clear.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      let element = this.element;\r\n      if (!isHTMLFormElement(element)) {\r\n        throw new Error('Expected controller to be mounted on a form element.');\r\n      }\r\n\r\n      if (this.restoreOnLoad) {\r\n        this.restore();\r\n      }\r\n      if (this.clearOnSubmit) {\r\n        this.element.addEventListener('submit', this._clear);\r\n      }\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.clearOnSubmit) {\r\n      this.element.removeEventListener('submit', this._clear);\r\n    }\r\n  }\r\n\r\n  _clear() {\r\n    localStorage.removeItem(this.formIdentifier);\r\n    this.dispatch(this.element as HTMLElement, `form-save:cleared`);\r\n  }\r\n\r\n  clear(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    this._clear();\r\n  }\r\n\r\n  save(event: Event) {\r\n    event.preventDefault();\r\n    let data = this.formData;\r\n    localStorage.setItem(this.formIdentifier, JSON.stringify(data[this.formIdentifier]));\r\n    this.dispatch(this.element as HTMLElement, `form-save:save:success`);\r\n  }\r\n\r\n  restore(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    if (localStorage.getItem(this.formIdentifier)) {\r\n      const savedData = JSON.parse(localStorage.getItem(this.formIdentifier)!); // get and parse the saved data from localStorage\r\n      for (const element of this.formElements) {\r\n        let el = element as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\r\n        if (el.name in savedData) {\r\n          if (isHTMLInputElement(el) && el.type == \"checkbox\") {\r\n            el.checked = savedData[el.name];\r\n          } else if (isHTMLInputElement(el) && el.type == \"radio\") {\r\n            if (el.value == savedData[el.name]) {\r\n              el.checked = true;\r\n            }\r\n          } else {\r\n            el.value = savedData[el.name];\r\n          }\r\n        }\r\n      }\r\n      this.dispatch(this.element as HTMLElement, `form-save:restore:success`);\r\n    } else {\r\n      this.dispatch(this.element as HTMLElement, `form-save:restore:empty`);\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\nimport {useIntersection} from \"stimulus-use\";\n\nexport class IntersectionController extends BaseController {\n\n  static values = {threshold: String};\n\n  declare readonly isVisible: boolean;\n  declare readonly thresholdValue: string;\n  declare readonly hasThresholdValue: boolean;\n\n  get threshold(): number[] {\n    if (this.hasThresholdValue) {\n      return this.thresholdValue.split(',').map(val => Number.parseFloat(val.trim())).filter(val => val >= 0 && val <= 1);\n    } else {\n      return [0, 1];\n    }\n  }\n\n  connect() {\n    useIntersection(this, {\n      threshold: this.threshold,\n      element: this.element,\n    });\n  }\n\n  appear(entry: IntersectionObserverEntry) {\n    this.dispatch(\n      this.element as HTMLElement,\n      \"intersection:appear\",\n      {\n        cancelable: true,\n        bubbles: true,\n        detail: {\n          element: this.element,\n        },\n      },\n    );\n  };\n\n  disappear(entry: IntersectionObserverEntry) {\n    this.dispatch(\n      this.element as HTMLElement,\n      \"intersection:disappear\",\n      {\n        cancelable: true,\n        bubbles: true,\n        detail: {\n          element: this.element,\n        },\n      },\n    );\n  };\n\n}\n","import {useIntersection} from \"stimulus-use\";\nimport {AsyncBlockController} from \"./async_block_controller\";\n\nexport class LazyBlockController extends AsyncBlockController {\n\n  declare observe: () => void;\n  declare unobserve: () => void;\n  declare isVisible: boolean;\n  declare disappear: () => void;\n\n  connect() {\n    let element = this.element;\n\n    if (\"IntersectionObserver\" in window) {\n      [this.observe, this.unobserve] = useIntersection(this, {element, threshold: 0.3});\n    } else {\n      // Client doesn't support intersection observer, fallback to pre-loading\n      this.loadContent();\n    }\n  }\n\n  appear(entry: IntersectionObserverEntry) {\n    if (entry.target === this.element && entry.isIntersecting) {\n      this.loadContent();\n      if (this.unobserve) {\n        this.unobserve();\n      }\n    }\n  }\n\n}\n","const smoothSupported = \"scrollBehavior\" in document.documentElement.style;\r\nlet smoothPolyfilled: boolean;\r\n\r\nexport async function scrollToElement(element: Element, {behavior = \"smooth\", block = \"start\", inline = \"nearest\"}: ScrollIntoViewOptions = {}) {\r\n  if (behavior == \"smooth\" && !smoothSupported) {\r\n    await polyfillSmooth();\r\n  }\r\n  element.scrollIntoView({behavior, block, inline});\r\n}\r\n\r\nasync function polyfillSmooth() {\r\n  const {polyfill} = await import(/* webpackChunkName: \"smoothscroll-polyfill\" */ \"smoothscroll-polyfill\");\r\n  if (smoothPolyfilled) {\r\n    return;\r\n  }\r\n  smoothPolyfilled = true;\r\n  polyfill();\r\n}\r\n\r\nexport function getScrollParent(node: HTMLElement | null): HTMLElement | null {\r\n  if (!node) {\r\n    return null;\r\n  }\r\n  const overflowY = getComputedStyle(node).overflowY;\r\n  const isScrollable = overflowY !== \"visible\" && overflowY !== \"hidden\";\r\n\r\n  if (isScrollable && node.scrollHeight >= node.clientHeight) {\r\n    return node;\r\n  }\r\n\r\n  return getScrollParent(node.parentElement) || document.body;\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\nimport {scrollToElement} from \"./utilities/scroll\";\r\nimport dialogPolyfill from \"dialog-polyfill\";\r\n\r\nexport class LightboxImageController extends BaseController {\r\n\r\n  static values = {\r\n    src: String,\r\n    srcSet: String,\r\n    sizes: String,\r\n  };\r\n  static classes = [\"modal\", \"image\"];\r\n\r\n  declare readonly hasModalClass: boolean;\r\n  declare readonly modalClass: string;\r\n  declare readonly hasImageClass: boolean;\r\n  declare readonly imageClass: string;\r\n  declare readonly hasSrcValue: boolean;\r\n  declare readonly srcValue: string;\r\n  declare readonly hasSrcSetValue: boolean;\r\n  declare readonly srcSetValue: string;\r\n  declare readonly hasSizesValue: boolean;\r\n  declare readonly sizesValue: string;\r\n  _dialog: HTMLDialogElement | null = null;\r\n\r\n  get src(): string {\r\n    return this.hasSrcValue ? this.srcValue : (this.element as HTMLImageElement).src;\r\n  }\r\n\r\n  get srcSet(): string {\r\n    return this.hasSrcSetValue ? this.srcSetValue : (this.element as HTMLImageElement).srcset;\r\n  }\r\n\r\n  get sizes(): string {\r\n    return this.hasSizesValue ? this.sizesValue : (this.element as HTMLImageElement).sizes;\r\n  }\r\n\r\n  get modalClassName() {\r\n    return this.hasModalClass ? this.modalClass : \"image-lightbox-dialog\";\r\n  }\r\n\r\n  get imageClassName() {\r\n    return this.hasImageClass ? this.imageClass : \"image-lightbox-image\";\r\n  }\r\n\r\n  initialize() {\r\n    this.open = this.open.bind(this);\r\n    this.close = this.close.bind(this);\r\n  }\r\n\r\n  connect() {\r\n  }\r\n\r\n  open() {\r\n    let element = this.element as HTMLImageElement;\r\n    if (this._dialog) {\r\n      return;\r\n    }\r\n    this._dialog = document.createElement(\"dialog\");\r\n\r\n    let image = document.createElement(\"img\") as HTMLImageElement;\r\n    image.className = this.imageClassName;\r\n    image.src = this.src;\r\n    image.srcset = this.srcSet;\r\n    image.sizes = this.sizes;\r\n    this._dialog.appendChild(image);\r\n\r\n    element.insertAdjacentElement(\"afterend\", this._dialog);\r\n    dialogPolyfill.registerDialog(this._dialog);\r\n    this._dialog.className = this.modalClassName;\r\n    this._dialog.showModal();\r\n    scrollToElement(this._dialog, {behavior: \"smooth\", block: \"end\"}).catch(() => this._dialog!.scrollIntoView(false));\r\n    this._dialog.addEventListener(\"click\", this.close);\r\n    this._dialog.addEventListener(\"cancel\", this.close);\r\n    this._dialog.addEventListener(\"close\", this.close);\r\n  }\r\n\r\n  close() {\r\n    if (this._dialog) {\r\n      this._dialog.close();\r\n      this._dialog.remove();\r\n      this._dialog = null;\r\n      scrollToElement(this.element, {behavior: \"smooth\", block: \"end\"}).catch(() => this.element.scrollIntoView(false));\r\n    }\r\n  }\r\n\r\n} ","import {BaseController} from \"./base_controller\";\n\nexport class LimitedSelectionCheckboxesController extends BaseController {\n\n  static targets = [\"input\", \"error\"];\n  static values = {max: Number, message: String};\n\n  declare readonly hasErrorTarget: boolean;\n  declare readonly errorTarget: HTMLElement;\n  declare readonly inputTargets: HTMLInputElement[];\n  declare readonly maxValue: number;\n  declare readonly messageValue: string;\n\n  maxSelections = 0;\n\n  boundHandleInputs = this.handleInputs.bind(this);\n\n  connect() {\n    this.inputTargets.forEach((el) => el.addEventListener(\"change\", this.boundHandleInputs));\n  }\n\n  disconnect() {\n    this.inputTargets.forEach((el) => el.removeEventListener(\"change\", this.boundHandleInputs));\n  }\n\n  handleInputs(event: Event) {\n    let tickedInputs = this.inputTargets.reduce((previousValue, el) => el.checked ? previousValue + 1 : previousValue, 0);\n    let target = event.target as HTMLInputElement;\n    if (tickedInputs > this.maxValue) {\n      event.preventDefault();\n      target.checked = false;\n      target.dispatchEvent(new CustomEvent(\"change\", {bubbles: true, cancelable: true}));\n      target.dispatchEvent(new CustomEvent(\"limited-selection:too-many\", {bubbles: true, cancelable: true, detail: {target}}));\n      if (this.hasErrorTarget) {\n        this.errorTarget.innerHTML = this.messageValue;\n      }\n    } else {\n      target.dispatchEvent(new CustomEvent(\"limited-selection:selection\", {bubbles: true, cancelable: true, detail: {target}}));\n      if (this.hasErrorTarget) {\n        this.errorTarget.innerHTML = \"\";\n      }\n    }\n  }\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class NestedFormController extends BaseController {\n  static targets = ['target', 'template'];\n  static values = {\n    insertMode: String,\n    wrapperClass: String,\n  };\n\n  declare readonly targetTarget: HTMLElement;\n  declare readonly templateTarget: HTMLTemplateElement | HTMLScriptElement;\n\n  declare readonly wrapperClassValue: string;\n  declare readonly hasWrapperSelectorValue: boolean;\n  declare readonly insertModeValue: InsertPosition;\n  declare readonly hasInsertModeValue: boolean;\n\n  get wrapperClass() {\n    return this.hasWrapperSelectorValue ? this.wrapperClassValue : 'nested-fields';\n  }\n\n  get insertMode(): InsertPosition {\n    return this.hasInsertModeValue ? this.insertModeValue : 'beforeend';\n  }\n\n  connect() {\n    this.checkStructure();\n  }\n\n  add(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const content = this.templateTarget.innerHTML.replace(/NEW_RECORD/g, this.generateID());\n    this.targetTarget.insertAdjacentHTML(this.insertMode, content);\n  }\n\n  remove(event: Event) {\n    event.preventDefault();\n    const wrapper: HTMLElement | null = (event.target as HTMLElement).closest(`.${this.wrapperClass}`);\n    if (wrapper == null) {\n      throw new Error(`#remove was clicked from outside of a child record. Could not find an ancestor with class .${this.wrapperClass}`);\n    }\n\n    if (wrapper.dataset.newRecord === 'true') {\n      wrapper.remove();\n    } else {\n      wrapper.style.display = 'none';\n      let destroyInput = wrapper.querySelector(\"input[name*='_destroy']\") as HTMLInputElement | null;\n      if (destroyInput == null) {\n        throw new Error(`Could not find a hidden input with name '_destroy'. NestedForm cannot remove an already persisted record without it.`);\n      }\n\n      destroyInput.value = \"1\";\n    }\n  }\n\n  generateID(): string {\n    return new Date().getTime().toString() + Math.random().toString().slice(2);\n  }\n\n  private checkStructure() {\n    let template = this.templateTarget.innerHTML;\n\n    if (template.indexOf('NEW_RECORD')) {\n      throw new Error(\"Could not find 'NEW_RECORD' in the provided template. Please make sure you've passed `child_index: 'NEW_RECORD'` to `fields_for`\");\n    }\n  }\n}","import {BaseController} from \"./base_controller\";\n\nexport class PasswordConfirmController extends BaseController {\n\n  static targets = [\"password\"];\n  static classes = [\"error\"];\n\n  declare readonly passwordTargets: HTMLInputElement[];\n\n  declare readonly errorClass: string;\n  declare readonly hasErrorClass: boolean;\n\n  private boundCheckPasswordsMatch = this.checkPasswordsMatch.bind(this);\n\n  connect() {\n    this.passwordTargets.forEach((el) => el.addEventListener(\"change\", this.boundCheckPasswordsMatch));\n  }\n\n  disconnect() {\n    this.passwordTargets.forEach((el) => el.removeEventListener(\"change\", this.boundCheckPasswordsMatch));\n  }\n\n  private allPasswordsMatch() {\n    let values = new Set(this.passwordTargets.map(el => el.value));  // Create a unique set of the password values\n    return values.has(\"\") || values.size == 1; // If any of the passwords are still blank, or there is only one distinct password value (i.e. they all are the same)\n  }\n\n  private checkPasswordsMatch() {\n    let element = this.element as HTMLElement;\n    if (this.allPasswordsMatch()) {\n      element.dispatchEvent(new CustomEvent(\"password-confirm:match\"));\n      if (this.hasErrorClass) {\n        this.passwordTargets.forEach(el => el.classList.remove(this.errorClass));\n      }\n    } else {\n      element.dispatchEvent(new CustomEvent(\"password-confirm:no-match\"));\n      if (this.hasErrorClass) {\n        this.passwordTargets.forEach(el => el.classList.add(this.errorClass));\n      }\n    }\n  }\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class PasswordPeekController extends BaseController {\n\n  static targets = [\"password\"];\n\n  declare readonly passwordTarget: HTMLInputElement;\n\n  peak(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    this.passwordTarget.type = \"text\";\n  }\n\n  hide(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    this.passwordTarget.type = \"password\";\n  }\n\n  toggle(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    if (this.passwordTarget.type === \"password\") {\n      this.peak();\n    } else {\n      this.hide();\n    }\n  }\n}\n","import {useDebounce, useWindowResize} from \"stimulus-use\";\nimport {WindowResizePayload} from \"stimulus-use/dist/use-window-resize/use-window-resize\";\nimport {BaseController} from \"./base_controller\";\n\ninterface ResponsiveIframeMessage {\n  name: string,\n  height: number,\n}\n\nexport class ResponsiveIframeWrapperController extends BaseController {\n\n  boundMessageReceived = this.messageReceived.bind(this);\n\n  connect() {\n    window.addEventListener(\"message\", this.boundMessageReceived);\n  }\n\n  disconnect() {\n    window.removeEventListener(\"message\", this.boundMessageReceived);\n  }\n\n  messageReceived(message: MessageEvent<ResponsiveIframeMessage>) {\n    let data = message.data;\n    if (data.hasOwnProperty(\"name\") && data.name === \"iframe-body\" && data.hasOwnProperty(\"height\")) {\n      this.resize(data.height);\n    }\n  }\n\n  resize(height: number) {\n    (this.element as HTMLIFrameElement).style.height = `${height}px`;\n  }\n\n}\n\nexport class ResponsiveIframeBodyController extends BaseController {\n\n  static debounces = [\"postUpdate\"];\n\n  declare observe: () => void;\n  declare unobserve: () => void;\n\n  connect() {\n    // If this Window is inside a frame\n    if (window.self !== window.top) {\n      useWindowResize(this);\n      useDebounce(this, {});\n      this.postUpdate();\n    } else {\n      // Not an iframe\n    }\n  }\n\n  windowResize(payload: WindowResizePayload) {\n    this.postUpdate();\n  };\n\n  postUpdate() {\n    let payload: ResponsiveIframeMessage = {name: \"iframe-body\", height: this.getHeight()};\n    window.parent.postMessage(\n      payload,\n      \"*\",\n    );\n  }\n\n  getHeight(): number {\n    const body = document.body;\n    const html = document.documentElement;\n\n    // Get the largest height out of body and html's various height measurements\n    return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n  }\n\n}\n","import camelCase from \"camelcase\";\r\nimport {BaseController} from \"../base_controller\";\r\n\r\nexport class EphemeralController extends BaseController {\r\n\r\n  _cleanupSelf() {\r\n    this.cleanup(this.element as HTMLElement);\r\n  }\r\n\r\n  cleanup(element: HTMLElement) {\r\n    element.dataset.controller = element.dataset.controller?.replaceAll(new RegExp(`(\\s|^)${this.identifier}(\\s|$)`, \"g\"), \"\") || \"\";\r\n    if (element.dataset.controller == \"\") {\r\n      // If there are no controllers left, remove the attribute\r\n      delete element.dataset.controller;\r\n    }\r\n\r\n    let substringIdentifierValueRegex = new RegExp(`(\\s|^)${this.identifier}\\\\..+?(\\s|$)`, \"g\");\r\n    element.dataset.target = element.dataset.target?.replaceAll(substringIdentifierValueRegex, \"\") || \"\";\r\n    delete element.dataset[camelCase(`${this.identifier}-target`)];\r\n    if (element.dataset.target == \"\") {\r\n      // If there are no targets left, remove the attribute\r\n      delete element.dataset.target;\r\n    }\r\n\r\n    element.dataset.action = element.dataset.target?.replaceAll(substringIdentifierValueRegex, \"\") || \"\";\r\n    delete element.dataset[camelCase(`${this.identifier}-action`)];\r\n    if (element.dataset.action == \"\") {\r\n      // If there are no actions left, remove the attribute\r\n      delete element.dataset.action;\r\n    }\r\n\r\n    // @ts-ignore\r\n    let values = this.constructor.values;\r\n    if (values) {\r\n      Object.keys(values).forEach(val => delete element.dataset[camelCase(`${this.identifier}-${val}-value`)]);\r\n    }\r\n\r\n    // @ts-ignore\r\n    let classes = this.constructor.classes;\r\n    if (classes) {\r\n      Object.keys(classes).forEach(val => delete element.dataset[camelCase(`${this.identifier}-${val}-class`)]);\r\n    }\r\n  }\r\n\r\n}\r\n","import {EphemeralController} from \"./utilities/ephemeral_controller\";\r\nimport {scrollToElement} from \"./utilities/scroll\";\r\n\r\nexport class ScrollIntoFocusController extends EphemeralController {\r\n\r\n  static values = {\r\n    behavior: String,\r\n    block: String,\r\n    inline: String,\r\n  };\r\n\r\n  declare behaviorValue: ScrollBehavior;\r\n  declare hasBehaviorValue: boolean;\r\n  declare blockValue: ScrollLogicalPosition;\r\n  declare hasBlockValue: boolean;\r\n  declare inlineValue: ScrollLogicalPosition;\r\n  declare hasInlineValue: boolean;\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      // Attempt smooth scrolling, with polyfill\r\n      scrollToElement(\r\n        this.element,\r\n        {\r\n          behavior: this.hasBehaviorValue ? this.behaviorValue : \"smooth\",\r\n          block: this.hasBlockValue ? this.blockValue : \"center\",\r\n          inline: this.hasInlineValue ? this.inlineValue : \"center\",\r\n        },\r\n      ).catch(() => this.element.scrollIntoView()); // Fallback to snap-scrolling\r\n      this._cleanupSelf();\r\n    });\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\nimport {getScrollParent, scrollToElement} from \"./utilities/scroll\";\n\nexport class ScrollToBottomController extends BaseController {\n\n  static values = {\n    mode: String,\n  };\n\n  declare modeValue: \"nearest\" | \"document\";\n  declare hasModeValue: boolean;\n\n  scroll(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    let mode = this.hasModeValue ? this.modeValue : \"document\";\n    let target: null | HTMLElement;\n    if (mode == \"document\") {\n      target = document.body;\n    } else {\n      target = getScrollParent(this.element as HTMLElement);\n    }\n    if (target == null) {\n      return;\n    }\n    scrollToElement(target!, {behavior: \"smooth\", block: \"end\"}).catch(() => target!.scrollIntoView(false));\n  }\n\n}\n\n","import {BaseController} from \"./base_controller\";\nimport {scrollToElement} from \"./utilities/scroll\";\n\nexport class ScrollToController extends BaseController {\n\n  static values = {\n    selector: String,\n    behavior: String,\n    block: String,\n    inline: String,\n  };\n\n  declare selectorValue: string;\n  declare behaviorValue: ScrollBehavior;\n  declare hasBehaviorValue: boolean;\n  declare blockValue: ScrollLogicalPosition;\n  declare hasBlockValue: boolean;\n  declare inlineValue: ScrollLogicalPosition;\n  declare hasInlineValue: boolean;\n\n  scroll() {\n    let target = document.querySelector(this.selectorValue);\n    if (!target) {\n      console.warn(`Could not find target for '${this.selectorValue}'`);\n      return;\n    }\n\n    scrollToElement(\n      target!,\n      {\n        behavior: this.hasBehaviorValue ? this.behaviorValue : \"smooth\",\n        block: this.hasBlockValue ? this.blockValue : \"center\",\n        inline: this.hasInlineValue ? this.inlineValue : \"center\",\n      },\n    ).catch(() => target!.scrollIntoView()); // Fallback to snap-scrolling\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\nimport {getScrollParent, scrollToElement} from \"./utilities/scroll\";\n\nexport class ScrollToTopController extends BaseController {\n\n  static values = {\n    mode: String,\n  };\n\n  declare modeValue: \"nearest\" | \"document\";\n  declare hasModeValue: boolean;\n\n  scroll(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    let mode = this.hasModeValue ? this.modeValue : \"document\";\n    let target: null | HTMLElement;\n    if (mode == \"document\") {\n      target = document.body;\n    } else {\n      target = getScrollParent(this.element as HTMLElement);\n    }\n    if (target == null) {\n      return;\n    }\n    scrollToElement(target!, {behavior: \"smooth\", block: \"start\"}).catch(() => target!.scrollIntoView(false));\n  }\n\n}\n\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class SelfDestructController extends BaseController {\r\n\r\n  static values = {seconds: Number};\r\n\r\n  declare readonly secondsValue: number;\r\n  timeout: null | ReturnType<typeof setTimeout> = null;\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      // Only start countdown on first paint\r\n      this.timeout = setTimeout(() => this.element.remove(), this.secondsValue * 1000);\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.timeout) {\r\n      clearTimeout(this.timeout);\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class StickyController extends BaseController {\r\n\r\n  static classes = [\"stuck\"];\r\n  static values = {\r\n    mode: String,\r\n  };\r\n\r\n  declare readonly hasStuckClass: boolean;\r\n  declare readonly stuckClass: string;\r\n  declare readonly hasModeValue: \"top\" | \"bottom\";\r\n  declare readonly modeValue: \"top\" | \"bottom\";\r\n\r\n  _magicElement: HTMLDivElement | null = null;\r\n\r\n  get _mode(): \"top\" | \"bottom\" {\r\n    return this.hasModeValue ? this.modeValue : \"top\";\r\n  }\r\n\r\n  createMagicElement() {\r\n    // Magic element placed next to the sticky el that acts as an external border.\r\n    // When the magic element is off the page, we know that the sticky el is \"stuck\"\r\n    if (this._magicElement !== null) {\r\n      return;\r\n    }\r\n\r\n    this._magicElement = document.createElement(\"div\");\r\n    switch (this._mode) {\r\n      case \"top\":\r\n        this.element.insertAdjacentElement(\"beforebegin\", this._magicElement);\r\n        break;\r\n      case \"bottom\":\r\n        this.element.insertAdjacentElement(\"afterend\", this._magicElement);\r\n        break;\r\n    }\r\n  }\r\n\r\n  connect() {\r\n    let element = this.element as HTMLElement;\r\n    this.createMagicElement();\r\n\r\n    const observer = new IntersectionObserver(entries => {\r\n      entries.forEach(entry => {\r\n        if (entry.target !== this._magicElement) {\r\n          return;\r\n        }\r\n        if (entry.intersectionRatio === 0) {\r\n          element.classList.add(this.hasStuckClass ? this.stuckClass : \"stuck\");\r\n        } else if (entry.intersectionRatio === 1) {\r\n          element.classList.remove(this.hasStuckClass ? this.stuckClass : \"stuck\");\r\n        }\r\n      });\r\n\r\n    }, {\r\n      threshold: [0, 1],\r\n    });\r\n    observer.observe(this._magicElement!);\r\n  }\r\n\r\n}\r\n","import {EphemeralController} from \"./utilities/ephemeral_controller\";\n\nexport class TeleportController extends EphemeralController {\n\n  static values = {target: String, insert: String, immediate: Boolean};\n\n  declare readonly immediateValue: boolean;\n  declare readonly hasImmediateValue: boolean;\n  declare readonly targetValue: string;\n  declare readonly hasInsertValue: boolean;\n  declare readonly insertValue: InsertPosition | \"replaceOuter\" | \"replaceInner\" | \"prepend\" | \"append\";\n\n  connect() {\n    if (!this.hasInsertValue) {\n      throw new Error(\"`insert` value was not specified\");\n    }\n\n    requestAnimationFrame(() => {\n      if (this.hasImmediateValue && this.immediateValue) {\n        this.execute();\n      }\n    });\n  }\n\n  execute(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    let destination = document.querySelector(this.targetValue);\n\n    if (destination == null) {\n      this.element.dispatchEvent(new CustomEvent(\"teleport:error\", {bubbles: true, cancelable: true}));\n      return;\n    }\n\n    let copy = this.element.cloneNode(true) as HTMLElement;\n    this.cleanup(copy);\n\n    switch (this.insertValue) {\n      case \"beforebegin\":\n      case \"beforeend\":\n      case \"afterend\":\n      case \"afterbegin\":\n        destination.insertAdjacentHTML(this.insertValue, copy.outerHTML);\n        break;\n      case \"replaceOuter\":\n        destination.outerHTML = copy.outerHTML;\n        break;\n      case \"replaceInner\":\n        destination.innerHTML = copy.outerHTML;\n        break;\n      case \"prepend\":\n        destination.insertAdjacentHTML(\"afterbegin\", copy.outerHTML);\n        break;\n      case \"append\":\n        destination.insertAdjacentHTML(\"beforeend\", copy.outerHTML);\n        break;\n      default:\n        throw new Error(\"`insert` value was not specified\");\n\n    }\n    this.element.remove();\n  }\n\n}\n","import {useClickOutside, useHover} from \"stimulus-use\";\nimport {BaseController} from \"./base_controller\";\n\nexport type ToggleClassMode = \"on\" | \"off\" | \"toggle\"\n\nexport class ToggleClassController extends BaseController {\n\n  static targets = [\"toggle\"];\n  static values = {\n    class: String,\n    mouseEnter: String,\n    mouseLeave: String,\n    clickAway: Boolean,\n    initial: String,\n  };\n\n  declare readonly toggleTargets: HTMLElement[];\n\n  declare readonly classValue: string;\n  declare readonly hasClassValue: boolean;\n\n  declare readonly mouseEnterValue: ToggleClassMode;\n  declare readonly hasMouseEnterValue: boolean;\n\n  declare readonly mouseLeaveValue: ToggleClassMode;\n  declare readonly hasMouseLeaveValue: boolean;\n\n  declare readonly clickAwayValue: boolean;\n  declare readonly hasClickAwayValue: boolean;\n\n  declare readonly initialValue: \"on\" | \"off\";\n  declare readonly hasInitialValue: boolean;\n\n  connect() {\n    if (!this.hasClassValue) {\n      throw new Error(\"data-toggle-class-class-value must not be empty\");\n    }\n\n    if (this.hasMouseEnterValue || this.hasMouseLeaveValue) {\n      useHover(this);\n    }\n\n    if (this.hasClickAwayValue && this.clickAwayValue) {\n      useClickOutside(this);\n    }\n\n    requestAnimationFrame(() => {\n      if (this.hasInitialValue) {\n        if (this.initialValue === \"on\") {\n          this.toggleTargets.forEach((target) => this.elementOn(target));\n        } else {\n          this.toggleTargets.forEach((target) => this.elementOff(target));\n        }\n      }\n    });\n  }\n\n  clickOutside() {\n    this.toggleTargets.forEach((target) => {\n      if (this.elementWasToggled(target)) {\n        this.elementToggleStatus(target);\n        this.elementToggle(target);\n      }\n    });\n  }\n\n  mouseEnter() {\n    if (this.hasMouseEnterValue) {\n      switch (this.mouseEnterValue) {\n        case \"on\":\n          this.on();\n          break;\n        case \"off\":\n          this.off();\n          break;\n        case \"toggle\":\n          this.toggle();\n          break;\n      }\n    }\n    return {};\n  }\n\n  mouseLeave() {\n    if (this.hasMouseLeaveValue) {\n      switch (this.mouseLeaveValue) {\n        case \"on\":\n          this.on();\n          break;\n        case \"off\":\n          this.off();\n          break;\n        case \"toggle\":\n          this.toggle();\n          break;\n      }\n    }\n    return {};\n  }\n\n  on(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementOn(target);\n    });\n  }\n\n  off(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementOff(target);\n    });\n  }\n\n  toggle(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementToggle(target);\n    });\n  }\n\n  private elementWasToggled(el: HTMLElement): boolean {\n    return el.dataset.toggled == \"true\";\n  }\n\n  private elementToggleStatus(el: HTMLElement) {\n    if (this.elementWasToggled(el)) {\n      delete el.dataset.toggled;\n    } else {\n      el.dataset.toggled = \"true\";\n    }\n  }\n\n  private elementToggle(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass));\n  }\n\n  private elementOn(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass, true));\n  }\n\n  private elementOff(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass, false));\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\nimport {isHTMLLinkElement} from \"./utilities/elements\";\nimport {isTurboFrame} from \"./utilities/turbo\";\n\nexport class TurboFrameRCController extends BaseController {\n\n  static values = {\n    frameId: String,\n    src: String,\n    loadingMessage: String,\n  };\n\n  declare readonly frameIdValue: string;\n  declare readonly srcValue: string;\n  declare readonly hasSrcValue: boolean;\n  declare readonly loadingMessageValue: string;\n  declare readonly hasLoadingMessageValue: boolean;\n\n  toggle(event?: Event | null) {\n    if (event) {\n      event.preventDefault();\n    }\n    let frame = this._getFrame();\n    let frameSrc = frame.src;\n    if (frameSrc == null || frameSrc !== this._getSrc()) {\n      this._setSrc();\n    } else {\n      this._clear();\n    }\n  }\n\n  setSrc(event?: Event | null) {\n    if (event) {\n      event.preventDefault();\n    }\n    this._setSrc();\n  }\n\n  clear(event?: Event | null) {\n    if (event) {\n      event.preventDefault();\n    }\n    this._clear();\n  }\n\n  private _setSrc() {\n    let frame = this._getFrame();\n    if (this.hasLoadingMessageValue) {\n      frame.innerHTML = this.loadingMessageValue;\n    }\n    frame.src = this._getSrc();\n  }\n\n  private _clear() {\n    let frame = this._getFrame();\n    frame.src = \"\";\n    frame.innerHTML = \"\";\n  }\n\n  private _getFrame(): TurboFrame {\n    let frame = document.getElementById(`${this.frameIdValue}`);\n    if (frame == null) {\n      throw new Error(`Could not find frame with ID '${this.frameIdValue}'`);\n    }\n    if (!isTurboFrame(frame)) {\n      throw new Error(`Element targeted by ID '${this.frameIdValue}'`);\n    } else {\n      return frame;\n    }\n  }\n\n  private _getSrc(): string {\n    let element = this.element as HTMLElement;\n    if (this.hasSrcValue) {\n      return this.srcValue;\n    } else if (isHTMLLinkElement(element)) {\n      return element.href;\n    } else {\n      throw new Error(\"No link given to drive frame to\");\n    }\n  }\n\n}\n","export function isTurboFrame(element: HTMLElement): element is TurboFrame {\r\n  return element.nodeName == \"TURBO-FRAME\";\r\n}\r\n","import {BaseController} from \"./base_controller\";\n\nexport class WordCountController extends BaseController {\n\n  static targets = [\"input\", \"output\"];\n  static values = {min: Number, max: Number};\n  static classes = [\"error\"];\n\n  declare readonly inputTarget: HTMLInputElement | HTMLTextAreaElement;\n  declare readonly outputTarget: HTMLElement;\n  declare minValue: number;\n  declare hasMinValue: boolean;\n  declare maxValue: number;\n  declare hasMaxValue: boolean;\n  declare errorClass: string;\n  declare hasErrorClass: boolean;\n\n  boundHandler = this.updateWordCount.bind(this);\n\n  connect() {\n    this.updateWordCount();\n    this.inputTarget.addEventListener(\"input\", this.boundHandler);\n  }\n\n  disconnect() {\n    this.inputTarget.removeEventListener(\"input\", this.boundHandler);\n  }\n\n  updateWordCount() {\n    let wordCount = 0;\n    let textAreaValue = this.inputTarget.value;\n    let matches = textAreaValue.match(/\\S+/g);\n    wordCount = (matches && matches.length) || 0;\n    this.outputTarget.innerText = wordCount.toString();\n    if (this.hasErrorClass) {\n      if (this.isValidCount(wordCount)) {\n        this.outputTarget.classList.remove(this.errorClass);\n      } else {\n        this.outputTarget.classList.add(this.errorClass);\n      }\n    }\n  }\n\n  isValidCount(count: number) {\n    let min = 0;\n    let max = 99999;\n\n    if (this.hasMinValue) {\n      min = this.minValue;\n    }\n\n    if (this.hasMaxValue) {\n      max = this.maxValue;\n    }\n\n    return count >= min && count <= max;\n  }\n\n}\n"],"names":["BaseController","context","_this","Proxy","get","obj","prop","returnVal","Reflect","self","test","logProperty","toString","apply","target","thisArg","argArray","log","args","dispatch","element","eventName","options","bubbles","cancelable","detail","event","CustomEvent","dispatchEvent","functionName","this","application","debug","logger","console","groupCollapsed","identifier","groupEnd","Controller","AppearanceController","initialize","_handleVisibility","bind","connect","window","addEventListener","document","disconnect","removeEventListener","appear","away","_documentIsActive","visibilityState","hasFocus","AsyncBlockController","loadContent","el","hasReplaceTarget","replaceTarget","fetch","endpointValue","then","response","text","html","newEl","createElement","innerHTML","hasSelectorValue","selectedContent","querySelectorAll","selectorValue","replaceWith","children","err","_errorMessage","hasErrorMessageValue","errorMessageValue","endpoint","String","errorMessage","selector","AutoSubmitFormController","handler","forEach","_this2","boundHandler","_this3","e","method","controller","methodName","composeEventName","name","eventPrefix","composedName","extendedEvent","type","composed","Object","assign","originalEvent","defaultOptions","useIntersection","targetElement","controllerDisconnect","observer","IntersectionObserver","entries","entry","isIntersecting","isVisible","call","appearEvent","dispatchAppear","disappearEvent","dispatchDisappear","observe","unobserve","[object Object]","events","onlyVisible","StimulusUse","_a","_b","_c","controllerId","stimulusUseDebug","id","dataset","controllerInitialize","controllerConnect","UseHover","super","onEnter","onLeave","hover","enhanceController","UseMutation","error","handleError","mutation","MutationObserver","useWindowResize","callback","innerWidth","innerHeight","payload","height","Infinity","width","debounce","fn","wait","timeoutId","arguments","clearTimeout","setTimeout","AutosizeController","style","resize","boxSizing","requestAnimationFrame","windowResize","autosize","offset","offsetHeight","clientHeight","scrollHeight","CharCountController","updateCharCount","inputTarget","charCount","value","length","outputTarget","innerText","hasErrorClass","isValidCount","classList","remove","errorClass","add","count","min","max","hasMinValue","minValue","hasMaxValue","maxValue","Number","CheckboxSelectAllController","toggle","refresh","hasSelectAllTarget","selectAllTarget","checkboxTargets","checkbox","preventDefault","checked","checkboxesCount","checkboxesCheckedCount","indeterminate","filter","ClipboardController","supported","queryCommandSupported","hasRemoveUnusedValue","removeUnusedValue","hasFallbackTarget","fallbackTarget","hasCopyTarget","copyTarget","select","sourceTarget","copy","execCommand","isHTMLLinkElement","nodeName","isHTMLFormElement","isHTMLInputElement","isElementCheckable","removeUnused","Boolean","ConfirmController","confirm","Error","message","hasMessageValue","messageValue","ConfirmNavigationController","confirmMessage","onbeforeunload","handlePopstate","DebugController","testTargets","DetectDirtyController","initialValue","restore","setAttribute","removeAttribute","DisableInputsController","hasDisablerTarget","disablerTarget","disableInputs","enableInputs","shouldClear","hasClearValue","clearValue","disableTargets","_","disabled","clear","DismissableController","dismiss","EmptyDomController","useMutation","childList","checkEmpty","mutate","hasScopeSelectorValue","scopeSelectorValue","hasNotEmptyClass","notEmptyClass","split","klass","hasEmptyClass","emptyClass","scopeSelector","EnableInputsController","hasEnablerTarget","enablerTarget","enableTargets","FallbackImageController","onerror","hasPlaceholderValue","src","placeholderValue","display","placeholder","FormSaveController","_clear","restoreOnLoad","clearOnSubmit","localStorage","removeItem","formIdentifier","save","setItem","JSON","stringify","formData","getItem","savedData","parse","formElements","hasIdValue","idValue","elementID","location","href","formID","elements","data","hasRestoreOnLoadValue","restoreOnLoadValue","hasClearOnSubmitValue","clearOnSubmitValue","IntersectionController","threshold","disappear","hasThresholdValue","thresholdValue","map","val","parseFloat","trim","LazyBlockController","smoothPolyfilled","scrollToElement","behavior","block","inline","scrollIntoView","smoothSupported","import","polyfill","polyfillSmooth","documentElement","getScrollParent","node","overflowY","getComputedStyle","parentElement","body","LightboxImageController","open","close","_dialog","image","className","imageClassName","srcset","srcSet","sizes","appendChild","insertAdjacentElement","dialogPolyfill","registerDialog","modalClassName","showModal","hasSrcValue","srcValue","hasSrcSetValue","srcSetValue","hasSizesValue","sizesValue","hasModalClass","modalClass","hasImageClass","imageClass","LimitedSelectionCheckboxesController","handleInputs","inputTargets","boundHandleInputs","tickedInputs","reduce","previousValue","hasErrorTarget","errorTarget","NestedFormController","checkStructure","content","templateTarget","replace","generateID","targetTarget","insertAdjacentHTML","insertMode","wrapper","closest","wrapperClass","newRecord","destroyInput","querySelector","Date","getTime","Math","random","slice","indexOf","hasWrapperSelectorValue","wrapperClassValue","hasInsertModeValue","insertModeValue","PasswordConfirmController","checkPasswordsMatch","passwordTargets","boundCheckPasswordsMatch","allPasswordsMatch","values","Set","has","size","_this4","PasswordPeekController","peak","passwordTarget","hide","ResponsiveIframeWrapperController","messageReceived","boundMessageReceived","hasOwnProperty","ResponsiveIframeBodyController","top","constructor","debounces","func","postUpdate","getHeight","parent","postMessage","EphemeralController","_cleanupSelf","cleanup","replaceAll","RegExp","substringIdentifierValueRegex","camelCase","action","keys","classes","ScrollIntoFocusController","hasBehaviorValue","behaviorValue","hasBlockValue","blockValue","hasInlineValue","inlineValue","ScrollToBottomController","scroll","hasModeValue","modeValue","mode","ScrollToController","warn","ScrollToTopController","SelfDestructController","timeout","secondsValue","seconds","StickyController","createMagicElement","_magicElement","_mode","intersectionRatio","hasStuckClass","stuckClass","TeleportController","hasInsertValue","hasImmediateValue","immediateValue","execute","destination","targetValue","cloneNode","insertValue","outerHTML","insert","immediate","ToggleClassController","hasClassValue","hasMouseEnterValue","hasMouseLeaveValue","useHover","hasClickAwayValue","clickAwayValue","onEvent","contains","rect","getBoundingClientRect","windowHeight","windowWidth","clientWidth","left","isElementInViewport","clickOutside","clickOutsideEvent","useClickOutside","hasInitialValue","toggleTargets","elementOn","elementOff","elementWasToggled","elementToggleStatus","elementToggle","mouseEnter","mouseEnterValue","on","off","mouseLeave","mouseLeaveValue","_this5","toggled","classValue","class","clickAway","initial","TurboFrameRCController","frameSrc","_getFrame","_getSrc","_setSrc","setSrc","frame","hasLoadingMessageValue","loadingMessageValue","getElementById","frameIdValue","frameId","loadingMessage","WordCountController","updateWordCount","wordCount","matches","match"],"mappings":"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"}