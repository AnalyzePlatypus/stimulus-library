{"version":3,"file":"stimulus-library.modern.js","sources":["../src/utilities/base_controller.ts","../src/controllers/anchor_spy_controller.ts","../src/controllers/appearance_controller.ts","../src/controllers/async_block_controller.ts","../src/controllers/auto_submit_form_controller.ts","../node_modules/stimulus-use/dist/support/index.js","../node_modules/stimulus-use/dist/use-intersection/use-intersection.js","../node_modules/stimulus-use/dist/use-click-outside/use-click-outside.js","../node_modules/stimulus-use/dist/stimulus_use.js","../node_modules/stimulus-use/dist/use-hover/use-hover.js","../node_modules/stimulus-use/dist/use-mutation/use-mutation.js","../node_modules/stimulus-use/dist/use-window-resize/use-window-resize.js","../node_modules/stimulus-use/dist/use-debounce/use-debounce.js","../src/controllers/autosize_controller.ts","../src/controllers/char_count_controller.ts","../src/controllers/checkbox_select_all_controller.ts","../src/controllers/clipboard_controller.ts","../src/utilities/elements.ts","../src/controllers/confirm_controller.ts","../src/controllers/confirm_navigation_controller.ts","../src/controllers/debug_controller.ts","../src/controllers/detect_dirty_controller.ts","../src/controllers/detect_dirty_form_controller.ts","../src/controllers/disable_inputs_controller.ts","../src/controllers/disable_with_controller.ts","../src/controllers/dismissable_controller.ts","../src/controllers/element_save_controller.ts","../src/controllers/empty_dom_controller.ts","../src/controllers/enable_inputs_controller.ts","../src/controllers/fallback_image_controller.ts","../src/controllers/form_rc_controller.ts","../src/controllers/form_save_controller.ts","../src/controllers/intersection_controller.ts","../src/controllers/lazy_block_controller.ts","../src/utilities/scroll.ts","../src/controllers/lightbox_image_controller.ts","../src/controllers/limited_selection_checkboxes_controller.ts","../src/controllers/media_player_controller.ts","../src/controllers/nested_form_controller.ts","../src/controllers/password_confirm_controller.ts","../src/controllers/password_peek_controller.ts","../src/controllers/remote_form_controller.ts","../src/controllers/responsive_iframe_controller.ts","../src/utilities/ephemeral_controller.ts","../src/controllers/scroll_into_focus_controller.ts","../src/controllers/scroll_to_bottom_controller.ts","../src/controllers/scroll_to_controller.ts","../src/controllers/scroll_to_top_controller.ts","../src/controllers/self_destruct_controller.ts","../src/controllers/sticky_controller.ts","../src/controllers/table_sort_controller.ts","../src/controllers/table_truncate_controller.ts","../src/controllers/teleport_controller.ts","../src/controllers/toggle_class_controller.ts","../src/utilities/turbo.ts","../src/controllers/turbo_frame_rc_controller.ts","../src/controllers/turbo_frame_refresh_controller.ts","../src/controllers/word_count_controller.ts"],"sourcesContent":["import {Context, Controller} from \"stimulus\";\n\nexport class BaseController extends Controller {\n\n  constructor(context: Context) {\n    super(context);\n    return new Proxy(this, {\n      get: (obj, prop) => {\n        let returnVal = Reflect.get(obj, prop);\n        let self = this;\n        if (logProperty(prop.toString())) {\n          if (typeof returnVal == \"function\") {\n            return new Proxy(returnVal, {\n              apply(target: any, thisArg: any, argArray?: any): any {\n                self.log(prop.toString(), {\n                  args: argArray,\n                });\n                return Reflect.apply(target, thisArg, argArray);\n              },\n            });\n          } else {\n            this.log(prop.toString());\n          }\n        }\n        return returnVal;\n      },\n    });\n  }\n\n  get el(): HTMLElement {\n    return this.element as HTMLElement;\n  }\n\n  dispatch(element: HTMLElement, eventName: string, options: CustomEventInit = {}) {\n    let mergedOptions = Object.assign({}, {bubbles: true, cancelable: true, detail: {target: element}}, options);\n    if (!!mergedOptions.detail.target) {\n      mergedOptions.detail.target = element;\n    }\n    let event = new CustomEvent(eventName, mergedOptions);\n    this.logEvent(eventName, event, element);\n    element.dispatchEvent(event);\n  }\n\n  log(functionName: string, args: {} = {}): void {\n    // @ts-ignore\n    if (!this.application.debug) {\n      return;\n    }\n    let logger = console;\n    logger.groupCollapsed(`%c${this.identifier} %c#${functionName}`, \"color: #3B82F6\", \"color: unset\");\n    logger.log({\n      element: this.element,\n      ...args,\n    });\n    logger.groupEnd();\n  }\n\n  logEvent(eventName: string, event: CustomEvent, element: HTMLElement) {\n    // @ts-ignore\n    if (!this.application.debug) {\n      return;\n    }\n    let logger = console;\n    logger.groupCollapsed(`%c${this.identifier} %c${eventName}%c`, \"color: #3B82F6\", \"color: #0be000\", \"color: unset\");\n    logger.log({element});\n    logger.groupEnd();\n  }\n\n}\n\nfunction logProperty(prop: string): boolean {\n  switch (prop) {\n    case \"application\":\n    case \"el\":\n    case \"element\":\n    case \"constructor\":\n    case \"initialize\":\n    case \"log\":\n    case \"logEvent\":\n    case \"dispatch\":\n    case \"data\":\n    case \"valueDescriptorMap\":\n    case \"identifier\":\n      return false;\n  }\n\n  if (/^_.*?$/.test(prop)) {\n    return false;\n  }\n  if (/^.*?Target(s)?$/.test(prop)) {\n    return false;\n  }\n  if (/^.*?Value$/.test(prop)) {\n    return false;\n  }\n  if (/^.*?ValueChanged$/.test(prop)) {\n    return false;\n  }\n  if (/^.*?Class$/.test(prop)) {\n    return false;\n  }\n\n  return true;\n}\n","import {BaseController} from \"../utilities/base_controller\";\r\n\r\nexport class AnchorSpyController extends BaseController {\r\n  static values = {key: String};\r\n\r\n  declare readonly keyValue: string;\r\n\r\n  get key(): string {\r\n    return this.keyValue.replaceAll('#', '');\r\n  }\r\n\r\n  get anchor(): string {\r\n    return window.location.hash.substr(1);\r\n  }\r\n\r\n  set anchor(value: string) {\r\n    window.location.hash = value;\r\n  }\r\n\r\n  initialize() {\r\n    this._checkAnchor = this._checkAnchor.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      this._checkAnchor();\r\n      window.addEventListener(\"hashchange\", this._checkAnchor);\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    window.removeEventListener(\"hashchange\", this._checkAnchor);\r\n  }\r\n\r\n  write(event?: Event) {\r\n    event?.preventDefault();\r\n    this.anchor = this.key;\r\n  }\r\n\r\n  private _checkAnchor() {\r\n    if (this.key === this.anchor) {\r\n      this.dispatch(this.el, \"anchor-spy:active\");\r\n    } else {\r\n      this.dispatch(this.el, \"anchor-spy:inactive\");\r\n    }\r\n  }\r\n}\r\n","import {BaseController} from \"../utilities/base_controller\";\r\n\r\nexport class AppearanceController extends BaseController {\r\n\r\n  initialize() {\r\n    this._handleVisibility = this._handleVisibility.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    window.addEventListener(\"focus\", this._handleVisibility);\r\n    window.addEventListener(\"blur\", this._handleVisibility);\r\n    document.addEventListener(\"visibilitychange\", this._handleVisibility);\r\n    this._handleVisibility();\r\n  }\r\n\r\n  disconnect() {\r\n    window.removeEventListener(\"focus\", this._handleVisibility);\r\n    window.removeEventListener(\"blur\", this._handleVisibility);\r\n    document.removeEventListener(\"visibilitychange\", this._handleVisibility);\r\n  }\r\n\r\n  appear() {\r\n    this.dispatch(this.el, \"appearance:appear\");\r\n  }\r\n\r\n  away() {\r\n    this.dispatch(this.el, \"appearance:away\");\r\n  }\r\n\r\n  _handleVisibility() {\r\n    this._documentIsActive() ? this.appear() : this.away();\r\n  }\r\n\r\n  _documentIsActive() {\r\n    return document.visibilityState == \"visible\" && document.hasFocus();\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"../utilities/base_controller\";\n\nexport class AsyncBlockController extends BaseController {\n  static targets = [\"replace\"];\n  static values = {endpoint: String, errorMessage: String, selector: String};\n\n  declare readonly replaceTarget: HTMLElement;\n  declare readonly hasReplaceTarget: boolean;\n  declare readonly endpointValue: string;\n\n  declare readonly hasSelectorValue: boolean;\n  declare readonly selectorValue: string;\n\n  declare readonly hasErrorMessageValue: boolean;\n  declare readonly errorMessageValue: string;\n\n  get _errorMessage(): string {\n    return this.hasErrorMessageValue ? this.errorMessageValue : \"This content failed to load\";\n  }\n\n  // This is a simple controller to load a block of content when the page loads.\n  // It should be used to give a quick initial response before calling out to an\n  // an AJAX endpoint to do some expensive work.\n  connect() {\n    this.loadContent();\n  }\n\n  loadContent() {\n    let self = this;\n    let el = this.hasReplaceTarget ? this.replaceTarget : this.el;\n    fetch(this.endpointValue)\n    .then((response) => response.text())\n    .then((html) => {\n      let newEl = document.createElement(\"div\");\n      newEl.innerHTML = html;\n      if (this.hasSelectorValue) {\n        let selectedContent = newEl.querySelectorAll(this.selectorValue);\n        el.replaceWith(...selectedContent);\n      } else {\n        el.replaceWith(...newEl.children);\n      }\n      // Trigger event to show block has loaded\n      self.dispatch(el, \"ajax:success\");\n    })\n    .catch(err => {\n      el.replaceWith(this._errorMessage);\n      self.dispatch(el, \"ajax:error\");\n    })\n    .finally(() => {\n      self.dispatch(el, \"ajax:complete\");\n    });\n  }\n}\n","import {BaseController} from \"../utilities/base_controller\";\n\nexport class AutoSubmitFormController extends BaseController {\n\n  initialize() {\n    this.handler = this.handler.bind(this);\n  }\n\n  connect() {\n    this.el.querySelectorAll(\"input, select, textarea\").forEach(el => el.addEventListener(\"change\", this.handler));\n  }\n\n  disconnect() {\n    this.el.querySelectorAll(\"input, select, textarea\").forEach(el => el.removeEventListener(\"change\", this.handler));\n  }\n\n  private handler(e: Event) {\n    // Trigger synthetic \"submit\" event on form\n    this.dispatch((this.el), \"submit\");\n  }\n}\n","export const method = (controller, methodName) => {\n    const method = controller[methodName];\n    if (typeof method == 'function') {\n        return method;\n    }\n    else {\n        return (...args) => { };\n    }\n};\nexport const composeEventName = (name, controller, eventPrefix) => {\n    let composedName = name;\n    if (eventPrefix === true) {\n        composedName = `${controller.identifier}:${name}`;\n    }\n    else if (typeof eventPrefix === 'string') {\n        composedName = `${eventPrefix}:${name}`;\n    }\n    return composedName;\n};\nexport const extendedEvent = (type, event, detail) => {\n    const { bubbles, cancelable, composed } = event || { bubbles: true, cancelable: true, composed: true };\n    if (event) {\n        Object.assign(detail, { originalEvent: event });\n    }\n    const customEvent = new CustomEvent(type, {\n        bubbles,\n        cancelable,\n        composed,\n        detail,\n    });\n    return customEvent;\n};\nexport function isElementInViewport(el) {\n    const rect = el.getBoundingClientRect();\n    const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n    const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n    const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n    const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) >= 0);\n    return (vertInView && horInView);\n}\n//# sourceMappingURL=index.js.map","import { method, extendedEvent, composeEventName } from '../support/index';\nconst defaultOptions = {\n    dispatchEvent: true,\n    eventPrefix: true,\n};\nexport const useIntersection = (controller, options = {}) => {\n    const { dispatchEvent, eventPrefix } = Object.assign({}, defaultOptions, options);\n    const targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n    const callback = (entries) => {\n        const [entry] = entries;\n        if (entry.isIntersecting) {\n            dispatchAppear(entry);\n        }\n        else if (controller.isVisible) {\n            dispatchDisappear(entry);\n        }\n    };\n    const dispatchAppear = (entry) => {\n        controller.isVisible = true;\n        method(controller, 'appear').call(controller, entry);\n        // emit a custom \"appear\" event\n        if (dispatchEvent) {\n            const eventName = composeEventName('appear', controller, eventPrefix);\n            const appearEvent = extendedEvent(eventName, null, { controller, entry });\n            targetElement.dispatchEvent(appearEvent);\n        }\n    };\n    const dispatchDisappear = (entry) => {\n        controller.isVisible = false;\n        method(controller, 'disappear').call(controller, entry);\n        // emit a custom \"disappear\" event\n        if (dispatchEvent) {\n            const eventName = composeEventName('disappear', controller, eventPrefix);\n            const disappearEvent = extendedEvent(eventName, null, { controller, entry });\n            targetElement.dispatchEvent(disappearEvent);\n        }\n    };\n    // keep a copy of the current disconnect() function of the controller\n    // to support composing several behaviors\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    const observer = new IntersectionObserver(callback, options);\n    const observe = () => {\n        observer.observe(targetElement);\n    };\n    const unobserve = () => {\n        observer.unobserve(targetElement);\n    };\n    Object.assign(controller, {\n        isVisible: false,\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-intersection.js.map","import { composeEventName, extendedEvent, isElementInViewport } from '../support/index';\nconst defaultOptions = {\n    events: ['click', 'touchend'],\n    onlyVisible: true,\n    dispatchEvent: true,\n    eventPrefix: true,\n};\nexport const useClickOutside = (controller, options = {}) => {\n    const { onlyVisible, dispatchEvent, events, eventPrefix } = Object.assign({}, defaultOptions, options);\n    const onEvent = (event) => {\n        const targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        if (targetElement.contains(event.target) || (!isElementInViewport(targetElement) && onlyVisible)) {\n            return;\n        }\n        // call the clickOutside method of the Stimulus controller\n        if (controller.clickOutside) {\n            controller.clickOutside(event);\n        }\n        // emit a custom event\n        if (dispatchEvent) {\n            const eventName = composeEventName('click:outside', controller, eventPrefix);\n            const clickOutsideEvent = extendedEvent(eventName, event, { controller });\n            targetElement.dispatchEvent(clickOutsideEvent);\n        }\n    };\n    const observe = () => {\n        events === null || events === void 0 ? void 0 : events.forEach(event => {\n            window.addEventListener(event, onEvent, false);\n        });\n    };\n    const unobserve = () => {\n        events === null || events === void 0 ? void 0 : events.forEach(event => {\n            window.removeEventListener(event, onEvent, false);\n        });\n    };\n    // keep a copy of the current disconnect() function of the controller\n    // to support composing several behaviors\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    Object.assign(controller, {\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-click-outside.js.map","const defaultOptions = {\n    debug: false,\n    logger: console\n};\nexport class StimulusUse {\n    constructor(controller, options = {}) {\n        var _a, _b, _c;\n        this.log = (functionName, args) => {\n            if (!this.debug)\n                return;\n            this.logger.groupCollapsed(`%c${this.controller.identifier} %c#${functionName}`, 'color: #3B82F6', 'color: unset');\n            this.logger.log(Object.assign({ controllerId: this.controllerId }, args));\n            this.logger.groupEnd();\n        };\n        this.debug = (_b = (_a = options === null || options === void 0 ? void 0 : options.debug) !== null && _a !== void 0 ? _a : controller.application.stimulusUseDebug) !== null && _b !== void 0 ? _b : defaultOptions.debug;\n        this.logger = (_c = options === null || options === void 0 ? void 0 : options.logger) !== null && _c !== void 0 ? _c : defaultOptions.logger;\n        this.controller = controller;\n        this.controllerId = controller.element.id || controller.element.dataset.id;\n        // make copies of lifecycle functions\n        this.controllerInitialize = controller.initialize.bind(controller);\n        this.controllerConnect = controller.connect.bind(controller);\n        this.controllerDisconnect = controller.disconnect.bind(controller);\n    }\n}\n//# sourceMappingURL=stimulus_use.js.map","import { StimulusUse } from '../stimulus_use';\nimport { method } from '../support/index';\nexport class UseHover extends StimulusUse {\n    constructor(controller, options = {}) {\n        super(controller, options);\n        this.observe = () => {\n            this.targetElement.addEventListener('mouseenter', this.onEnter);\n            this.targetElement.addEventListener('mouseleave', this.onLeave);\n        };\n        this.unobserve = () => {\n            this.targetElement.removeEventListener('mouseenter', this.onEnter);\n            this.targetElement.removeEventListener('mouseleave', this.onLeave);\n        };\n        this.onEnter = () => {\n            method(this.controller, 'mouseEnter').call(this.controller);\n            this.log('mouseEnter', { hover: true });\n        };\n        this.onLeave = () => {\n            method(this.controller, 'mouseLeave').call(this.controller);\n            this.log('mouseLeave', { hover: false });\n        };\n        this.targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        this.controller = controller;\n        this.enhanceController();\n        this.observe();\n    }\n    enhanceController() {\n        const controllerDisconnect = this.controller.disconnect.bind(this.controller);\n        const disconnect = () => {\n            this.unobserve();\n            controllerDisconnect();\n        };\n        Object.assign(this.controller, { disconnect });\n    }\n}\nexport const useHover = (controller, options = {}) => {\n    const observer = new UseHover(controller, options);\n    return [observer.observe, observer.unobserve];\n};\n//# sourceMappingURL=use-hover.js.map","import { StimulusUse } from '../stimulus_use';\nimport { method } from '../support/index';\nexport class UseMutation extends StimulusUse {\n    constructor(controller, options = {}) {\n        super(controller, options);\n        this.observe = () => {\n            try {\n                this.observer.observe(this.targetElement, this.options);\n            }\n            catch (error) {\n                this.controller.application.handleError(error, \"At a minimum, one of childList, attributes, and/or characterData must be true\", {});\n            }\n        };\n        this.unobserve = () => {\n            this.observer.disconnect();\n        };\n        this.mutation = (entries) => {\n            method(this.controller, 'mutate').call(this.controller, entries);\n            this.log('mutate', { entries });\n        };\n        this.targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        this.controller = controller;\n        this.options = options;\n        this.observer = new MutationObserver(this.mutation);\n        this.enhanceController();\n        this.observe();\n    }\n    enhanceController() {\n        const controllerDisconnect = this.controller.disconnect.bind(this.controller);\n        const disconnect = () => {\n            this.unobserve();\n            controllerDisconnect();\n        };\n        Object.assign(this.controller, { disconnect });\n    }\n}\nexport const useMutation = (controller, options = {}) => {\n    const observer = new UseMutation(controller, options);\n    return [observer.observe, observer.unobserve];\n};\n//# sourceMappingURL=use-mutation.js.map","import { method } from '../support/index';\nexport const useWindowResize = (controller) => {\n    const callback = (event) => {\n        const { innerWidth, innerHeight } = window;\n        const payload = {\n            height: innerHeight || Infinity,\n            width: innerWidth || Infinity,\n            event\n        };\n        method(controller, 'windowResize').call(controller, payload);\n    };\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    const observe = () => {\n        window.addEventListener('resize', callback);\n        callback();\n    };\n    const unobserve = () => {\n        window.removeEventListener('resize', callback);\n    };\n    Object.assign(controller, {\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-window-resize.js.map","import { Controller } from 'stimulus';\nclass DebounceController extends Controller {\n}\nDebounceController.debounces = [];\nconst defaultWait = 200;\nconst debounce = (fn, wait = defaultWait) => {\n    let timeoutId = null;\n    return function () {\n        const args = arguments;\n        const context = this;\n        const callback = () => fn.apply(context, args);\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(callback, wait);\n    };\n};\nexport const useDebounce = (controller, options) => {\n    var _a;\n    const constructor = controller.constructor;\n    (_a = constructor.debounces) === null || _a === void 0 ? void 0 : _a.forEach((func) => {\n        if (typeof func === \"string\") {\n            controller[func] = debounce(controller[func], options === null || options === void 0 ? void 0 : options.wait);\n        }\n        if (typeof func === \"object\") {\n            const { name, wait } = func;\n            if (!name)\n                return;\n            controller[name] = debounce(controller[name], wait || (options === null || options === void 0 ? void 0 : options.wait));\n        }\n    });\n};\n//# sourceMappingURL=use-debounce.js.map","import {useWindowResize} from \"stimulus-use\";\nimport {BaseController} from \"../utilities/base_controller\";\n\nexport class AutosizeController extends BaseController {\n\n  initialize() {\n    this._handler = this._handler.bind(this);\n  }\n\n  connect() {\n    let target = this.el as HTMLTextAreaElement;\n    target.style.resize = \"none\";\n    target.style.boxSizing = \"border-box\";\n    target.addEventListener(\"input\", this._handler);\n    target.addEventListener(\"focus\", this._handler);\n    useWindowResize(this);\n    requestAnimationFrame(this._handler);\n  }\n\n  windowResize() {\n    this._handler();\n  }\n\n  private _handler() {\n    this.autosize(this.el as HTMLTextAreaElement);\n  };\n\n  private autosize(element: HTMLTextAreaElement) {\n    let offset = element.offsetHeight - element.clientHeight;\n    element.style.height = \"auto\";\n    element.style.height = element.scrollHeight + offset + \"px\";\n  }\n\n}\n","import {BaseController} from \"../utilities/base_controller\";\n\nexport class CharCountController extends BaseController {\n\n  static targets = [\"input\", \"output\"];\n  static values = {min: Number, max: Number};\n  static classes = [\"error\"];\n\n  declare readonly inputTarget: HTMLInputElement | HTMLTextAreaElement;\n  declare readonly outputTarget: HTMLElement;\n  declare minValue: number;\n  declare hasMinValue: boolean;\n  declare maxValue: number;\n  declare hasMaxValue: boolean;\n  declare errorClass: string;\n  declare hasErrorClass: boolean;\n\n  initialize() {\n    this._updateCharCount = this._updateCharCount.bind(this);\n  }\n\n  connect() {\n    this._updateCharCount();\n    this.inputTarget.addEventListener(\"input\", this._updateCharCount);\n  }\n\n  disconnect() {\n    this.inputTarget.removeEventListener(\"input\", this._updateCharCount);\n  }\n\n  private _updateCharCount() {\n    let charCount = this.inputTarget.value.length;\n    this.outputTarget.innerText = charCount.toString();\n    if (this.hasErrorClass) {\n      if (this._isValidCount(charCount)) {\n        this.outputTarget.classList.remove(this.errorClass);\n      } else {\n        this.outputTarget.classList.add(this.errorClass);\n      }\n    }\n  }\n\n  private _isValidCount(count: number) {\n    let min = 0;\n    let max = 99999;\n\n    if (this.hasMinValue) {\n      min = this.minValue;\n    }\n\n    if (this.hasMaxValue) {\n      max = this.maxValue;\n    }\n\n    return count >= min && count <= max;\n  }\n\n}\n","import {BaseController} from '../utilities/base_controller';\n\nexport class CheckboxSelectAllController extends BaseController {\n  static targets = ['selectAll', 'checkbox'];\n\n  declare readonly hasSelectAllTarget: boolean;\n  declare readonly selectAllTarget: HTMLInputElement;\n  declare readonly checkboxTargets: HTMLInputElement[];\n\n  private get checked() {\n    return this.checkboxTargets.filter(checkbox => checkbox.checked);\n  }\n\n  private get unchecked() {\n    return this.checkboxTargets.filter(checkbox => !checkbox.checked);\n  }\n\n  initialize() {\n    this.toggle = this.toggle.bind(this);\n    this.refresh = this.refresh.bind(this);\n  }\n\n  connect() {\n    requestAnimationFrame(() => {\n      if (!this.hasSelectAllTarget) {\n        return;\n      }\n\n      this.selectAllTarget.addEventListener('change', this.toggle);\n      this.checkboxTargets.forEach(checkbox => checkbox.addEventListener('change', this.refresh));\n      this.refresh();\n    });\n  }\n\n  disconnect() {\n    if (!this.hasSelectAllTarget) {\n      return;\n    }\n\n    this.selectAllTarget.removeEventListener('change', this.toggle);\n    this.checkboxTargets.forEach((checkbox) => checkbox.removeEventListener('change', this.refresh));\n  }\n\n  private toggle(event: Event) {\n    event.preventDefault();\n    let target = event.target as HTMLInputElement;\n    this.checkboxTargets.forEach((checkbox) => checkbox.checked = target.checked);\n  }\n\n  private refresh() {\n    const checkboxesCount = this.checkboxTargets.length;\n    const checkboxesCheckedCount = this.checked.length;\n\n    this.selectAllTarget.checked = checkboxesCheckedCount > 0;\n    this.selectAllTarget.indeterminate = checkboxesCheckedCount > 0 && checkboxesCheckedCount < checkboxesCount;\n  }\n}","import {BaseController} from \"../utilities/base_controller\";\r\n\r\nexport class ClipboardController extends BaseController {\r\n\r\n  static targets = [\"source\", \"button\", \"copy\", \"fallback\"];\r\n  static values = {removeUnused: Boolean};\r\n\r\n  declare readonly sourceTarget: HTMLElement;\r\n  declare readonly copyTarget: HTMLElement;\r\n  declare readonly hasCopyTarget: boolean;\r\n  declare readonly fallbackTarget: HTMLElement;\r\n  declare readonly hasFallbackTarget: boolean;\r\n\r\n  declare readonly hasRemoveUnusedValue: boolean;\r\n  declare readonly removeUnusedValue: boolean;\r\n\r\n  supported = false;\r\n\r\n  connect() {\r\n    this.supported = document.queryCommandSupported(\"copy\");\r\n\r\n    if (this.hasRemoveUnusedValue && this.removeUnusedValue) {\r\n      if (this.supported && this.hasFallbackTarget) {\r\n        this.fallbackTarget.remove();\r\n      } else if (this.hasCopyTarget) {\r\n        this.copyTarget.remove();\r\n      }\r\n    }\r\n  }\r\n\r\n  select(event: MouseEvent) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    (this.sourceTarget as HTMLInputElement | HTMLTextAreaElement).select();\r\n  }\r\n\r\n  copy(event: ClipboardEvent) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    (this.sourceTarget as HTMLInputElement | HTMLTextAreaElement).select();\r\n    if (this.supported) {\r\n      document.execCommand(\"copy\");\r\n    }\r\n  }\r\n}\r\n","export function isHTMLLinkElement(element: Element): element is HTMLLinkElement {\n  return element.nodeName == \"LINK\";\n}\n\nexport function isHTMLAnchorElement(element: Element): element is HTMLAnchorElement {\n  return element.nodeName == \"A\";\n}\n\nexport function isHTMLFormElement(element: Element): element is HTMLFormElement {\n  return element.nodeName == \"FORM\";\n}\n\nexport function isHTMLInputElement(element: Element): element is HTMLInputElement {\n  return element.nodeName == \"INPUT\";\n}\n\nexport function isHTMLButtonElement(element: Element): element is HTMLButtonElement {\n  return element.nodeName == \"BUTTON\";\n}\n\nexport function isHTMLSelectElement(element: Element): element is HTMLSelectElement {\n  return element.nodeName == \"SELECT\";\n}\n\nexport function isHTMLImageElement(element: Element): element is HTMLImageElement {\n  return element.nodeName == \"IMG\";\n}\n\nexport function isElementCheckable(element: Element): element is HTMLInputElement & { checked: boolean } {\n  return isHTMLInputElement(element) && (element.type === \"radio\" || element.type === \"checkbox\");\n}\n","import {BaseController} from '../utilities/base_controller';\nimport {isHTMLFormElement, isHTMLAnchorElement} from \"../utilities/elements\";\n\nexport class ConfirmController extends BaseController {\n\n  static values = {\n    message: String,\n  };\n\n  declare readonly messageValue: string;\n  declare readonly hasMessageValue: boolean;\n\n  get message(): string {\n    return this.hasMessageValue ? this.messageValue : 'Are you sure?';\n  }\n\n  initialize() {\n    this.confirm = this.confirm.bind(this);\n  }\n\n  connect() {\n    requestAnimationFrame(() => {\n      let element = this.el;\n      if (isHTMLFormElement(element)) {\n        element.addEventListener(\"submit\", this.confirm);\n      } else if (isHTMLAnchorElement(element)) {\n        element.addEventListener(\"click\", this.confirm);\n      } else {\n        throw new Error(\"Can't handle confirmation on attached element\");\n      }\n    });\n  }\n\n  confirm(event: Event) {\n    if (!(window.confirm(this.message))) {\n      event.preventDefault();\n      this.dispatch(this.el, \"confirm:cancelled\");\n    }\n  }\n\n}\n","import {BaseController} from \"../utilities/base_controller\";\n\nexport class ConfirmNavigationController extends BaseController {\n\n  static values = {_message: String};\n\n  declare readonly _messageValue: string;\n  declare readonly hasMessageValue: boolean;\n\n  get _message(): string {\n    return this.hasMessageValue ? this._messageValue : \"Do you want to leave this page? Changes you made may not be saved\";\n  }\n\n  initialize() {\n    this.handlePopstate = this.handlePopstate.bind(this);\n    this.handleTurboNavigation = this.handleTurboNavigation.bind(this);\n  }\n\n  connect() {\n    window.onbeforeunload = () => this._message;\n    window.addEventListener(\"popstate\", this.handlePopstate);\n    window.addEventListener(\"submit\", () => {\n      window.removeEventListener(\"popstate\", this.handlePopstate);\n      window.onbeforeunload = null;\n    });\n    window.addEventListener(\"turbolinks:before-visit\", this.handleTurboNavigation);\n    window.addEventListener(\"turbo:before-visit\", this.handleTurboNavigation);\n  }\n\n  handlePopstate(_event: PopStateEvent) {\n    return false;\n  }\n\n  handleTurboNavigation(event: Event) {\n    if (!confirm(this._message)) {\n      event.preventDefault();\n    }\n  }\n\n}\n","import {BaseController} from \"../utilities/base_controller\";\n\nexport class DebugController extends BaseController {\n\n  static targets = [\"test\"];\n  declare testTargets: HTMLElement[];\n\n  connect() {\n    console.log(\"Debug Controller\", this, this.testTargets);\n  }\n}\n","import {BaseController} from \"../utilities/base_controller\";\r\nimport {isElementCheckable, isHTMLSelectElement} from \"../utilities/elements\";\r\n\r\nexport class DetectDirtyController extends BaseController {\r\n\r\n  get _cacheAttrName(): string {\r\n    return 'detect-dirty-load-value';\r\n  }\r\n\r\n  initialize() {\r\n    this._checkDirty = this._checkDirty.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n\r\n    this._cacheLoadValues();\r\n    this._checkDirty();\r\n    element.addEventListener(\"input\", this._checkDirty);\r\n    element.addEventListener(\"change\", this._checkDirty);\r\n  }\r\n\r\n  disconnect() {\r\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    element.removeEventListener(\"input\", this._checkDirty);\r\n    element.removeEventListener(\"change\", this._checkDirty);\r\n  }\r\n\r\n  restore(event?: Event) {\r\n    event?.preventDefault();\r\n    this._restoreElementFromLoadValue();\r\n  }\r\n\r\n  private _getElementValue(): boolean | string {\r\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    return isElementCheckable(element) ? element.checked : element.value;\r\n  }\r\n\r\n  private _getElementLoadValue(): boolean | string {\r\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    let value = element.getAttribute(this._cacheAttrName);\r\n    if (isElementCheckable(element)) {\r\n      return value == null ? element.defaultChecked : value == \"true\";\r\n    } else if (value !== null) {\r\n      return value;\r\n    }\r\n\r\n    if (isHTMLSelectElement(element)) {\r\n      let options = Array.from(element.options);\r\n      options.forEach((option) => {\r\n        if (option.defaultSelected) {\r\n          element.value = option.value;\r\n          return option.value;\r\n        }\r\n      });\r\n    }\r\n\r\n    return value!;\r\n  }\r\n\r\n  private _elementHasCachedLoadValue(): boolean {\r\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    return element.hasAttribute(this._cacheAttrName);\r\n  }\r\n\r\n  private _checkDirty() {\r\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    if (this._isElementDirty()) {\r\n      element.setAttribute('data-dirty', \"true\");\r\n    } else {\r\n      element.removeAttribute('data-dirty');\r\n    }\r\n  }\r\n\r\n  private _isElementDirty(): boolean {\r\n    return this._getElementValue() !== this._getElementLoadValue();\r\n  }\r\n\r\n  private _restoreElementFromLoadValue() {\r\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    let cacheValue = element.getAttribute(this._cacheAttrName);\r\n\r\n    if (isElementCheckable(element)) {\r\n      element.setAttribute(this._cacheAttrName, element.checked.toString());\r\n      element.checked = cacheValue == null ? element.defaultChecked : cacheValue == \"true\";\r\n    } else if (isHTMLSelectElement(element)) {\r\n      if (cacheValue == null) {\r\n        let options = Array.from(element.options);\r\n        options.forEach((option) => {\r\n          if (option.defaultSelected) {\r\n            element.value = option.value;\r\n            return;\r\n          }\r\n        });\r\n      } else {\r\n        element.value = cacheValue;\r\n      }\r\n\r\n    } else {\r\n      element.value = cacheValue == null ? element.defaultValue : cacheValue;\r\n    }\r\n  }\r\n\r\n  private _cacheLoadValues(): void {\r\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    if (!this._elementHasCachedLoadValue() && isElementCheckable(element)) {\r\n      element.setAttribute(this._cacheAttrName, element.checked.toString());\r\n    } else {\r\n      element.setAttribute(this._cacheAttrName, element.value.toString());\r\n    }\r\n  }\r\n}\r\n\r\nexport function isDirty(element: HTMLElement) {\r\n  return element.hasAttribute(\"data-dirty\");\r\n}\r\n","import {BaseController} from \"../utilities/base_controller\";\r\nimport {isElementCheckable, isHTMLSelectElement} from \"../utilities/elements\";\r\n\r\nexport class DetectDirtyFormController extends BaseController {\r\n\r\n  get _formElements(): Array<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement> {\r\n    return Array.from(this.el.querySelectorAll('input, select, textarea'));\r\n  }\r\n\r\n  get _cacheAttrName(): string {\r\n    return 'detect-dirty-load-value';\r\n  }\r\n\r\n  initialize() {\r\n    this._checkDirty = this._checkDirty.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n\r\n    this._cacheLoadValues();\r\n    this._checkDirty();\r\n    element.addEventListener(\"input\", this._checkDirty);\r\n    element.addEventListener(\"change\", this._checkDirty);\r\n  }\r\n\r\n  disconnect() {\r\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    element.removeEventListener(\"input\", this._checkDirty);\r\n    element.removeEventListener(\"change\", this._checkDirty);\r\n  }\r\n\r\n  restore(event?: Event) {\r\n    event?.preventDefault()\r\n    this._formElements.forEach(element => this._restoreElementFromLoadValue(element))\r\n  }\r\n\r\n  private _getElementValue(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement): boolean | string {\r\n    return isElementCheckable(element) ? element.checked : element.value;\r\n  }\r\n\r\n  private _getElementLoadValue(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement): boolean | string {\r\n    let value = element.getAttribute(this._cacheAttrName);\r\n    if (isElementCheckable(element)) {\r\n      return value == null ? element.defaultChecked : value == \"true\";\r\n    } else if (value !== null) {\r\n      return value;\r\n    }\r\n\r\n    if (isHTMLSelectElement(element)) {\r\n      let options = Array.from(element.options);\r\n      options.forEach((option) => {\r\n        if (option.defaultSelected) {\r\n          element.value = option.value;\r\n          return option.value;\r\n        }\r\n      });\r\n    }\r\n\r\n    return value!;\r\n  }\r\n\r\n  private _elementHasCachedLoadValue(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement): boolean {\r\n    return element.hasAttribute(this._cacheAttrName);\r\n  }\r\n\r\n  private _checkElementDirty(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement) {\r\n    if (this._isElementDirty(element)) {\r\n      element.setAttribute('data-dirty', \"true\");\r\n    } else {\r\n      element.removeAttribute('data-dirty');\r\n    }\r\n  }\r\n\r\n  private _isElementDirty(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement): boolean {\r\n    return this._getElementValue(element) !== this._getElementLoadValue(element);\r\n  }\r\n\r\n  private _cacheElementLoadValue(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement) {\r\n    if (!this._elementHasCachedLoadValue(element) && isElementCheckable(element)) {\r\n      element.setAttribute(this._cacheAttrName, element.checked.toString());\r\n    } else {\r\n      element.setAttribute(this._cacheAttrName, element.value.toString());\r\n    }\r\n  }\r\n\r\n  private _restoreElementFromLoadValue(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement) {\r\n    let cacheValue = element.getAttribute(this._cacheAttrName);\r\n\r\n    if (isElementCheckable(element)) {\r\n      element.setAttribute(this._cacheAttrName, element.checked.toString());\r\n      element.checked = cacheValue == null ? element.defaultChecked : cacheValue == \"true\";\r\n    } else if (isHTMLSelectElement(element)) {\r\n      if (cacheValue == null) {\r\n        let options = Array.from(element.options);\r\n        options.forEach((option) => {\r\n          if (option.defaultSelected) {\r\n            element.value = option.value;\r\n            return;\r\n          }\r\n        });\r\n      } else {\r\n        element.value = cacheValue;\r\n      }\r\n\r\n    } else {\r\n      element.value = cacheValue == null ? element.defaultValue : cacheValue;\r\n    }\r\n  }\r\n\r\n  private _cacheLoadValues(): void {\r\n    this._formElements.forEach(el => this._cacheElementLoadValue(el));\r\n  }\r\n\r\n  private _checkDirty(): void {\r\n    this._formElements.forEach(el => this._checkElementDirty(el));\r\n    if (this._formElements.some(el => isDirty(el))) {\r\n      this.el.setAttribute(\"data-dirty\", \"true\")\r\n    } else {\r\n      this.el.removeAttribute(\"data-dirty\")\r\n    }\r\n  }\r\n}\r\n\r\nexport function isDirty(element: HTMLElement) {\r\n  return element.hasAttribute(\"data-dirty\");\r\n}\r\n","import {BaseController} from \"../utilities/base_controller\";\r\n\r\nexport class DisableInputsController extends BaseController {\r\n\r\n  static targets = [\"disabler\", \"disable\"];\r\n\r\n  static values = {\r\n    clear: Boolean,\r\n  };\r\n\r\n  declare readonly hasDisablerTarget: boolean;\r\n  declare readonly disablerTarget: HTMLInputElement;\r\n  declare readonly disableTargets: Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\r\n  declare readonly clearValue: boolean;\r\n  declare readonly hasClearValue: boolean;\r\n\r\n  connect() {\r\n    this.toggle();\r\n  }\r\n\r\n  toggle() {\r\n    if (this.hasDisablerTarget && this.disablerTarget.checked) {\r\n      this.disableInputs();\r\n    } else {\r\n      this.enableInputs();\r\n    }\r\n  }\r\n\r\n  disableInputs() {\r\n    let shouldClear = this.hasClearValue && this.clearValue;\r\n    this.disableTargets.forEach((el, _) => {\r\n      if (shouldClear) {\r\n        el.value = \"\";\r\n      }\r\n      el.disabled = true;\r\n    });\r\n  }\r\n\r\n  enableInputs() {\r\n    this.disableTargets.forEach((el, _) => {\r\n      el.disabled = false;\r\n    });\r\n  }\r\n}\r\n","import {BaseController} from '../utilities/base_controller';\nimport {isHTMLAnchorElement, isHTMLButtonElement, isHTMLInputElement} from \"../utilities/elements\";\n\nexport class DisableWithController extends BaseController {\n\n  static values = {\n    message: String,\n    timeout: Number,\n  };\n\n  declare readonly messageValue: string;\n  declare readonly hasMessageValue: boolean;\n  declare readonly timeoutValue: number;\n  declare readonly hasTimeoutValue: boolean;\n\n  _cacheText?: string;\n  _timeoutHandle?: ReturnType<typeof window.setTimeout>;\n\n  get _message(): string {\n    return this.hasMessageValue ? this.messageValue : 'Submitting...';\n  }\n\n  get _timeout(): number {\n    return this.hasTimeoutValue ? this.timeoutValue : 1000;\n  }\n\n  initialize() {\n    this.enable = this.enable.bind(this);\n    this.disable = this.disable.bind(this);\n  }\n\n  connect() {\n    requestAnimationFrame(() => {\n      this.el.addEventListener(\"click\", this.disable);\n    });\n  }\n\n  disconnect() {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle);\n    }\n  }\n\n  disable(event?: Event) {\n    let element = this.el;\n\n    if (this._isDisabled(element)) {\n      event?.preventDefault();\n      event?.stopImmediatePropagation();\n    } else {\n      this._cacheText = this._getElText(element);\n      this._setElText(element, this._message);\n      this._disable(element);\n      setTimeout(this.enable, this._timeout);\n    }\n  }\n\n  enable(event?: Event) {\n    event?.preventDefault();\n    let element = this.el;\n    if (this._isDisabled(element)) {\n      this._setElText(element, this._cacheText!);\n      this._enable(element);\n    }\n  }\n\n  _isDisabled(el: HTMLElement): boolean {\n    if ((isHTMLInputElement(el) && el.type == \"submit\") || isHTMLButtonElement(el)) {\n      return el.disabled;\n    } else {\n      return el.dataset.disabled == \"true\";\n    }\n  }\n\n  _getElText(el: HTMLElement): string {\n    if (isHTMLInputElement(el) && el.type == \"submit\") {\n      return el.value;\n    } else {\n      return el.innerText;\n    }\n  }\n\n  _setElText(el: HTMLElement, str: string) {\n    if (isHTMLInputElement(el) && el.type == \"submit\") {\n      el.value = str;\n    } else if (isHTMLButtonElement(el) || isHTMLAnchorElement(el)) {\n      el.innerText = str;\n    }\n  }\n\n  _disable(el: HTMLElement) {\n    if ((isHTMLInputElement(el) && el.type == \"submit\") || isHTMLButtonElement(el)) {\n      el.disabled = true;\n    } else {\n      el.dataset.disabled = \"true\";\n    }\n  }\n\n  _enable(el: HTMLElement) {\n    if (isHTMLInputElement(el) && el.type == \"submit\" || isHTMLButtonElement(el)) {\n      el.disabled = false;\n    } else {\n      el.dataset.disabled = undefined;\n    }\n  }\n\n}\n","import {BaseController} from \"../utilities/base_controller\";\n\nexport class DismissableController extends BaseController {\n\n  dismiss() {\n    this.el.remove();\n  }\n\n}\n","import {BaseController} from '../utilities/base_controller';\nimport _get from \"lodash-es/get\";\nimport _set from \"lodash-es/set\";\n\nexport class ElementSaveController extends BaseController {\n\n  static targets = [\n    \"element\",\n  ];\n  static values = {\n    id: String,\n    attributes: String,\n    restoreOnLoad: Boolean,\n  };\n  declare readonly hasElementTarget: boolean;\n  declare readonly elementTarget: HTMLElement;\n  declare readonly elementTargets: HTMLElement[];\n  declare readonly idValue: string;\n  declare readonly attributesValue: string;\n  declare readonly hasIdValue: boolean;\n  declare readonly restoreOnLoadValue: boolean;\n  declare readonly hasRestoreOnLoadValue: boolean;\n\n  get _id() {\n    if (this.hasIdValue) {\n      return this.idValue;\n    }\n    let elementID = this.el.id;\n\n    if (elementID !== \"\") {\n      return elementID;\n    } else {\n      throw new Error(`No ID value to uniquely identify this element. Please either specify data-${this.identifier}-id-value or give this element an 'id' attribute. `);\n    }\n  }\n\n  get _uniqueIdentifier() {\n    const url = location.href;\n    return `${url} ${this._id}`;\n  }\n\n  get _restoreOnLoad() {\n    return this.hasRestoreOnLoadValue ? this.restoreOnLoadValue : true;\n  }\n\n  get _element(): HTMLElement {\n    return this.hasElementTarget ? this.elementTarget : this.el;\n  }\n\n  connect() {\n    requestAnimationFrame(() => {\n      if (this._restoreOnLoad) {\n        this.restore();\n      }\n    });\n  }\n\n  clear(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    localStorage.removeItem(this._uniqueIdentifier);\n    this.dispatch(this._element, `element-save:cleared`);\n  }\n\n  save(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    let element = this._element;\n    let attributes = this.attributesValue.split(\" \");\n    let data: { [idx: string]: any } = {};\n    attributes.forEach((attr: string) => data[attr] = _get(element, attr));\n    localStorage.setItem(this._uniqueIdentifier, JSON.stringify(data));\n    this.dispatch(element, `element-save:save:success`);\n  }\n\n  restore(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    let element = this._element;\n    if (localStorage.getItem(this._uniqueIdentifier)) {\n      const savedData = JSON.parse(localStorage.getItem(this._uniqueIdentifier)!); // get and parse the saved data from localStorage\n      Object.keys(savedData).forEach((attr: string) => {\n        _set(element as HTMLElement, attr, savedData[attr]);\n      });\n      this.dispatch(element, `element-save:restore:success`);\n    } else {\n      this.dispatch(element, `element-save:restore:empty`);\n    }\n  }\n\n}\n","import {useMutation} from \"stimulus-use\";\nimport {BaseController} from \"../utilities/base_controller\";\n\nexport class EmptyDomController extends BaseController {\n\n  static classes = [\"empty\", \"notEmpty\"];\n  static values = {scopeSelector: String};\n\n  declare hasEmptyClass: boolean;\n  declare emptyClass: string;\n  declare hasNotEmptyClass: boolean;\n  declare notEmptyClass: string;\n\n  declare hasScopeSelectorValue: boolean;\n  declare scopeSelectorValue: string;\n\n  get emptyClasses(): string[] {\n    return this.emptyClass.split(\" \");\n  }\n\n  get notEmptyClasses(): string[] {\n    return this.notEmptyClass.split(\" \");\n  }\n\n  get children(): Element[] {\n    let element = this.el;\n    if (this.hasScopeSelectorValue) {\n      return Array.from(element.querySelectorAll(this.scopeSelectorValue));\n    } else {\n      return Array.from(element.children);\n    }\n  }\n\n  connect() {\n    useMutation(this, {element: this.el, childList: true});\n    this.checkEmpty();\n  }\n\n  mutate(entries: MutationRecord[]) {\n    this.checkEmpty();\n  }\n\n  checkEmpty() {\n    let element = this.el;\n    let children = this.children;\n    if (children.length === 0) {\n      this._removeNotEmptyClasses();\n      this._addEmptyClasses();\n      this.dispatch(element as HTMLElement, \"dom:empty\");\n    } else {\n      this._addNotEmptyClasses();\n      this._removeEmptyClasses();\n      this.dispatch(element as HTMLElement, \"dom:not-empty\", {detail: {count: children.length}});\n    }\n  }\n\n  private _removeEmptyClasses() {\n    if (this.hasEmptyClass) {\n      this.el.classList.remove(...this.emptyClasses);\n    }\n  }\n\n  private _addNotEmptyClasses() {\n    if (this.hasNotEmptyClass) {\n      this.el.classList.add(...this.notEmptyClasses);\n    }\n  }\n\n  private _addEmptyClasses() {\n    if (this.hasEmptyClass) {\n      this.el.classList.add(...this.emptyClasses);\n    }\n  }\n\n  private _removeNotEmptyClasses() {\n    if (this.hasNotEmptyClass) {\n      this.el.classList.remove(...this.notEmptyClasses);\n    }\n  }\n}\n","import {BaseController} from \"../utilities/base_controller\";\r\n\r\nexport class EnableInputsController extends BaseController {\r\n\r\n  static targets = [\"enabler\", \"enable\"];\r\n\r\n  static values = {\r\n    clear: Boolean,\r\n  };\r\n\r\n  declare readonly hasEnablerTarget: boolean;\r\n  declare readonly enablerTarget: HTMLInputElement;\r\n  declare readonly enableTargets: Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\r\n  declare readonly clearValue: boolean;\r\n  declare readonly hasClearValue: boolean;\r\n\r\n  connect() {\r\n    this.toggle();\r\n  }\r\n\r\n  toggle() {\r\n    if (this.hasEnablerTarget && this.enablerTarget.checked) {\r\n      this.enableInputs();\r\n    } else {\r\n      this.disableInputs();\r\n    }\r\n  }\r\n\r\n  disableInputs() {\r\n    let shouldClear = this.hasClearValue && this.clearValue;\r\n    this.enableTargets.forEach((el, _) => {\r\n      if (shouldClear) {\r\n        el.value = \"\";\r\n      }\r\n      el.disabled = true;\r\n    });\r\n  }\r\n\r\n  enableInputs() {\r\n    this.enableTargets.forEach((el, _) => {\r\n      el.disabled = false;\r\n    });\r\n  }\r\n}\r\n","import {BaseController} from \"../utilities/base_controller\";\r\n\r\nexport class FallbackImageController extends BaseController {\r\n\r\n  static values = {placeholder: String};\r\n\r\n  declare readonly placeholderValue: string;\r\n  declare readonly hasPlaceholderValue: boolean;\r\n\r\n  connect() {\r\n    let element = this.el as HTMLImageElement;\r\n\r\n    element.onerror = () => {\r\n      if (this.hasPlaceholderValue) {\r\n        element.src = this.placeholderValue;\r\n      } else {\r\n        element.style.display = \"none\";\r\n      }\r\n    };\r\n  }\r\n\r\n}\r\n","import {BaseController} from '../utilities/base_controller';\r\n\r\nexport class FormRcController extends BaseController {\r\n\r\n  static targets = [\"form\"];\r\n\r\n  declare readonly formTarget: HTMLFormElement;\r\n\r\n  submit(event?: Event) {\r\n    event?.preventDefault();\r\n    this.dispatch(this.formTarget, \"submit\");\r\n    this.formTarget.submit();\r\n  }\r\n\r\n  reset(event?: Event) {\r\n    event?.preventDefault();\r\n    this.dispatch(this.formTarget, \"reset\");\r\n    this.formTarget.reset();\r\n  }\r\n\r\n}","import {BaseController} from '../utilities/base_controller';\r\nimport {isHTMLFormElement, isHTMLInputElement} from \"../utilities/elements\";\r\n\r\ninterface FormSavePayload {\r\n  [idx: string]: {\r\n    [idx: string]: string | boolean\r\n  }\r\n}\r\n\r\nexport class FormSaveController extends BaseController {\r\n\r\n  static values = {\r\n    id: String,\r\n    restoreOnLoad: Boolean,\r\n    clearOnSubmit: Boolean,\r\n  };\r\n\r\n  declare readonly idValue: string;\r\n  declare readonly hasIdValue: boolean;\r\n  declare readonly restoreOnLoadValue: boolean;\r\n  declare readonly hasRestoreOnLoadValue: boolean;\r\n  declare readonly clearOnSubmitValue: boolean;\r\n  declare readonly hasClearOnSubmitValue: boolean;\r\n\r\n  get _formID() {\r\n    if (this.hasIdValue) {\r\n      return this.idValue;\r\n    }\r\n    let elementID = (this.el as HTMLFormElement).id;\r\n\r\n    if (elementID !== \"\") {\r\n      return elementID;\r\n    } else {\r\n      throw new Error(`No ID value to uniquely identify this form. Please either specify data-${this.identifier}-id-value or give this form an 'id' attribute. `);\r\n    }\r\n  }\r\n\r\n  get _formIdentifier() {\r\n    const url = location.href;\r\n    return `${url} ${this._formID}`;\r\n  }\r\n\r\n  get _formElements() {\r\n    return (this.el as HTMLFormElement).elements;\r\n  }\r\n\r\n  get _formData(): FormSavePayload {\r\n    let data: FormSavePayload = {[this._formIdentifier]: {}};\r\n    for (const element of this._formElements) {\r\n      let el = element as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\r\n      if (el.name.length > 0) {\r\n        if (isHTMLInputElement(el) && el.type == \"checkbox\") {\r\n          data[this._formIdentifier][el.name] = el.checked;\r\n        } else if (isHTMLInputElement(el) && el.type == \"radio\") {\r\n          if (el.checked) {\r\n            data[this._formIdentifier][el.name] = el.value;\r\n          }\r\n        } else {\r\n          data[this._formIdentifier][el.name] = el.value;\r\n        }\r\n      }\r\n    }\r\n    return data;\r\n  }\r\n\r\n  get _restoreOnLoad() {\r\n    return this.hasRestoreOnLoadValue ? this.restoreOnLoadValue : true;\r\n  }\r\n\r\n  get _clearOnSubmit() {\r\n    return this.hasClearOnSubmitValue ? this.clearOnSubmitValue : true;\r\n  }\r\n\r\n  initialize() {\r\n    this._clear = this._clear.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      let element = this.el;\r\n      if (!isHTMLFormElement(element)) {\r\n        throw new Error('Expected controller to be mounted on a form element.');\r\n      }\r\n\r\n      if (this._restoreOnLoad) {\r\n        this.restore();\r\n      }\r\n      if (this._clearOnSubmit) {\r\n        this.el.addEventListener('submit', this._clear);\r\n      }\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    if (this._clearOnSubmit) {\r\n      this.el.removeEventListener('submit', this._clear);\r\n    }\r\n  }\r\n\r\n  _clear() {\r\n    localStorage.removeItem(this._formIdentifier);\r\n    this.dispatch(this.el, `form-save:cleared`);\r\n  }\r\n\r\n  clear(event?: Event) {\r\n    event?.preventDefault();\r\n    this._clear();\r\n  }\r\n\r\n  save(event: Event) {\r\n    event.preventDefault();\r\n    let data = this._formData;\r\n    localStorage.setItem(this._formIdentifier, JSON.stringify(data[this._formIdentifier]));\r\n    this.dispatch(this.el, `form-save:save:success`);\r\n  }\r\n\r\n  restore(event?: Event) {\r\n    event?.preventDefault();\r\n    if (localStorage.getItem(this._formIdentifier)) {\r\n      const savedData = JSON.parse(localStorage.getItem(this._formIdentifier)!); // get and parse the saved data from localStorage\r\n      for (const element of this._formElements) {\r\n        let el = element as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\r\n        if (el.name in savedData) {\r\n          if (isHTMLInputElement(el) && el.type == \"checkbox\") {\r\n            el.checked = savedData[el.name];\r\n          } else if (isHTMLInputElement(el) && el.type == \"radio\") {\r\n            if (el.value == savedData[el.name]) {\r\n              el.checked = true;\r\n            }\r\n          } else {\r\n            el.value = savedData[el.name];\r\n          }\r\n        }\r\n      }\r\n      this.dispatch(this.el, `form-save:restore:success`);\r\n    } else {\r\n      this.dispatch(this.el, `form-save:restore:empty`);\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"../utilities/base_controller\";\nimport {useIntersection} from \"stimulus-use\";\n\nexport class IntersectionController extends BaseController {\n\n  static values = {threshold: String};\n\n  declare readonly isVisible: boolean;\n  declare readonly thresholdValue: string;\n  declare readonly hasThresholdValue: boolean;\n\n  get threshold(): number[] {\n    if (this.hasThresholdValue) {\n      return this.thresholdValue.split(',').map(val => Number.parseFloat(val.trim())).filter(val => val >= 0 && val <= 1);\n    } else {\n      return [0, 1];\n    }\n  }\n\n  connect() {\n    useIntersection(this, {\n      threshold: this.threshold,\n      element: this.el,\n    });\n  }\n\n  appear(entry: IntersectionObserverEntry) {\n    this.dispatch(\n      this.el,\n      \"intersection:appear\",\n      {\n        detail: {\n          element: this.el,\n        },\n      },\n    );\n  };\n\n  disappear(entry: IntersectionObserverEntry) {\n    this.dispatch(\n      this.el,\n      \"intersection:disappear\",\n      {\n        detail: {\n          element: this.el,\n        },\n      },\n    );\n  };\n\n}\n","import {useIntersection} from \"stimulus-use\";\nimport {AsyncBlockController} from \"./async_block_controller\";\n\nexport class LazyBlockController extends AsyncBlockController {\n\n  declare observe: () => void;\n  declare unobserve: () => void;\n  declare isVisible: boolean;\n  declare disappear: () => void;\n\n  connect() {\n    let element = this.el;\n\n    if (\"IntersectionObserver\" in window) {\n      [this.observe, this.unobserve] = useIntersection(this, {element, threshold: 0.3});\n    } else {\n      // Client doesn't support intersection observer, fallback to pre-loading\n      this.loadContent();\n    }\n  }\n\n  appear(entry: IntersectionObserverEntry) {\n    if (entry.target === this.el && entry.isIntersecting) {\n      this.loadContent();\n      if (this.unobserve) {\n        this.unobserve();\n      }\n    }\n  }\n\n}\n","const smoothSupported = \"scrollBehavior\" in document.documentElement.style;\r\nlet smoothPolyfilled: boolean;\r\n\r\nexport async function scrollToElement(element: Element, {behavior = \"smooth\", block = \"start\", inline = \"nearest\"}: ScrollIntoViewOptions = {}) {\r\n  if (behavior == \"smooth\" && !smoothSupported) {\r\n    await polyfillSmooth();\r\n  }\r\n  element.scrollIntoView({behavior, block, inline});\r\n}\r\n\r\nasync function polyfillSmooth() {\r\n  const {polyfill} = await import(/* webpackChunkName: \"smoothscroll-polyfill\" */ \"smoothscroll-polyfill\");\r\n  if (smoothPolyfilled) {\r\n    return;\r\n  }\r\n  smoothPolyfilled = true;\r\n  polyfill();\r\n}\r\n\r\nexport function getScrollParent(node: HTMLElement | null): HTMLElement | null {\r\n  if (!node) {\r\n    return null;\r\n  }\r\n  const overflowY = getComputedStyle(node).overflowY;\r\n  const isScrollable = overflowY !== \"visible\" && overflowY !== \"hidden\";\r\n\r\n  if (isScrollable && node.scrollHeight >= node.clientHeight) {\r\n    return node;\r\n  }\r\n\r\n  return getScrollParent(node.parentElement) || document.body;\r\n}\r\n","import {BaseController} from \"../utilities/base_controller\";\r\nimport {scrollToElement} from \"../utilities/scroll\";\r\nimport dialogPolyfill from \"dialog-polyfill\";\r\n\r\nexport class LightboxImageController extends BaseController {\r\n\r\n  static values = {\r\n    src: String,\r\n    srcSet: String,\r\n    sizes: String,\r\n  };\r\n  static classes = [\"modal\", \"image\"];\r\n\r\n  declare readonly hasModalClass: boolean;\r\n  declare readonly modalClass: string;\r\n  declare readonly hasImageClass: boolean;\r\n  declare readonly imageClass: string;\r\n  declare readonly hasSrcValue: boolean;\r\n  declare readonly srcValue: string;\r\n  declare readonly hasSrcSetValue: boolean;\r\n  declare readonly srcSetValue: string;\r\n  declare readonly hasSizesValue: boolean;\r\n  declare readonly sizesValue: string;\r\n  _dialog: HTMLDialogElement | null = null;\r\n\r\n  get src(): string {\r\n    return this.hasSrcValue ? this.srcValue : (this.el as HTMLImageElement).src;\r\n  }\r\n\r\n  get srcSet(): string {\r\n    return this.hasSrcSetValue ? this.srcSetValue : (this.el as HTMLImageElement).srcset;\r\n  }\r\n\r\n  get sizes(): string {\r\n    return this.hasSizesValue ? this.sizesValue : (this.el as HTMLImageElement).sizes;\r\n  }\r\n\r\n  get modalClassName() {\r\n    return this.hasModalClass ? this.modalClass : \"image-lightbox-dialog\";\r\n  }\r\n\r\n  get imageClassName() {\r\n    return this.hasImageClass ? this.imageClass : \"image-lightbox-image\";\r\n  }\r\n\r\n  initialize() {\r\n    this.open = this.open.bind(this);\r\n    this.close = this.close.bind(this);\r\n  }\r\n\r\n  connect() {\r\n  }\r\n\r\n  open() {\r\n    let element = this.el as HTMLImageElement;\r\n    if (this._dialog) {\r\n      return;\r\n    }\r\n    this._dialog = document.createElement(\"dialog\");\r\n\r\n    let image = document.createElement(\"img\") as HTMLImageElement;\r\n    image.className = this.imageClassName;\r\n    image.src = this.src;\r\n    image.srcset = this.srcSet;\r\n    image.sizes = this.sizes;\r\n    this._dialog.appendChild(image);\r\n\r\n    element.insertAdjacentElement(\"afterend\", this._dialog);\r\n    dialogPolyfill.registerDialog(this._dialog);\r\n    this._dialog.className = this.modalClassName;\r\n    this._dialog.showModal();\r\n    scrollToElement(this._dialog, {behavior: \"smooth\", block: \"end\"}).catch(() => this._dialog!.scrollIntoView(false));\r\n    this._dialog.addEventListener(\"click\", this.close);\r\n    this._dialog.addEventListener(\"cancel\", this.close);\r\n    this._dialog.addEventListener(\"close\", this.close);\r\n  }\r\n\r\n  close() {\r\n    if (this._dialog) {\r\n      this._dialog.close();\r\n      this._dialog.remove();\r\n      this._dialog = null;\r\n      scrollToElement(this.el, {behavior: \"smooth\", block: \"end\"}).catch(() => this.el.scrollIntoView(false));\r\n    }\r\n  }\r\n\r\n} ","import {BaseController} from \"../utilities/base_controller\";\n\nexport class LimitedSelectionCheckboxesController extends BaseController {\n\n  static targets = [\"input\", \"error\"];\n  static values = {max: Number, message: String};\n\n  declare readonly hasErrorTarget: boolean;\n  declare readonly errorTarget: HTMLElement;\n  declare readonly inputTargets: HTMLInputElement[];\n  declare readonly maxValue: number;\n  declare readonly messageValue: string;\n\n  initialize() {\n    this.handleInputs = this.handleInputs.bind(this);\n  }\n\n  connect() {\n    this.inputTargets.forEach((el) => el.addEventListener(\"change\", this.handleInputs));\n  }\n\n  disconnect() {\n    this.inputTargets.forEach((el) => el.removeEventListener(\"change\", this.handleInputs));\n  }\n\n  handleInputs(event: Event) {\n    let tickedInputs = this.inputTargets.reduce((previousValue, el) => el.checked ? previousValue + 1 : previousValue, 0);\n    let target = event.target as HTMLInputElement;\n    if (tickedInputs > this.maxValue) {\n      event.preventDefault();\n      target.checked = false;\n      this.dispatch(target, \"change\");\n      this.dispatch(target, \"limited-selection:too-many\");\n      if (this.hasErrorTarget) {\n        this.errorTarget.innerHTML = this.messageValue;\n      }\n    } else {\n      this.dispatch(target, \"limited-selection:selection\");\n      if (this.hasErrorTarget) {\n        this.errorTarget.innerHTML = \"\";\n      }\n    }\n  }\n}\n","import {BaseController} from \"../utilities/base_controller\";\r\n\r\nexport class MediaPlayerController extends BaseController {\r\n\r\n  static targets = [\"media\"];\r\n\r\n  declare readonly mediaTarget: HTMLMediaElement;\r\n\r\n  initialize() {\r\n  }\r\n\r\n  connect() {\r\n  }\r\n\r\n  disconnect() {\r\n  }\r\n\r\n  async play(event?: Event) {\r\n    event?.preventDefault();\r\n    await this.mediaTarget.play();\r\n  }\r\n\r\n  pause(event?: Event) {\r\n    event?.preventDefault();\r\n    this.mediaTarget.pause();\r\n  }\r\n\r\n  restart(event?: Event) {\r\n    event?.preventDefault();\r\n    this.mediaTarget.currentTime = 0;\r\n  }\r\n\r\n  seek(event?: Event) {\r\n    event?.preventDefault();\r\n    this.mediaTarget.currentTime += 5;\r\n  }\r\n}\r\n","import {BaseController} from \"../utilities/base_controller\";\n\nexport class NestedFormController extends BaseController {\n  static targets = ['target', 'template'];\n  static values = {\n    insertMode: String,\n    wrapperClass: String,\n  };\n\n  declare readonly targetTarget: HTMLElement;\n  declare readonly templateTarget: HTMLTemplateElement | HTMLScriptElement;\n\n  declare readonly wrapperClassValue: string;\n  declare readonly hasWrapperSelectorValue: boolean;\n  declare readonly insertModeValue: InsertPosition;\n  declare readonly hasInsertModeValue: boolean;\n\n  get wrapperClass() {\n    return this.hasWrapperSelectorValue ? this.wrapperClassValue : 'nested-fields';\n  }\n\n  get insertMode(): InsertPosition {\n    return this.hasInsertModeValue ? this.insertModeValue : 'beforeend';\n  }\n\n  connect() {\n    this.checkStructure();\n  }\n\n  add(event?: Event) {\n    event?.preventDefault();\n\n    const content = this.templateTarget.innerHTML.replace(/NEW_RECORD/g, this.generateID());\n    this.targetTarget.insertAdjacentHTML(this.insertMode, content);\n  }\n\n  remove(event: Event) {\n    event.preventDefault();\n    const wrapper: HTMLElement | null = (event.target as HTMLElement).closest(`.${this.wrapperClass}`);\n    if (wrapper == null) {\n      throw new Error(`#remove was clicked from outside of a child record. Could not find an ancestor with class .${this.wrapperClass}`);\n    }\n\n    if (wrapper.dataset.newRecord === 'true') {\n      wrapper.remove();\n    } else {\n      wrapper.style.display = 'none';\n      let destroyInput = wrapper.querySelector(\"input[name*='_destroy']\") as HTMLInputElement | null;\n      if (destroyInput == null) {\n        throw new Error(`Could not find a hidden input with name '_destroy'. NestedForm cannot remove an already persisted record without it.`);\n      }\n\n      destroyInput.value = \"1\";\n    }\n  }\n\n  generateID(): string {\n    return new Date().getTime().toString() + Math.random().toString().slice(2);\n  }\n\n  private checkStructure() {\n    let template = this.templateTarget.innerHTML;\n\n    if (template.indexOf('NEW_RECORD')) {\n      throw new Error(\"Could not find 'NEW_RECORD' in the provided template. Please make sure you've passed `child_index: 'NEW_RECORD'` to `fields_for`\");\n    }\n  }\n}","import {BaseController} from \"../utilities/base_controller\";\n\nexport class PasswordConfirmController extends BaseController {\n\n  static targets = [\"password\"];\n  static classes = [\"error\"];\n\n  declare readonly passwordTargets: HTMLInputElement[];\n\n  declare readonly errorClass: string;\n  declare readonly hasErrorClass: boolean;\n\n  initialize() {\n    this.checkPasswordsMatch = this.checkPasswordsMatch.bind(this);\n  }\n\n  connect() {\n    this.passwordTargets.forEach((el) => el.addEventListener(\"change\", this.checkPasswordsMatch));\n  }\n\n  disconnect() {\n    this.passwordTargets.forEach((el) => el.removeEventListener(\"change\", this.checkPasswordsMatch));\n  }\n\n  private allPasswordsMatch(): boolean {\n    let values = new Set(this.passwordTargets.map(el => el.value));  // Create a unique set of the password values\n    return values.has(\"\") || values.size == 1; // If any of the passwords are still blank, or there is only one distinct password value (i.e. they all are the same)\n  }\n\n  private checkPasswordsMatch() {\n    let element = this.el;\n    if (this.allPasswordsMatch()) {\n      this.dispatch(element, \"password-confirm:match\");\n      if (this.hasErrorClass) {\n        this.passwordTargets.forEach(el => el.classList.remove(this.errorClass));\n      }\n    } else {\n      this.dispatch(element, \"password-confirm:no-match\");\n      if (this.hasErrorClass) {\n        this.passwordTargets.forEach(el => el.classList.add(this.errorClass));\n      }\n    }\n  }\n}\n","import {BaseController} from \"../utilities/base_controller\";\n\nexport class PasswordPeekController extends BaseController {\n\n  static targets = [\"password\"];\n\n  declare readonly passwordTarget: HTMLInputElement;\n\n  peak(event?: Event) {\n    event?.preventDefault();\n    this.passwordTarget.type = \"text\";\n  }\n\n  hide(event?: Event) {\n    event?.preventDefault();\n    this.passwordTarget.type = \"password\";\n  }\n\n  toggle(event?: Event) {\n    event?.preventDefault();\n    if (this.passwordTarget.type === \"password\") {\n      this.peak();\n    } else {\n      this.hide();\n    }\n  }\n}\n","import {BaseController} from \"../utilities/base_controller\";\r\n\r\nexport class RemoteFormController extends BaseController {\r\n  static targets = [];\r\n\r\n  static values = {selector: String};\r\n\r\n  declare readonly hasSelectorValue: boolean;\r\n  declare readonly selectorValue: string;\r\n\r\n  get selector(): string {\r\n    return this.hasSelectorValue ? this.selectorValue : `[data-controller~=\"${this.identifier}\"]`;\r\n  }\r\n\r\n  replace(event: { detail: [Element, any, XMLHttpRequest] }) {\r\n    const [data, status, xhr] = event.detail;\r\n    if (data instanceof Node) {\r\n      let new_element = data.querySelector(this.selector);\r\n\r\n      if (new_element == null) {\r\n        throw new Error(`expected new form DOM with [data-controller=\"${this.identifier}\"] to be present in returned payload`);\r\n      }\r\n\r\n      let parentNode = this.el.parentNode;\r\n      if (parentNode == null) {\r\n        throw new Error('expected form to have a DOM parent, could not execute replaceChild');\r\n      }\r\n      parentNode.replaceChild(new_element, this.el);\r\n    } else {\r\n      console.log('Unknown', data);\r\n    }\r\n  }\r\n}\r\n","import {useDebounce, useWindowResize} from \"stimulus-use\";\nimport {WindowResizePayload} from \"stimulus-use/dist/use-window-resize/use-window-resize\";\nimport {BaseController} from \"../utilities/base_controller\";\n\ninterface ResponsiveIframeMessage {\n  name: string,\n  height: number,\n}\n\nexport class ResponsiveIframeWrapperController extends BaseController {\n\n  initialize() {\n    this.messageReceived = this.messageReceived.bind(this);\n  }\n\n  connect() {\n    window.addEventListener(\"message\", this.messageReceived);\n  }\n\n  disconnect() {\n    window.removeEventListener(\"message\", this.messageReceived);\n  }\n\n  messageReceived(message: MessageEvent<ResponsiveIframeMessage>) {\n    let data = message.data;\n    if (data.hasOwnProperty(\"name\") && data.name === \"iframe-body\" && data.hasOwnProperty(\"height\")) {\n      this.resize(data.height);\n    }\n  }\n\n  resize(height: number) {\n    (this.el as HTMLIFrameElement).style.height = `${height}px`;\n  }\n\n}\n\nexport class ResponsiveIframeBodyController extends BaseController {\n\n  static debounces = [\"postUpdate\"];\n\n  declare observe: () => void;\n  declare unobserve: () => void;\n\n  connect() {\n    // If this Window is inside a frame\n    if (window.self !== window.top) {\n      useWindowResize(this);\n      useDebounce(this, {});\n      this.postUpdate();\n    } else {\n      // Not an iframe\n    }\n  }\n\n  windowResize(payload: WindowResizePayload) {\n    this.postUpdate();\n  };\n\n  postUpdate() {\n    let payload: ResponsiveIframeMessage = {name: \"iframe-body\", height: this.getHeight()};\n    window.parent.postMessage(\n      payload,\n      \"*\",\n    );\n  }\n\n  getHeight(): number {\n    const body = document.body;\n    const html = document.documentElement;\n\n    // Get the largest height out of body and html's various height measurements\n    return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n  }\n\n}\n","import camelCase from \"camelcase\";\r\nimport {BaseController} from \"./base_controller\";\r\n\r\nexport class EphemeralController extends BaseController {\r\n\r\n  _cleanupSelf() {\r\n    this.cleanup(this.el);\r\n  }\r\n\r\n  cleanup(element: HTMLElement) {\r\n    element.dataset.controller = element.dataset.controller?.replaceAll(new RegExp(`(\\s|^)${this.identifier}(\\s|$)`, \"g\"), \"\") || \"\";\r\n    if (element.dataset.controller == \"\") {\r\n      // If there are no controllers left, remove the attribute\r\n      delete element.dataset.controller;\r\n    }\r\n\r\n    let substringIdentifierValueRegex = new RegExp(`(\\s|^)${this.identifier}\\\\..+?(\\s|$)`, \"g\");\r\n    element.dataset.target = element.dataset.target?.replaceAll(substringIdentifierValueRegex, \"\") || \"\";\r\n    delete element.dataset[camelCase(`${this.identifier}-target`)];\r\n    if (element.dataset.target == \"\") {\r\n      // If there are no targets left, remove the attribute\r\n      delete element.dataset.target;\r\n    }\r\n\r\n    element.dataset.action = element.dataset.target?.replaceAll(substringIdentifierValueRegex, \"\") || \"\";\r\n    delete element.dataset[camelCase(`${this.identifier}-action`)];\r\n    if (element.dataset.action == \"\") {\r\n      // If there are no actions left, remove the attribute\r\n      delete element.dataset.action;\r\n    }\r\n\r\n    // @ts-ignore\r\n    let values = this.constructor.values;\r\n    if (values) {\r\n      Object.keys(values).forEach(val => delete element.dataset[camelCase(`${this.identifier}-${val}-value`)]);\r\n    }\r\n\r\n    // @ts-ignore\r\n    let classes = this.constructor.classes;\r\n    if (classes) {\r\n      Object.keys(classes).forEach(val => delete element.dataset[camelCase(`${this.identifier}-${val}-class`)]);\r\n    }\r\n  }\r\n\r\n}\r\n","import {EphemeralController} from \"../utilities/ephemeral_controller\";\r\nimport {scrollToElement} from \"../utilities/scroll\";\r\n\r\nexport class ScrollIntoFocusController extends EphemeralController {\r\n\r\n  static values = {\r\n    behavior: String,\r\n    block: String,\r\n    inline: String,\r\n  };\r\n\r\n  declare behaviorValue: ScrollBehavior;\r\n  declare hasBehaviorValue: boolean;\r\n  declare blockValue: ScrollLogicalPosition;\r\n  declare hasBlockValue: boolean;\r\n  declare inlineValue: ScrollLogicalPosition;\r\n  declare hasInlineValue: boolean;\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      // Attempt smooth scrolling, with polyfill\r\n      scrollToElement(\r\n        this.el,\r\n        {\r\n          behavior: this.hasBehaviorValue ? this.behaviorValue : \"smooth\",\r\n          block: this.hasBlockValue ? this.blockValue : \"center\",\r\n          inline: this.hasInlineValue ? this.inlineValue : \"center\",\r\n        },\r\n      ).catch(() => this.el.scrollIntoView()); // Fallback to snap-scrolling\r\n      this._cleanupSelf();\r\n    });\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"../utilities/base_controller\";\nimport {getScrollParent, scrollToElement} from \"../utilities/scroll\";\n\nexport class ScrollToBottomController extends BaseController {\n\n  static values = {\n    mode: String,\n  };\n\n  declare modeValue: \"nearest\" | \"document\";\n  declare hasModeValue: boolean;\n\n  scroll(event?: Event) {\n    event?.preventDefault();\n    let mode = this.hasModeValue ? this.modeValue : \"document\";\n    let target: null | HTMLElement;\n    if (mode == \"document\") {\n      target = document.body;\n    } else {\n      target = getScrollParent(this.el);\n    }\n    if (target == null) {\n      return;\n    }\n    scrollToElement(target!, {behavior: \"smooth\", block: \"end\"}).catch(() => target!.scrollIntoView(false));\n  }\n\n}\n\n","import {BaseController} from \"../utilities/base_controller\";\nimport {scrollToElement} from \"../utilities/scroll\";\n\nexport class ScrollToController extends BaseController {\n\n  static values = {\n    selector: String,\n    behavior: String,\n    block: String,\n    inline: String,\n  };\n\n  declare selectorValue: string;\n  declare behaviorValue: ScrollBehavior;\n  declare hasBehaviorValue: boolean;\n  declare blockValue: ScrollLogicalPosition;\n  declare hasBlockValue: boolean;\n  declare inlineValue: ScrollLogicalPosition;\n  declare hasInlineValue: boolean;\n\n  scroll() {\n    let target = document.querySelector(this.selectorValue);\n    if (!target) {\n      console.warn(`Could not find target for '${this.selectorValue}'`);\n      return;\n    }\n\n    scrollToElement(\n      target!,\n      {\n        behavior: this.hasBehaviorValue ? this.behaviorValue : \"smooth\",\n        block: this.hasBlockValue ? this.blockValue : \"center\",\n        inline: this.hasInlineValue ? this.inlineValue : \"center\",\n      },\n    ).catch(() => target!.scrollIntoView()); // Fallback to snap-scrolling\n  }\n\n}\n","import {BaseController} from \"../utilities/base_controller\";\nimport {getScrollParent, scrollToElement} from \"../utilities/scroll\";\n\nexport class ScrollToTopController extends BaseController {\n\n  static values = {\n    mode: String,\n  };\n\n  declare modeValue: \"nearest\" | \"document\";\n  declare hasModeValue: boolean;\n\n  scroll(event?: Event) {\n    event?.preventDefault();\n    let mode = this.hasModeValue ? this.modeValue : \"document\";\n    let target: null | HTMLElement;\n    if (mode == \"document\") {\n      target = document.body;\n    } else {\n      target = getScrollParent(this.el);\n    }\n    if (target == null) {\n      return;\n    }\n    scrollToElement(target!, {behavior: \"smooth\", block: \"start\"}).catch(() => target!.scrollIntoView(false));\n  }\n\n}\n\n","import {BaseController} from \"../utilities/base_controller\";\r\n\r\nexport class SelfDestructController extends BaseController {\r\n\r\n  static values = {seconds: Number};\r\n\r\n  declare readonly secondsValue: number;\r\n  timeout: null | ReturnType<typeof window.setTimeout> = null;\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      // Only start countdown on first paint\r\n      this.timeout = setTimeout(() => this.el.remove(), this.secondsValue * 1000);\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.timeout) {\r\n      clearTimeout(this.timeout);\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"../utilities/base_controller\";\r\n\r\nexport class StickyController extends BaseController {\r\n\r\n  static classes = [\"stuck\"];\r\n  static values = {\r\n    mode: String,\r\n  };\r\n\r\n  declare readonly hasStuckClass: boolean;\r\n  declare readonly stuckClass: string;\r\n  declare readonly hasModeValue: \"top\" | \"bottom\";\r\n  declare readonly modeValue: \"top\" | \"bottom\";\r\n\r\n  _magicElement: HTMLDivElement | null = null;\r\n\r\n  get _mode(): \"top\" | \"bottom\" {\r\n    return this.hasModeValue ? this.modeValue : \"top\";\r\n  }\r\n\r\n  createMagicElement() {\r\n    // Magic element placed next to the sticky el that acts as an external border.\r\n    // When the magic element is off the page, we know that the sticky el is \"stuck\"\r\n    if (this._magicElement !== null) {\r\n      return;\r\n    }\r\n\r\n    this._magicElement = document.createElement(\"div\");\r\n    switch (this._mode) {\r\n      case \"top\":\r\n        this.el.insertAdjacentElement(\"beforebegin\", this._magicElement);\r\n        break;\r\n      case \"bottom\":\r\n        this.el.insertAdjacentElement(\"afterend\", this._magicElement);\r\n        break;\r\n    }\r\n  }\r\n\r\n  connect() {\r\n    let element = this.el;\r\n    this.createMagicElement();\r\n\r\n    const observer = new IntersectionObserver(entries => {\r\n      entries.forEach(entry => {\r\n        if (entry.target !== this._magicElement) {\r\n          return;\r\n        }\r\n        if (entry.intersectionRatio === 0) {\r\n          element.classList.add(this.hasStuckClass ? this.stuckClass : \"stuck\");\r\n        } else if (entry.intersectionRatio === 1) {\r\n          element.classList.remove(this.hasStuckClass ? this.stuckClass : \"stuck\");\r\n        }\r\n      });\r\n\r\n    }, {\r\n      threshold: [0, 1],\r\n    });\r\n    observer.observe(this._magicElement!);\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"../utilities/base_controller\";\r\n\r\nexport class TableSortController extends BaseController {\r\n\r\n  static values = {startSort: Number};\r\n\r\n  declare readonly startSortValue: number;\r\n  declare readonly hasStartSortValue: boolean;\r\n  _lastIndex: number | null = null;\r\n  _reverse: boolean = false;\r\n\r\n  get _tableHead(): HTMLTableSectionElement {\r\n    let head = (this.el as HTMLTableElement).tHead;\r\n    if (head == null) {\r\n      throw new Error('Expected table to have a <thead> element.');\r\n    }\r\n    return head;\r\n  }\r\n\r\n  get _tableHeaders(): HTMLTableHeaderCellElement[] {\r\n    let rows = this._tableHead.rows;\r\n    if (rows.length == 0) {\r\n      throw new Error('Expected table to have a <thead> element with at least one row.');\r\n    }\r\n    return Array.from(rows[0].cells);\r\n  }\r\n\r\n  get _tableBody() {\r\n    return (this.el as HTMLTableElement).tBodies[0];\r\n  }\r\n\r\n  get _tableRows(): HTMLTableRowElement[] {\r\n    return Array.from(this._tableBody.rows);\r\n  }\r\n\r\n  initialize() {\r\n    this.sort = this.sort.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      this._tableHeaders.forEach(cell => cell.addEventListener(\"click\", this.sort));\r\n      if (this.hasStartSortValue) {\r\n        this._sortByColumn(this.startSortValue);\r\n      }\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    this._tableHeaders.forEach(cell => cell.removeEventListener(\"click\", this.sort));\r\n  }\r\n\r\n  sort(event: Event) {\r\n    event.preventDefault();\r\n    let headerCell = event.target! as HTMLTableHeaderCellElement;\r\n    let headerCellIndex = this._indexOfHeaderCell(headerCell);\r\n    this._sortByColumn(headerCellIndex);\r\n  }\r\n\r\n  private _indexOfHeaderCell(cell: HTMLTableHeaderCellElement) {\r\n    return this._tableHeaders.indexOf(cell);\r\n  }\r\n\r\n  private _sortByColumn(index: number) {\r\n    this._reverse = index === this._lastIndex && !this._reverse;\r\n    let frag = document.createDocumentFragment();\r\n    let rows = this._tableRows;\r\n\r\n    let newRows = rows.sort((row, otherRow) => {\r\n      let cells = Array.from(row.cells);\r\n      let otherCells = Array.from(otherRow.cells);\r\n\r\n      // TODO: Handle colspans?\r\n      let x = cells[index]?.innerText || \"\";\r\n      let y = otherCells[index]?.innerText || \"\";\r\n\r\n      let sortVal = x.localeCompare(y, \"en\", {sensitivity: \"base\", numeric: true, caseFirst: \"upper\"});\r\n\r\n      if (row.dataset.sortTop || otherRow.dataset.sortBottom) {\r\n        if (row.dataset.sortTop && otherRow.dataset.sortTop) {\r\n          return sortVal;\r\n        }\r\n        return -1;\r\n      }\r\n      if (row.dataset.sortBottom || otherRow.dataset.sortTop) {\r\n        if (row.dataset.sortBottom && otherRow.dataset.sortBottom) {\r\n          return sortVal;\r\n        }\r\n        return 1;\r\n      }\r\n\r\n      if (this._reverse) {\r\n        return sortVal > 0 ? -1 : 1;\r\n      }\r\n      return sortVal;\r\n    });\r\n\r\n    newRows.forEach(row => frag.appendChild(row));\r\n\r\n    this._tableBody.innerHTML = \"\";\r\n    this._tableBody.appendChild(frag);\r\n    this._lastIndex = index;\r\n  }\r\n\r\n}","import {useMutation} from \"stimulus-use\";\r\nimport {BaseController} from \"../utilities/base_controller\";\r\n\r\nexport class TableTruncateController extends BaseController {\r\n\r\n  static targets = [\"showMore\"];\r\n  static values = {\r\n    limit: Number,\r\n    truncated: Boolean,\r\n  };\r\n\r\n  declare readonly showMoreTarget: HTMLElement;\r\n  declare limitValue: number;\r\n  declare readonly hasLimitValue: boolean;\r\n  declare truncatedValue: boolean;\r\n  declare readonly hasTruncatedValue: boolean;\r\n\r\n  get _truncated(): boolean {\r\n    return this.hasTruncatedValue ? this.truncatedValue : false;\r\n  }\r\n\r\n  set _truncated(value) {\r\n    this.truncatedValue = value;\r\n  }\r\n\r\n  get _tableBody(): HTMLTableSectionElement {\r\n    return (this.el as HTMLTableElement).tBodies[0];\r\n  }\r\n\r\n  get _tableRows(): HTMLTableRowElement[] {\r\n    return Array.from(this._tableBody.rows);\r\n  }\r\n\r\n  get _limit(): number {\r\n    return this.hasLimitValue ? this.limitValue : 20;\r\n  }\r\n\r\n  initialize() {\r\n    this.truncate = this.truncate.bind(this);\r\n    this.expand = this.expand.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    useMutation(this, {childList: true, element: this._tableBody});\r\n\r\n    requestAnimationFrame(() => {\r\n      this.truncate();\r\n      this.showMoreTarget.addEventListener(\"click\", this.expand);\r\n    });\r\n  }\r\n\r\n  truncate(event?: Event) {\r\n    event?.preventDefault();\r\n    this._truncated = true;\r\n    if (this._tableRows.length >= this._limit) {\r\n      this._tableRows.slice(this._limit).forEach((el) => {\r\n        if (el !== this.showMoreTarget) {\r\n          this._hideElement(el);\r\n        }\r\n      });\r\n      this._showElement(this.showMoreTarget);\r\n    } else {\r\n      this._hideElement(this.showMoreTarget);\r\n    }\r\n  }\r\n\r\n  expand(event?: Event) {\r\n    this._truncated = false;\r\n    event?.preventDefault();\r\n    this._tableRows.slice(this._limit).forEach((el) => {\r\n      if (el !== this.showMoreTarget) {\r\n        this._showElement(el);\r\n      }\r\n    });\r\n    this._hideElement(this.showMoreTarget);\r\n  }\r\n\r\n  mutate(entries: MutationRecord[]) {\r\n    if (this._truncated) {\r\n      this._reTruncate();\r\n    }\r\n  }\r\n\r\n  private _showElement(el: HTMLElement): void {\r\n    el.style.display = \"\";\r\n  }\r\n\r\n  private _hideElement(el: HTMLElement): void {\r\n    el.style.display = \"none\";\r\n  }\r\n\r\n  private _reTruncate() {\r\n    this._tableRows.slice(0, this._limit).forEach((el) => {\r\n      if (el !== this.showMoreTarget) {\r\n        this._showElement(el);\r\n      }\r\n    });\r\n    this._tableRows.slice(this._limit).forEach((el) => {\r\n      if (el !== this.showMoreTarget) {\r\n        this._hideElement(el);\r\n      }\r\n    });\r\n    this._showElement(this.showMoreTarget);\r\n  }\r\n\r\n}","import {EphemeralController} from \"../utilities/ephemeral_controller\";\n\nexport class TeleportController extends EphemeralController {\n\n  static values = {target: String, insert: String, immediate: Boolean};\n\n  declare readonly immediateValue: boolean;\n  declare readonly hasImmediateValue: boolean;\n  declare readonly targetValue: string;\n  declare readonly hasInsertValue: boolean;\n  declare readonly insertValue: InsertPosition | \"replaceOuter\" | \"replaceInner\" | \"prepend\" | \"append\";\n\n  connect() {\n    if (!this.hasInsertValue) {\n      throw new Error(\"`insert` value was not specified\");\n    }\n\n    requestAnimationFrame(() => {\n      if (this.hasImmediateValue && this.immediateValue) {\n        this.execute();\n      }\n    });\n  }\n\n  execute(event?: Event) {\n    event?.preventDefault();\n    let element = this.el;\n    let destination = document.querySelector(this.targetValue);\n\n    if (destination == null) {\n      this.dispatch(element, \"teleport:error\");\n      return;\n    }\n\n    let copy = element.cloneNode(true) as HTMLElement;\n    this.cleanup(copy);\n\n    switch (this.insertValue) {\n      case \"beforebegin\":\n      case \"beforeend\":\n      case \"afterend\":\n      case \"afterbegin\":\n        destination.insertAdjacentHTML(this.insertValue, copy.outerHTML);\n        break;\n      case \"replaceOuter\":\n        destination.outerHTML = copy.outerHTML;\n        break;\n      case \"replaceInner\":\n        destination.innerHTML = copy.outerHTML;\n        break;\n      case \"prepend\":\n        destination.insertAdjacentHTML(\"afterbegin\", copy.outerHTML);\n        break;\n      case \"append\":\n        destination.insertAdjacentHTML(\"beforeend\", copy.outerHTML);\n        break;\n      default:\n        throw new Error(\"`insert` value was not specified\");\n\n    }\n    element.remove();\n  }\n\n}\n","import {useClickOutside, useHover} from \"stimulus-use\";\nimport {BaseController} from \"../utilities/base_controller\";\n\nexport type ToggleClassMode = \"on\" | \"off\" | \"toggle\"\n\nexport class ToggleClassController extends BaseController {\n\n  static targets = [\"toggle\"];\n  static values = {\n    class: String,\n    mouseEnter: String,\n    mouseLeave: String,\n    clickAway: Boolean,\n    initial: String,\n  };\n\n  declare readonly toggleTargets: HTMLElement[];\n\n  declare readonly classValue: string;\n  declare readonly hasClassValue: boolean;\n\n  declare readonly mouseEnterValue: ToggleClassMode;\n  declare readonly hasMouseEnterValue: boolean;\n\n  declare readonly mouseLeaveValue: ToggleClassMode;\n  declare readonly hasMouseLeaveValue: boolean;\n\n  declare readonly clickAwayValue: boolean;\n  declare readonly hasClickAwayValue: boolean;\n\n  declare readonly initialValue: \"on\" | \"off\";\n  declare readonly hasInitialValue: boolean;\n\n  connect() {\n    if (!this.hasClassValue) {\n      throw new Error(\"data-toggle-class-class-value must not be empty\");\n    }\n\n    if (this.hasMouseEnterValue || this.hasMouseLeaveValue) {\n      useHover(this);\n    }\n\n    if (this.hasClickAwayValue && this.clickAwayValue) {\n      useClickOutside(this);\n    }\n\n    requestAnimationFrame(() => {\n      if (this.hasInitialValue) {\n        if (this.initialValue === \"on\") {\n          this.toggleTargets.forEach((target) => this.elementOn(target));\n        } else {\n          this.toggleTargets.forEach((target) => this.elementOff(target));\n        }\n      }\n    });\n  }\n\n  clickOutside() {\n    this.toggleTargets.forEach((target) => {\n      if (this.elementWasToggled(target)) {\n        this.elementToggleStatus(target);\n        this.elementToggle(target);\n      }\n    });\n  }\n\n  mouseEnter() {\n    if (this.hasMouseEnterValue) {\n      switch (this.mouseEnterValue) {\n        case \"on\":\n          this.on();\n          break;\n        case \"off\":\n          this.off();\n          break;\n        case \"toggle\":\n          this.toggle();\n          break;\n      }\n    }\n    return {};\n  }\n\n  mouseLeave() {\n    if (this.hasMouseLeaveValue) {\n      switch (this.mouseLeaveValue) {\n        case \"on\":\n          this.on();\n          break;\n        case \"off\":\n          this.off();\n          break;\n        case \"toggle\":\n          this.toggle();\n          break;\n      }\n    }\n    return {};\n  }\n\n  on(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementOn(target);\n    });\n  }\n\n  off(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementOff(target);\n    });\n  }\n\n  toggle(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementToggle(target);\n    });\n  }\n\n  private elementWasToggled(el: HTMLElement): boolean {\n    return el.dataset.toggled == \"true\";\n  }\n\n  private elementToggleStatus(el: HTMLElement) {\n    if (this.elementWasToggled(el)) {\n      delete el.dataset.toggled;\n    } else {\n      el.dataset.toggled = \"true\";\n    }\n  }\n\n  private elementToggle(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass));\n  }\n\n  private elementOn(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass, true));\n  }\n\n  private elementOff(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass, false));\n  }\n\n}\n","export function isTurboFrame(element: HTMLElement): element is TurboFrame {\r\n  return element.nodeName == \"TURBO-FRAME\";\r\n}\r\n","import {BaseController} from \"../utilities/base_controller\";\nimport {isHTMLAnchorElement} from \"../utilities/elements\";\nimport {isTurboFrame} from \"../utilities/turbo\";\n\nexport class TurboFrameRCController extends BaseController {\n\n  static values = {\n    frameId: String,\n    src: String,\n    loadingMessage: String,\n  };\n\n  declare readonly frameIdValue: string;\n  declare readonly srcValue: string;\n  declare readonly hasSrcValue: boolean;\n  declare readonly loadingMessageValue: string;\n  declare readonly hasLoadingMessageValue: boolean;\n\n  toggle(event?: Event) {\n    event?.preventDefault();\n    let frame = this._getFrame();\n    let frameSrc = frame.src;\n    if (frameSrc == null || frameSrc !== this._getSrc()) {\n      this._setSrc();\n    } else {\n      this._clear();\n    }\n  }\n\n  setSrc(event?: Event) {\n    event?.preventDefault();\n    this._setSrc();\n  }\n\n  clear(event?: Event) {\n    event?.preventDefault();\n    this._clear();\n  }\n\n  private _setSrc() {\n    let frame = this._getFrame();\n    if (this.hasLoadingMessageValue) {\n      frame.innerHTML = this.loadingMessageValue;\n    }\n    frame.src = this._getSrc();\n  }\n\n  private _clear() {\n    let frame = this._getFrame();\n    frame.src = \"\";\n    frame.innerHTML = \"\";\n  }\n\n  private _getFrame(): TurboFrame {\n    let frame = document.getElementById(`${this.frameIdValue}`);\n    if (frame == null) {\n      throw new Error(`Could not find frame with ID '${this.frameIdValue}'`);\n    }\n    if (!isTurboFrame(frame)) {\n      throw new Error(`Element targeted by ID '${this.frameIdValue}'`);\n    } else {\n      return frame;\n    }\n  }\n\n  private _getSrc(): string {\n    let element = this.el;\n    if (this.hasSrcValue) {\n      return this.srcValue;\n    } else if (isHTMLAnchorElement(element)) {\n      return element.href;\n    } else {\n      throw new Error(\"No link given to drive frame to\");\n    }\n  }\n\n}\n","import {BaseController} from \"../utilities/base_controller\";\nimport {isTurboFrame} from \"../utilities/turbo\";\n\n// noinspection SillyAssignmentJS\nexport class TurboFrameRefreshController extends BaseController {\n\n  static values = {\n    interval: Number,\n    poll: Boolean,\n  };\n\n  declare readonly intervalValue: number;\n  declare readonly pollValue: boolean;\n  declare readonly hasPollValue: boolean;\n  _timeoutHandle: null | ReturnType<typeof window.setTimeout> = null;\n\n  get poll(): boolean {\n    return this.hasPollValue ? this.pollValue : false;\n  }\n\n  initialize() {\n    this.refresh = this.refresh.bind(this);\n  }\n\n  connect() {\n    let element = this.el;\n    if (isTurboFrame(element)) {\n      if (!!element.src) {\n        throw new Error('The provided <turbo-frame> element has no `src` attribute.');\n      }\n    } else {\n      throw new Error('Expected controller to be mounted on a <turbo-frame> element.');\n    }\n    if (this.poll) {\n      requestAnimationFrame(() => this._timeoutHandle = setTimeout(() => this.refresh(), this.intervalValue));\n    }\n  }\n\n  disconnect() {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle);\n    }\n  }\n\n  refresh(event?: Event) {\n    event?.preventDefault();\n    let element = this.el as TurboFrame;\n    element.src = element.src;\n  }\n\n}\n","import {BaseController} from \"../utilities/base_controller\";\n\nexport class WordCountController extends BaseController {\n\n  static targets = [\"input\", \"output\"];\n  static values = {min: Number, max: Number};\n  static classes = [\"error\"];\n\n  declare readonly inputTarget: HTMLInputElement | HTMLTextAreaElement;\n  declare readonly outputTarget: HTMLElement;\n  declare minValue: number;\n  declare hasMinValue: boolean;\n  declare maxValue: number;\n  declare hasMaxValue: boolean;\n  declare errorClass: string;\n  declare hasErrorClass: boolean;\n\n  initialize() {\n    this.updateWordCount = this.updateWordCount.bind(this);\n  }\n\n  connect() {\n    this.updateWordCount();\n    this.inputTarget.addEventListener(\"input\", this.updateWordCount);\n  }\n\n  disconnect() {\n    this.inputTarget.removeEventListener(\"input\", this.updateWordCount);\n  }\n\n  updateWordCount() {\n    let wordCount = 0;\n    let textAreaValue = this.inputTarget.value;\n    let matches = textAreaValue.match(/\\S+/g);\n    wordCount = (matches && matches.length) || 0;\n    this.outputTarget.innerText = wordCount.toString();\n    if (this.hasErrorClass) {\n      if (this.isValidCount(wordCount)) {\n        this.outputTarget.classList.remove(this.errorClass);\n      } else {\n        this.outputTarget.classList.add(this.errorClass);\n      }\n    }\n  }\n\n  isValidCount(count: number) {\n    let min = 0;\n    let max = 99999;\n\n    if (this.hasMinValue) {\n      min = this.minValue;\n    }\n\n    if (this.hasMaxValue) {\n      max = this.maxValue;\n    }\n\n    return count >= min && count <= max;\n  }\n\n}\n"],"names":["BaseController","Controller","constructor","context","super","Proxy","this","get","obj","prop","returnVal","Reflect","self","test","logProperty","toString","apply","target","thisArg","argArray","log","args","el","element","dispatch","eventName","options","mergedOptions","Object","assign","bubbles","cancelable","detail","event","CustomEvent","logEvent","dispatchEvent","functionName","application","debug","logger","console","groupCollapsed","identifier","groupEnd","AnchorSpyController","key","keyValue","replaceAll","anchor","window","location","hash","substr","value","initialize","_checkAnchor","bind","connect","requestAnimationFrame","addEventListener","disconnect","removeEventListener","write","preventDefault","String","AppearanceController","_handleVisibility","document","appear","away","_documentIsActive","visibilityState","hasFocus","AsyncBlockController","_errorMessage","hasErrorMessageValue","errorMessageValue","loadContent","hasReplaceTarget","replaceTarget","fetch","endpointValue","then","response","text","html","newEl","createElement","innerHTML","hasSelectorValue","selectedContent","querySelectorAll","selectorValue","replaceWith","children","catch","err","finally","endpoint","errorMessage","selector","AutoSubmitFormController","handler","forEach","e","method","controller","methodName","composeEventName","name","eventPrefix","composedName","extendedEvent","type","composed","originalEvent","defaultOptions","useIntersection","targetElement","controllerDisconnect","observer","IntersectionObserver","entries","entry","isIntersecting","isVisible","call","appearEvent","dispatchAppear","disappearEvent","dispatchDisappear","observe","unobserve","[object Object]","events","onlyVisible","StimulusUse","_a","_b","_c","controllerId","stimulusUseDebug","id","dataset","controllerInitialize","controllerConnect","UseHover","onEnter","onLeave","hover","enhanceController","UseMutation","error","handleError","mutation","MutationObserver","useMutation","useWindowResize","callback","innerWidth","innerHeight","payload","height","Infinity","width","debounce","fn","wait","timeoutId","arguments","clearTimeout","setTimeout","AutosizeController","_handler","style","resize","boxSizing","windowResize","autosize","offset","offsetHeight","clientHeight","scrollHeight","CharCountController","_updateCharCount","inputTarget","charCount","length","outputTarget","innerText","hasErrorClass","_isValidCount","classList","remove","errorClass","add","count","min","max","hasMinValue","minValue","hasMaxValue","maxValue","Number","CheckboxSelectAllController","checked","checkboxTargets","filter","checkbox","unchecked","toggle","refresh","hasSelectAllTarget","selectAllTarget","checkboxesCount","checkboxesCheckedCount","indeterminate","ClipboardController","supported","queryCommandSupported","hasRemoveUnusedValue","removeUnusedValue","hasFallbackTarget","fallbackTarget","hasCopyTarget","copyTarget","select","sourceTarget","copy","execCommand","isHTMLAnchorElement","nodeName","isHTMLFormElement","isHTMLInputElement","isHTMLButtonElement","isHTMLSelectElement","isElementCheckable","removeUnused","Boolean","ConfirmController","message","hasMessageValue","messageValue","confirm","Error","ConfirmNavigationController","_message","_messageValue","handlePopstate","handleTurboNavigation","onbeforeunload","_event","DebugController","testTargets","DetectDirtyController","_cacheAttrName","_checkDirty","_cacheLoadValues","restore","_restoreElementFromLoadValue","_getElementValue","_getElementLoadValue","getAttribute","defaultChecked","Array","from","option","defaultSelected","_elementHasCachedLoadValue","hasAttribute","_isElementDirty","setAttribute","removeAttribute","cacheValue","defaultValue","DetectDirtyFormController","_formElements","_checkElementDirty","_cacheElementLoadValue","some","DisableInputsController","hasDisablerTarget","disablerTarget","disableInputs","enableInputs","shouldClear","hasClearValue","clearValue","disableTargets","_","disabled","clear","DisableWithController","_timeout","hasTimeoutValue","timeoutValue","enable","disable","_timeoutHandle","_isDisabled","stopImmediatePropagation","_cacheText","_getElText","_setElText","_disable","_enable","str","undefined","timeout","DismissableController","dismiss","ElementSaveController","_id","hasIdValue","idValue","elementID","_uniqueIdentifier","href","_restoreOnLoad","hasRestoreOnLoadValue","restoreOnLoadValue","_element","hasElementTarget","elementTarget","localStorage","removeItem","save","attributes","attributesValue","split","data","attr","_get","setItem","JSON","stringify","getItem","savedData","parse","keys","_set","restoreOnLoad","EmptyDomController","emptyClasses","emptyClass","notEmptyClasses","notEmptyClass","hasScopeSelectorValue","scopeSelectorValue","childList","checkEmpty","mutate","_removeNotEmptyClasses","_addEmptyClasses","_addNotEmptyClasses","_removeEmptyClasses","hasEmptyClass","hasNotEmptyClass","scopeSelector","EnableInputsController","hasEnablerTarget","enablerTarget","enableTargets","FallbackImageController","onerror","hasPlaceholderValue","src","placeholderValue","display","placeholder","FormRcController","submit","formTarget","reset","FormSaveController","_formID","_formIdentifier","elements","_formData","_clearOnSubmit","hasClearOnSubmitValue","clearOnSubmitValue","_clear","clearOnSubmit","IntersectionController","threshold","hasThresholdValue","thresholdValue","map","val","parseFloat","trim","disappear","LazyBlockController","smoothSupported","documentElement","smoothPolyfilled","scrollToElement","behavior","block","inline","async","polyfill","polyfillSmooth","scrollIntoView","getScrollParent","node","overflowY","getComputedStyle","parentElement","body","LightboxImageController","hasSrcValue","srcValue","srcSet","hasSrcSetValue","srcSetValue","srcset","sizes","hasSizesValue","sizesValue","modalClassName","hasModalClass","modalClass","imageClassName","hasImageClass","imageClass","open","close","_dialog","image","className","appendChild","insertAdjacentElement","dialogPolyfill","registerDialog","showModal","LimitedSelectionCheckboxesController","handleInputs","inputTargets","tickedInputs","reduce","previousValue","hasErrorTarget","errorTarget","MediaPlayerController","mediaTarget","play","pause","restart","currentTime","seek","NestedFormController","wrapperClass","hasWrapperSelectorValue","wrapperClassValue","insertMode","hasInsertModeValue","insertModeValue","checkStructure","content","templateTarget","replace","generateID","targetTarget","insertAdjacentHTML","wrapper","closest","newRecord","destroyInput","querySelector","Date","getTime","Math","random","slice","indexOf","PasswordConfirmController","checkPasswordsMatch","passwordTargets","allPasswordsMatch","values","Set","has","size","PasswordPeekController","peak","passwordTarget","hide","RemoteFormController","status","xhr","Node","new_element","parentNode","replaceChild","ResponsiveIframeWrapperController","messageReceived","hasOwnProperty","ResponsiveIframeBodyController","top","debounces","func","postUpdate","getHeight","parent","postMessage","EphemeralController","_cleanupSelf","cleanup","RegExp","substringIdentifierValueRegex","camelCase","action","classes","ScrollIntoFocusController","hasBehaviorValue","behaviorValue","hasBlockValue","blockValue","hasInlineValue","inlineValue","ScrollToBottomController","scroll","hasModeValue","modeValue","mode","ScrollToController","warn","ScrollToTopController","SelfDestructController","secondsValue","seconds","StickyController","_mode","createMagicElement","_magicElement","intersectionRatio","hasStuckClass","stuckClass","TableSortController","_tableHead","head","tHead","_tableHeaders","rows","cells","_tableBody","tBodies","_tableRows","sort","cell","hasStartSortValue","_sortByColumn","startSortValue","headerCellIndex","_indexOfHeaderCell","index","_reverse","_lastIndex","frag","createDocumentFragment","row","otherRow","otherCells","x","y","sortVal","localeCompare","sensitivity","numeric","caseFirst","sortTop","sortBottom","startSort","TableTruncateController","_truncated","hasTruncatedValue","truncatedValue","_limit","hasLimitValue","limitValue","truncate","expand","showMoreTarget","_hideElement","_showElement","_reTruncate","limit","truncated","TeleportController","hasInsertValue","hasImmediateValue","immediateValue","execute","destination","targetValue","cloneNode","insertValue","outerHTML","insert","immediate","ToggleClassController","hasClassValue","hasMouseEnterValue","hasMouseLeaveValue","useHover","hasClickAwayValue","clickAwayValue","onEvent","contains","rect","getBoundingClientRect","windowHeight","windowWidth","clientWidth","left","isElementInViewport","clickOutside","clickOutsideEvent","useClickOutside","hasInitialValue","toggleTargets","initialValue","elementOn","elementOff","elementWasToggled","elementToggleStatus","elementToggle","mouseEnter","mouseEnterValue","on","off","mouseLeave","mouseLeaveValue","toggled","classValue","klass","isTurboFrame","class","clickAway","initial","TurboFrameRCController","frameSrc","_getFrame","_getSrc","_setSrc","setSrc","frame","hasLoadingMessageValue","loadingMessageValue","getElementById","frameIdValue","frameId","loadingMessage","TurboFrameRefreshController","poll","hasPollValue","pollValue","intervalValue","interval","WordCountController","updateWordCount","wordCount","matches","match","isValidCount"],"mappings":"6WAEaA,UAAuBC,EAElCC,YAAYC,GAEV,OADAC,MAAMD,OACKE,MAAMC,KAAM,CACrBC,IAAK,CAACC,EAAKC,KACT,IAAIC,EAAYC,QAAQJ,IAAIC,EAAKC,GAC7BG,EAAON,KACX,GA4DR,SAAqBG,GACnB,OAAQA,GACN,IAAK,cACL,IAAK,KACL,IAAK,UACL,IAAK,cACL,IAAK,aACL,IAAK,MACL,IAAK,WACL,IAAK,WACL,IAAK,OACL,IAAK,qBACL,IAAK,aACH,SAGJ,QAAI,SAASI,KAAKJ,IAGd,kBAAkBI,KAAKJ,IAGvB,aAAaI,KAAKJ,IAGlB,oBAAoBI,KAAKJ,IAGzB,aAAaI,KAAKJ,IAxFZK,CAAYL,EAAKM,YAAa,CAChC,GAAwB,mBAAbL,EACT,WAAWL,MAAMK,EAAW,CAC1BM,MAAK,CAACC,EAAaC,EAAcC,KAC/BP,EAAKQ,IAAIX,EAAKM,WAAY,CACxBM,KAAMF,IAEDR,QAAQK,MAAMC,EAAQC,EAASC,MAI1Cb,KAAKc,IAAIX,EAAKM,YAGlB,OAAOL,KAKbY,SACE,YAAYC,QAGdC,SAASD,EAAsBE,EAAmBC,EAA2B,IAC3E,IAAIC,EAAgBC,OAAOC,OAAO,GAAI,CAACC,SAAS,EAAMC,YAAY,EAAMC,OAAQ,CAACf,OAAQM,IAAWG,GAC9FC,EAAcK,OAAOf,SACzBU,EAAcK,OAAOf,OAASM,GAEhC,IAAIU,EAAQ,IAAIC,YAAYT,EAAWE,GACvCrB,KAAK6B,SAASV,EAAWQ,EAAOV,GAChCA,EAAQa,cAAcH,GAGxBb,IAAIiB,EAAsBhB,EAAW,IAEnC,IAAKf,KAAKgC,YAAYC,MACpB,OAEF,IAAIC,EAASC,QACbD,EAAOE,oBAAoBpC,KAAKqC,iBAAiBN,IAAgB,iBAAkB,gBACnFG,EAAOpB,OACLG,QAASjB,KAAKiB,SACXF,IAELmB,EAAOI,WAGTT,SAASV,EAAmBQ,EAAoBV,GAE9C,IAAKjB,KAAKgC,YAAYC,MACpB,OAEF,IAAIC,EAASC,QACbD,EAAOE,oBAAoBpC,KAAKqC,gBAAgBlB,MAAe,iBAAkB,iBAAkB,gBACnGe,EAAOpB,IAAI,CAACG,QAAAA,IACZiB,EAAOI,kBC/DEC,UAA4B7C,EAKvC8C,UACE,YAAYC,SAASC,WAAW,IAAK,IAGvCC,aACE,OAAOC,OAAOC,SAASC,KAAKC,OAAO,GAGrCJ,WAAWK,GACTJ,OAAOC,SAASC,KAAOE,EAGzBC,aACEjD,KAAKkD,aAAelD,KAAKkD,aAAaC,KAAKnD,MAG7CoD,UACEC,sBAAsB,KACpBrD,KAAKkD,eACLN,OAAOU,iBAAiB,aAActD,KAAKkD,gBAI/CK,aACEX,OAAOY,oBAAoB,aAAcxD,KAAKkD,cAGhDO,MAAM9B,SACJA,GAAAA,EAAO+B,iBACP1D,KAAK2C,OAAS3C,KAAKwC,IAGbU,eAEJlD,KAAKkB,SAASlB,KAAKgB,GADjBhB,KAAKwC,MAAQxC,KAAK2C,OACG,oBAEA,wBAxCpBJ,SAAS,CAACC,IAAKmB,cCDXC,UAA6BlE,EAExCuD,aACEjD,KAAK6D,kBAAoB7D,KAAK6D,kBAAkBV,KAAKnD,MAGvDoD,UACER,OAAOU,iBAAiB,QAAStD,KAAK6D,mBACtCjB,OAAOU,iBAAiB,OAAQtD,KAAK6D,mBACrCC,SAASR,iBAAiB,mBAAoBtD,KAAK6D,mBACnD7D,KAAK6D,oBAGPN,aACEX,OAAOY,oBAAoB,QAASxD,KAAK6D,mBACzCjB,OAAOY,oBAAoB,OAAQxD,KAAK6D,mBACxCC,SAASN,oBAAoB,mBAAoBxD,KAAK6D,mBAGxDE,SACE/D,KAAKkB,SAASlB,KAAKgB,GAAI,qBAGzBgD,OACEhE,KAAKkB,SAASlB,KAAKgB,GAAI,mBAGzB6C,oBACE7D,KAAKiE,oBAAsBjE,KAAK+D,SAAW/D,KAAKgE,OAGlDC,oBACE,MAAmC,WAA5BH,SAASI,iBAAgCJ,SAASK,kBChChDC,UAA6B1E,EAcxC2E,oBACE,YAAYC,qBAAuBtE,KAAKuE,kBAAoB,8BAM9DnB,UACEpD,KAAKwE,cAGPA,cACE,IAAIlE,EAAON,KACPgB,EAAKhB,KAAKyE,iBAAmBzE,KAAK0E,cAAgB1E,KAAKgB,GAC3D2D,MAAM3E,KAAK4E,eACVC,KAAMC,GAAaA,EAASC,QAC5BF,KAAMG,IACL,IAAIC,EAAQnB,SAASoB,cAAc,OAEnC,GADAD,EAAME,UAAYH,EACdhF,KAAKoF,iBAAkB,CACzB,IAAIC,EAAkBJ,EAAMK,iBAAiBtF,KAAKuF,eAClDvE,EAAGwE,eAAeH,QAElBrE,EAAGwE,eAAeP,EAAMQ,UAG1BnF,EAAKY,SAASF,EAAI,kBAEnB0E,MAAMC,IACL3E,EAAGwE,YAAYxF,KAAKqE,eACpB/D,EAAKY,SAASF,EAAI,gBAEnB4E,QAAQ,KACPtF,EAAKY,SAASF,EAAI,oBA9CfoD,UAAU,CAAC,WACXA,SAAS,CAACyB,SAAUlC,OAAQmC,aAAcnC,OAAQoC,SAAUpC,cCFxDqC,UAAiCtG,EAE5CuD,aACEjD,KAAKiG,QAAUjG,KAAKiG,QAAQ9C,KAAKnD,MAGnCoD,UACEpD,KAAKgB,GAAGsE,iBAAiB,2BAA2BY,QAAQlF,GAAMA,EAAGsC,iBAAiB,SAAUtD,KAAKiG,UAGvG1C,aACEvD,KAAKgB,GAAGsE,iBAAiB,2BAA2BY,QAAQlF,GAAMA,EAAGwC,oBAAoB,SAAUxD,KAAKiG,UAGlGA,QAAQE,GAEdnG,KAAKkB,SAAUlB,KAAKgB,GAAK,WClBtB,MAAMoF,EAAS,CAACC,EAAYC,KAC/B,MAAMF,EAASC,EAAWC,GAC1B,MAAqB,mBAAVF,EACAA,EAGA,IAAIrF,QAGNwF,EAAmB,CAACC,EAAMH,EAAYI,KAC/C,IAAIC,EAAeF,EAOnB,OANoB,IAAhBC,EACAC,EAAe,GAAGL,EAAWhE,cAAcmE,IAEf,iBAAhBC,IACZC,EAAe,GAAGD,KAAeD,KAE9BE,GAEEC,EAAgB,CAACC,EAAMjF,EAAOD,KACvC,MAAMF,QAAEA,EAAOC,WAAEA,EAAUoF,SAAEA,GAAalF,GAAS,CAAEH,SAAS,EAAMC,YAAY,EAAMoF,UAAU,GAUhG,OATIlF,GACAL,OAAOC,OAAOG,EAAQ,CAAEoF,cAAenF,IAEvB,IAAIC,YAAYgF,EAAM,CACtCpF,QAAAA,EACAC,WAAAA,EACAoF,SAAAA,EACAnF,OAAAA,KC3BFqF,EAAiB,CACnBjF,eAAe,EACf2E,aAAa,GAEJO,EAAkB,CAACX,EAAYjF,EAAU,MAClD,MAAMU,cAAEA,EAAa2E,YAAEA,GAAgBnF,OAAOC,OAAO,GAAIwF,EAAgB3F,GACnE6F,GAAiB7F,MAAAA,OAAyC,EAASA,EAAQH,UAAYoF,EAAWpF,QAgClGiG,EAAuBb,EAAW9C,WAAWJ,KAAKkD,GAClDc,EAAW,IAAIC,qBAhCHC,IACd,MAAOC,GAASD,EACZC,EAAMC,eAOS,CAACD,IAIpB,GAHAjB,EAAWmB,WAAY,EACvBpB,EAAOC,EAAY,UAAUoB,KAAKpB,EAAYiB,GAE1CxF,EAAe,CACf,MAAMX,EAAYoF,EAAiB,SAAUF,EAAYI,GACnDiB,EAAcf,EAAcxF,EAAW,KAAM,CAAEkF,WAAAA,EAAYiB,MAAAA,IACjEL,EAAcnF,cAAc4F,KAb5BC,CAAeL,GAEVjB,EAAWmB,WAcE,CAACF,IAIvB,GAHAjB,EAAWmB,WAAY,EACvBpB,EAAOC,EAAY,aAAaoB,KAAKpB,EAAYiB,GAE7CxF,EAAe,CACf,MAAMX,EAAYoF,EAAiB,YAAaF,EAAYI,GACtDmB,EAAiBjB,EAAcxF,EAAW,KAAM,CAAEkF,WAAAA,EAAYiB,MAAAA,IACpEL,EAAcnF,cAAc8F,KApB5BC,CAAkBP,IA0B0BlG,GAC9C0G,EAAU,KACZX,EAASW,QAAQb,IAEfc,EAAY,KACdZ,EAASY,UAAUd,IAUvB,OARA3F,OAAOC,OAAO8E,EAAY,CACtBmB,WAAW,EACXQ,aACID,IACAb,OAGRY,IACO,CAACA,EAASC,ICtDfhB,EAAiB,CACnBkB,OAAQ,CAAC,QAAS,YAClBC,aAAa,EACbpG,eAAe,EACf2E,aAAa,GCLXM,EAAiB,CACnB9E,OAAO,EACPC,OAAQC,SAEL,MAAMgG,EACTH,YAAY3B,EAAYjF,EAAU,IAC9B,IAAIgH,EAAIC,EAAIC,EACZtI,KAAKc,IAAM,CAACiB,EAAchB,KACjBf,KAAKiC,QAEVjC,KAAKkC,OAAOE,eAAe,KAAKpC,KAAKqG,WAAWhE,iBAAiBN,IAAgB,iBAAkB,gBACnG/B,KAAKkC,OAAOpB,IAAIQ,OAAOC,OAAO,CAAEgH,aAAcvI,KAAKuI,cAAgBxH,IACnEf,KAAKkC,OAAOI,aAEhBtC,KAAKiC,MAAmK,QAA1JoG,EAAgF,QAA1ED,EAAKhH,MAAAA,OAAyC,EAASA,EAAQa,aAA0B,IAAPmG,EAAgBA,EAAK/B,EAAWrE,YAAYwG,wBAAqC,IAAPH,EAAgBA,EAAKtB,EAAe9E,MACpNjC,KAAKkC,OAAqF,QAA3EoG,EAAKlH,MAAAA,OAAyC,EAASA,EAAQc,cAA2B,IAAPoG,EAAgBA,EAAKvB,EAAe7E,OACtIlC,KAAKqG,WAAaA,EAClBrG,KAAKuI,aAAelC,EAAWpF,QAAQwH,IAAMpC,EAAWpF,QAAQyH,QAAQD,GAExEzI,KAAK2I,qBAAuBtC,EAAWpD,WAAWE,KAAKkD,GACvDrG,KAAK4I,kBAAoBvC,EAAWjD,QAAQD,KAAKkD,GACjDrG,KAAKkH,qBAAuBb,EAAW9C,WAAWJ,KAAKkD,ICnBxD,MAAMwC,UAAiBV,EAC1BH,YAAY3B,EAAYjF,EAAU,IAC9BtB,MAAMuG,EAAYjF,GAClBpB,KAAK8H,QAAU,KACX9H,KAAKiH,cAAc3D,iBAAiB,aAActD,KAAK8I,SACvD9I,KAAKiH,cAAc3D,iBAAiB,aAActD,KAAK+I,UAE3D/I,KAAK+H,UAAY,KACb/H,KAAKiH,cAAczD,oBAAoB,aAAcxD,KAAK8I,SAC1D9I,KAAKiH,cAAczD,oBAAoB,aAAcxD,KAAK+I,UAE9D/I,KAAK8I,QAAU,KACX1C,EAAOpG,KAAKqG,WAAY,cAAcoB,KAAKzH,KAAKqG,YAChDrG,KAAKc,IAAI,aAAc,CAAEkI,OAAO,KAEpChJ,KAAK+I,QAAU,KACX3C,EAAOpG,KAAKqG,WAAY,cAAcoB,KAAKzH,KAAKqG,YAChDrG,KAAKc,IAAI,aAAc,CAAEkI,OAAO,KAEpChJ,KAAKiH,eAAiB7F,MAAAA,OAAyC,EAASA,EAAQH,UAAYoF,EAAWpF,QACvGjB,KAAKqG,WAAaA,EAClBrG,KAAKiJ,oBACLjJ,KAAK8H,UAETE,oBACI,MAAMd,EAAuBlH,KAAKqG,WAAW9C,WAAWJ,KAAKnD,KAAKqG,YAKlE/E,OAAOC,OAAOvB,KAAKqG,WAAY,CAAE9C,WAJd,KACfvD,KAAK+H,YACLb,QC5BL,MAAMgC,UAAoBf,EAC7BH,YAAY3B,EAAYjF,EAAU,IAC9BtB,MAAMuG,EAAYjF,GAClBpB,KAAK8H,QAAU,KACX,IACI9H,KAAKmH,SAASW,QAAQ9H,KAAKiH,cAAejH,KAAKoB,SAEnD,MAAO+H,GACHnJ,KAAKqG,WAAWrE,YAAYoH,YAAYD,EAAO,gFAAiF,MAGxInJ,KAAK+H,UAAY,KACb/H,KAAKmH,SAAS5D,cAElBvD,KAAKqJ,SAAYhC,IACbjB,EAAOpG,KAAKqG,WAAY,UAAUoB,KAAKzH,KAAKqG,WAAYgB,GACxDrH,KAAKc,IAAI,SAAU,CAAEuG,QAAAA,KAEzBrH,KAAKiH,eAAiB7F,MAAAA,OAAyC,EAASA,EAAQH,UAAYoF,EAAWpF,QACvGjB,KAAKqG,WAAaA,EAClBrG,KAAKoB,QAAUA,EACfpB,KAAKmH,SAAW,IAAImC,iBAAiBtJ,KAAKqJ,UAC1CrJ,KAAKiJ,oBACLjJ,KAAK8H,UAETE,oBACI,MAAMd,EAAuBlH,KAAKqG,WAAW9C,WAAWJ,KAAKnD,KAAKqG,YAKlE/E,OAAOC,OAAOvB,KAAKqG,WAAY,CAAE9C,WAJd,KACfvD,KAAK+H,YACLb,QAKL,MAAMqC,EAAc,CAAClD,EAAYjF,EAAU,MAC9C,MAAM+F,EAAW,IAAI+B,EAAY7C,EAAYjF,GAC7C,MAAO,CAAC+F,EAASW,QAASX,EAASY,YCrC1ByB,EAAmBnD,IAC5B,MAAMoD,EAAY9H,IACd,MAAM+H,WAAEA,EAAUC,YAAEA,GAAgB/G,OAC9BgH,EAAU,CACZC,OAAQF,GAAeG,SACvBC,MAAOL,GAAcI,SACrBnI,MAAAA,GAEJyE,EAAOC,EAAY,gBAAgBoB,KAAKpB,EAAYuD,IAElD1C,EAAuBb,EAAW9C,WAAWJ,KAAKkD,GAClDyB,EAAU,KACZlF,OAAOU,iBAAiB,SAAUmG,GAClCA,KAEE1B,EAAY,KACdnF,OAAOY,oBAAoB,SAAUiG,IASzC,OAPAnI,OAAOC,OAAO8E,EAAY,CACtB2B,aACID,IACAb,OAGRY,IACO,CAACA,EAASC,ICrBfiC,EAAW,CAACC,EAAIC,EADF,OAEhB,IAAIC,EAAY,KAChB,OAAO,WACH,MAAMpJ,EAAOqJ,UACPvK,EAAUG,KACVyJ,EAAW,IAAMQ,EAAGvJ,MAAMb,EAASkB,GACrCoJ,GACAE,aAAaF,GAEjBA,EAAYG,WAAWb,EAAUS,WCX5BK,UAA2B7K,EAEtCuD,aACEjD,KAAKwK,SAAWxK,KAAKwK,SAASrH,KAAKnD,MAGrCoD,UACE,IAAIzC,EAASX,KAAKgB,GAClBL,EAAO8J,MAAMC,OAAS,OACtB/J,EAAO8J,MAAME,UAAY,aACzBhK,EAAO2C,iBAAiB,QAAStD,KAAKwK,UACtC7J,EAAO2C,iBAAiB,QAAStD,KAAKwK,UACtChB,EAAgBxJ,MAChBqD,sBAAsBrD,KAAKwK,UAG7BI,eACE5K,KAAKwK,WAGCA,WACNxK,KAAK6K,SAAS7K,KAAKgB,IAGb6J,SAAS5J,GACf,IAAI6J,EAAS7J,EAAQ8J,aAAe9J,EAAQ+J,aAC5C/J,EAAQwJ,MAAMZ,OAAS,OACvB5I,EAAQwJ,MAAMZ,OAAS5I,EAAQgK,aAAeH,EAAS,YC5B9CI,UAA4BxL,EAevCuD,aACEjD,KAAKmL,iBAAmBnL,KAAKmL,iBAAiBhI,KAAKnD,MAGrDoD,UACEpD,KAAKmL,mBACLnL,KAAKoL,YAAY9H,iBAAiB,QAAStD,KAAKmL,kBAGlD5H,aACEvD,KAAKoL,YAAY5H,oBAAoB,QAASxD,KAAKmL,kBAG7CA,mBACN,IAAIE,EAAYrL,KAAKoL,YAAYpI,MAAMsI,OACvCtL,KAAKuL,aAAaC,UAAYH,EAAU5K,WACpCT,KAAKyL,gBACHzL,KAAK0L,cAAcL,GACrBrL,KAAKuL,aAAaI,UAAUC,OAAO5L,KAAK6L,YAExC7L,KAAKuL,aAAaI,UAAUG,IAAI9L,KAAK6L,aAKnCH,cAAcK,GACpB,IAAIC,EAAM,EACNC,EAAM,MAUV,OARIjM,KAAKkM,cACPF,EAAMhM,KAAKmM,UAGTnM,KAAKoM,cACPH,EAAMjM,KAAKqM,UAGNN,GAASC,GAAOD,GAASE,GAlD3Bf,UAAU,CAAC,QAAS,UACpBA,SAAS,CAACc,IAAKM,OAAQL,IAAKK,QAC5BpB,UAAU,CAAC,eCJPqB,UAAoC7M,EAO/C8M,cACE,YAAYC,gBAAgBC,OAAOC,GAAYA,EAASH,SAG1DI,gBACE,YAAYH,gBAAgBC,OAAOC,IAAaA,EAASH,SAG3DvJ,aACEjD,KAAK6M,OAAS7M,KAAK6M,OAAO1J,KAAKnD,MAC/BA,KAAK8M,QAAU9M,KAAK8M,QAAQ3J,KAAKnD,MAGnCoD,UACEC,sBAAsB,KACfrD,KAAK+M,qBAIV/M,KAAKgN,gBAAgB1J,iBAAiB,SAAUtD,KAAK6M,QACrD7M,KAAKyM,gBAAgBvG,QAAQyG,GAAYA,EAASrJ,iBAAiB,SAAUtD,KAAK8M,UAClF9M,KAAK8M,aAITvJ,aACOvD,KAAK+M,qBAIV/M,KAAKgN,gBAAgBxJ,oBAAoB,SAAUxD,KAAK6M,QACxD7M,KAAKyM,gBAAgBvG,QAASyG,GAAaA,EAASnJ,oBAAoB,SAAUxD,KAAK8M,WAGjFD,OAAOlL,GACbA,EAAM+B,iBACN,IAAI/C,EAASgB,EAAMhB,OACnBX,KAAKyM,gBAAgBvG,QAASyG,GAAaA,EAASH,QAAU7L,EAAO6L,SAG/DM,UACN,MAAMG,EAAkBjN,KAAKyM,gBAAgBnB,OACvC4B,EAAyBlN,KAAKwM,QAAQlB,OAE5CtL,KAAKgN,gBAAgBR,QAAUU,EAAyB,EACxDlN,KAAKgN,gBAAgBG,cAAgBD,EAAyB,GAAKA,EAAyBD,GAnDvFV,UAAU,CAAC,YAAa,kBCDpBa,UAA4B1N,EAAzCE,kCAcEI,gBAAY,EAEZoD,UACEpD,KAAKqN,UAAYvJ,SAASwJ,sBAAsB,QAE5CtN,KAAKuN,sBAAwBvN,KAAKwN,oBAChCxN,KAAKqN,WAAarN,KAAKyN,kBACzBzN,KAAK0N,eAAe9B,SACX5L,KAAK2N,eACd3N,KAAK4N,WAAWhC,UAKtBiC,OAAOlM,GACDA,GACFA,EAAM+B,iBAEP1D,KAAK8N,aAAwDD,SAGhEE,KAAKpM,GACCA,GACFA,EAAM+B,iBAEP1D,KAAK8N,aAAwDD,SAC1D7N,KAAKqN,WACPvJ,SAASkK,YAAY,kBCvCXC,EAAoBhN,GAClC,MAA2B,KAApBA,EAAQiN,kBAGDC,EAAkBlN,GAChC,MAA2B,QAApBA,EAAQiN,kBAGDE,EAAmBnN,GACjC,MAA2B,SAApBA,EAAQiN,kBAGDG,EAAoBpN,GAClC,MAA2B,UAApBA,EAAQiN,kBAGDI,EAAoBrN,GAClC,MAA2B,UAApBA,EAAQiN,kBAODK,EAAmBtN,GACjC,OAAOmN,EAAmBnN,KAA8B,UAAjBA,EAAQ2F,MAAqC,aAAjB3F,EAAQ2F,MDzBpEwG,UAAU,CAAC,SAAU,SAAU,OAAQ,YACvCA,SAAS,CAACoB,aAAcC,eEFpBC,UAA0BhP,EASrCiP,cACE,YAAYC,gBAAkB5O,KAAK6O,aAAe,gBAGpD5L,aACEjD,KAAK8O,QAAU9O,KAAK8O,QAAQ3L,KAAKnD,MAGnCoD,UACEC,sBAAsB,KACpB,IAAIpC,EAAUjB,KAAKgB,GACnB,GAAImN,EAAkBlN,GACpBA,EAAQqC,iBAAiB,SAAUtD,KAAK8O,kBAC/Bb,EAAoBhN,GAG7B,UAAU8N,MAAM,iDAFhB9N,EAAQqC,iBAAiB,QAAStD,KAAK8O,YAO7CA,QAAQnN,GACAiB,OAAOkM,QAAQ9O,KAAK2O,WACxBhN,EAAM+B,iBACN1D,KAAKkB,SAASlB,KAAKgB,GAAI,uBA/BpB0N,SAAS,CACdC,QAAShL,cCJAqL,UAAoCtP,EAO/CuP,eACE,YAAYL,gBAAkB5O,KAAKkP,cAAgB,oEAGrDjM,aACEjD,KAAKmP,eAAiBnP,KAAKmP,eAAehM,KAAKnD,MAC/CA,KAAKoP,sBAAwBpP,KAAKoP,sBAAsBjM,KAAKnD,MAG/DoD,UACER,OAAOyM,eAAiB,IAAMrP,KAAKiP,SACnCrM,OAAOU,iBAAiB,WAAYtD,KAAKmP,gBACzCvM,OAAOU,iBAAiB,SAAU,KAChCV,OAAOY,oBAAoB,WAAYxD,KAAKmP,gBAC5CvM,OAAOyM,eAAiB,OAE1BzM,OAAOU,iBAAiB,0BAA2BtD,KAAKoP,uBACxDxM,OAAOU,iBAAiB,qBAAsBtD,KAAKoP,uBAGrDD,eAAeG,GACb,SAGFF,sBAAsBzN,GACfmN,QAAQ9O,KAAKiP,WAChBtN,EAAM+B,kBA/BHsL,SAAS,CAACC,SAAUtL,cCFhB4L,UAAwB7P,EAKnC0D,UACEjB,QAAQrB,IAAI,mBAAoBd,KAAMA,KAAKwP,cAJtCD,UAAU,CAAC,cCDPE,UAA8B/P,EAEzCgQ,qBACE,MAAO,0BAGTzM,aACEjD,KAAK2P,YAAc3P,KAAK2P,YAAYxM,KAAKnD,MAG3CoD,UACE,IAAInC,EAAUjB,KAAKgB,GAEnBhB,KAAK4P,mBACL5P,KAAK2P,cACL1O,EAAQqC,iBAAiB,QAAStD,KAAK2P,aACvC1O,EAAQqC,iBAAiB,SAAUtD,KAAK2P,aAG1CpM,aACE,IAAItC,EAAUjB,KAAKgB,GACnBC,EAAQuC,oBAAoB,QAASxD,KAAK2P,aAC1C1O,EAAQuC,oBAAoB,SAAUxD,KAAK2P,aAG7CE,QAAQlO,SACNA,GAAAA,EAAO+B,iBACP1D,KAAK8P,+BAGCC,mBACN,IAAI9O,EAAUjB,KAAKgB,GACnB,OAAOuN,EAAmBtN,GAAWA,EAAQuL,QAAUvL,EAAQ+B,MAGzDgN,uBACN,IAAI/O,EAAUjB,KAAKgB,GACfgC,EAAQ/B,EAAQgP,aAAajQ,KAAK0P,gBACtC,OAAInB,EAAmBtN,GACL,MAAT+B,EAAgB/B,EAAQiP,eAA0B,QAATlN,GAC7B,OAAVA,GAIPsL,EAAoBrN,IACRkP,MAAMC,KAAKnP,EAAQG,SACzB8E,QAASmK,IACf,GAAIA,EAAOC,gBAET,OADArP,EAAQ+B,MAAQqN,EAAOrN,MAChBqN,EAAOrN,QARXA,GAgBHuN,6BAEN,OADcvQ,KAAKgB,GACJwP,aAAaxQ,KAAK0P,gBAG3BC,cACN,IAAI1O,EAAUjB,KAAKgB,GACfhB,KAAKyQ,kBACPxP,EAAQyP,aAAa,aAAc,QAEnCzP,EAAQ0P,gBAAgB,cAIpBF,kBACN,YAAYV,qBAAuB/P,KAAKgQ,uBAGlCF,+BACN,IAAI7O,EAAUjB,KAAKgB,GACf4P,EAAa3P,EAAQgP,aAAajQ,KAAK0P,gBAEvCnB,EAAmBtN,IACrBA,EAAQyP,aAAa1Q,KAAK0P,eAAgBzO,EAAQuL,QAAQ/L,YAC1DQ,EAAQuL,QAAwB,MAAdoE,EAAqB3P,EAAQiP,eAA+B,QAAdU,GACvDtC,EAAoBrN,GACX,MAAd2P,EACYT,MAAMC,KAAKnP,EAAQG,SACzB8E,QAASmK,IACXA,EAAOC,kBACTrP,EAAQ+B,MAAQqN,EAAOrN,SAK3B/B,EAAQ+B,MAAQ4N,EAIlB3P,EAAQ+B,MAAsB,MAAd4N,EAAqB3P,EAAQ4P,aAAeD,EAIxDhB,mBACN,IAAI3O,EAAUjB,KAAKgB,IACdhB,KAAKuQ,8BAAgChC,EAAmBtN,GAC3DA,EAAQyP,aAAa1Q,KAAK0P,eAAgBzO,EAAQuL,QAAQ/L,YAE1DQ,EAAQyP,aAAa1Q,KAAK0P,eAAgBzO,EAAQ+B,MAAMvC,mBCzGjDqQ,UAAkCpR,EAE7CqR,oBACE,OAAOZ,MAAMC,KAAKpQ,KAAKgB,GAAGsE,iBAAiB,4BAG7CoK,qBACE,MAAO,0BAGTzM,aACEjD,KAAK2P,YAAc3P,KAAK2P,YAAYxM,KAAKnD,MAG3CoD,UACE,IAAInC,EAAUjB,KAAKgB,GAEnBhB,KAAK4P,mBACL5P,KAAK2P,cACL1O,EAAQqC,iBAAiB,QAAStD,KAAK2P,aACvC1O,EAAQqC,iBAAiB,SAAUtD,KAAK2P,aAG1CpM,aACE,IAAItC,EAAUjB,KAAKgB,GACnBC,EAAQuC,oBAAoB,QAASxD,KAAK2P,aAC1C1O,EAAQuC,oBAAoB,SAAUxD,KAAK2P,aAG7CE,QAAQlO,SACNA,GAAAA,EAAO+B,iBACP1D,KAAK+Q,cAAc7K,QAAQjF,GAAWjB,KAAK8P,6BAA6B7O,IAGlE8O,iBAAiB9O,GACvB,OAAOsN,EAAmBtN,GAAWA,EAAQuL,QAAUvL,EAAQ+B,MAGzDgN,qBAAqB/O,GAC3B,IAAI+B,EAAQ/B,EAAQgP,aAAajQ,KAAK0P,gBACtC,OAAInB,EAAmBtN,GACL,MAAT+B,EAAgB/B,EAAQiP,eAA0B,QAATlN,GAC7B,OAAVA,GAIPsL,EAAoBrN,IACRkP,MAAMC,KAAKnP,EAAQG,SACzB8E,QAASmK,IACf,GAAIA,EAAOC,gBAET,OADArP,EAAQ+B,MAAQqN,EAAOrN,MAChBqN,EAAOrN,QARXA,GAgBHuN,2BAA2BtP,GACjC,OAAOA,EAAQuP,aAAaxQ,KAAK0P,gBAG3BsB,mBAAmB/P,GACrBjB,KAAKyQ,gBAAgBxP,GACvBA,EAAQyP,aAAa,aAAc,QAEnCzP,EAAQ0P,gBAAgB,cAIpBF,gBAAgBxP,GACtB,YAAY8O,iBAAiB9O,KAAajB,KAAKgQ,qBAAqB/O,GAG9DgQ,uBAAuBhQ,IACxBjB,KAAKuQ,2BAA2BtP,IAAYsN,EAAmBtN,GAClEA,EAAQyP,aAAa1Q,KAAK0P,eAAgBzO,EAAQuL,QAAQ/L,YAE1DQ,EAAQyP,aAAa1Q,KAAK0P,eAAgBzO,EAAQ+B,MAAMvC,YAIpDqP,6BAA6B7O,GACnC,IAAI2P,EAAa3P,EAAQgP,aAAajQ,KAAK0P,gBAEvCnB,EAAmBtN,IACrBA,EAAQyP,aAAa1Q,KAAK0P,eAAgBzO,EAAQuL,QAAQ/L,YAC1DQ,EAAQuL,QAAwB,MAAdoE,EAAqB3P,EAAQiP,eAA+B,QAAdU,GACvDtC,EAAoBrN,GACX,MAAd2P,EACYT,MAAMC,KAAKnP,EAAQG,SACzB8E,QAASmK,IACXA,EAAOC,kBACTrP,EAAQ+B,MAAQqN,EAAOrN,SAK3B/B,EAAQ+B,MAAQ4N,EAIlB3P,EAAQ+B,MAAsB,MAAd4N,EAAqB3P,EAAQ4P,aAAeD,EAIxDhB,mBACN5P,KAAK+Q,cAAc7K,QAAQlF,GAAMhB,KAAKiR,uBAAuBjQ,IAGvD2O,cACN3P,KAAK+Q,cAAc7K,QAAQlF,GAAMhB,KAAKgR,mBAAmBhQ,IACrDhB,KAAK+Q,cAAcG,KAAKlQ,GAAcA,EAS7BwP,aAAa,eARxBxQ,KAAKgB,GAAG0P,aAAa,aAAc,QAEnC1Q,KAAKgB,GAAG2P,gBAAgB,qBCrHjBQ,UAAgCzR,EAc3C0D,UACEpD,KAAK6M,SAGPA,SACM7M,KAAKoR,mBAAqBpR,KAAKqR,eAAe7E,QAChDxM,KAAKsR,gBAELtR,KAAKuR,eAITD,gBACE,IAAIE,EAAcxR,KAAKyR,eAAiBzR,KAAK0R,WAC7C1R,KAAK2R,eAAezL,QAAQ,CAAClF,EAAI4Q,KAC3BJ,IACFxQ,EAAGgC,MAAQ,IAEbhC,EAAG6Q,UAAW,IAIlBN,eACEvR,KAAK2R,eAAezL,QAAQ,CAAClF,EAAI4Q,KAC/B5Q,EAAG6Q,UAAW,KApCXV,UAAU,CAAC,WAAY,WAEvBA,SAAS,CACdW,MAAOrD,eCJEsD,UAA8BrS,EAezCuP,eACE,YAAYL,gBAAkB5O,KAAK6O,aAAe,gBAGpDmD,eACE,YAAYC,gBAAkBjS,KAAKkS,aAAe,IAGpDjP,aACEjD,KAAKmS,OAASnS,KAAKmS,OAAOhP,KAAKnD,MAC/BA,KAAKoS,QAAUpS,KAAKoS,QAAQjP,KAAKnD,MAGnCoD,UACEC,sBAAsB,KACpBrD,KAAKgB,GAAGsC,iBAAiB,QAAStD,KAAKoS,WAI3C7O,aACMvD,KAAKqS,gBACPhI,aAAarK,KAAKqS,gBAItBD,QAAQzQ,GACN,IAAIV,EAAUjB,KAAKgB,GAEfhB,KAAKsS,YAAYrR,UACnBU,GAAAA,EAAO+B,uBACP/B,GAAAA,EAAO4Q,6BAEPvS,KAAKwS,WAAaxS,KAAKyS,WAAWxR,GAClCjB,KAAK0S,WAAWzR,EAASjB,KAAKiP,UAC9BjP,KAAK2S,SAAS1R,GACdqJ,WAAWtK,KAAKmS,OAAQnS,KAAKgS,WAIjCG,OAAOxQ,SACLA,GAAAA,EAAO+B,iBACP,IAAIzC,EAAUjB,KAAKgB,GACfhB,KAAKsS,YAAYrR,KACnBjB,KAAK0S,WAAWzR,EAASjB,KAAKwS,YAC9BxS,KAAK4S,QAAQ3R,IAIjBqR,YAAYtR,GACV,OAAKoN,EAAmBpN,IAAkB,UAAXA,EAAG4F,MAAqByH,EAAoBrN,GAClEA,EAAG6Q,SAEoB,QAAvB7Q,EAAG0H,QAAQmJ,SAItBY,WAAWzR,GACT,OAAIoN,EAAmBpN,IAAkB,UAAXA,EAAG4F,KACxB5F,EAAGgC,MAEHhC,EAAGwK,UAIdkH,WAAW1R,EAAiB6R,GACtBzE,EAAmBpN,IAAkB,UAAXA,EAAG4F,KAC/B5F,EAAGgC,MAAQ6P,GACFxE,EAAoBrN,IAAOiN,EAAoBjN,MACxDA,EAAGwK,UAAYqH,GAInBF,SAAS3R,GACFoN,EAAmBpN,IAAkB,UAAXA,EAAG4F,MAAqByH,EAAoBrN,GACzEA,EAAG6Q,UAAW,EAEd7Q,EAAG0H,QAAQmJ,SAAW,OAI1Be,QAAQ5R,GACFoN,EAAmBpN,IAAkB,UAAXA,EAAG4F,MAAoByH,EAAoBrN,GACvEA,EAAG6Q,UAAW,EAEd7Q,EAAG0H,QAAQmJ,cAAWiB,GAjGnBf,SAAS,CACdpD,QAAShL,OACToP,QAASzG,cCLA0G,UAA8BtT,EAEzCuT,UACEjT,KAAKgB,GAAG4K,gBCDCsH,UAA8BxT,EAmBzCyT,UACE,GAAInT,KAAKoT,WACP,YAAYC,QAEd,IAAIC,EAAYtT,KAAKgB,GAAGyH,GAExB,GAAkB,KAAd6K,EACF,OAAOA,EAEP,UAAUvE,mFAAmF/O,KAAKqC,gEAItGkR,wBAEE,SADY1Q,SAAS2Q,QACJxT,KAAKmT,MAGxBM,qBACE,YAAYC,uBAAwB1T,KAAK2T,mBAG3CC,eACE,YAAYC,iBAAmB7T,KAAK8T,cAAgB9T,KAAKgB,GAG3DoC,UACEC,sBAAsB,KAChBrD,KAAKyT,gBACPzT,KAAK6P,YAKXiC,MAAMnQ,GACAA,GACFA,EAAM+B,iBAERqQ,aAAaC,WAAWhU,KAAKuT,mBAC7BvT,KAAKkB,SAASlB,KAAK4T,iCAGrBK,KAAKtS,GACCA,GACFA,EAAM+B,iBAER,IAAIzC,EAAUjB,KAAK4T,SACfM,EAAalU,KAAKmU,gBAAgBC,MAAM,KACxCC,EAA+B,GACnCH,EAAWhO,QAASoO,GAAiBD,EAAKC,GAAQC,EAAKtT,EAASqT,IAChEP,aAAaS,QAAQxU,KAAKuT,kBAAmBkB,KAAKC,UAAUL,IAC5DrU,KAAKkB,SAASD,+BAGhB4O,QAAQlO,GACFA,GACFA,EAAM+B,iBAER,IAAIzC,EAAUjB,KAAK4T,SACnB,GAAIG,aAAaY,QAAQ3U,KAAKuT,mBAAoB,CAChD,MAAMqB,EAAYH,KAAKI,MAAMd,aAAaY,QAAQ3U,KAAKuT,oBACvDjS,OAAOwT,KAAKF,GAAW1O,QAASoO,IAC9BS,EAAK9T,EAAwBqT,EAAMM,EAAUN,MAE/CtU,KAAKkB,SAASD,uCAEdjB,KAAKkB,SAASD,iCAnFXiS,UAAU,CACf,WAEKA,SAAS,CACdzK,GAAI9E,OACJuQ,WAAYvQ,OACZqR,cAAevG,eCTNwG,UAA2BvV,EAatCwV,mBACE,YAAYC,WAAWf,MAAM,KAG/BgB,sBACE,YAAYC,cAAcjB,MAAM,KAGlC3O,eACE,IAAIxE,EAAUjB,KAAKgB,GACnB,OACSmP,MAAMC,KADXpQ,KAAKsV,sBACWrU,EAAQqE,iBAAiBtF,KAAKuV,oBAE9BtU,EAAQwE,UAI9BrC,UACEmG,EAAYvJ,KAAM,CAACiB,QAASjB,KAAKgB,GAAIwU,WAAW,IAChDxV,KAAKyV,aAGPC,OAAOrO,GACLrH,KAAKyV,aAGPA,aACE,IAAIxU,EAAUjB,KAAKgB,GACfyE,EAAWzF,KAAKyF,SACI,IAApBA,EAAS6F,QACXtL,KAAK2V,yBACL3V,KAAK4V,mBACL5V,KAAKkB,SAASD,EAAwB,eAEtCjB,KAAK6V,sBACL7V,KAAK8V,sBACL9V,KAAKkB,SAASD,EAAwB,gBAAiB,CAACS,OAAQ,CAACqK,MAAOtG,EAAS6F,WAI7EwK,sBACF9V,KAAK+V,eACP/V,KAAKgB,GAAG2K,UAAUC,UAAU5L,KAAKkV,cAI7BW,sBACF7V,KAAKgW,kBACPhW,KAAKgB,GAAG2K,UAAUG,OAAO9L,KAAKoV,iBAI1BQ,mBACF5V,KAAK+V,eACP/V,KAAKgB,GAAG2K,UAAUG,OAAO9L,KAAKkV,cAI1BS,yBACF3V,KAAKgW,kBACPhW,KAAKgB,GAAG2K,UAAUC,UAAU5L,KAAKoV,kBAvE9BH,UAAU,CAAC,QAAS,YACpBA,SAAS,CAACgB,cAAetS,cCJrBuS,UAA+BxW,EAc1C0D,UACEpD,KAAK6M,SAGPA,SACM7M,KAAKmW,kBAAoBnW,KAAKoW,cAAc5J,QAC9CxM,KAAKuR,eAELvR,KAAKsR,gBAITA,gBACE,IAAIE,EAAcxR,KAAKyR,eAAiBzR,KAAK0R,WAC7C1R,KAAKqW,cAAcnQ,QAAQ,CAAClF,EAAI4Q,KAC1BJ,IACFxQ,EAAGgC,MAAQ,IAEbhC,EAAG6Q,UAAW,IAIlBN,eACEvR,KAAKqW,cAAcnQ,QAAQ,CAAClF,EAAI4Q,KAC9B5Q,EAAG6Q,UAAW,KApCXqE,UAAU,CAAC,UAAW,UAEtBA,SAAS,CACdpE,MAAOrD,eCLE6H,UAAgC5W,EAO3C0D,UACE,IAAInC,EAAUjB,KAAKgB,GAEnBC,EAAQsV,QAAU,KACZvW,KAAKwW,oBACPvV,EAAQwV,IAAMzW,KAAK0W,iBAEnBzV,EAAQwJ,MAAMkM,QAAU,SAZvBL,SAAS,CAACM,YAAajT,cCFnBkT,UAAyBnX,EAMpCoX,OAAOnV,SACLA,GAAAA,EAAO+B,iBACP1D,KAAKkB,SAASlB,KAAK+W,WAAY,UAC/B/W,KAAK+W,WAAWD,SAGlBE,MAAMrV,SACJA,GAAAA,EAAO+B,iBACP1D,KAAKkB,SAASlB,KAAK+W,WAAY,SAC/B/W,KAAK+W,WAAWC,SAbXH,UAAU,CAAC,cCKPI,UAA2BvX,EAetCwX,cACE,GAAIlX,KAAKoT,WACP,YAAYC,QAEd,IAAIC,EAAatT,KAAKgB,GAAuByH,GAE7C,GAAkB,KAAd6K,EACF,OAAOA,EAEP,UAAUvE,gFAAgF/O,KAAKqC,6DAInG8U,sBAEE,SADYtU,SAAS2Q,QACJxT,KAAKkX,UAGxBnG,oBACE,YAAa/P,GAAuBoW,SAGtCC,gBACE,IAAIhD,EAAwB,CAACrM,CAAChI,KAAKmX,iBAAkB,IACrD,IAAK,MAAMlW,UAAgB8P,cAAe,CACxC,IAAI/P,EAAKC,EACLD,EAAGwF,KAAK8E,OAAS,IACf8C,EAAmBpN,IAAkB,YAAXA,EAAG4F,KAC/ByN,EAAKrU,KAAKmX,iBAAiBnW,EAAGwF,MAAQxF,EAAGwL,QAChC4B,EAAmBpN,IAAkB,SAAXA,EAAG4F,KAClC5F,EAAGwL,UACL6H,EAAKrU,KAAKmX,iBAAiBnW,EAAGwF,MAAQxF,EAAGgC,OAG3CqR,EAAKrU,KAAKmX,iBAAiBnW,EAAGwF,MAAQxF,EAAGgC,OAI/C,OAAOqR,EAGTZ,qBACE,YAAYC,uBAAwB1T,KAAK2T,mBAG3C2D,qBACE,YAAYC,uBAAwBvX,KAAKwX,mBAG3CvU,aACEjD,KAAKyX,OAASzX,KAAKyX,OAAOtU,KAAKnD,MAGjCoD,UACEC,sBAAsB,KAEpB,IAAK8K,EADSnO,KAAKgB,IAEjB,UAAU+N,MAAM,wDAGd/O,KAAKyT,gBACPzT,KAAK6P,UAEH7P,KAAKsX,gBACPtX,KAAKgB,GAAGsC,iBAAiB,SAAUtD,KAAKyX,UAK9ClU,aACMvD,KAAKsX,gBACPtX,KAAKgB,GAAGwC,oBAAoB,SAAUxD,KAAKyX,QAI/CA,SACE1D,aAAaC,WAAWhU,KAAKmX,iBAC7BnX,KAAKkB,SAASlB,KAAKgB,wBAGrB8Q,MAAMnQ,SACJA,GAAAA,EAAO+B,iBACP1D,KAAKyX,SAGPxD,KAAKtS,GACHA,EAAM+B,iBAENqQ,aAAaS,QAAQxU,KAAKmX,gBAAiB1C,KAAKC,UADrC1U,KAAKqX,UAC+CrX,KAAKmX,mBACpEnX,KAAKkB,SAASlB,KAAKgB,6BAGrB6O,QAAQlO,GAEN,SADAA,GAAAA,EAAO+B,iBACHqQ,aAAaY,QAAQ3U,KAAKmX,iBAAkB,CAC9C,MAAMvC,EAAYH,KAAKI,MAAMd,aAAaY,QAAQ3U,KAAKmX,kBACvD,IAAK,MAAMlW,UAAgB8P,cAAe,CACxC,IAAI/P,EAAKC,EACLD,EAAGwF,QAAQoO,IACTxG,EAAmBpN,IAAkB,YAAXA,EAAG4F,KAC/B5F,EAAGwL,QAAUoI,EAAU5T,EAAGwF,MACjB4H,EAAmBpN,IAAkB,SAAXA,EAAG4F,KAClC5F,EAAGgC,OAAS4R,EAAU5T,EAAGwF,QAC3BxF,EAAGwL,SAAU,GAGfxL,EAAGgC,MAAQ4R,EAAU5T,EAAGwF,OAI9BxG,KAAKkB,SAASlB,KAAKgB,qCAEnBhB,KAAKkB,SAASlB,KAAKgB,+BA7HhBiW,SAAS,CACdxO,GAAI9E,OACJqR,cAAevG,QACfiJ,cAAejJ,eCXNkJ,UAA+BjY,EAQ1CkY,gBACE,OAAI5X,KAAK6X,uBACKC,eAAe1D,MAAM,KAAK2D,IAAIC,GAAO1L,OAAO2L,WAAWD,EAAIE,SAASxL,OAAOsL,GAAOA,GAAO,GAAKA,GAAO,GAE1G,CAAC,EAAG,GAIf5U,UACE4D,EAAgBhH,KAAM,CACpB4X,UAAW5X,KAAK4X,UAChB3W,QAASjB,KAAKgB,KAIlB+C,OAAOuD,GACLtH,KAAKkB,SACHlB,KAAKgB,GACL,sBACA,CACEU,OAAQ,CACNT,QAASjB,KAAKgB,MAMtBmX,UAAU7Q,GACRtH,KAAKkB,SACHlB,KAAKgB,GACL,yBACA,CACEU,OAAQ,CACNT,QAASjB,KAAKgB,OAvCf2W,SAAS,CAACC,UAAWjU,cCFjByU,UAA4BhU,EAOvChB,UACE,IAAInC,EAAUjB,KAAKgB,GAEf,yBAA0B4B,QAC3B5C,KAAK8H,QAAS9H,KAAK+H,WAAaf,EAAgBhH,KAAM,CAACiB,QAAAA,EAAS2W,UAAW,KAG5E5X,KAAKwE,cAITT,OAAOuD,GACDA,EAAM3G,SAAWX,KAAKgB,IAAMsG,EAAMC,iBACpCvH,KAAKwE,cACDxE,KAAK+H,WACP/H,KAAK+H,cCzBb,MAAMsQ,EAAkB,mBAAoBvU,SAASwU,gBAAgB7N,MACrE,IAAI8N,iBAEkBC,EAAgBvX,GAAkBwX,SAACA,EAAW,SAAZC,MAAsBA,EAAQ,QAA9BC,OAAuCA,EAAS,WAAoC,IAC1H,UAAZF,GAAyBJ,SAM/BO,iBACE,MAAMC,SAACA,gBAAyE,yBAC5EN,IAGJA,GAAmB,EACnBM,KAXQC,GAER7X,EAAQ8X,eAAe,CAACN,SAAAA,EAAUC,MAAAA,EAAOC,OAAAA,aAY3BK,EAAgBC,GAC9B,IAAKA,EACH,YAEF,MAAMC,EAAYC,iBAAiBF,GAAMC,UAGzC,MAFmC,YAAdA,GAAyC,WAAdA,GAE5BD,EAAKhO,cAAgBgO,EAAKjO,aACrCiO,EAGFD,EAAgBC,EAAKG,gBAAkBtV,SAASuV,WC1B5CC,WAAgC5Z,EAA7CE,kCAmBEI,aAAoC,KAEpCyW,UACE,YAAY8C,YAAcvZ,KAAKwZ,SAAYxZ,KAAKgB,GAAwByV,IAG1EgD,aACE,YAAYC,eAAiB1Z,KAAK2Z,YAAe3Z,KAAKgB,GAAwB4Y,OAGhFC,YACE,YAAYC,cAAgB9Z,KAAK+Z,WAAc/Z,KAAKgB,GAAwB6Y,MAG9EG,qBACE,YAAYC,cAAgBja,KAAKka,WAAa,wBAGhDC,qBACE,YAAYC,cAAgBpa,KAAKqa,WAAa,uBAGhDpX,aACEjD,KAAKsa,KAAOta,KAAKsa,KAAKnX,KAAKnD,MAC3BA,KAAKua,MAAQva,KAAKua,MAAMpX,KAAKnD,MAG/BoD,WAGAkX,OACE,IAAIrZ,EAAUjB,KAAKgB,GACnB,GAAIhB,KAAKwa,QACP,OAEFxa,KAAKwa,QAAU1W,SAASoB,cAAc,UAEtC,IAAIuV,EAAQ3W,SAASoB,cAAc,OACnCuV,EAAMC,UAAY1a,KAAKma,eACvBM,EAAMhE,IAAMzW,KAAKyW,IACjBgE,EAAMb,OAAS5Z,KAAKyZ,OACpBgB,EAAMZ,MAAQ7Z,KAAK6Z,MACnB7Z,KAAKwa,QAAQG,YAAYF,GAEzBxZ,EAAQ2Z,sBAAsB,WAAY5a,KAAKwa,SAC/CK,EAAeC,eAAe9a,KAAKwa,SACnCxa,KAAKwa,QAAQE,UAAY1a,KAAKga,eAC9Bha,KAAKwa,QAAQO,YACbvC,EAAgBxY,KAAKwa,QAAS,CAAC/B,SAAU,SAAUC,MAAO,QAAQhT,MAAM,IAAM1F,KAAKwa,QAASzB,gBAAe,IAC3G/Y,KAAKwa,QAAQlX,iBAAiB,QAAStD,KAAKua,OAC5Cva,KAAKwa,QAAQlX,iBAAiB,SAAUtD,KAAKua,OAC7Cva,KAAKwa,QAAQlX,iBAAiB,QAAStD,KAAKua,OAG9CA,QACMva,KAAKwa,UACPxa,KAAKwa,QAAQD,QACbva,KAAKwa,QAAQ5O,SACb5L,KAAKwa,QAAU,KACfhC,EAAgBxY,KAAKgB,GAAI,CAACyX,SAAU,SAAUC,MAAO,QAAQhT,MAAM,IAAM1F,KAAKgB,GAAG+X,gBAAe,MA5E7FO,UAAS,CACd7C,IAAK9S,OACL8V,OAAQ9V,OACRkW,MAAOlW,QAEF2V,WAAU,CAAC,QAAS,eCThB0B,WAA6Ctb,EAWxDuD,aACEjD,KAAKib,aAAejb,KAAKib,aAAa9X,KAAKnD,MAG7CoD,UACEpD,KAAKkb,aAAahV,QAASlF,GAAOA,EAAGsC,iBAAiB,SAAUtD,KAAKib,eAGvE1X,aACEvD,KAAKkb,aAAahV,QAASlF,GAAOA,EAAGwC,oBAAoB,SAAUxD,KAAKib,eAG1EA,aAAatZ,GACX,IAAIwZ,EAAenb,KAAKkb,aAAaE,OAAO,CAACC,EAAera,IAAOA,EAAGwL,QAAU6O,EAAgB,EAAIA,EAAe,GAC/G1a,EAASgB,EAAMhB,OACfwa,EAAenb,KAAKqM,UACtB1K,EAAM+B,iBACN/C,EAAO6L,SAAU,EACjBxM,KAAKkB,SAASP,EAAQ,UACtBX,KAAKkB,SAASP,EAAQ,8BAClBX,KAAKsb,iBACPtb,KAAKub,YAAYpW,UAAYnF,KAAK6O,gBAGpC7O,KAAKkB,SAASP,EAAQ,+BAClBX,KAAKsb,iBACPtb,KAAKub,YAAYpW,UAAY,MAnC5B6V,WAAU,CAAC,QAAS,SACpBA,UAAS,CAAC/O,IAAKK,OAAQqC,QAAShL,cCH5B6X,WAA8B9b,EAMzCuD,cAGAG,WAGAG,cAGAyE,WAAWrG,SACTA,GAAAA,EAAO+B,4BACI+X,YAAYC,OAGzBC,MAAMha,SACJA,GAAAA,EAAO+B,iBACP1D,KAAKyb,YAAYE,QAGnBC,QAAQja,SACNA,GAAAA,EAAO+B,iBACP1D,KAAKyb,YAAYI,YAAc,EAGjCC,KAAKna,SACHA,GAAAA,EAAO+B,iBACP1D,KAAKyb,YAAYI,aAAe,GA9B3BL,WAAU,CAAC,eCFPO,WAA6Brc,EAexCsc,mBACE,YAAYC,wBAA0Bjc,KAAKkc,kBAAoB,gBAGjEC,iBACE,YAAYC,mBAAqBpc,KAAKqc,gBAAkB,YAG1DjZ,UACEpD,KAAKsc,iBAGPxQ,IAAInK,SACFA,GAAAA,EAAO+B,iBAEP,MAAM6Y,EAAUvc,KAAKwc,eAAerX,UAAUsX,QAAQ,cAAezc,KAAK0c,cAC1E1c,KAAK2c,aAAaC,mBAAmB5c,KAAKmc,WAAYI,GAGxD3Q,OAAOjK,GACLA,EAAM+B,iBACN,MAAMmZ,EAA+Blb,EAAMhB,OAAuBmc,YAAY9c,KAAKgc,gBACnF,GAAe,MAAXa,EACF,UAAU9N,oGAAoG/O,KAAKgc,gBAGrH,GAAkC,SAA9Ba,EAAQnU,QAAQqU,UAClBF,EAAQjR,aACH,CACLiR,EAAQpS,MAAMkM,QAAU,OACxB,IAAIqG,EAAeH,EAAQI,cAAc,2BACzC,GAAoB,MAAhBD,EACF,UAAUjO,8HAGZiO,EAAaha,MAAQ,KAIzB0Z,aACE,WAAWQ,MAAOC,UAAU1c,WAAa2c,KAAKC,SAAS5c,WAAW6c,MAAM,GAGlEhB,iBAGN,GAFetc,KAAKwc,eAAerX,UAEtBoY,QAAQ,cACnB,UAAUxO,MAAM,qIA7DbgN,WAAU,CAAC,SAAU,YACrBA,UAAS,CACdI,WAAYxY,OACZqY,aAAcrY,cCJL6Z,WAAkC9d,EAU7CuD,aACEjD,KAAKyd,oBAAsBzd,KAAKyd,oBAAoBta,KAAKnD,MAG3DoD,UACEpD,KAAK0d,gBAAgBxX,QAASlF,GAAOA,EAAGsC,iBAAiB,SAAUtD,KAAKyd,sBAG1Ela,aACEvD,KAAK0d,gBAAgBxX,QAASlF,GAAOA,EAAGwC,oBAAoB,SAAUxD,KAAKyd,sBAGrEE,oBACN,IAAIC,EAAS,IAAIC,IAAI7d,KAAK0d,gBAAgB3F,IAAI/W,GAAMA,EAAGgC,QACvD,OAAO4a,EAAOE,IAAI,KAAsB,GAAfF,EAAOG,KAG1BN,sBACN,IAAIxc,EAAUjB,KAAKgB,GACfhB,KAAK2d,qBACP3d,KAAKkB,SAASD,EAAS,0BACnBjB,KAAKyL,eACPzL,KAAK0d,gBAAgBxX,QAAQlF,GAAMA,EAAG2K,UAAUC,OAAO5L,KAAK6L,eAG9D7L,KAAKkB,SAASD,EAAS,6BACnBjB,KAAKyL,eACPzL,KAAK0d,gBAAgBxX,QAAQlF,GAAMA,EAAG2K,UAAUG,IAAI9L,KAAK6L,eAnCxD2R,WAAU,CAAC,YACXA,WAAU,CAAC,eCHPQ,WAA+Bte,EAM1Cue,KAAKtc,SACHA,GAAAA,EAAO+B,iBACP1D,KAAKke,eAAetX,KAAO,OAG7BuX,KAAKxc,SACHA,GAAAA,EAAO+B,iBACP1D,KAAKke,eAAetX,KAAO,WAG7BiG,OAAOlL,SACLA,GAAAA,EAAO+B,iBAC0B,aAA7B1D,KAAKke,eAAetX,KACtB5G,KAAKie,OAELje,KAAKme,QAnBFH,WAAU,CAAC,kBCFPI,WAA6B1e,EAQxCqG,eACE,YAAYX,iBAAmBpF,KAAKuF,oCAAsCvF,KAAKqC,eAGjFoa,QAAQ9a,GACN,MAAO0S,EAAMgK,EAAQC,GAAO3c,EAAMD,OAClC,GAAI2S,aAAgBkK,KAAM,CACxB,IAAIC,EAAcnK,EAAK4I,cAAcjd,KAAK+F,UAE1C,GAAmB,MAAfyY,EACF,UAAUzP,sDAAsD/O,KAAKqC,kDAGvE,IAAIoc,EAAaze,KAAKgB,GAAGyd,WACzB,GAAkB,MAAdA,EACF,UAAU1P,MAAM,sEAElB0P,EAAWC,aAAaF,EAAaxe,KAAKgB,SAE1CmB,QAAQrB,IAAI,UAAWuT,IA1BpB+J,WAAU,GAEVA,UAAS,CAACrY,SAAUpC,cCIhBgb,WAA0Cjf,EAErDuD,aACEjD,KAAK4e,gBAAkB5e,KAAK4e,gBAAgBzb,KAAKnD,MAGnDoD,UACER,OAAOU,iBAAiB,UAAWtD,KAAK4e,iBAG1Crb,aACEX,OAAOY,oBAAoB,UAAWxD,KAAK4e,iBAG7CA,gBAAgBjQ,GACd,IAAI0F,EAAO1F,EAAQ0F,KACfA,EAAKwK,eAAe,SAAyB,gBAAdxK,EAAK7N,MAA0B6N,EAAKwK,eAAe,WACpF7e,KAAK0K,OAAO2J,EAAKxK,QAIrBa,OAAOb,GACJ7J,KAAKgB,GAAyByJ,MAAMZ,UAAYA,aAKxCiV,WAAuCpf,EAOlD0D,U9B1ByB,IAACiD,EAAYjF,EAChCgH,E8B2BAxF,OAAOtC,OAASsC,OAAOmc,MACzBvV,EAAgBxJ,M9B7BkBoB,E8B8BhB,G9B3Ba,QAAhCgH,GAHuB/B,E8B8BVrG,M9B5BiBJ,YACbof,iBAA8B,IAAP5W,GAAyBA,EAAGlC,QAAS+Y,IAI1E,GAHoB,iBAATA,IACP5Y,EAAW4Y,GAAQjV,EAAS3D,EAAW4Y,GAAO7d,MAAAA,OAAyC,EAASA,EAAQ8I,OAExF,iBAAT+U,EAAmB,CAC1B,MAAMzY,KAAEA,EAAI0D,KAAEA,GAAS+U,EACvB,IAAKzY,EACD,OACJH,EAAWG,GAAQwD,EAAS3D,EAAWG,GAAO0D,IAAS9I,MAAAA,OAAyC,EAASA,EAAQ8I,U8BoBvHlK,KAAKkf,cAMTtU,aAAahB,GACX5J,KAAKkf,aAGPA,aACE,IAAItV,EAAmC,CAACpD,KAAM,cAAeqD,OAAQ7J,KAAKmf,aAC1Evc,OAAOwc,OAAOC,YACZzV,EACA,KAIJuV,YACE,MAAM9F,EAAOvV,SAASuV,KAChBrU,EAAOlB,SAASwU,gBAGtB,OAAO8E,KAAKnR,IAAIoN,EAAKpO,aAAcoO,EAAKtO,aAAc/F,EAAKgG,aAAchG,EAAKiG,aAAcjG,EAAK+F,eAjC5F+T,aAAY,CAAC,oBCnCTQ,WAA4B5f,EAEvC6f,eACEvf,KAAKwf,QAAQxf,KAAKgB,IAGpBwe,QAAQve,aACNA,EAAQyH,QAAQrC,qBAAapF,EAAQyH,QAAQrC,qBAAY3D,WAAW,IAAI+c,eAAgBzf,KAAKqC,kBAAoB,KAAM,MAAO,GAC5F,IAA9BpB,EAAQyH,QAAQrC,mBAEXpF,EAAQyH,QAAQrC,WAGzB,IAAIqZ,EAAgC,IAAID,eAAgBzf,KAAKqC,wBAA0B,KACvFpB,EAAQyH,QAAQ/H,iBAASM,EAAQyH,QAAQ/H,iBAAQ+B,WAAWgd,EAA+B,MAAO,UAC3Fze,EAAQyH,QAAQiX,KAAa3f,KAAKqC,sBACX,IAA1BpB,EAAQyH,QAAQ/H,eAEXM,EAAQyH,QAAQ/H,OAGzBM,EAAQyH,QAAQkX,iBAAS3e,EAAQyH,QAAQ/H,iBAAQ+B,WAAWgd,EAA+B,MAAO,UAC3Fze,EAAQyH,QAAQiX,KAAa3f,KAAKqC,sBACX,IAA1BpB,EAAQyH,QAAQkX,eAEX3e,EAAQyH,QAAQkX,OAIzB,IAAIhC,EAAS5d,KAAKJ,YAAYge,OAC1BA,GACFtc,OAAOwT,KAAK8I,GAAQ1X,QAAQ8R,UAAc/W,EAAQyH,QAAQiX,KAAa3f,KAAKqC,cAAc2V,aAI5F,IAAI6H,EAAU7f,KAAKJ,YAAYigB,QAC3BA,GACFve,OAAOwT,KAAK+K,GAAS3Z,QAAQ8R,UAAc/W,EAAQyH,QAAQiX,KAAa3f,KAAKqC,cAAc2V,oBCrCpF8H,WAAkCR,GAe7Clc,UACEC,sBAAsB,KAEpBmV,EACExY,KAAKgB,GACL,CACEyX,SAAUzY,KAAK+f,iBAAmB/f,KAAKggB,cAAgB,SACvDtH,MAAO1Y,KAAKigB,cAAgBjgB,KAAKkgB,WAAa,SAC9CvH,OAAQ3Y,KAAKmgB,eAAiBngB,KAAKogB,YAAc,WAEnD1a,MAAM,IAAM1F,KAAKgB,GAAG+X,kBACtB/Y,KAAKuf,kBAxBFO,UAAS,CACdrH,SAAU9U,OACV+U,MAAO/U,OACPgV,OAAQhV,cCLC0c,WAAiC3gB,EAS5C4gB,OAAO3e,GAEL,IACIhB,QAFJgB,GAAAA,EAAO+B,iBAIL/C,EADU,aAFDX,KAAKugB,aAAevgB,KAAKwgB,UAAY,YAGrC1c,SAASuV,KAETL,EAAgBhZ,KAAKgB,IAElB,MAAVL,GAGJ6X,EAAgB7X,EAAS,CAAC8X,SAAU,SAAUC,MAAO,QAAQhT,MAAM,IAAM/E,EAAQoY,gBAAe,KAnB3FsH,UAAS,CACdI,KAAM9c,cCHG+c,WAA2BhhB,EAiBtC4gB,SACE,IAAI3f,EAASmD,SAASmZ,cAAcjd,KAAKuF,eACpC5E,EAKL6X,EACE7X,EACA,CACE8X,SAAUzY,KAAK+f,iBAAmB/f,KAAKggB,cAAgB,SACvDtH,MAAO1Y,KAAKigB,cAAgBjgB,KAAKkgB,WAAa,SAC9CvH,OAAQ3Y,KAAKmgB,eAAiBngB,KAAKogB,YAAc,WAEnD1a,MAAM,IAAM/E,EAAQoY,kBAXpB5W,QAAQwe,mCAAmC3gB,KAAKuF,mBAlB7Cmb,UAAS,CACd3a,SAAUpC,OACV8U,SAAU9U,OACV+U,MAAO/U,OACPgV,OAAQhV,cCNCid,WAA8BlhB,EASzC4gB,OAAO3e,GAEL,IACIhB,QAFJgB,GAAAA,EAAO+B,iBAIL/C,EADU,aAFDX,KAAKugB,aAAevgB,KAAKwgB,UAAY,YAGrC1c,SAASuV,KAETL,EAAgBhZ,KAAKgB,IAElB,MAAVL,GAGJ6X,EAAgB7X,EAAS,CAAC8X,SAAU,SAAUC,MAAO,UAAUhT,MAAM,IAAM/E,EAAQoY,gBAAe,KAnB7F6H,UAAS,CACdH,KAAM9c,cCJGkd,WAA+BnhB,EAA5CE,kCAKEI,aAAuD,KAEvDoD,UACEC,sBAAsB,KAEpBrD,KAAK+S,QAAUzI,WAAW,IAAMtK,KAAKgB,GAAG4K,SAA8B,IAApB5L,KAAK8gB,gBAI3Dvd,aACMvD,KAAK+S,SACP1I,aAAarK,KAAK+S,UAdf8N,UAAS,CAACE,QAASzU,cCFf0U,WAAyBthB,EAAtCE,kCAYEI,mBAAuC,KAEvCihB,YACE,YAAYV,aAAevgB,KAAKwgB,UAAY,MAG9CU,qBAGE,GAA2B,OAAvBlhB,KAAKmhB,cAKT,OADAnhB,KAAKmhB,cAAgBrd,SAASoB,cAAc,OACpClF,KAAKihB,OACX,IAAK,MACHjhB,KAAKgB,GAAG4Z,sBAAsB,cAAe5a,KAAKmhB,eAClD,MACF,IAAK,SACHnhB,KAAKgB,GAAG4Z,sBAAsB,WAAY5a,KAAKmhB,gBAKrD/d,UACE,IAAInC,EAAUjB,KAAKgB,GACnBhB,KAAKkhB,qBAEY,IAAI9Z,qBAAqBC,IACxCA,EAAQnB,QAAQoB,IACVA,EAAM3G,SAAWX,KAAKmhB,gBAGM,IAA5B7Z,EAAM8Z,kBACRngB,EAAQ0K,UAAUG,IAAI9L,KAAKqhB,cAAgBrhB,KAAKshB,WAAa,SACxB,IAA5Bha,EAAM8Z,mBACfngB,EAAQ0K,UAAUC,OAAO5L,KAAKqhB,cAAgBrhB,KAAKshB,WAAa,aAInE,CACD1J,UAAW,CAAC,EAAG,KAER9P,QAAQ9H,KAAKmhB,gBArDjBH,WAAU,CAAC,SACXA,UAAS,CACdP,KAAM9c,cCJG4d,WAA4B7hB,EAAzCE,kCAMEI,gBAA4B,KAC5BA,eAAoB,EAEpBwhB,iBACE,IAAIC,EAAQzhB,KAAKgB,GAAwB0gB,MACzC,GAAY,MAARD,EACF,UAAU1S,MAAM,6CAElB,OAAO0S,EAGTE,oBACE,IAAIC,EAAO5hB,KAAKwhB,WAAWI,KAC3B,GAAmB,GAAfA,EAAKtW,OACP,UAAUyD,MAAM,mEAElB,OAAOoB,MAAMC,KAAKwR,EAAK,GAAGC,OAG5BC,iBACE,YAAa9gB,GAAwB+gB,QAAQ,GAG/CC,iBACE,OAAO7R,MAAMC,KAAKpQ,KAAK8hB,WAAWF,MAGpC3e,aACEjD,KAAKiiB,KAAOjiB,KAAKiiB,KAAK9e,KAAKnD,MAG7BoD,UACEC,sBAAsB,KACpBrD,KAAK2hB,cAAczb,QAAQgc,GAAQA,EAAK5e,iBAAiB,QAAStD,KAAKiiB,OACnEjiB,KAAKmiB,mBACPniB,KAAKoiB,cAAcpiB,KAAKqiB,kBAK9B9e,aACEvD,KAAK2hB,cAAczb,QAAQgc,GAAQA,EAAK1e,oBAAoB,QAASxD,KAAKiiB,OAG5EA,KAAKtgB,GACHA,EAAM+B,iBACN,IACI4e,EAAkBtiB,KAAKuiB,mBADV5gB,EAAMhB,QAEvBX,KAAKoiB,cAAcE,GAGbC,mBAAmBL,GACzB,YAAYP,cAAcpE,QAAQ2E,GAG5BE,cAAcI,GACpBxiB,KAAKyiB,SAAWD,IAAUxiB,KAAK0iB,aAAe1iB,KAAKyiB,SACnD,IAAIE,EAAO7e,SAAS8e,yBACT5iB,KAAKgiB,WAEGC,KAAK,CAACY,EAAKC,aAC5B,IAAIjB,EAAQ1R,MAAMC,KAAKyS,EAAIhB,OACvBkB,EAAa5S,MAAMC,KAAK0S,EAASjB,OAGjCmB,YAAInB,EAAMW,aAAQhX,YAAa,GAC/ByX,YAAIF,EAAWP,aAAQhX,YAAa,GAEpC0X,EAAUF,EAAEG,cAAcF,EAAG,KAAM,CAACG,YAAa,OAAQC,SAAS,EAAMC,UAAW,UAEvF,OAAIT,EAAIna,QAAQ6a,SAAWT,EAASpa,QAAQ8a,WACtCX,EAAIna,QAAQ6a,SAAWT,EAASpa,QAAQ6a,QACnCL,GAED,EAENL,EAAIna,QAAQ8a,YAAcV,EAASpa,QAAQ6a,QACzCV,EAAIna,QAAQ8a,YAAcV,EAASpa,QAAQ8a,WACtCN,IAKPljB,KAAKyiB,SACAS,EAAU,GAAK,EAAI,EAErBA,IAGDhd,QAAQ2c,GAAOF,EAAKhI,YAAYkI,IAExC7iB,KAAK8hB,WAAW3c,UAAY,GAC5BnF,KAAK8hB,WAAWnH,YAAYgI,GAC5B3iB,KAAK0iB,WAAaF,GAjGbjB,UAAS,CAACkC,UAAWnX,cCDjBoX,WAAgChkB,EAc3CikB,iBACE,aAAYC,mBAAoB5jB,KAAK6jB,eAGvCF,eAAe3gB,GACbhD,KAAK6jB,eAAiB7gB,EAGxB8e,iBACE,YAAa9gB,GAAwB+gB,QAAQ,GAG/CC,iBACE,OAAO7R,MAAMC,KAAKpQ,KAAK8hB,WAAWF,MAGpCkC,aACE,YAAYC,cAAgB/jB,KAAKgkB,WAAa,GAGhD/gB,aACEjD,KAAKikB,SAAWjkB,KAAKikB,SAAS9gB,KAAKnD,MACnCA,KAAKkkB,OAASlkB,KAAKkkB,OAAO/gB,KAAKnD,MAGjCoD,UACEmG,EAAYvJ,KAAM,CAACwV,WAAW,EAAMvU,QAASjB,KAAK8hB,aAElDze,sBAAsB,KACpBrD,KAAKikB,WACLjkB,KAAKmkB,eAAe7gB,iBAAiB,QAAStD,KAAKkkB,UAIvDD,SAAStiB,SACPA,GAAAA,EAAO+B,iBACP1D,KAAK2jB,YAAa,EACd3jB,KAAKgiB,WAAW1W,QAAUtL,KAAK8jB,QACjC9jB,KAAKgiB,WAAW1E,MAAMtd,KAAK8jB,QAAQ5d,QAASlF,IACtCA,IAAOhB,KAAKmkB,gBACdnkB,KAAKokB,aAAapjB,KAGtBhB,KAAKqkB,aAAarkB,KAAKmkB,iBAEvBnkB,KAAKokB,aAAapkB,KAAKmkB,gBAI3BD,OAAOviB,GACL3B,KAAK2jB,YAAa,QAClBhiB,GAAAA,EAAO+B,iBACP1D,KAAKgiB,WAAW1E,MAAMtd,KAAK8jB,QAAQ5d,QAASlF,IACtCA,IAAOhB,KAAKmkB,gBACdnkB,KAAKqkB,aAAarjB,KAGtBhB,KAAKokB,aAAapkB,KAAKmkB,gBAGzBzO,OAAOrO,GACDrH,KAAK2jB,YACP3jB,KAAKskB,cAIDD,aAAarjB,GACnBA,EAAGyJ,MAAMkM,QAAU,GAGbyN,aAAapjB,GACnBA,EAAGyJ,MAAMkM,QAAU,OAGb2N,cACNtkB,KAAKgiB,WAAW1E,MAAM,EAAGtd,KAAK8jB,QAAQ5d,QAASlF,IACzCA,IAAOhB,KAAKmkB,gBACdnkB,KAAKqkB,aAAarjB,KAGtBhB,KAAKgiB,WAAW1E,MAAMtd,KAAK8jB,QAAQ5d,QAASlF,IACtCA,IAAOhB,KAAKmkB,gBACdnkB,KAAKokB,aAAapjB,KAGtBhB,KAAKqkB,aAAarkB,KAAKmkB,iBAjGlBT,WAAU,CAAC,YACXA,UAAS,CACda,MAAOjY,OACPkY,UAAW/V,eCNFgW,WAA2BnF,GAUtClc,UACE,IAAKpD,KAAK0kB,eACR,UAAU3V,MAAM,oCAGlB1L,sBAAsB,KAChBrD,KAAK2kB,mBAAqB3kB,KAAK4kB,gBACjC5kB,KAAK6kB,YAKXA,QAAQljB,SACNA,GAAAA,EAAO+B,iBACP,IAAIzC,EAAUjB,KAAKgB,GACf8jB,EAAchhB,SAASmZ,cAAcjd,KAAK+kB,aAE9C,GAAmB,MAAfD,EAEF,YADA9kB,KAAKkB,SAASD,EAAS,kBAIzB,IAAI8M,EAAO9M,EAAQ+jB,WAAU,GAG7B,OAFAhlB,KAAKwf,QAAQzR,GAEL/N,KAAKilB,aACX,IAAK,cACL,IAAK,YACL,IAAK,WACL,IAAK,aACHH,EAAYlI,mBAAmB5c,KAAKilB,YAAalX,EAAKmX,WACtD,MACF,IAAK,eACHJ,EAAYI,UAAYnX,EAAKmX,UAC7B,MACF,IAAK,eACHJ,EAAY3f,UAAY4I,EAAKmX,UAC7B,MACF,IAAK,UACHJ,EAAYlI,mBAAmB,aAAc7O,EAAKmX,WAClD,MACF,IAAK,SACHJ,EAAYlI,mBAAmB,YAAa7O,EAAKmX,WACjD,MACF,QACE,UAAUnW,MAAM,oCAGpB9N,EAAQ2K,UAxDH6Y,UAAS,CAAC9jB,OAAQgD,OAAQwhB,OAAQxhB,OAAQyhB,UAAW3W,eCCjD4W,WAA8B3lB,EA4BzC0D,UACE,IAAKpD,KAAKslB,cACR,UAAUvW,MAAM,oDAGd/O,KAAKulB,oBAAsBvlB,KAAKwlB,qB5CHhB,EAACnf,EAAYjF,EAAU,MAC1B,IAAIyH,E4CGV7I,K5CH+BoB,I4CGxCqkB,GAGEzlB,KAAK0lB,mBAAqB1lB,KAAK2lB,gB9CnCR,EAACtf,EAAYjF,EAAU,MAClD,MAAM8G,YAAEA,EAAWpG,cAAEA,EAAamG,OAAEA,EAAMxB,YAAEA,GAAgBnF,OAAOC,OAAO,GAAIwF,EAAgB3F,GACxFwkB,EAAWjkB,IACb,MAAMsF,GAAiB7F,MAAAA,OAAyC,EAASA,EAAQH,UAAYoF,EAAWpF,QACxG,KAAIgG,EAAc4e,SAASlkB,EAAMhB,UFqBlC,SAA6BK,GAChC,MAAM8kB,EAAO9kB,EAAG+kB,wBACVC,EAAgBpjB,OAAO+G,aAAe7F,SAASwU,gBAAgBtN,aAC/Dib,EAAerjB,OAAO8G,YAAc5F,SAASwU,gBAAgB4N,YAGnE,OAFoBJ,EAAK/G,KAAOiH,GAAmBF,EAAK/G,IAAM+G,EAAKjc,QAAW,GAC3Dic,EAAKK,MAAQF,GAAkBH,EAAKK,KAAOL,EAAK/b,OAAU,EE1B3Bqc,CAAoBnf,IAAkBiB,KAIhF7B,EAAWggB,cACXhgB,EAAWggB,aAAa1kB,GAGxBG,GAAe,CACf,MAAMX,EAAYoF,EAAiB,gBAAiBF,EAAYI,GAC1D6f,EAAoB3f,EAAcxF,EAAWQ,EAAO,CAAE0E,WAAAA,IAC5DY,EAAcnF,cAAcwkB,KAe9Bpf,EAAuBb,EAAW9C,WAAWJ,KAAKkD,GACxD/E,OAAOC,OAAO8E,EAAY,CACtB2B,aARAC,MAAAA,GAAgDA,EAAO/B,QAAQvE,IAC3DiB,OAAOY,oBAAoB7B,EAAOikB,GAAS,KAS3C1e,OAfJe,MAAAA,GAAgDA,EAAO/B,QAAQvE,IAC3DiB,OAAOU,iBAAiB3B,EAAOikB,GAAS,M8CgB9CW,CAAgBvmB,MAGlBqD,sBAAsB,KAChBrD,KAAKwmB,iBAELxmB,KAAKymB,cAAcvgB,QADK,OAAtBlG,KAAK0mB,aACqB/lB,GAAWX,KAAK2mB,UAAUhmB,GAE1BA,GAAWX,KAAK4mB,WAAWjmB,MAM/D0lB,eACErmB,KAAKymB,cAAcvgB,QAASvF,IACtBX,KAAK6mB,kBAAkBlmB,KACzBX,KAAK8mB,oBAAoBnmB,GACzBX,KAAK+mB,cAAcpmB,MAKzBqmB,aACE,GAAIhnB,KAAKulB,mBACP,OAAQvlB,KAAKinB,iBACX,IAAK,KACHjnB,KAAKknB,KACL,MACF,IAAK,MACHlnB,KAAKmnB,MACL,MACF,IAAK,SACHnnB,KAAK6M,SAIX,MAAO,GAGTua,aACE,GAAIpnB,KAAKwlB,mBACP,OAAQxlB,KAAKqnB,iBACX,IAAK,KACHrnB,KAAKknB,KACL,MACF,IAAK,MACHlnB,KAAKmnB,MACL,MACF,IAAK,SACHnnB,KAAK6M,SAIX,MAAO,GAGTqa,GAAGvlB,GACD3B,KAAKymB,cAAcvgB,QAASvF,IAC1BX,KAAK8mB,oBAAoBnmB,GACzBX,KAAK2mB,UAAUhmB,KAInBwmB,IAAIxlB,GACF3B,KAAKymB,cAAcvgB,QAASvF,IAC1BX,KAAK8mB,oBAAoBnmB,GACzBX,KAAK4mB,WAAWjmB,KAIpBkM,OAAOlL,GACL3B,KAAKymB,cAAcvgB,QAASvF,IAC1BX,KAAK8mB,oBAAoBnmB,GACzBX,KAAK+mB,cAAcpmB,KAIfkmB,kBAAkB7lB,GACxB,MAA6B,QAAtBA,EAAG0H,QAAQ4e,QAGZR,oBAAoB9lB,GACtBhB,KAAK6mB,kBAAkB7lB,UAClBA,EAAG0H,QAAQ4e,QAElBtmB,EAAG0H,QAAQ4e,QAAU,OAIjBP,cAAc/lB,GACNhB,KAAKunB,WAAWnT,MAAM,KAC5BlO,QAASshB,GAAUxmB,EAAG2K,UAAUkB,OAAO2a,IAGzCb,UAAU3lB,GACFhB,KAAKunB,WAAWnT,MAAM,KAC5BlO,QAASshB,GAAUxmB,EAAG2K,UAAUkB,OAAO2a,GAAO,IAGhDZ,WAAW5lB,GACHhB,KAAKunB,WAAWnT,MAAM,KAC5BlO,QAASshB,GAAUxmB,EAAG2K,UAAUkB,OAAO2a,GAAO,cCjJ1CC,GAAaxmB,GAC3B,MAA2B,eAApBA,EAAQiN,SDMRmX,WAAU,CAAC,UACXA,UAAS,CACdqC,MAAO/jB,OACPqjB,WAAYrjB,OACZyjB,WAAYzjB,OACZgkB,UAAWlZ,QACXmZ,QAASjkB,cETAkkB,WAA+BnoB,EAc1CmN,OAAOlL,SACLA,GAAAA,EAAO+B,iBACP,IACIokB,EADQ9nB,KAAK+nB,YACItR,IACL,MAAZqR,GAAoBA,IAAa9nB,KAAKgoB,UACxChoB,KAAKioB,UAELjoB,KAAKyX,SAITyQ,OAAOvmB,SACLA,GAAAA,EAAO+B,iBACP1D,KAAKioB,UAGPnW,MAAMnQ,SACJA,GAAAA,EAAO+B,iBACP1D,KAAKyX,SAGCwQ,UACN,IAAIE,EAAQnoB,KAAK+nB,YACb/nB,KAAKooB,yBACPD,EAAMhjB,UAAYnF,KAAKqoB,qBAEzBF,EAAM1R,IAAMzW,KAAKgoB,UAGXvQ,SACN,IAAI0Q,EAAQnoB,KAAK+nB,YACjBI,EAAM1R,IAAM,GACZ0R,EAAMhjB,UAAY,GAGZ4iB,YACN,IAAII,EAAQrkB,SAASwkB,kBAAkBtoB,KAAKuoB,gBAC5C,GAAa,MAATJ,EACF,UAAUpZ,uCAAuC/O,KAAKuoB,iBAExD,GAAKd,GAAaU,GAGhB,OAAOA,EAFP,UAAUpZ,iCAAiC/O,KAAKuoB,iBAM5CP,UACN,IAAI/mB,EAAUjB,KAAKgB,GACnB,GAAIhB,KAAKuZ,YACP,YAAYC,YACHvL,EAAoBhN,GAC7B,OAAOA,EAAQuS,KAEf,UAAUzE,MAAM,oCAlEb8Y,UAAS,CACdW,QAAS7kB,OACT8S,IAAK9S,OACL8kB,eAAgB9kB,cCLP+kB,WAAoChpB,EAAjDE,kCAUEI,oBAA8D,KAE9D2oB,WACE,aAAYC,cAAe5oB,KAAK6oB,UAGlC5lB,aACEjD,KAAK8M,QAAU9M,KAAK8M,QAAQ3J,KAAKnD,MAGnCoD,UACE,IAAInC,EAAUjB,KAAKgB,GACnB,IAAIymB,GAAaxmB,GAKf,UAAU8N,MAAM,iEAJhB,GAAM9N,EAAQwV,IACZ,UAAU1H,MAAM,8DAKhB/O,KAAK2oB,MACPtlB,sBAAsB,IAAMrD,KAAKqS,eAAiB/H,WAAW,IAAMtK,KAAK8M,UAAW9M,KAAK8oB,gBAI5FvlB,aACMvD,KAAKqS,gBACPhI,aAAarK,KAAKqS,gBAItBvF,QAAQnL,SACNA,GAAAA,EAAO+B,iBACP,IAAIzC,EAAUjB,KAAKgB,GACnBC,EAAQwV,IAAMxV,EAAQwV,KAzCjBiS,UAAS,CACdK,SAAUzc,OACVqc,KAAMla,eCNGua,WAA4BtpB,EAevCuD,aACEjD,KAAKipB,gBAAkBjpB,KAAKipB,gBAAgB9lB,KAAKnD,MAGnDoD,UACEpD,KAAKipB,kBACLjpB,KAAKoL,YAAY9H,iBAAiB,QAAStD,KAAKipB,iBAGlD1lB,aACEvD,KAAKoL,YAAY5H,oBAAoB,QAASxD,KAAKipB,iBAGrDA,kBACE,IAAIC,EAAY,EAEZC,EADgBnpB,KAAKoL,YAAYpI,MACTomB,MAAM,QAClCF,EAAaC,GAAWA,EAAQ7d,QAAW,EAC3CtL,KAAKuL,aAAaC,UAAY0d,EAAUzoB,WACpCT,KAAKyL,gBACHzL,KAAKqpB,aAAaH,GACpBlpB,KAAKuL,aAAaI,UAAUC,OAAO5L,KAAK6L,YAExC7L,KAAKuL,aAAaI,UAAUG,IAAI9L,KAAK6L,aAK3Cwd,aAAatd,GACX,IAAIC,EAAM,EACNC,EAAM,MAUV,OARIjM,KAAKkM,cACPF,EAAMhM,KAAKmM,UAGTnM,KAAKoM,cACPH,EAAMjM,KAAKqM,UAGNN,GAASC,GAAOD,GAASE,GArD3B+c,WAAU,CAAC,QAAS,UACpBA,UAAS,CAAChd,IAAKM,OAAQL,IAAKK,QAC5B0c,WAAU,CAAC"}