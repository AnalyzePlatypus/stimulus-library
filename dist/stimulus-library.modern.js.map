{"version":3,"file":"stimulus-library.modern.js","sources":["../src/base_controller.ts","../src/appearance_controller.ts","../src/async_block_controller.ts","../src/auto_submit_form_controller.ts","../node_modules/stimulus-use/dist/support/index.js","../node_modules/stimulus-use/dist/use-intersection/use-intersection.js","../node_modules/stimulus-use/dist/use-click-outside/use-click-outside.js","../node_modules/stimulus-use/dist/stimulus_use.js","../node_modules/stimulus-use/dist/use-hover/use-hover.js","../node_modules/stimulus-use/dist/use-mutation/use-mutation.js","../node_modules/stimulus-use/dist/use-window-resize/use-window-resize.js","../node_modules/stimulus-use/dist/use-debounce/use-debounce.js","../src/autosize_controller.ts","../src/char_count_controller.ts","../src/checkbox_select_all_controller.ts","../src/clipboard_controller.ts","../src/utilities/elements.ts","../src/confirm_controller.ts","../src/confirm_navigation_controller.ts","../src/debug_controller.ts","../src/detect_dirty_controller.ts","../src/detect_dirty_form_controller.ts","../src/disable_inputs_controller.ts","../src/disable_with_controller.ts","../src/dismissable_controller.ts","../src/element_save_controller.ts","../src/empty_dom_controller.ts","../src/enable_inputs_controller.ts","../src/fallback_image_controller.ts","../src/form_rc_controller.ts","../src/form_save_controller.ts","../src/intersection_controller.ts","../src/lazy_block_controller.ts","../src/utilities/scroll.ts","../src/lightbox_image_controller.ts","../src/limited_selection_checkboxes_controller.ts","../src/nested_form_controller.ts","../src/password_confirm_controller.ts","../src/password_peek_controller.ts","../src/remote_form_controller.ts","../src/responsive_iframe_controller.ts","../src/utilities/ephemeral_controller.ts","../src/scroll_into_focus_controller.ts","../src/scroll_to_bottom_controller.ts","../src/scroll_to_controller.ts","../src/scroll_to_top_controller.ts","../src/self_destruct_controller.ts","../src/sticky_controller.ts","../src/teleport_controller.ts","../src/toggle_class_controller.ts","../src/utilities/turbo.ts","../src/turbo_frame_rc_controller.ts","../src/turbo_frame_refresh_controller.ts","../src/word_count_controller.ts"],"sourcesContent":["import {Context, Controller} from \"stimulus\";\n\nexport class BaseController extends Controller {\n\n  constructor(context: Context) {\n    super(context);\n    return new Proxy(this, {\n      get: (obj, prop) => {\n        let returnVal = Reflect.get(obj, prop);\n        let self = this;\n        if (logProperty(prop.toString())) {\n          if (typeof returnVal == \"function\") {\n            return new Proxy(returnVal, {\n              apply(target: any, thisArg: any, argArray?: any): any {\n                self.log(prop.toString(), {\n                  args: argArray,\n                });\n                return Reflect.apply(target, thisArg, argArray);\n              },\n            });\n          } else {\n            this.log(prop.toString());\n          }\n        }\n        return returnVal;\n      },\n    });\n  }\n\n  get el(): HTMLElement {\n    return this.element as HTMLElement;\n  }\n\n  dispatch(element: HTMLElement, eventName: string, options: CustomEventInit = {}) {\n    let mergedOptions = Object.assign({}, {bubbles: true, cancelable: true, detail: {target: element}}, options);\n    if (!!mergedOptions.detail.target) {\n      mergedOptions.detail.target = element;\n    }\n    let event = new CustomEvent(eventName, mergedOptions);\n    element.dispatchEvent(event);\n  }\n\n  log(functionName: string, args: {} = {}): void {\n    // @ts-ignore\n    if (!this.application.debug) {\n      return;\n    }\n    let logger = console;\n    logger.groupCollapsed(`%c${this.identifier} %c#${functionName}`, \"color: #3B82F6\", \"color: unset\");\n    logger.log({\n      element: this.element,\n      ...args,\n    });\n    logger.groupEnd();\n  }\n\n}\n\nfunction logProperty(prop: string): boolean {\n  switch (prop) {\n    case \"application\":\n    case \"el\":\n    case \"element\":\n    case \"constructor\":\n    case \"initialize\":\n    case \"log\":\n    case \"dispatch\":\n    case \"data\":\n    case \"valueDescriptorMap\":\n    case \"identifier\":\n      return false;\n  }\n\n  if (/^_.*?$/.test(prop)) {\n    return false;\n  }\n  if (/^.*?Target(s)?$/.test(prop)) {\n    return false;\n  }\n  if (/^.*?Value$/.test(prop)) {\n    return false;\n  }\n  if (/^.*?ValueChanged$/.test(prop)) {\n    return false;\n  }\n  if (/^.*?Class$/.test(prop)) {\n    return false;\n  }\n\n  return true;\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class AppearanceController extends BaseController {\n\n  initialize() {\n    this._handleVisibility = this._handleVisibility.bind(this);\n  }\n\n  connect() {\n    window.addEventListener(\"focus\", this._handleVisibility);\n    window.addEventListener(\"blur\", this._handleVisibility);\n    document.addEventListener(\"visibilitychange\", this._handleVisibility);\n    this._handleVisibility();\n  }\n\n  disconnect() {\n    window.removeEventListener(\"focus\", this._handleVisibility);\n    window.removeEventListener(\"blur\", this._handleVisibility);\n    document.removeEventListener(\"visibilitychange\", this._handleVisibility);\n  }\n\n  appear() {\n    this.dispatch(this.el, \"appearance:appear\");\n  }\n\n  away() {\n    this.dispatch(this.el, \"appearance:away\");\n  }\n\n  _handleVisibility() {\n    this._documentIsActive() ? this.appear() : this.away();\n  }\n\n  _documentIsActive() {\n    return document.visibilityState == \"visible\" && document.hasFocus();\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class AsyncBlockController extends BaseController {\n  static targets = [\"replace\"];\n  static values = {endpoint: String, errorMessage: String, selector: String};\n\n  declare readonly replaceTarget: HTMLElement;\n  declare readonly hasReplaceTarget: boolean;\n  declare readonly endpointValue: string;\n\n  declare readonly hasSelectorValue: boolean;\n  declare readonly selectorValue: string;\n\n  declare readonly hasErrorMessageValue: boolean;\n  declare readonly errorMessageValue: string;\n\n  get _errorMessage(): string {\n    return this.hasErrorMessageValue ? this.errorMessageValue : \"This content failed to load\";\n  }\n\n  // This is a simple controller to load a block of content when the page loads.\n  // It should be used to give a quick initial response before calling out to an\n  // an AJAX endpoint to do some expensive work.\n  connect() {\n    this.loadContent();\n  }\n\n  loadContent() {\n    let self = this;\n    let el = this.hasReplaceTarget ? this.replaceTarget : this.el;\n    fetch(this.endpointValue)\n    .then((response) => response.text())\n    .then((html) => {\n      let newEl = document.createElement(\"div\");\n      newEl.innerHTML = html;\n      if (this.hasSelectorValue) {\n        let selectedContent = newEl.querySelectorAll(this.selectorValue);\n        el.replaceWith(...selectedContent);\n      } else {\n        el.replaceWith(...newEl.children);\n      }\n      // Trigger event to show block has loaded\n      self.dispatch(el, \"ajax:success\");\n    })\n    .catch(err => {\n      el.replaceWith(this._errorMessage);\n      self.dispatch(el, \"ajax:error\");\n    })\n    .finally(() => {\n      self.dispatch(el, \"ajax:complete\");\n    });\n  }\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class AutoSubmitFormController extends BaseController {\n\n  initialize() {\n    this.handler = this.handler.bind(this);\n  }\n\n  connect() {\n    this.el.querySelectorAll(\"input, select, textarea\").forEach(el => el.addEventListener(\"change\", this.handler));\n  }\n\n  disconnect() {\n    this.el.querySelectorAll(\"input, select, textarea\").forEach(el => el.removeEventListener(\"change\", this.handler));\n  }\n\n  private handler(e: Event) {\n    // Trigger synthetic \"submit\" event on form\n    this.dispatch((this.el), \"submit\");\n  }\n}\n","export const method = (controller, methodName) => {\n    const method = controller[methodName];\n    if (typeof method == 'function') {\n        return method;\n    }\n    else {\n        return (...args) => { };\n    }\n};\nexport const composeEventName = (name, controller, eventPrefix) => {\n    let composedName = name;\n    if (eventPrefix === true) {\n        composedName = `${controller.identifier}:${name}`;\n    }\n    else if (typeof eventPrefix === 'string') {\n        composedName = `${eventPrefix}:${name}`;\n    }\n    return composedName;\n};\nexport const extendedEvent = (type, event, detail) => {\n    const { bubbles, cancelable, composed } = event || { bubbles: true, cancelable: true, composed: true };\n    if (event) {\n        Object.assign(detail, { originalEvent: event });\n    }\n    const customEvent = new CustomEvent(type, {\n        bubbles,\n        cancelable,\n        composed,\n        detail,\n    });\n    return customEvent;\n};\nexport function isElementInViewport(el) {\n    const rect = el.getBoundingClientRect();\n    const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n    const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n    const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n    const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) >= 0);\n    return (vertInView && horInView);\n}\n//# sourceMappingURL=index.js.map","import { method, extendedEvent, composeEventName } from '../support/index';\nconst defaultOptions = {\n    dispatchEvent: true,\n    eventPrefix: true,\n};\nexport const useIntersection = (controller, options = {}) => {\n    const { dispatchEvent, eventPrefix } = Object.assign({}, defaultOptions, options);\n    const targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n    const callback = (entries) => {\n        const [entry] = entries;\n        if (entry.isIntersecting) {\n            dispatchAppear(entry);\n        }\n        else if (controller.isVisible) {\n            dispatchDisappear(entry);\n        }\n    };\n    const dispatchAppear = (entry) => {\n        controller.isVisible = true;\n        method(controller, 'appear').call(controller, entry);\n        // emit a custom \"appear\" event\n        if (dispatchEvent) {\n            const eventName = composeEventName('appear', controller, eventPrefix);\n            const appearEvent = extendedEvent(eventName, null, { controller, entry });\n            targetElement.dispatchEvent(appearEvent);\n        }\n    };\n    const dispatchDisappear = (entry) => {\n        controller.isVisible = false;\n        method(controller, 'disappear').call(controller, entry);\n        // emit a custom \"disappear\" event\n        if (dispatchEvent) {\n            const eventName = composeEventName('disappear', controller, eventPrefix);\n            const disappearEvent = extendedEvent(eventName, null, { controller, entry });\n            targetElement.dispatchEvent(disappearEvent);\n        }\n    };\n    // keep a copy of the current disconnect() function of the controller\n    // to support composing several behaviors\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    const observer = new IntersectionObserver(callback, options);\n    const observe = () => {\n        observer.observe(targetElement);\n    };\n    const unobserve = () => {\n        observer.unobserve(targetElement);\n    };\n    Object.assign(controller, {\n        isVisible: false,\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-intersection.js.map","import { composeEventName, extendedEvent, isElementInViewport } from '../support/index';\nconst defaultOptions = {\n    events: ['click', 'touchend'],\n    onlyVisible: true,\n    dispatchEvent: true,\n    eventPrefix: true,\n};\nexport const useClickOutside = (controller, options = {}) => {\n    const { onlyVisible, dispatchEvent, events, eventPrefix } = Object.assign({}, defaultOptions, options);\n    const onEvent = (event) => {\n        const targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        if (targetElement.contains(event.target) || (!isElementInViewport(targetElement) && onlyVisible)) {\n            return;\n        }\n        // call the clickOutside method of the Stimulus controller\n        if (controller.clickOutside) {\n            controller.clickOutside(event);\n        }\n        // emit a custom event\n        if (dispatchEvent) {\n            const eventName = composeEventName('click:outside', controller, eventPrefix);\n            const clickOutsideEvent = extendedEvent(eventName, event, { controller });\n            targetElement.dispatchEvent(clickOutsideEvent);\n        }\n    };\n    const observe = () => {\n        events === null || events === void 0 ? void 0 : events.forEach(event => {\n            window.addEventListener(event, onEvent, false);\n        });\n    };\n    const unobserve = () => {\n        events === null || events === void 0 ? void 0 : events.forEach(event => {\n            window.removeEventListener(event, onEvent, false);\n        });\n    };\n    // keep a copy of the current disconnect() function of the controller\n    // to support composing several behaviors\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    Object.assign(controller, {\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-click-outside.js.map","const defaultOptions = {\n    debug: false,\n    logger: console\n};\nexport class StimulusUse {\n    constructor(controller, options = {}) {\n        var _a, _b, _c;\n        this.log = (functionName, args) => {\n            if (!this.debug)\n                return;\n            this.logger.groupCollapsed(`%c${this.controller.identifier} %c#${functionName}`, 'color: #3B82F6', 'color: unset');\n            this.logger.log(Object.assign({ controllerId: this.controllerId }, args));\n            this.logger.groupEnd();\n        };\n        this.debug = (_b = (_a = options === null || options === void 0 ? void 0 : options.debug) !== null && _a !== void 0 ? _a : controller.application.stimulusUseDebug) !== null && _b !== void 0 ? _b : defaultOptions.debug;\n        this.logger = (_c = options === null || options === void 0 ? void 0 : options.logger) !== null && _c !== void 0 ? _c : defaultOptions.logger;\n        this.controller = controller;\n        this.controllerId = controller.element.id || controller.element.dataset.id;\n        // make copies of lifecycle functions\n        this.controllerInitialize = controller.initialize.bind(controller);\n        this.controllerConnect = controller.connect.bind(controller);\n        this.controllerDisconnect = controller.disconnect.bind(controller);\n    }\n}\n//# sourceMappingURL=stimulus_use.js.map","import { StimulusUse } from '../stimulus_use';\nimport { method } from '../support/index';\nexport class UseHover extends StimulusUse {\n    constructor(controller, options = {}) {\n        super(controller, options);\n        this.observe = () => {\n            this.targetElement.addEventListener('mouseenter', this.onEnter);\n            this.targetElement.addEventListener('mouseleave', this.onLeave);\n        };\n        this.unobserve = () => {\n            this.targetElement.removeEventListener('mouseenter', this.onEnter);\n            this.targetElement.removeEventListener('mouseleave', this.onLeave);\n        };\n        this.onEnter = () => {\n            method(this.controller, 'mouseEnter').call(this.controller);\n            this.log('mouseEnter', { hover: true });\n        };\n        this.onLeave = () => {\n            method(this.controller, 'mouseLeave').call(this.controller);\n            this.log('mouseLeave', { hover: false });\n        };\n        this.targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        this.controller = controller;\n        this.enhanceController();\n        this.observe();\n    }\n    enhanceController() {\n        const controllerDisconnect = this.controller.disconnect.bind(this.controller);\n        const disconnect = () => {\n            this.unobserve();\n            controllerDisconnect();\n        };\n        Object.assign(this.controller, { disconnect });\n    }\n}\nexport const useHover = (controller, options = {}) => {\n    const observer = new UseHover(controller, options);\n    return [observer.observe, observer.unobserve];\n};\n//# sourceMappingURL=use-hover.js.map","import { StimulusUse } from '../stimulus_use';\nimport { method } from '../support/index';\nexport class UseMutation extends StimulusUse {\n    constructor(controller, options = {}) {\n        super(controller, options);\n        this.observe = () => {\n            try {\n                this.observer.observe(this.targetElement, this.options);\n            }\n            catch (error) {\n                this.controller.application.handleError(error, \"At a minimum, one of childList, attributes, and/or characterData must be true\", {});\n            }\n        };\n        this.unobserve = () => {\n            this.observer.disconnect();\n        };\n        this.mutation = (entries) => {\n            method(this.controller, 'mutate').call(this.controller, entries);\n            this.log('mutate', { entries });\n        };\n        this.targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        this.controller = controller;\n        this.options = options;\n        this.observer = new MutationObserver(this.mutation);\n        this.enhanceController();\n        this.observe();\n    }\n    enhanceController() {\n        const controllerDisconnect = this.controller.disconnect.bind(this.controller);\n        const disconnect = () => {\n            this.unobserve();\n            controllerDisconnect();\n        };\n        Object.assign(this.controller, { disconnect });\n    }\n}\nexport const useMutation = (controller, options = {}) => {\n    const observer = new UseMutation(controller, options);\n    return [observer.observe, observer.unobserve];\n};\n//# sourceMappingURL=use-mutation.js.map","import { method } from '../support/index';\nexport const useWindowResize = (controller) => {\n    const callback = (event) => {\n        const { innerWidth, innerHeight } = window;\n        const payload = {\n            height: innerHeight || Infinity,\n            width: innerWidth || Infinity,\n            event\n        };\n        method(controller, 'windowResize').call(controller, payload);\n    };\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    const observe = () => {\n        window.addEventListener('resize', callback);\n        callback();\n    };\n    const unobserve = () => {\n        window.removeEventListener('resize', callback);\n    };\n    Object.assign(controller, {\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-window-resize.js.map","import { Controller } from 'stimulus';\nclass DebounceController extends Controller {\n}\nDebounceController.debounces = [];\nconst defaultWait = 200;\nconst debounce = (fn, wait = defaultWait) => {\n    let timeoutId = null;\n    return function () {\n        const args = arguments;\n        const context = this;\n        const callback = () => fn.apply(context, args);\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(callback, wait);\n    };\n};\nexport const useDebounce = (controller, options) => {\n    var _a;\n    const constructor = controller.constructor;\n    (_a = constructor.debounces) === null || _a === void 0 ? void 0 : _a.forEach((func) => {\n        if (typeof func === \"string\") {\n            controller[func] = debounce(controller[func], options === null || options === void 0 ? void 0 : options.wait);\n        }\n        if (typeof func === \"object\") {\n            const { name, wait } = func;\n            if (!name)\n                return;\n            controller[name] = debounce(controller[name], wait || (options === null || options === void 0 ? void 0 : options.wait));\n        }\n    });\n};\n//# sourceMappingURL=use-debounce.js.map","import {useWindowResize} from \"stimulus-use\";\nimport {BaseController} from \"./base_controller\";\n\nexport class AutosizeController extends BaseController {\n\n  initialize() {\n    this._handler = this._handler.bind(this);\n  }\n\n  connect() {\n    let target = this.el as HTMLTextAreaElement;\n    target.style.resize = \"none\";\n    target.style.boxSizing = \"border-box\";\n    target.addEventListener(\"input\", this._handler);\n    target.addEventListener(\"focus\", this._handler);\n    useWindowResize(this);\n    requestAnimationFrame(this._handler);\n  }\n\n  windowResize() {\n    this._handler();\n  }\n\n  private _handler() {\n    this.autosize(this.el as HTMLTextAreaElement);\n  };\n\n  private autosize(element: HTMLTextAreaElement) {\n    let offset = element.offsetHeight - element.clientHeight;\n    element.style.height = \"auto\";\n    element.style.height = element.scrollHeight + offset + \"px\";\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class CharCountController extends BaseController {\n\n  static targets = [\"input\", \"output\"];\n  static values = {min: Number, max: Number};\n  static classes = [\"error\"];\n\n  declare readonly inputTarget: HTMLInputElement | HTMLTextAreaElement;\n  declare readonly outputTarget: HTMLElement;\n  declare minValue: number;\n  declare hasMinValue: boolean;\n  declare maxValue: number;\n  declare hasMaxValue: boolean;\n  declare errorClass: string;\n  declare hasErrorClass: boolean;\n\n  initialize() {\n    this._updateCharCount = this._updateCharCount.bind(this);\n  }\n\n  connect() {\n    this._updateCharCount();\n    this.inputTarget.addEventListener(\"input\", this._updateCharCount);\n  }\n\n  disconnect() {\n    this.inputTarget.removeEventListener(\"input\", this._updateCharCount);\n  }\n\n  private _updateCharCount() {\n    let charCount = this.inputTarget.value.length;\n    this.outputTarget.innerText = charCount.toString();\n    if (this.hasErrorClass) {\n      if (this._isValidCount(charCount)) {\n        this.outputTarget.classList.remove(this.errorClass);\n      } else {\n        this.outputTarget.classList.add(this.errorClass);\n      }\n    }\n  }\n\n  private _isValidCount(count: number) {\n    let min = 0;\n    let max = 99999;\n\n    if (this.hasMinValue) {\n      min = this.minValue;\n    }\n\n    if (this.hasMaxValue) {\n      max = this.maxValue;\n    }\n\n    return count >= min && count <= max;\n  }\n\n}\n","import {BaseController} from './base_controller';\n\nexport class CheckboxSelectAllController extends BaseController {\n  static targets = ['selectAll', 'checkbox'];\n\n  declare readonly hasSelectAllTarget: boolean;\n  declare readonly selectAllTarget: HTMLInputElement;\n  declare readonly checkboxTargets: HTMLInputElement[];\n\n  private get checked() {\n    return this.checkboxTargets.filter(checkbox => checkbox.checked);\n  }\n\n  private get unchecked() {\n    return this.checkboxTargets.filter(checkbox => !checkbox.checked);\n  }\n\n  initialize() {\n    this.toggle = this.toggle.bind(this);\n    this.refresh = this.refresh.bind(this);\n  }\n\n  connect() {\n    requestAnimationFrame(() => {\n      if (!this.hasSelectAllTarget) {\n        return;\n      }\n\n      this.selectAllTarget.addEventListener('change', this.toggle);\n      this.checkboxTargets.forEach(checkbox => checkbox.addEventListener('change', this.refresh));\n      this.refresh();\n    });\n  }\n\n  disconnect() {\n    if (!this.hasSelectAllTarget) {\n      return;\n    }\n\n    this.selectAllTarget.removeEventListener('change', this.toggle);\n    this.checkboxTargets.forEach((checkbox) => checkbox.removeEventListener('change', this.refresh));\n  }\n\n  private toggle(event: Event) {\n    event.preventDefault();\n    let target = event.target as HTMLInputElement;\n    this.checkboxTargets.forEach((checkbox) => checkbox.checked = target.checked);\n  }\n\n  private refresh() {\n    const checkboxesCount = this.checkboxTargets.length;\n    const checkboxesCheckedCount = this.checked.length;\n\n    this.selectAllTarget.checked = checkboxesCheckedCount > 0;\n    this.selectAllTarget.indeterminate = checkboxesCheckedCount > 0 && checkboxesCheckedCount < checkboxesCount;\n  }\n}","import {BaseController} from \"./base_controller\";\n\nexport class ClipboardController extends BaseController {\n\n  static targets = [\"button\", \"copy\", \"fallback\"];\n  static values = {removeUnused: Boolean};\n\n  declare readonly sourceTarget: HTMLElement;\n  declare readonly copyTarget: HTMLElement;\n  declare readonly hasCopyTarget: boolean;\n  declare readonly fallbackTarget: HTMLElement;\n  declare readonly hasFallbackTarget: boolean;\n\n  declare readonly hasRemoveUnusedValue: boolean;\n  declare readonly removeUnusedValue: boolean;\n\n  supported = false;\n\n  connect() {\n    this.supported = document.queryCommandSupported(\"copy\");\n\n    if (this.hasRemoveUnusedValue && this.removeUnusedValue) {\n      if (this.supported && this.hasFallbackTarget) {\n        this.fallbackTarget.remove();\n      } else if (this.hasCopyTarget) {\n        this.copyTarget.remove();\n      }\n    }\n  }\n\n  select(event: MouseEvent) {\n    if (event) {\n      event.preventDefault();\n    }\n    (this.sourceTarget as HTMLInputElement | HTMLTextAreaElement).select();\n  }\n\n  copy(event: ClipboardEvent) {\n    if (event) {\n      event.preventDefault();\n    }\n    (this.sourceTarget as HTMLInputElement | HTMLTextAreaElement).select();\n    if (this.supported) {\n      document.execCommand(\"copy\");\n    }\n  }\n}\n","export function isHTMLLinkElement(element: Element): element is HTMLLinkElement {\n  return element.nodeName == \"LINK\";\n}\n\nexport function isHTMLAnchorElement(element: Element): element is HTMLAnchorElement {\n  return element.nodeName == \"A\";\n}\n\nexport function isHTMLFormElement(element: Element): element is HTMLFormElement {\n  return element.nodeName == \"FORM\";\n}\n\nexport function isHTMLInputElement(element: Element): element is HTMLInputElement {\n  return element.nodeName == \"INPUT\";\n}\n\nexport function isHTMLButtonElement(element: Element): element is HTMLButtonElement {\n  return element.nodeName == \"BUTTON\";\n}\n\nexport function isHTMLSelectElement(element: Element): element is HTMLSelectElement {\n  return element.nodeName == \"SELECT\";\n}\n\nexport function isHTMLImageElement(element: Element): element is HTMLImageElement {\n  return element.nodeName == \"IMG\";\n}\n\nexport function isElementCheckable(element: Element): element is HTMLInputElement & { checked: boolean } {\n  return isHTMLInputElement(element) && (element.type === \"radio\" || element.type === \"checkbox\");\n}\n","import {BaseController} from './base_controller';\r\nimport {isHTMLFormElement, isHTMLAnchorElement} from \"./utilities/elements\";\r\n\r\nexport class ConfirmController extends BaseController {\r\n\r\n  static values = {\r\n    message: String,\r\n  };\r\n\r\n  declare readonly messageValue: string;\r\n  declare readonly hasMessageValue: boolean;\r\n\r\n  get message(): string {\r\n    return this.hasMessageValue ? this.messageValue : 'Are you sure?';\r\n  }\r\n\r\n  initialize() {\r\n    this.confirm = this.confirm.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      let element = this.el;\r\n      if (isHTMLFormElement(element)) {\r\n        element.addEventListener(\"submit\", this.confirm);\r\n      } else if (isHTMLAnchorElement(element)) {\r\n        element.addEventListener(\"click\", this.confirm);\r\n      } else {\r\n        throw new Error(\"Can't handle confirmation on attached element\");\r\n      }\r\n    });\r\n  }\r\n\r\n  confirm(event: Event) {\r\n    if (!(window.confirm(this.message))) {\r\n      event.preventDefault();\r\n      this.dispatch(this.el, \"confirm:cancelled\");\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\n\nexport class ConfirmNavigationController extends BaseController {\n\n  static values = {_message: String};\n\n  declare readonly _messageValue: string;\n  declare readonly hasMessageValue: boolean;\n\n  get _message(): string {\n    return this.hasMessageValue ? this._messageValue : \"Do you want to leave this page? Changes you made may not be saved\";\n  }\n\n  initialize() {\n    this.handlePopstate = this.handlePopstate.bind(this);\n    this.handleTurboNavigation = this.handleTurboNavigation.bind(this);\n  }\n\n  connect() {\n    window.onbeforeunload = () => this._message;\n    window.addEventListener(\"popstate\", this.handlePopstate);\n    window.addEventListener(\"submit\", () => {\n      window.removeEventListener(\"popstate\", this.handlePopstate);\n      window.onbeforeunload = null;\n    });\n    window.addEventListener(\"turbolinks:before-visit\", this.handleTurboNavigation);\n    window.addEventListener(\"turbo:before-visit\", this.handleTurboNavigation);\n  }\n\n  handlePopstate(_event: PopStateEvent) {\n    return false;\n  }\n\n  handleTurboNavigation(event: Event) {\n    if (!confirm(this._message)) {\n      event.preventDefault();\n    }\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class DebugController extends BaseController {\n\n  static targets = [\"test\"];\n  declare testTargets: HTMLElement[];\n\n  connect() {\n    console.log(\"Debug Controller\", this, this.testTargets);\n  }\n}\n","import {BaseController} from \"./base_controller\";\nimport {isElementCheckable, isHTMLSelectElement} from \"./utilities/elements\";\n\nexport class DetectDirtyController extends BaseController {\n\n  get _cacheAttrName(): string {\n    return 'detect-dirty-load-value';\n  }\n\n  initialize() {\n    this._checkDirty = this._checkDirty.bind(this);\n  }\n\n  connect() {\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n\n    this._cacheLoadValues();\n    this._checkDirty();\n    element.addEventListener(\"input\", this._checkDirty);\n    element.addEventListener(\"change\", this._checkDirty);\n  }\n\n  disconnect() {\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n    element.removeEventListener(\"input\", this._checkDirty);\n    element.removeEventListener(\"change\", this._checkDirty);\n  }\n\n  restore(event?: Event) {\n    event?.preventDefault();\n    this._restoreElementFromLoadValue();\n  }\n\n  private _getElementValue(): boolean | string {\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n    return isElementCheckable(element) ? element.checked : element.value;\n  }\n\n  private _getElementLoadValue(): boolean | string {\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n    let value = element.getAttribute(this._cacheAttrName);\n    if (isElementCheckable(element)) {\n      return value == null ? element.defaultChecked : value == \"true\";\n    } else if (value !== null) {\n      return value;\n    }\n\n    if (isHTMLSelectElement(element)) {\n      let options = Array.from(element.options);\n      options.forEach((option) => {\n        if (option.defaultSelected) {\n          element.value = option.value;\n          return option.value;\n        }\n      });\n    }\n\n    return value!;\n  }\n\n  private _elementHasCachedLoadValue(): boolean {\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n    return element.hasAttribute(this._cacheAttrName);\n  }\n\n  private _checkDirty() {\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n    if (this._isElementDirty()) {\n      element.setAttribute('data-dirty', \"true\");\n    } else {\n      element.removeAttribute('data-dirty');\n    }\n  }\n\n  private _isElementDirty(): boolean {\n    return this._getElementValue() !== this._getElementLoadValue();\n  }\n\n  private _restoreElementFromLoadValue() {\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n    let cacheValue = element.getAttribute(this._cacheAttrName);\n\n    if (isElementCheckable(element)) {\n      element.setAttribute(this._cacheAttrName, element.checked.toString());\n      element.checked = cacheValue == null ? element.defaultChecked : cacheValue == \"true\";\n    } else if (isHTMLSelectElement(element)) {\n      if (cacheValue == null) {\n        let options = Array.from(element.options);\n        options.forEach((option) => {\n          if (option.defaultSelected) {\n            element.value = option.value;\n            return;\n          }\n        });\n      } else {\n        element.value = cacheValue;\n      }\n\n    } else {\n      element.value = cacheValue == null ? element.defaultValue : cacheValue;\n    }\n  }\n\n  private _cacheLoadValues(): void {\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n    if (!this._elementHasCachedLoadValue() && isElementCheckable(element)) {\n      element.setAttribute(this._cacheAttrName, element.checked.toString());\n    } else {\n      element.setAttribute(this._cacheAttrName, element.value.toString());\n    }\n  }\n}\n\nexport function isDirty(element: HTMLElement) {\n  return element.hasAttribute(\"data-dirty\");\n}\n","import {BaseController} from \"./base_controller\";\nimport {isElementCheckable, isHTMLSelectElement} from \"./utilities/elements\";\n\nexport class DetectDirtyFormController extends BaseController {\n\n  get _formElements(): Array<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement> {\n    return Array.from(this.el.querySelectorAll('input, select, textarea'));\n  }\n\n  get _cacheAttrName(): string {\n    return 'detect-dirty-load-value';\n  }\n\n  initialize() {\n    this._checkDirty = this._checkDirty.bind(this);\n  }\n\n  connect() {\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n\n    this._cacheLoadValues();\n    this._checkDirty();\n    element.addEventListener(\"input\", this._checkDirty);\n    element.addEventListener(\"change\", this._checkDirty);\n  }\n\n  disconnect() {\n    let element = this.el as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n    element.removeEventListener(\"input\", this._checkDirty);\n    element.removeEventListener(\"change\", this._checkDirty);\n  }\n\n  restore(event?: Event) {\n    event?.preventDefault()\n    this._formElements.forEach(element => this._restoreElementFromLoadValue(element))\n  }\n\n  private _getElementValue(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement): boolean | string {\n    return isElementCheckable(element) ? element.checked : element.value;\n  }\n\n  private _getElementLoadValue(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement): boolean | string {\n    let value = element.getAttribute(this._cacheAttrName);\n    if (isElementCheckable(element)) {\n      return value == null ? element.defaultChecked : value == \"true\";\n    } else if (value !== null) {\n      return value;\n    }\n\n    if (isHTMLSelectElement(element)) {\n      let options = Array.from(element.options);\n      options.forEach((option) => {\n        if (option.defaultSelected) {\n          element.value = option.value;\n          return option.value;\n        }\n      });\n    }\n\n    return value!;\n  }\n\n  private _elementHasCachedLoadValue(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement): boolean {\n    return element.hasAttribute(this._cacheAttrName);\n  }\n\n  private _checkElementDirty(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement) {\n    if (this._isElementDirty(element)) {\n      element.setAttribute('data-dirty', \"true\");\n    } else {\n      element.removeAttribute('data-dirty');\n    }\n  }\n\n  private _isElementDirty(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement): boolean {\n    return this._getElementValue(element) !== this._getElementLoadValue(element);\n  }\n\n  private _cacheElementLoadValue(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement) {\n    if (!this._elementHasCachedLoadValue(element) && isElementCheckable(element)) {\n      element.setAttribute(this._cacheAttrName, element.checked.toString());\n    } else {\n      element.setAttribute(this._cacheAttrName, element.value.toString());\n    }\n  }\n\n  private _restoreElementFromLoadValue(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement) {\n    let cacheValue = element.getAttribute(this._cacheAttrName);\n\n    if (isElementCheckable(element)) {\n      element.setAttribute(this._cacheAttrName, element.checked.toString());\n      element.checked = cacheValue == null ? element.defaultChecked : cacheValue == \"true\";\n    } else if (isHTMLSelectElement(element)) {\n      if (cacheValue == null) {\n        let options = Array.from(element.options);\n        options.forEach((option) => {\n          if (option.defaultSelected) {\n            element.value = option.value;\n            return;\n          }\n        });\n      } else {\n        element.value = cacheValue;\n      }\n\n    } else {\n      element.value = cacheValue == null ? element.defaultValue : cacheValue;\n    }\n  }\n\n  private _cacheLoadValues(): void {\n    this._formElements.forEach(el => this._cacheElementLoadValue(el));\n  }\n\n  private _checkDirty(): void {\n    this._formElements.forEach(el => this._checkElementDirty(el));\n    if (this._formElements.some(el => isDirty(el))) {\n      this.el.setAttribute(\"data-dirty\", \"true\")\n    } else {\n      this.el.removeAttribute(\"data-dirty\")\n    }\n  }\n}\n\nexport function isDirty(element: HTMLElement) {\n  return element.hasAttribute(\"data-dirty\");\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class DisableInputsController extends BaseController {\n\n  static targets = [\"disabler\", \"disable\"];\n\n  static values = {\n    clear: Boolean,\n  };\n\n  declare readonly hasDisablerTarget: boolean;\n  declare readonly disablerTarget: HTMLInputElement;\n  declare readonly disableTargets: Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\n  declare readonly clearValue: boolean;\n  declare readonly hasClearValue: boolean;\n\n  connect() {\n    this.toggle();\n  }\n\n  toggle() {\n    if (this.hasDisablerTarget && this.disablerTarget.checked) {\n      this.disableInputs();\n    } else {\n      this.enableInputs();\n    }\n  }\n\n  disableInputs() {\n    let shouldClear = this.hasClearValue && this.clearValue;\n    this.disableTargets.forEach((el, _) => {\n      if (shouldClear) {\n        el.value = \"\";\n      }\n      el.disabled = true;\n    });\n  }\n\n  enableInputs() {\n    this.disableTargets.forEach((el, _) => {\n      el.disabled = false;\n    });\n  }\n}\n","import {BaseController} from './base_controller';\nimport {isHTMLAnchorElement, isHTMLButtonElement, isHTMLInputElement} from \"./utilities/elements\";\n\nexport class DisableWithController extends BaseController {\n\n  static values = {\n    message: String,\n    timeout: Number,\n  };\n\n  declare readonly messageValue: string;\n  declare readonly hasMessageValue: boolean;\n  declare readonly timeoutValue: number;\n  declare readonly hasTimeoutValue: boolean;\n\n  _cacheText?: string;\n  _timeoutHandle?: ReturnType<typeof window.setTimeout>;\n\n  get _message(): string {\n    return this.hasMessageValue ? this.messageValue : 'Submitting...';\n  }\n\n  get _timeout(): number {\n    return this.hasTimeoutValue ? this.timeoutValue : 1000;\n  }\n\n  initialize() {\n    this.enable = this.enable.bind(this);\n    this.disable = this.disable.bind(this);\n  }\n\n  connect() {\n    requestAnimationFrame(() => {\n      this.el.addEventListener(\"click\", this.disable);\n    });\n  }\n\n  disconnect() {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle);\n    }\n  }\n\n  disable(event?: Event) {\n    let element = this.el;\n\n    if (this._isDisabled(element)) {\n      event?.preventDefault();\n      event?.stopImmediatePropagation();\n    } else {\n      this._cacheText = this._getElText(element);\n      this._setElText(element, this._message);\n      this._disable(element);\n      setTimeout(this.enable, this._timeout);\n    }\n  }\n\n  enable(event?: Event) {\n    event?.preventDefault();\n    let element = this.el;\n    if (this._isDisabled(element)) {\n      this._setElText(element, this._cacheText!);\n      this._enable(element);\n    }\n  }\n\n  _isDisabled(el: HTMLElement): boolean {\n    if ((isHTMLInputElement(el) && el.type == \"submit\") || isHTMLButtonElement(el)) {\n      return el.disabled;\n    } else {\n      return el.dataset.disabled == \"true\";\n    }\n  }\n\n  _getElText(el: HTMLElement): string {\n    if (isHTMLInputElement(el) && el.type == \"submit\") {\n      return el.value;\n    } else {\n      return el.innerText;\n    }\n  }\n\n  _setElText(el: HTMLElement, str: string) {\n    if (isHTMLInputElement(el) && el.type == \"submit\") {\n      el.value = str;\n    } else if (isHTMLButtonElement(el) || isHTMLAnchorElement(el)) {\n      el.innerText = str;\n    }\n  }\n\n  _disable(el: HTMLElement) {\n    if ((isHTMLInputElement(el) && el.type == \"submit\") || isHTMLButtonElement(el)) {\n      el.disabled = true;\n    } else {\n      el.dataset.disabled = \"true\";\n    }\n  }\n\n  _enable(el: HTMLElement) {\n    if (isHTMLInputElement(el) && el.type == \"submit\" || isHTMLButtonElement(el)) {\n      el.disabled = false;\n    } else {\n      el.dataset.disabled = undefined;\n    }\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class DismissableController extends BaseController {\n\n  dismiss() {\n    this.el.remove();\n  }\n\n}\n","import {BaseController} from './base_controller';\nimport _get from \"lodash-es/get\";\nimport _set from \"lodash-es/set\";\n\nexport class ElementSaveController extends BaseController {\n\n  static targets = [\n    \"element\",\n  ];\n  static values = {\n    id: String,\n    attributes: String,\n    restoreOnLoad: Boolean,\n  };\n  declare readonly hasElementTarget: boolean;\n  declare readonly elementTarget: HTMLElement;\n  declare readonly elementTargets: HTMLElement[];\n  declare readonly idValue: string;\n  declare readonly attributesValue: string;\n  declare readonly hasIdValue: boolean;\n  declare readonly restoreOnLoadValue: boolean;\n  declare readonly hasRestoreOnLoadValue: boolean;\n\n  get _id() {\n    if (this.hasIdValue) {\n      return this.idValue;\n    }\n    let elementID = this.el.id;\n\n    if (elementID !== \"\") {\n      return elementID;\n    } else {\n      throw new Error(`No ID value to uniquely identify this element. Please either specify data-${this.identifier}-id-value or give this element an 'id' attribute. `);\n    }\n  }\n\n  get _uniqueIdentifier() {\n    const url = location.href;\n    return `${url} ${this._id}`;\n  }\n\n  get _restoreOnLoad() {\n    return this.hasRestoreOnLoadValue ? this.restoreOnLoadValue : true;\n  }\n\n  get _element(): HTMLElement {\n    return this.hasElementTarget ? this.elementTarget : this.el;\n  }\n\n  connect() {\n    requestAnimationFrame(() => {\n      if (this._restoreOnLoad) {\n        this.restore();\n      }\n    });\n  }\n\n  clear(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    localStorage.removeItem(this._uniqueIdentifier);\n    this.dispatch(this._element, `element-save:cleared`);\n  }\n\n  save(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    let element = this._element;\n    let attributes = this.attributesValue.split(\" \");\n    let data: { [idx: string]: any } = {};\n    attributes.forEach((attr: string) => data[attr] = _get(element, attr));\n    localStorage.setItem(this._uniqueIdentifier, JSON.stringify(data));\n    this.dispatch(element, `element-save:save:success`);\n  }\n\n  restore(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    let element = this._element;\n    if (localStorage.getItem(this._uniqueIdentifier)) {\n      const savedData = JSON.parse(localStorage.getItem(this._uniqueIdentifier)!); // get and parse the saved data from localStorage\n      Object.keys(savedData).forEach((attr: string) => {\n        _set(element as HTMLElement, attr, savedData[attr]);\n      });\n      this.dispatch(element, `element-save:restore:success`);\n    } else {\n      this.dispatch(element, `element-save:restore:empty`);\n    }\n  }\n\n}\n","import {useMutation} from \"stimulus-use\";\nimport {BaseController} from \"./base_controller\";\n\nexport class EmptyDomController extends BaseController {\n\n  static classes = [\"empty\", \"notEmpty\"];\n  static values = {scopeSelector: String};\n\n  declare hasEmptyClass: boolean;\n  declare emptyClass: string;\n  declare hasNotEmptyClass: boolean;\n  declare notEmptyClass: string;\n\n  declare hasScopeSelectorValue: boolean;\n  declare scopeSelectorValue: string;\n\n  get emptyClasses(): string[] {\n    return this.emptyClass.split(\" \");\n  }\n\n  get notEmptyClasses(): string[] {\n    return this.notEmptyClass.split(\" \");\n  }\n\n  get children(): Element[] {\n    let element = this.el;\n    if (this.hasScopeSelectorValue) {\n      return Array.from(element.querySelectorAll(this.scopeSelectorValue));\n    } else {\n      return Array.from(element.children);\n    }\n  }\n\n  connect() {\n    useMutation(this, {element: this.el, childList: true});\n    this.checkEmpty();\n  }\n\n  mutate(entries: MutationRecord[]) {\n    this.checkEmpty();\n  }\n\n  checkEmpty() {\n    let element = this.el;\n    let children = this.children;\n    if (children.length === 0) {\n      this._removeNotEmptyClasses();\n      this._addEmptyClasses();\n      this.dispatch(element as HTMLElement, \"dom:empty\");\n    } else {\n      this._addNotEmptyClasses();\n      this._removeEmptyClasses();\n      this.dispatch(element as HTMLElement, \"dom:not-empty\", {detail: {count: children.length}});\n    }\n  }\n\n  private _removeEmptyClasses() {\n    if (this.hasEmptyClass) {\n      this.el.classList.remove(...this.emptyClasses);\n    }\n  }\n\n  private _addNotEmptyClasses() {\n    if (this.hasNotEmptyClass) {\n      this.el.classList.add(...this.notEmptyClasses);\n    }\n  }\n\n  private _addEmptyClasses() {\n    if (this.hasEmptyClass) {\n      this.el.classList.add(...this.emptyClasses);\n    }\n  }\n\n  private _removeNotEmptyClasses() {\n    if (this.hasNotEmptyClass) {\n      this.el.classList.remove(...this.notEmptyClasses);\n    }\n  }\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class EnableInputsController extends BaseController {\n\n  static targets = [\"enabler\", \"enable\"];\n\n  static values = {\n    clear: Boolean,\n  };\n\n  declare readonly hasEnablerTarget: boolean;\n  declare readonly enablerTarget: HTMLInputElement;\n  declare readonly enableTargets: Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\n  declare readonly clearValue: boolean;\n  declare readonly hasClearValue: boolean;\n\n  connect() {\n    this.toggle();\n  }\n\n  toggle() {\n    if (this.hasEnablerTarget && this.enablerTarget.checked) {\n      this.enableInputs();\n    } else {\n      this.disableInputs();\n    }\n  }\n\n  disableInputs() {\n    let shouldClear = this.hasClearValue && this.clearValue;\n    this.enableTargets.forEach((el, _) => {\n      if (shouldClear) {\n        el.value = \"\";\n      }\n      el.disabled = true;\n    });\n  }\n\n  enableInputs() {\n    this.enableTargets.forEach((el, _) => {\n      el.disabled = false;\n    });\n  }\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class FallbackImageController extends BaseController {\n\n  static values = {placeholder: String};\n\n  declare readonly placeholderValue: string;\n  declare readonly hasPlaceholderValue: boolean;\n\n  connect() {\n    let element = this.el as HTMLImageElement;\n\n    element.onerror = () => {\n      if (this.hasPlaceholderValue) {\n        element.src = this.placeholderValue;\n      } else {\n        element.style.display = \"none\";\n      }\n    };\n  }\n\n}\n","import {BaseController} from './base_controller';\n\nexport class FormRcController extends BaseController {\n\n  static targets = [\"form\"];\n\n  declare readonly formTarget: HTMLFormElement;\n\n  submit(event?: Event) {\n    event?.preventDefault();\n    this.dispatch(this.formTarget, \"submit\");\n    this.formTarget.submit();\n  }\n\n  reset(event?: Event) {\n    event?.preventDefault();\n    this.dispatch(this.formTarget, \"reset\");\n    this.formTarget.reset();\n  }\n\n}","import {BaseController} from './base_controller';\nimport {isHTMLFormElement, isHTMLInputElement} from \"./utilities/elements\";\n\ninterface FormSavePayload {\n  [idx: string]: {\n    [idx: string]: string | boolean\n  }\n}\n\nexport class FormSaveController extends BaseController {\n\n  static values = {\n    id: String,\n    restoreOnLoad: Boolean,\n    clearOnSubmit: Boolean,\n  };\n\n  declare readonly idValue: string;\n  declare readonly hasIdValue: boolean;\n  declare readonly restoreOnLoadValue: boolean;\n  declare readonly hasRestoreOnLoadValue: boolean;\n  declare readonly clearOnSubmitValue: boolean;\n  declare readonly hasClearOnSubmitValue: boolean;\n\n  get formID() {\n    if (this.hasIdValue) {\n      return this.idValue;\n    }\n    let elementID = (this.el as HTMLFormElement).id;\n\n    if (elementID !== \"\") {\n      return elementID;\n    } else {\n      throw new Error(`No ID value to uniquely identify this form. Please either specify data-${this.identifier}-id-value or give this form an 'id' attribute. `);\n    }\n  }\n\n  get formIdentifier() {\n    const url = location.href;\n    return `${url} ${this.formID}`;\n  }\n\n  get formElements() {\n    return (this.el as HTMLFormElement).elements;\n  }\n\n  get formData(): FormSavePayload {\n    let data: FormSavePayload = {[this.formIdentifier]: {}};\n    for (const element of this.formElements) {\n      let el = element as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\n      if (el.name.length > 0) {\n        if (isHTMLInputElement(el) && el.type == \"checkbox\") {\n          data[this.formIdentifier][el.name] = el.checked;\n        } else if (isHTMLInputElement(el) && el.type == \"radio\") {\n          if (el.checked) {\n            data[this.formIdentifier][el.name] = el.value;\n          }\n        } else {\n          data[this.formIdentifier][el.name] = el.value;\n        }\n      }\n    }\n    return data;\n  }\n\n  get restoreOnLoad() {\n    return this.hasRestoreOnLoadValue ? this.restoreOnLoadValue : true;\n  }\n\n  get clearOnSubmit() {\n    return this.hasClearOnSubmitValue ? this.clearOnSubmitValue : true;\n  }\n\n  initialize() {\n    this._clear = this._clear.bind(this);\n  }\n\n  connect() {\n    requestAnimationFrame(() => {\n      let element = this.el;\n      if (!isHTMLFormElement(element)) {\n        throw new Error('Expected controller to be mounted on a form element.');\n      }\n\n      if (this.restoreOnLoad) {\n        this.restore();\n      }\n      if (this.clearOnSubmit) {\n        this.el.addEventListener('submit', this._clear);\n      }\n    });\n  }\n\n  disconnect() {\n    if (this.clearOnSubmit) {\n      this.el.removeEventListener('submit', this._clear);\n    }\n  }\n\n  _clear() {\n    localStorage.removeItem(this.formIdentifier);\n    this.dispatch(this.el, `form-save:cleared`);\n  }\n\n  clear(event?: Event) {\n    event?.preventDefault();\n    this._clear();\n  }\n\n  save(event: Event) {\n    event.preventDefault();\n    let data = this.formData;\n    localStorage.setItem(this.formIdentifier, JSON.stringify(data[this.formIdentifier]));\n    this.dispatch(this.el, `form-save:save:success`);\n  }\n\n  restore(event?: Event) {\n    event?.preventDefault();\n    if (localStorage.getItem(this.formIdentifier)) {\n      const savedData = JSON.parse(localStorage.getItem(this.formIdentifier)!); // get and parse the saved data from localStorage\n      for (const element of this.formElements) {\n        let el = element as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\n        if (el.name in savedData) {\n          if (isHTMLInputElement(el) && el.type == \"checkbox\") {\n            el.checked = savedData[el.name];\n          } else if (isHTMLInputElement(el) && el.type == \"radio\") {\n            if (el.value == savedData[el.name]) {\n              el.checked = true;\n            }\n          } else {\n            el.value = savedData[el.name];\n          }\n        }\n      }\n      this.dispatch(this.el, `form-save:restore:success`);\n    } else {\n      this.dispatch(this.el, `form-save:restore:empty`);\n    }\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\nimport {useIntersection} from \"stimulus-use\";\n\nexport class IntersectionController extends BaseController {\n\n  static values = {threshold: String};\n\n  declare readonly isVisible: boolean;\n  declare readonly thresholdValue: string;\n  declare readonly hasThresholdValue: boolean;\n\n  get threshold(): number[] {\n    if (this.hasThresholdValue) {\n      return this.thresholdValue.split(',').map(val => Number.parseFloat(val.trim())).filter(val => val >= 0 && val <= 1);\n    } else {\n      return [0, 1];\n    }\n  }\n\n  connect() {\n    useIntersection(this, {\n      threshold: this.threshold,\n      element: this.el,\n    });\n  }\n\n  appear(entry: IntersectionObserverEntry) {\n    this.dispatch(\n      this.el,\n      \"intersection:appear\",\n      {\n        detail: {\n          element: this.el,\n        },\n      },\n    );\n  };\n\n  disappear(entry: IntersectionObserverEntry) {\n    this.dispatch(\n      this.el,\n      \"intersection:disappear\",\n      {\n        detail: {\n          element: this.el,\n        },\n      },\n    );\n  };\n\n}\n","import {useIntersection} from \"stimulus-use\";\nimport {AsyncBlockController} from \"./async_block_controller\";\n\nexport class LazyBlockController extends AsyncBlockController {\n\n  declare observe: () => void;\n  declare unobserve: () => void;\n  declare isVisible: boolean;\n  declare disappear: () => void;\n\n  connect() {\n    let element = this.el;\n\n    if (\"IntersectionObserver\" in window) {\n      [this.observe, this.unobserve] = useIntersection(this, {element, threshold: 0.3});\n    } else {\n      // Client doesn't support intersection observer, fallback to pre-loading\n      this.loadContent();\n    }\n  }\n\n  appear(entry: IntersectionObserverEntry) {\n    if (entry.target === this.el && entry.isIntersecting) {\n      this.loadContent();\n      if (this.unobserve) {\n        this.unobserve();\n      }\n    }\n  }\n\n}\n","const smoothSupported = \"scrollBehavior\" in document.documentElement.style;\nlet smoothPolyfilled: boolean;\n\nexport async function scrollToElement(element: Element, {behavior = \"smooth\", block = \"start\", inline = \"nearest\"}: ScrollIntoViewOptions = {}) {\n  if (behavior == \"smooth\" && !smoothSupported) {\n    await polyfillSmooth();\n  }\n  element.scrollIntoView({behavior, block, inline});\n}\n\nasync function polyfillSmooth() {\n  const {polyfill} = await import(/* webpackChunkName: \"smoothscroll-polyfill\" */ \"smoothscroll-polyfill\");\n  if (smoothPolyfilled) {\n    return;\n  }\n  smoothPolyfilled = true;\n  polyfill();\n}\n\nexport function getScrollParent(node: HTMLElement | null): HTMLElement | null {\n  if (!node) {\n    return null;\n  }\n  const overflowY = getComputedStyle(node).overflowY;\n  const isScrollable = overflowY !== \"visible\" && overflowY !== \"hidden\";\n\n  if (isScrollable && node.scrollHeight >= node.clientHeight) {\n    return node;\n  }\n\n  return getScrollParent(node.parentElement) || document.body;\n}\n","import {BaseController} from \"./base_controller\";\nimport {scrollToElement} from \"./utilities/scroll\";\nimport dialogPolyfill from \"dialog-polyfill\";\n\nexport class LightboxImageController extends BaseController {\n\n  static values = {\n    src: String,\n    srcSet: String,\n    sizes: String,\n  };\n  static classes = [\"modal\", \"image\"];\n\n  declare readonly hasModalClass: boolean;\n  declare readonly modalClass: string;\n  declare readonly hasImageClass: boolean;\n  declare readonly imageClass: string;\n  declare readonly hasSrcValue: boolean;\n  declare readonly srcValue: string;\n  declare readonly hasSrcSetValue: boolean;\n  declare readonly srcSetValue: string;\n  declare readonly hasSizesValue: boolean;\n  declare readonly sizesValue: string;\n  _dialog: HTMLDialogElement | null = null;\n\n  get src(): string {\n    return this.hasSrcValue ? this.srcValue : (this.el as HTMLImageElement).src;\n  }\n\n  get srcSet(): string {\n    return this.hasSrcSetValue ? this.srcSetValue : (this.el as HTMLImageElement).srcset;\n  }\n\n  get sizes(): string {\n    return this.hasSizesValue ? this.sizesValue : (this.el as HTMLImageElement).sizes;\n  }\n\n  get modalClassName() {\n    return this.hasModalClass ? this.modalClass : \"image-lightbox-dialog\";\n  }\n\n  get imageClassName() {\n    return this.hasImageClass ? this.imageClass : \"image-lightbox-image\";\n  }\n\n  initialize() {\n    this.open = this.open.bind(this);\n    this.close = this.close.bind(this);\n  }\n\n  connect() {\n  }\n\n  open() {\n    let element = this.el as HTMLImageElement;\n    if (this._dialog) {\n      return;\n    }\n    this._dialog = document.createElement(\"dialog\");\n\n    let image = document.createElement(\"img\") as HTMLImageElement;\n    image.className = this.imageClassName;\n    image.src = this.src;\n    image.srcset = this.srcSet;\n    image.sizes = this.sizes;\n    this._dialog.appendChild(image);\n\n    element.insertAdjacentElement(\"afterend\", this._dialog);\n    dialogPolyfill.registerDialog(this._dialog);\n    this._dialog.className = this.modalClassName;\n    this._dialog.showModal();\n    scrollToElement(this._dialog, {behavior: \"smooth\", block: \"end\"}).catch(() => this._dialog!.scrollIntoView(false));\n    this._dialog.addEventListener(\"click\", this.close);\n    this._dialog.addEventListener(\"cancel\", this.close);\n    this._dialog.addEventListener(\"close\", this.close);\n  }\n\n  close() {\n    if (this._dialog) {\n      this._dialog.close();\n      this._dialog.remove();\n      this._dialog = null;\n      scrollToElement(this.el, {behavior: \"smooth\", block: \"end\"}).catch(() => this.el.scrollIntoView(false));\n    }\n  }\n\n} ","import {BaseController} from \"./base_controller\";\n\nexport class LimitedSelectionCheckboxesController extends BaseController {\n\n  static targets = [\"input\", \"error\"];\n  static values = {max: Number, message: String};\n\n  declare readonly hasErrorTarget: boolean;\n  declare readonly errorTarget: HTMLElement;\n  declare readonly inputTargets: HTMLInputElement[];\n  declare readonly maxValue: number;\n  declare readonly messageValue: string;\n\n  initialize() {\n    this.handleInputs = this.handleInputs.bind(this);\n  }\n\n  connect() {\n    this.inputTargets.forEach((el) => el.addEventListener(\"change\", this.handleInputs));\n  }\n\n  disconnect() {\n    this.inputTargets.forEach((el) => el.removeEventListener(\"change\", this.handleInputs));\n  }\n\n  handleInputs(event: Event) {\n    let tickedInputs = this.inputTargets.reduce((previousValue, el) => el.checked ? previousValue + 1 : previousValue, 0);\n    let target = event.target as HTMLInputElement;\n    if (tickedInputs > this.maxValue) {\n      event.preventDefault();\n      target.checked = false;\n      this.dispatch(target, \"change\");\n      this.dispatch(target, \"limited-selection:too-many\");\n      if (this.hasErrorTarget) {\n        this.errorTarget.innerHTML = this.messageValue;\n      }\n    } else {\n      this.dispatch(target, \"limited-selection:selection\");\n      if (this.hasErrorTarget) {\n        this.errorTarget.innerHTML = \"\";\n      }\n    }\n  }\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class NestedFormController extends BaseController {\n  static targets = ['target', 'template'];\n  static values = {\n    insertMode: String,\n    wrapperClass: String,\n  };\n\n  declare readonly targetTarget: HTMLElement;\n  declare readonly templateTarget: HTMLTemplateElement | HTMLScriptElement;\n\n  declare readonly wrapperClassValue: string;\n  declare readonly hasWrapperSelectorValue: boolean;\n  declare readonly insertModeValue: InsertPosition;\n  declare readonly hasInsertModeValue: boolean;\n\n  get wrapperClass() {\n    return this.hasWrapperSelectorValue ? this.wrapperClassValue : 'nested-fields';\n  }\n\n  get insertMode(): InsertPosition {\n    return this.hasInsertModeValue ? this.insertModeValue : 'beforeend';\n  }\n\n  connect() {\n    this.checkStructure();\n  }\n\n  add(event?: Event) {\n    event?.preventDefault();\n\n    const content = this.templateTarget.innerHTML.replace(/NEW_RECORD/g, this.generateID());\n    this.targetTarget.insertAdjacentHTML(this.insertMode, content);\n  }\n\n  remove(event: Event) {\n    event.preventDefault();\n    const wrapper: HTMLElement | null = (event.target as HTMLElement).closest(`.${this.wrapperClass}`);\n    if (wrapper == null) {\n      throw new Error(`#remove was clicked from outside of a child record. Could not find an ancestor with class .${this.wrapperClass}`);\n    }\n\n    if (wrapper.dataset.newRecord === 'true') {\n      wrapper.remove();\n    } else {\n      wrapper.style.display = 'none';\n      let destroyInput = wrapper.querySelector(\"input[name*='_destroy']\") as HTMLInputElement | null;\n      if (destroyInput == null) {\n        throw new Error(`Could not find a hidden input with name '_destroy'. NestedForm cannot remove an already persisted record without it.`);\n      }\n\n      destroyInput.value = \"1\";\n    }\n  }\n\n  generateID(): string {\n    return new Date().getTime().toString() + Math.random().toString().slice(2);\n  }\n\n  private checkStructure() {\n    let template = this.templateTarget.innerHTML;\n\n    if (template.indexOf('NEW_RECORD')) {\n      throw new Error(\"Could not find 'NEW_RECORD' in the provided template. Please make sure you've passed `child_index: 'NEW_RECORD'` to `fields_for`\");\n    }\n  }\n}","import {BaseController} from \"./base_controller\";\n\nexport class PasswordConfirmController extends BaseController {\n\n  static targets = [\"password\"];\n  static classes = [\"error\"];\n\n  declare readonly passwordTargets: HTMLInputElement[];\n\n  declare readonly errorClass: string;\n  declare readonly hasErrorClass: boolean;\n\n  initialize() {\n    this.checkPasswordsMatch = this.checkPasswordsMatch.bind(this);\n  }\n\n  connect() {\n    this.passwordTargets.forEach((el) => el.addEventListener(\"change\", this.checkPasswordsMatch));\n  }\n\n  disconnect() {\n    this.passwordTargets.forEach((el) => el.removeEventListener(\"change\", this.checkPasswordsMatch));\n  }\n\n  private allPasswordsMatch(): boolean {\n    let values = new Set(this.passwordTargets.map(el => el.value));  // Create a unique set of the password values\n    return values.has(\"\") || values.size == 1; // If any of the passwords are still blank, or there is only one distinct password value (i.e. they all are the same)\n  }\n\n  private checkPasswordsMatch() {\n    let element = this.el;\n    if (this.allPasswordsMatch()) {\n      this.dispatch(element, \"password-confirm:match\");\n      if (this.hasErrorClass) {\n        this.passwordTargets.forEach(el => el.classList.remove(this.errorClass));\n      }\n    } else {\n      this.dispatch(element, \"password-confirm:no-match\");\n      if (this.hasErrorClass) {\n        this.passwordTargets.forEach(el => el.classList.add(this.errorClass));\n      }\n    }\n  }\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class PasswordPeekController extends BaseController {\n\n  static targets = [\"password\"];\n\n  declare readonly passwordTarget: HTMLInputElement;\n\n  peak(event?: Event) {\n    event?.preventDefault();\n    this.passwordTarget.type = \"text\";\n  }\n\n  hide(event?: Event) {\n    event?.preventDefault();\n    this.passwordTarget.type = \"password\";\n  }\n\n  toggle(event?: Event) {\n    event?.preventDefault();\n    if (this.passwordTarget.type === \"password\") {\n      this.peak();\n    } else {\n      this.hide();\n    }\n  }\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class RemoteFormController extends BaseController {\n  static targets = [];\n\n  static values = {selector: String};\n\n  declare readonly hasSelectorValue: boolean;\n  declare readonly selectorValue: string;\n\n  get selector(): string {\n    return this.hasSelectorValue ? this.selectorValue : `[data-controller~=\"${this.identifier}\"]`;\n  }\n\n  replace(event: { detail: [Element, any, XMLHttpRequest] }) {\n    const [data, status, xhr] = event.detail;\n    if (data instanceof Node) {\n      let new_element = data.querySelector(this.selector);\n\n      if (new_element == null) {\n        throw new Error(`expected new form DOM with [data-controller=\"${this.identifier}\"] to be present in returned payload`);\n      }\n\n      let parentNode = this.el.parentNode;\n      if (parentNode == null) {\n        throw new Error('expected form to have a DOM parent, could not execute replaceChild');\n      }\n      parentNode.replaceChild(new_element, this.el);\n    } else {\n      console.log('Unknown', data);\n    }\n  }\n}\n","import {useDebounce, useWindowResize} from \"stimulus-use\";\nimport {WindowResizePayload} from \"stimulus-use/dist/use-window-resize/use-window-resize\";\nimport {BaseController} from \"./base_controller\";\n\ninterface ResponsiveIframeMessage {\n  name: string,\n  height: number,\n}\n\nexport class ResponsiveIframeWrapperController extends BaseController {\n\n  initialize() {\n    this.messageReceived = this.messageReceived.bind(this);\n  }\n\n  connect() {\n    window.addEventListener(\"message\", this.messageReceived);\n  }\n\n  disconnect() {\n    window.removeEventListener(\"message\", this.messageReceived);\n  }\n\n  messageReceived(message: MessageEvent<ResponsiveIframeMessage>) {\n    let data = message.data;\n    if (data.hasOwnProperty(\"name\") && data.name === \"iframe-body\" && data.hasOwnProperty(\"height\")) {\n      this.resize(data.height);\n    }\n  }\n\n  resize(height: number) {\n    (this.el as HTMLIFrameElement).style.height = `${height}px`;\n  }\n\n}\n\nexport class ResponsiveIframeBodyController extends BaseController {\n\n  static debounces = [\"postUpdate\"];\n\n  declare observe: () => void;\n  declare unobserve: () => void;\n\n  connect() {\n    // If this Window is inside a frame\n    if (window.self !== window.top) {\n      useWindowResize(this);\n      useDebounce(this, {});\n      this.postUpdate();\n    } else {\n      // Not an iframe\n    }\n  }\n\n  windowResize(payload: WindowResizePayload) {\n    this.postUpdate();\n  };\n\n  postUpdate() {\n    let payload: ResponsiveIframeMessage = {name: \"iframe-body\", height: this.getHeight()};\n    window.parent.postMessage(\n      payload,\n      \"*\",\n    );\n  }\n\n  getHeight(): number {\n    const body = document.body;\n    const html = document.documentElement;\n\n    // Get the largest height out of body and html's various height measurements\n    return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n  }\n\n}\n","import camelCase from \"camelcase\";\nimport {BaseController} from \"../base_controller\";\n\nexport class EphemeralController extends BaseController {\n\n  _cleanupSelf() {\n    this.cleanup(this.el);\n  }\n\n  cleanup(element: HTMLElement) {\n    element.dataset.controller = element.dataset.controller?.replaceAll(new RegExp(`(\\s|^)${this.identifier}(\\s|$)`, \"g\"), \"\") || \"\";\n    if (element.dataset.controller == \"\") {\n      // If there are no controllers left, remove the attribute\n      delete element.dataset.controller;\n    }\n\n    let substringIdentifierValueRegex = new RegExp(`(\\s|^)${this.identifier}\\\\..+?(\\s|$)`, \"g\");\n    element.dataset.target = element.dataset.target?.replaceAll(substringIdentifierValueRegex, \"\") || \"\";\n    delete element.dataset[camelCase(`${this.identifier}-target`)];\n    if (element.dataset.target == \"\") {\n      // If there are no targets left, remove the attribute\n      delete element.dataset.target;\n    }\n\n    element.dataset.action = element.dataset.target?.replaceAll(substringIdentifierValueRegex, \"\") || \"\";\n    delete element.dataset[camelCase(`${this.identifier}-action`)];\n    if (element.dataset.action == \"\") {\n      // If there are no actions left, remove the attribute\n      delete element.dataset.action;\n    }\n\n    // @ts-ignore\n    let values = this.constructor.values;\n    if (values) {\n      Object.keys(values).forEach(val => delete element.dataset[camelCase(`${this.identifier}-${val}-value`)]);\n    }\n\n    // @ts-ignore\n    let classes = this.constructor.classes;\n    if (classes) {\n      Object.keys(classes).forEach(val => delete element.dataset[camelCase(`${this.identifier}-${val}-class`)]);\n    }\n  }\n\n}\n","import {EphemeralController} from \"./utilities/ephemeral_controller\";\nimport {scrollToElement} from \"./utilities/scroll\";\n\nexport class ScrollIntoFocusController extends EphemeralController {\n\n  static values = {\n    behavior: String,\n    block: String,\n    inline: String,\n  };\n\n  declare behaviorValue: ScrollBehavior;\n  declare hasBehaviorValue: boolean;\n  declare blockValue: ScrollLogicalPosition;\n  declare hasBlockValue: boolean;\n  declare inlineValue: ScrollLogicalPosition;\n  declare hasInlineValue: boolean;\n\n  connect() {\n    requestAnimationFrame(() => {\n      // Attempt smooth scrolling, with polyfill\n      scrollToElement(\n        this.el,\n        {\n          behavior: this.hasBehaviorValue ? this.behaviorValue : \"smooth\",\n          block: this.hasBlockValue ? this.blockValue : \"center\",\n          inline: this.hasInlineValue ? this.inlineValue : \"center\",\n        },\n      ).catch(() => this.el.scrollIntoView()); // Fallback to snap-scrolling\n      this._cleanupSelf();\n    });\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\nimport {getScrollParent, scrollToElement} from \"./utilities/scroll\";\n\nexport class ScrollToBottomController extends BaseController {\n\n  static values = {\n    mode: String,\n  };\n\n  declare modeValue: \"nearest\" | \"document\";\n  declare hasModeValue: boolean;\n\n  scroll(event?: Event) {\n    event?.preventDefault();\n    let mode = this.hasModeValue ? this.modeValue : \"document\";\n    let target: null | HTMLElement;\n    if (mode == \"document\") {\n      target = document.body;\n    } else {\n      target = getScrollParent(this.el);\n    }\n    if (target == null) {\n      return;\n    }\n    scrollToElement(target!, {behavior: \"smooth\", block: \"end\"}).catch(() => target!.scrollIntoView(false));\n  }\n\n}\n\n","import {BaseController} from \"./base_controller\";\nimport {scrollToElement} from \"./utilities/scroll\";\n\nexport class ScrollToController extends BaseController {\n\n  static values = {\n    selector: String,\n    behavior: String,\n    block: String,\n    inline: String,\n  };\n\n  declare selectorValue: string;\n  declare behaviorValue: ScrollBehavior;\n  declare hasBehaviorValue: boolean;\n  declare blockValue: ScrollLogicalPosition;\n  declare hasBlockValue: boolean;\n  declare inlineValue: ScrollLogicalPosition;\n  declare hasInlineValue: boolean;\n\n  scroll() {\n    let target = document.querySelector(this.selectorValue);\n    if (!target) {\n      console.warn(`Could not find target for '${this.selectorValue}'`);\n      return;\n    }\n\n    scrollToElement(\n      target!,\n      {\n        behavior: this.hasBehaviorValue ? this.behaviorValue : \"smooth\",\n        block: this.hasBlockValue ? this.blockValue : \"center\",\n        inline: this.hasInlineValue ? this.inlineValue : \"center\",\n      },\n    ).catch(() => target!.scrollIntoView()); // Fallback to snap-scrolling\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\nimport {getScrollParent, scrollToElement} from \"./utilities/scroll\";\n\nexport class ScrollToTopController extends BaseController {\n\n  static values = {\n    mode: String,\n  };\n\n  declare modeValue: \"nearest\" | \"document\";\n  declare hasModeValue: boolean;\n\n  scroll(event?: Event) {\n    event?.preventDefault();\n    let mode = this.hasModeValue ? this.modeValue : \"document\";\n    let target: null | HTMLElement;\n    if (mode == \"document\") {\n      target = document.body;\n    } else {\n      target = getScrollParent(this.el);\n    }\n    if (target == null) {\n      return;\n    }\n    scrollToElement(target!, {behavior: \"smooth\", block: \"start\"}).catch(() => target!.scrollIntoView(false));\n  }\n\n}\n\n","import {BaseController} from \"./base_controller\";\n\nexport class SelfDestructController extends BaseController {\n\n  static values = {seconds: Number};\n\n  declare readonly secondsValue: number;\n  timeout: null | ReturnType<typeof window.setTimeout> = null;\n\n  connect() {\n    requestAnimationFrame(() => {\n      // Only start countdown on first paint\n      this.timeout = setTimeout(() => this.el.remove(), this.secondsValue * 1000);\n    });\n  }\n\n  disconnect() {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n    }\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class StickyController extends BaseController {\n\n  static classes = [\"stuck\"];\n  static values = {\n    mode: String,\n  };\n\n  declare readonly hasStuckClass: boolean;\n  declare readonly stuckClass: string;\n  declare readonly hasModeValue: \"top\" | \"bottom\";\n  declare readonly modeValue: \"top\" | \"bottom\";\n\n  _magicElement: HTMLDivElement | null = null;\n\n  get _mode(): \"top\" | \"bottom\" {\n    return this.hasModeValue ? this.modeValue : \"top\";\n  }\n\n  createMagicElement() {\n    // Magic element placed next to the sticky el that acts as an external border.\n    // When the magic element is off the page, we know that the sticky el is \"stuck\"\n    if (this._magicElement !== null) {\n      return;\n    }\n\n    this._magicElement = document.createElement(\"div\");\n    switch (this._mode) {\n      case \"top\":\n        this.el.insertAdjacentElement(\"beforebegin\", this._magicElement);\n        break;\n      case \"bottom\":\n        this.el.insertAdjacentElement(\"afterend\", this._magicElement);\n        break;\n    }\n  }\n\n  connect() {\n    let element = this.el;\n    this.createMagicElement();\n\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (entry.target !== this._magicElement) {\n          return;\n        }\n        if (entry.intersectionRatio === 0) {\n          element.classList.add(this.hasStuckClass ? this.stuckClass : \"stuck\");\n        } else if (entry.intersectionRatio === 1) {\n          element.classList.remove(this.hasStuckClass ? this.stuckClass : \"stuck\");\n        }\n      });\n\n    }, {\n      threshold: [0, 1],\n    });\n    observer.observe(this._magicElement!);\n  }\n\n}\n","import {EphemeralController} from \"./utilities/ephemeral_controller\";\n\nexport class TeleportController extends EphemeralController {\n\n  static values = {target: String, insert: String, immediate: Boolean};\n\n  declare readonly immediateValue: boolean;\n  declare readonly hasImmediateValue: boolean;\n  declare readonly targetValue: string;\n  declare readonly hasInsertValue: boolean;\n  declare readonly insertValue: InsertPosition | \"replaceOuter\" | \"replaceInner\" | \"prepend\" | \"append\";\n\n  connect() {\n    if (!this.hasInsertValue) {\n      throw new Error(\"`insert` value was not specified\");\n    }\n\n    requestAnimationFrame(() => {\n      if (this.hasImmediateValue && this.immediateValue) {\n        this.execute();\n      }\n    });\n  }\n\n  execute(event?: Event) {\n    event?.preventDefault();\n    let element = this.el;\n    let destination = document.querySelector(this.targetValue);\n\n    if (destination == null) {\n      this.dispatch(element, \"teleport:error\");\n      return;\n    }\n\n    let copy = element.cloneNode(true) as HTMLElement;\n    this.cleanup(copy);\n\n    switch (this.insertValue) {\n      case \"beforebegin\":\n      case \"beforeend\":\n      case \"afterend\":\n      case \"afterbegin\":\n        destination.insertAdjacentHTML(this.insertValue, copy.outerHTML);\n        break;\n      case \"replaceOuter\":\n        destination.outerHTML = copy.outerHTML;\n        break;\n      case \"replaceInner\":\n        destination.innerHTML = copy.outerHTML;\n        break;\n      case \"prepend\":\n        destination.insertAdjacentHTML(\"afterbegin\", copy.outerHTML);\n        break;\n      case \"append\":\n        destination.insertAdjacentHTML(\"beforeend\", copy.outerHTML);\n        break;\n      default:\n        throw new Error(\"`insert` value was not specified\");\n\n    }\n    element.remove();\n  }\n\n}\n","import {useClickOutside, useHover} from \"stimulus-use\";\nimport {BaseController} from \"./base_controller\";\n\nexport type ToggleClassMode = \"on\" | \"off\" | \"toggle\"\n\nexport class ToggleClassController extends BaseController {\n\n  static targets = [\"toggle\"];\n  static values = {\n    class: String,\n    mouseEnter: String,\n    mouseLeave: String,\n    clickAway: Boolean,\n    initial: String,\n  };\n\n  declare readonly toggleTargets: HTMLElement[];\n\n  declare readonly classValue: string;\n  declare readonly hasClassValue: boolean;\n\n  declare readonly mouseEnterValue: ToggleClassMode;\n  declare readonly hasMouseEnterValue: boolean;\n\n  declare readonly mouseLeaveValue: ToggleClassMode;\n  declare readonly hasMouseLeaveValue: boolean;\n\n  declare readonly clickAwayValue: boolean;\n  declare readonly hasClickAwayValue: boolean;\n\n  declare readonly initialValue: \"on\" | \"off\";\n  declare readonly hasInitialValue: boolean;\n\n  connect() {\n    if (!this.hasClassValue) {\n      throw new Error(\"data-toggle-class-class-value must not be empty\");\n    }\n\n    if (this.hasMouseEnterValue || this.hasMouseLeaveValue) {\n      useHover(this);\n    }\n\n    if (this.hasClickAwayValue && this.clickAwayValue) {\n      useClickOutside(this);\n    }\n\n    requestAnimationFrame(() => {\n      if (this.hasInitialValue) {\n        if (this.initialValue === \"on\") {\n          this.toggleTargets.forEach((target) => this.elementOn(target));\n        } else {\n          this.toggleTargets.forEach((target) => this.elementOff(target));\n        }\n      }\n    });\n  }\n\n  clickOutside() {\n    this.toggleTargets.forEach((target) => {\n      if (this.elementWasToggled(target)) {\n        this.elementToggleStatus(target);\n        this.elementToggle(target);\n      }\n    });\n  }\n\n  mouseEnter() {\n    if (this.hasMouseEnterValue) {\n      switch (this.mouseEnterValue) {\n        case \"on\":\n          this.on();\n          break;\n        case \"off\":\n          this.off();\n          break;\n        case \"toggle\":\n          this.toggle();\n          break;\n      }\n    }\n    return {};\n  }\n\n  mouseLeave() {\n    if (this.hasMouseLeaveValue) {\n      switch (this.mouseLeaveValue) {\n        case \"on\":\n          this.on();\n          break;\n        case \"off\":\n          this.off();\n          break;\n        case \"toggle\":\n          this.toggle();\n          break;\n      }\n    }\n    return {};\n  }\n\n  on(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementOn(target);\n    });\n  }\n\n  off(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementOff(target);\n    });\n  }\n\n  toggle(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementToggle(target);\n    });\n  }\n\n  private elementWasToggled(el: HTMLElement): boolean {\n    return el.dataset.toggled == \"true\";\n  }\n\n  private elementToggleStatus(el: HTMLElement) {\n    if (this.elementWasToggled(el)) {\n      delete el.dataset.toggled;\n    } else {\n      el.dataset.toggled = \"true\";\n    }\n  }\n\n  private elementToggle(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass));\n  }\n\n  private elementOn(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass, true));\n  }\n\n  private elementOff(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass, false));\n  }\n\n}\n","export function isTurboFrame(element: HTMLElement): element is TurboFrame {\n  return element.nodeName == \"TURBO-FRAME\";\n}\n","import {BaseController} from \"./base_controller\";\nimport {isHTMLAnchorElement} from \"./utilities/elements\";\nimport {isTurboFrame} from \"./utilities/turbo\";\n\nexport class TurboFrameRCController extends BaseController {\n\n  static values = {\n    frameId: String,\n    src: String,\n    loadingMessage: String,\n  };\n\n  declare readonly frameIdValue: string;\n  declare readonly srcValue: string;\n  declare readonly hasSrcValue: boolean;\n  declare readonly loadingMessageValue: string;\n  declare readonly hasLoadingMessageValue: boolean;\n\n  toggle(event?: Event) {\n    event?.preventDefault();\n    let frame = this._getFrame();\n    let frameSrc = frame.src;\n    if (frameSrc == null || frameSrc !== this._getSrc()) {\n      this._setSrc();\n    } else {\n      this._clear();\n    }\n  }\n\n  setSrc(event?: Event) {\n    event?.preventDefault();\n    this._setSrc();\n  }\n\n  clear(event?: Event) {\n    event?.preventDefault();\n    this._clear();\n  }\n\n  private _setSrc() {\n    let frame = this._getFrame();\n    if (this.hasLoadingMessageValue) {\n      frame.innerHTML = this.loadingMessageValue;\n    }\n    frame.src = this._getSrc();\n  }\n\n  private _clear() {\n    let frame = this._getFrame();\n    frame.src = \"\";\n    frame.innerHTML = \"\";\n  }\n\n  private _getFrame(): TurboFrame {\n    let frame = document.getElementById(`${this.frameIdValue}`);\n    if (frame == null) {\n      throw new Error(`Could not find frame with ID '${this.frameIdValue}'`);\n    }\n    if (!isTurboFrame(frame)) {\n      throw new Error(`Element targeted by ID '${this.frameIdValue}'`);\n    } else {\n      return frame;\n    }\n  }\n\n  private _getSrc(): string {\n    let element = this.el;\n    if (this.hasSrcValue) {\n      return this.srcValue;\n    } else if (isHTMLAnchorElement(element)) {\n      return element.href;\n    } else {\n      throw new Error(\"No link given to drive frame to\");\n    }\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\nimport {isTurboFrame} from \"./utilities/turbo\";\n\n// noinspection SillyAssignmentJS\nexport class TurboFrameRefreshController extends BaseController {\n\n  static values = {\n    interval: Number,\n    poll: Boolean,\n  };\n\n  declare readonly intervalValue: number;\n  declare readonly pollValue: boolean;\n  declare readonly hasPollValue: boolean;\n  _timeoutHandle: null | ReturnType<typeof window.setTimeout> = null;\n\n  get poll(): boolean {\n    return this.hasPollValue ? this.pollValue : false;\n  }\n\n  initialize() {\n    this.refresh = this.refresh.bind(this);\n  }\n\n  connect() {\n    let element = this.el;\n    if (isTurboFrame(element)) {\n      if (!!element.src) {\n        throw new Error('The provided <turbo-frame> element has no `src` attribute.');\n      }\n    } else {\n      throw new Error('Expected controller to be mounted on a <turbo-frame> element.');\n    }\n    if (this.poll) {\n      requestAnimationFrame(() => this._timeoutHandle = setTimeout(() => this.refresh(), this.intervalValue));\n    }\n  }\n\n  disconnect() {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle);\n    }\n  }\n\n  refresh(event?: Event) {\n    event?.preventDefault();\n    let element = this.el as TurboFrame;\n    element.src = element.src;\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class WordCountController extends BaseController {\n\n  static targets = [\"input\", \"output\"];\n  static values = {min: Number, max: Number};\n  static classes = [\"error\"];\n\n  declare readonly inputTarget: HTMLInputElement | HTMLTextAreaElement;\n  declare readonly outputTarget: HTMLElement;\n  declare minValue: number;\n  declare hasMinValue: boolean;\n  declare maxValue: number;\n  declare hasMaxValue: boolean;\n  declare errorClass: string;\n  declare hasErrorClass: boolean;\n\n  initialize() {\n    this.updateWordCount = this.updateWordCount.bind(this);\n  }\n\n  connect() {\n    this.updateWordCount();\n    this.inputTarget.addEventListener(\"input\", this.updateWordCount);\n  }\n\n  disconnect() {\n    this.inputTarget.removeEventListener(\"input\", this.updateWordCount);\n  }\n\n  updateWordCount() {\n    let wordCount = 0;\n    let textAreaValue = this.inputTarget.value;\n    let matches = textAreaValue.match(/\\S+/g);\n    wordCount = (matches && matches.length) || 0;\n    this.outputTarget.innerText = wordCount.toString();\n    if (this.hasErrorClass) {\n      if (this.isValidCount(wordCount)) {\n        this.outputTarget.classList.remove(this.errorClass);\n      } else {\n        this.outputTarget.classList.add(this.errorClass);\n      }\n    }\n  }\n\n  isValidCount(count: number) {\n    let min = 0;\n    let max = 99999;\n\n    if (this.hasMinValue) {\n      min = this.minValue;\n    }\n\n    if (this.hasMaxValue) {\n      max = this.maxValue;\n    }\n\n    return count >= min && count <= max;\n  }\n\n}\n"],"names":["BaseController","Controller","constructor","context","super","Proxy","this","get","obj","prop","returnVal","Reflect","self","test","logProperty","toString","apply","target","thisArg","argArray","log","args","el","element","dispatch","eventName","options","mergedOptions","Object","assign","bubbles","cancelable","detail","event","CustomEvent","dispatchEvent","functionName","application","debug","logger","console","groupCollapsed","identifier","groupEnd","AppearanceController","initialize","_handleVisibility","bind","connect","window","addEventListener","document","disconnect","removeEventListener","appear","away","_documentIsActive","visibilityState","hasFocus","AsyncBlockController","_errorMessage","hasErrorMessageValue","errorMessageValue","loadContent","hasReplaceTarget","replaceTarget","fetch","endpointValue","then","response","text","html","newEl","createElement","innerHTML","hasSelectorValue","selectedContent","querySelectorAll","selectorValue","replaceWith","children","catch","err","finally","endpoint","String","errorMessage","selector","AutoSubmitFormController","handler","forEach","e","method","controller","methodName","composeEventName","name","eventPrefix","composedName","extendedEvent","type","composed","originalEvent","defaultOptions","useIntersection","targetElement","controllerDisconnect","observer","IntersectionObserver","entries","entry","isIntersecting","isVisible","call","appearEvent","dispatchAppear","disappearEvent","dispatchDisappear","observe","unobserve","[object Object]","events","onlyVisible","StimulusUse","_a","_b","_c","controllerId","stimulusUseDebug","id","dataset","controllerInitialize","controllerConnect","UseHover","onEnter","onLeave","hover","enhanceController","UseMutation","error","handleError","mutation","MutationObserver","useWindowResize","callback","innerWidth","innerHeight","payload","height","Infinity","width","debounce","fn","wait","timeoutId","arguments","clearTimeout","setTimeout","AutosizeController","_handler","style","resize","boxSizing","requestAnimationFrame","windowResize","autosize","offset","offsetHeight","clientHeight","scrollHeight","CharCountController","_updateCharCount","inputTarget","charCount","value","length","outputTarget","innerText","hasErrorClass","_isValidCount","classList","remove","errorClass","add","count","min","max","hasMinValue","minValue","hasMaxValue","maxValue","Number","CheckboxSelectAllController","checked","checkboxTargets","filter","checkbox","unchecked","toggle","refresh","hasSelectAllTarget","selectAllTarget","preventDefault","checkboxesCount","checkboxesCheckedCount","indeterminate","ClipboardController","supported","queryCommandSupported","hasRemoveUnusedValue","removeUnusedValue","hasFallbackTarget","fallbackTarget","hasCopyTarget","copyTarget","select","sourceTarget","copy","execCommand","isHTMLAnchorElement","nodeName","isHTMLFormElement","isHTMLInputElement","isHTMLButtonElement","isHTMLSelectElement","isElementCheckable","removeUnused","Boolean","ConfirmController","message","hasMessageValue","messageValue","confirm","Error","ConfirmNavigationController","_message","_messageValue","handlePopstate","handleTurboNavigation","onbeforeunload","_event","DebugController","testTargets","DetectDirtyController","_cacheAttrName","_checkDirty","_cacheLoadValues","restore","_restoreElementFromLoadValue","_getElementValue","_getElementLoadValue","getAttribute","defaultChecked","Array","from","option","defaultSelected","_elementHasCachedLoadValue","hasAttribute","_isElementDirty","setAttribute","removeAttribute","cacheValue","defaultValue","DetectDirtyFormController","_formElements","_checkElementDirty","_cacheElementLoadValue","some","DisableInputsController","hasDisablerTarget","disablerTarget","disableInputs","enableInputs","shouldClear","hasClearValue","clearValue","disableTargets","_","disabled","clear","DisableWithController","_timeout","hasTimeoutValue","timeoutValue","enable","disable","_timeoutHandle","_isDisabled","stopImmediatePropagation","_cacheText","_getElText","_setElText","_disable","_enable","str","undefined","timeout","DismissableController","dismiss","ElementSaveController","_id","hasIdValue","idValue","elementID","_uniqueIdentifier","location","href","_restoreOnLoad","hasRestoreOnLoadValue","restoreOnLoadValue","_element","hasElementTarget","elementTarget","localStorage","removeItem","save","attributes","attributesValue","split","data","attr","_get","setItem","JSON","stringify","getItem","savedData","parse","keys","_set","restoreOnLoad","EmptyDomController","emptyClasses","emptyClass","notEmptyClasses","notEmptyClass","hasScopeSelectorValue","scopeSelectorValue","useMutation","childList","checkEmpty","mutate","_removeNotEmptyClasses","_addEmptyClasses","_addNotEmptyClasses","_removeEmptyClasses","hasEmptyClass","hasNotEmptyClass","scopeSelector","EnableInputsController","hasEnablerTarget","enablerTarget","enableTargets","FallbackImageController","onerror","hasPlaceholderValue","src","placeholderValue","display","placeholder","FormRcController","submit","formTarget","reset","FormSaveController","formID","formIdentifier","formElements","elements","formData","clearOnSubmit","hasClearOnSubmitValue","clearOnSubmitValue","_clear","IntersectionController","threshold","hasThresholdValue","thresholdValue","map","val","parseFloat","trim","disappear","LazyBlockController","smoothSupported","documentElement","smoothPolyfilled","scrollToElement","behavior","block","inline","async","polyfill","polyfillSmooth","scrollIntoView","getScrollParent","node","overflowY","getComputedStyle","parentElement","body","LightboxImageController","hasSrcValue","srcValue","srcSet","hasSrcSetValue","srcSetValue","srcset","sizes","hasSizesValue","sizesValue","modalClassName","hasModalClass","modalClass","imageClassName","hasImageClass","imageClass","open","close","_dialog","image","className","appendChild","insertAdjacentElement","dialogPolyfill","registerDialog","showModal","LimitedSelectionCheckboxesController","handleInputs","inputTargets","tickedInputs","reduce","previousValue","hasErrorTarget","errorTarget","NestedFormController","wrapperClass","hasWrapperSelectorValue","wrapperClassValue","insertMode","hasInsertModeValue","insertModeValue","checkStructure","content","templateTarget","replace","generateID","targetTarget","insertAdjacentHTML","wrapper","closest","newRecord","destroyInput","querySelector","Date","getTime","Math","random","slice","indexOf","PasswordConfirmController","checkPasswordsMatch","passwordTargets","allPasswordsMatch","values","Set","has","size","PasswordPeekController","peak","passwordTarget","hide","RemoteFormController","status","xhr","Node","new_element","parentNode","replaceChild","ResponsiveIframeWrapperController","messageReceived","hasOwnProperty","ResponsiveIframeBodyController","top","debounces","func","postUpdate","getHeight","parent","postMessage","EphemeralController","_cleanupSelf","cleanup","replaceAll","RegExp","substringIdentifierValueRegex","camelCase","action","classes","ScrollIntoFocusController","hasBehaviorValue","behaviorValue","hasBlockValue","blockValue","hasInlineValue","inlineValue","ScrollToBottomController","scroll","hasModeValue","modeValue","mode","ScrollToController","warn","ScrollToTopController","SelfDestructController","secondsValue","seconds","StickyController","_mode","createMagicElement","_magicElement","intersectionRatio","hasStuckClass","stuckClass","TeleportController","hasInsertValue","hasImmediateValue","immediateValue","execute","destination","targetValue","cloneNode","insertValue","outerHTML","insert","immediate","ToggleClassController","hasClassValue","hasMouseEnterValue","hasMouseLeaveValue","useHover","hasClickAwayValue","clickAwayValue","onEvent","contains","rect","getBoundingClientRect","windowHeight","windowWidth","clientWidth","left","isElementInViewport","clickOutside","clickOutsideEvent","useClickOutside","hasInitialValue","toggleTargets","initialValue","elementOn","elementOff","elementWasToggled","elementToggleStatus","elementToggle","mouseEnter","mouseEnterValue","on","off","mouseLeave","mouseLeaveValue","toggled","classValue","klass","isTurboFrame","class","clickAway","initial","TurboFrameRCController","frameSrc","_getFrame","_getSrc","_setSrc","setSrc","frame","hasLoadingMessageValue","loadingMessageValue","getElementById","frameIdValue","frameId","loadingMessage","TurboFrameRefreshController","poll","hasPollValue","pollValue","intervalValue","interval","WordCountController","updateWordCount","wordCount","matches","match","isValidCount"],"mappings":"6WAEaA,UAAuBC,EAElCC,YAAYC,GAEV,OADAC,MAAMD,OACKE,MAAMC,KAAM,CACrBC,IAAK,CAACC,EAAKC,KACT,IAAIC,EAAYC,QAAQJ,IAAIC,EAAKC,GAC7BG,EAAON,KACX,GAgDR,SAAqBG,GACnB,OAAQA,GACN,IAAK,cACL,IAAK,KACL,IAAK,UACL,IAAK,cACL,IAAK,aACL,IAAK,MACL,IAAK,WACL,IAAK,OACL,IAAK,qBACL,IAAK,aACH,SAGJ,QAAI,SAASI,KAAKJ,IAGd,kBAAkBI,KAAKJ,IAGvB,aAAaI,KAAKJ,IAGlB,oBAAoBI,KAAKJ,IAGzB,aAAaI,KAAKJ,IA3EZK,CAAYL,EAAKM,YAAa,CAChC,GAAwB,mBAAbL,EACT,WAAWL,MAAMK,EAAW,CAC1BM,MAAK,CAACC,EAAaC,EAAcC,KAC/BP,EAAKQ,IAAIX,EAAKM,WAAY,CACxBM,KAAMF,IAEDR,QAAQK,MAAMC,EAAQC,EAASC,MAI1Cb,KAAKc,IAAIX,EAAKM,YAGlB,OAAOL,KAKbY,SACE,YAAYC,QAGdC,SAASD,EAAsBE,EAAmBC,EAA2B,IAC3E,IAAIC,EAAgBC,OAAOC,OAAO,GAAI,CAACC,SAAS,EAAMC,YAAY,EAAMC,OAAQ,CAACf,OAAQM,IAAWG,GAC9FC,EAAcK,OAAOf,SACzBU,EAAcK,OAAOf,OAASM,GAEhC,IAAIU,EAAQ,IAAIC,YAAYT,EAAWE,GACvCJ,EAAQY,cAAcF,GAGxBb,IAAIgB,EAAsBf,EAAW,IAEnC,IAAKf,KAAK+B,YAAYC,MACpB,OAEF,IAAIC,EAASC,QACbD,EAAOE,oBAAoBnC,KAAKoC,iBAAiBN,IAAgB,iBAAkB,gBACnFG,EAAOnB,OACLG,QAASjB,KAAKiB,SACXF,IAELkB,EAAOI,kBCnDEC,UAA6B5C,EAExC6C,aACEvC,KAAKwC,kBAAoBxC,KAAKwC,kBAAkBC,KAAKzC,MAGvD0C,UACEC,OAAOC,iBAAiB,QAAS5C,KAAKwC,mBACtCG,OAAOC,iBAAiB,OAAQ5C,KAAKwC,mBACrCK,SAASD,iBAAiB,mBAAoB5C,KAAKwC,mBACnDxC,KAAKwC,oBAGPM,aACEH,OAAOI,oBAAoB,QAAS/C,KAAKwC,mBACzCG,OAAOI,oBAAoB,OAAQ/C,KAAKwC,mBACxCK,SAASE,oBAAoB,mBAAoB/C,KAAKwC,mBAGxDQ,SACEhD,KAAKkB,SAASlB,KAAKgB,GAAI,qBAGzBiC,OACEjD,KAAKkB,SAASlB,KAAKgB,GAAI,mBAGzBwB,oBACExC,KAAKkD,oBAAsBlD,KAAKgD,SAAWhD,KAAKiD,OAGlDC,oBACE,MAAmC,WAA5BL,SAASM,iBAAgCN,SAASO,kBChChDC,UAA6B3D,EAcxC4D,oBACE,YAAYC,qBAAuBvD,KAAKwD,kBAAoB,8BAM9Dd,UACE1C,KAAKyD,cAGPA,cACE,IAAInD,EAAON,KACPgB,EAAKhB,KAAK0D,iBAAmB1D,KAAK2D,cAAgB3D,KAAKgB,GAC3D4C,MAAM5D,KAAK6D,eACVC,KAAMC,GAAaA,EAASC,QAC5BF,KAAMG,IACL,IAAIC,EAAQrB,SAASsB,cAAc,OAEnC,GADAD,EAAME,UAAYH,EACdjE,KAAKqE,iBAAkB,CACzB,IAAIC,EAAkBJ,EAAMK,iBAAiBvE,KAAKwE,eAClDxD,EAAGyD,eAAeH,QAElBtD,EAAGyD,eAAeP,EAAMQ,UAG1BpE,EAAKY,SAASF,EAAI,kBAEnB2D,MAAMC,IACL5D,EAAGyD,YAAYzE,KAAKsD,eACpBhD,EAAKY,SAASF,EAAI,gBAEnB6D,QAAQ,KACPvE,EAAKY,SAASF,EAAI,oBA9CfqC,UAAU,CAAC,WACXA,SAAS,CAACyB,SAAUC,OAAQC,aAAcD,OAAQE,SAAUF,cCFxDG,UAAiCxF,EAE5C6C,aACEvC,KAAKmF,QAAUnF,KAAKmF,QAAQ1C,KAAKzC,MAGnC0C,UACE1C,KAAKgB,GAAGuD,iBAAiB,2BAA2Ba,QAAQpE,GAAMA,EAAG4B,iBAAiB,SAAU5C,KAAKmF,UAGvGrC,aACE9C,KAAKgB,GAAGuD,iBAAiB,2BAA2Ba,QAAQpE,GAAMA,EAAG+B,oBAAoB,SAAU/C,KAAKmF,UAGlGA,QAAQE,GAEdrF,KAAKkB,SAAUlB,KAAKgB,GAAK,WClBtB,MAAMsE,EAAS,CAACC,EAAYC,KAC/B,MAAMF,EAASC,EAAWC,GAC1B,MAAqB,mBAAVF,EACAA,EAGA,IAAIvE,QAGN0E,EAAmB,CAACC,EAAMH,EAAYI,KAC/C,IAAIC,EAAeF,EAOnB,OANoB,IAAhBC,EACAC,EAAe,GAAGL,EAAWnD,cAAcsD,IAEf,iBAAhBC,IACZC,EAAe,GAAGD,KAAeD,KAE9BE,GAEEC,EAAgB,CAACC,EAAMnE,EAAOD,KACvC,MAAMF,QAAEA,EAAOC,WAAEA,EAAUsE,SAAEA,GAAapE,GAAS,CAAEH,SAAS,EAAMC,YAAY,EAAMsE,UAAU,GAUhG,OATIpE,GACAL,OAAOC,OAAOG,EAAQ,CAAEsE,cAAerE,IAEvB,IAAIC,YAAYkE,EAAM,CACtCtE,QAAAA,EACAC,WAAAA,EACAsE,SAAAA,EACArE,OAAAA,KC3BFuE,EAAiB,CACnBpE,eAAe,EACf8D,aAAa,GAEJO,EAAkB,CAACX,EAAYnE,EAAU,MAClD,MAAMS,cAAEA,EAAa8D,YAAEA,GAAgBrE,OAAOC,OAAO,GAAI0E,EAAgB7E,GACnE+E,GAAiB/E,MAAAA,OAAyC,EAASA,EAAQH,UAAYsE,EAAWtE,QAgClGmF,EAAuBb,EAAWzC,WAAWL,KAAK8C,GAClDc,EAAW,IAAIC,qBAhCHC,IACd,MAAOC,GAASD,EACZC,EAAMC,eAOS,CAACD,IAIpB,GAHAjB,EAAWmB,WAAY,EACvBpB,EAAOC,EAAY,UAAUoB,KAAKpB,EAAYiB,GAE1C3E,EAAe,CACf,MAAMV,EAAYsE,EAAiB,SAAUF,EAAYI,GACnDiB,EAAcf,EAAc1E,EAAW,KAAM,CAAEoE,WAAAA,EAAYiB,MAAAA,IACjEL,EAActE,cAAc+E,KAb5BC,CAAeL,GAEVjB,EAAWmB,WAcE,CAACF,IAIvB,GAHAjB,EAAWmB,WAAY,EACvBpB,EAAOC,EAAY,aAAaoB,KAAKpB,EAAYiB,GAE7C3E,EAAe,CACf,MAAMV,EAAYsE,EAAiB,YAAaF,EAAYI,GACtDmB,EAAiBjB,EAAc1E,EAAW,KAAM,CAAEoE,WAAAA,EAAYiB,MAAAA,IACpEL,EAActE,cAAciF,KApB5BC,CAAkBP,IA0B0BpF,GAC9C4F,EAAU,KACZX,EAASW,QAAQb,IAEfc,EAAY,KACdZ,EAASY,UAAUd,IAUvB,OARA7E,OAAOC,OAAOgE,EAAY,CACtBmB,WAAW,EACXQ,aACID,IACAb,OAGRY,IACO,CAACA,EAASC,ICtDfhB,EAAiB,CACnBkB,OAAQ,CAAC,QAAS,YAClBC,aAAa,EACbvF,eAAe,EACf8D,aAAa,GCLXM,EAAiB,CACnBjE,OAAO,EACPC,OAAQC,SAEL,MAAMmF,EACTH,YAAY3B,EAAYnE,EAAU,IAC9B,IAAIkG,EAAIC,EAAIC,EACZxH,KAAKc,IAAM,CAACgB,EAAcf,KACjBf,KAAKgC,QAEVhC,KAAKiC,OAAOE,eAAe,KAAKnC,KAAKuF,WAAWnD,iBAAiBN,IAAgB,iBAAkB,gBACnG9B,KAAKiC,OAAOnB,IAAIQ,OAAOC,OAAO,CAAEkG,aAAczH,KAAKyH,cAAgB1G,IACnEf,KAAKiC,OAAOI,aAEhBrC,KAAKgC,MAAmK,QAA1JuF,EAAgF,QAA1ED,EAAKlG,MAAAA,OAAyC,EAASA,EAAQY,aAA0B,IAAPsF,EAAgBA,EAAK/B,EAAWxD,YAAY2F,wBAAqC,IAAPH,EAAgBA,EAAKtB,EAAejE,MACpNhC,KAAKiC,OAAqF,QAA3EuF,EAAKpG,MAAAA,OAAyC,EAASA,EAAQa,cAA2B,IAAPuF,EAAgBA,EAAKvB,EAAehE,OACtIjC,KAAKuF,WAAaA,EAClBvF,KAAKyH,aAAelC,EAAWtE,QAAQ0G,IAAMpC,EAAWtE,QAAQ2G,QAAQD,GAExE3H,KAAK6H,qBAAuBtC,EAAWhD,WAAWE,KAAK8C,GACvDvF,KAAK8H,kBAAoBvC,EAAW7C,QAAQD,KAAK8C,GACjDvF,KAAKoG,qBAAuBb,EAAWzC,WAAWL,KAAK8C,ICnBxD,MAAMwC,UAAiBV,EAC1BH,YAAY3B,EAAYnE,EAAU,IAC9BtB,MAAMyF,EAAYnE,GAClBpB,KAAKgH,QAAU,KACXhH,KAAKmG,cAAcvD,iBAAiB,aAAc5C,KAAKgI,SACvDhI,KAAKmG,cAAcvD,iBAAiB,aAAc5C,KAAKiI,UAE3DjI,KAAKiH,UAAY,KACbjH,KAAKmG,cAAcpD,oBAAoB,aAAc/C,KAAKgI,SAC1DhI,KAAKmG,cAAcpD,oBAAoB,aAAc/C,KAAKiI,UAE9DjI,KAAKgI,QAAU,KACX1C,EAAOtF,KAAKuF,WAAY,cAAcoB,KAAK3G,KAAKuF,YAChDvF,KAAKc,IAAI,aAAc,CAAEoH,OAAO,KAEpClI,KAAKiI,QAAU,KACX3C,EAAOtF,KAAKuF,WAAY,cAAcoB,KAAK3G,KAAKuF,YAChDvF,KAAKc,IAAI,aAAc,CAAEoH,OAAO,KAEpClI,KAAKmG,eAAiB/E,MAAAA,OAAyC,EAASA,EAAQH,UAAYsE,EAAWtE,QACvGjB,KAAKuF,WAAaA,EAClBvF,KAAKmI,oBACLnI,KAAKgH,UAETE,oBACI,MAAMd,EAAuBpG,KAAKuF,WAAWzC,WAAWL,KAAKzC,KAAKuF,YAKlEjE,OAAOC,OAAOvB,KAAKuF,WAAY,CAAEzC,WAJd,KACf9C,KAAKiH,YACLb,QC5BL,MAAMgC,UAAoBf,EAC7BH,YAAY3B,EAAYnE,EAAU,IAC9BtB,MAAMyF,EAAYnE,GAClBpB,KAAKgH,QAAU,KACX,IACIhH,KAAKqG,SAASW,QAAQhH,KAAKmG,cAAenG,KAAKoB,SAEnD,MAAOiH,GACHrI,KAAKuF,WAAWxD,YAAYuG,YAAYD,EAAO,gFAAiF,MAGxIrI,KAAKiH,UAAY,KACbjH,KAAKqG,SAASvD,cAElB9C,KAAKuI,SAAYhC,IACbjB,EAAOtF,KAAKuF,WAAY,UAAUoB,KAAK3G,KAAKuF,WAAYgB,GACxDvG,KAAKc,IAAI,SAAU,CAAEyF,QAAAA,KAEzBvG,KAAKmG,eAAiB/E,MAAAA,OAAyC,EAASA,EAAQH,UAAYsE,EAAWtE,QACvGjB,KAAKuF,WAAaA,EAClBvF,KAAKoB,QAAUA,EACfpB,KAAKqG,SAAW,IAAImC,iBAAiBxI,KAAKuI,UAC1CvI,KAAKmI,oBACLnI,KAAKgH,UAETE,oBACI,MAAMd,EAAuBpG,KAAKuF,WAAWzC,WAAWL,KAAKzC,KAAKuF,YAKlEjE,OAAOC,OAAOvB,KAAKuF,WAAY,CAAEzC,WAJd,KACf9C,KAAKiH,YACLb,QAKL,MCnCMqC,EAAmBlD,IAC5B,MAAMmD,EAAY/G,IACd,MAAMgH,WAAEA,EAAUC,YAAEA,GAAgBjG,OAC9BkG,EAAU,CACZC,OAAQF,GAAeG,SACvBC,MAAOL,GAAcI,SACrBpH,MAAAA,GAEJ2D,EAAOC,EAAY,gBAAgBoB,KAAKpB,EAAYsD,IAElDzC,EAAuBb,EAAWzC,WAAWL,KAAK8C,GAClDyB,EAAU,KACZrE,OAAOC,iBAAiB,SAAU8F,GAClCA,KAEEzB,EAAY,KACdtE,OAAOI,oBAAoB,SAAU2F,IASzC,OAPApH,OAAOC,OAAOgE,EAAY,CACtB2B,aACID,IACAb,OAGRY,IACO,CAACA,EAASC,ICrBfgC,EAAW,CAACC,EAAIC,EADF,OAEhB,IAAIC,EAAY,KAChB,OAAO,WACH,MAAMrI,EAAOsI,UACPxJ,EAAUG,KACV0I,EAAW,IAAMQ,EAAGxI,MAAMb,EAASkB,GACrCqI,GACAE,aAAaF,GAEjBA,EAAYG,WAAWb,EAAUS,WCX5BK,UAA2B9J,EAEtC6C,aACEvC,KAAKyJ,SAAWzJ,KAAKyJ,SAAShH,KAAKzC,MAGrC0C,UACE,IAAI/B,EAASX,KAAKgB,GAClBL,EAAO+I,MAAMC,OAAS,OACtBhJ,EAAO+I,MAAME,UAAY,aACzBjJ,EAAOiC,iBAAiB,QAAS5C,KAAKyJ,UACtC9I,EAAOiC,iBAAiB,QAAS5C,KAAKyJ,UACtChB,EAAgBzI,MAChB6J,sBAAsB7J,KAAKyJ,UAG7BK,eACE9J,KAAKyJ,WAGCA,WACNzJ,KAAK+J,SAAS/J,KAAKgB,IAGb+I,SAAS9I,GACf,IAAI+I,EAAS/I,EAAQgJ,aAAehJ,EAAQiJ,aAC5CjJ,EAAQyI,MAAMZ,OAAS,OACvB7H,EAAQyI,MAAMZ,OAAS7H,EAAQkJ,aAAeH,EAAS,YC5B9CI,UAA4B1K,EAevC6C,aACEvC,KAAKqK,iBAAmBrK,KAAKqK,iBAAiB5H,KAAKzC,MAGrD0C,UACE1C,KAAKqK,mBACLrK,KAAKsK,YAAY1H,iBAAiB,QAAS5C,KAAKqK,kBAGlDvH,aACE9C,KAAKsK,YAAYvH,oBAAoB,QAAS/C,KAAKqK,kBAG7CA,mBACN,IAAIE,EAAYvK,KAAKsK,YAAYE,MAAMC,OACvCzK,KAAK0K,aAAaC,UAAYJ,EAAU9J,WACpCT,KAAK4K,gBACH5K,KAAK6K,cAAcN,GACrBvK,KAAK0K,aAAaI,UAAUC,OAAO/K,KAAKgL,YAExChL,KAAK0K,aAAaI,UAAUG,IAAIjL,KAAKgL,aAKnCH,cAAcK,GACpB,IAAIC,EAAM,EACNC,EAAM,MAUV,OARIpL,KAAKqL,cACPF,EAAMnL,KAAKsL,UAGTtL,KAAKuL,cACPH,EAAMpL,KAAKwL,UAGNN,GAASC,GAAOD,GAASE,GAlD3BhB,UAAU,CAAC,QAAS,UACpBA,SAAS,CAACe,IAAKM,OAAQL,IAAKK,QAC5BrB,UAAU,CAAC,eCJPsB,UAAoChM,EAO/CiM,cACE,YAAYC,gBAAgBC,OAAOC,GAAYA,EAASH,SAG1DI,gBACE,YAAYH,gBAAgBC,OAAOC,IAAaA,EAASH,SAG3DpJ,aACEvC,KAAKgM,OAAShM,KAAKgM,OAAOvJ,KAAKzC,MAC/BA,KAAKiM,QAAUjM,KAAKiM,QAAQxJ,KAAKzC,MAGnC0C,UACEmH,sBAAsB,KACf7J,KAAKkM,qBAIVlM,KAAKmM,gBAAgBvJ,iBAAiB,SAAU5C,KAAKgM,QACrDhM,KAAK4L,gBAAgBxG,QAAQ0G,GAAYA,EAASlJ,iBAAiB,SAAU5C,KAAKiM,UAClFjM,KAAKiM,aAITnJ,aACO9C,KAAKkM,qBAIVlM,KAAKmM,gBAAgBpJ,oBAAoB,SAAU/C,KAAKgM,QACxDhM,KAAK4L,gBAAgBxG,QAAS0G,GAAaA,EAAS/I,oBAAoB,SAAU/C,KAAKiM,WAGjFD,OAAOrK,GACbA,EAAMyK,iBACN,IAAIzL,EAASgB,EAAMhB,OACnBX,KAAK4L,gBAAgBxG,QAAS0G,GAAaA,EAASH,QAAUhL,EAAOgL,SAG/DM,UACN,MAAMI,EAAkBrM,KAAK4L,gBAAgBnB,OACvC6B,EAAyBtM,KAAK2L,QAAQlB,OAE5CzK,KAAKmM,gBAAgBR,QAAUW,EAAyB,EACxDtM,KAAKmM,gBAAgBI,cAAgBD,EAAyB,GAAKA,EAAyBD,GAnDvFX,UAAU,CAAC,YAAa,kBCDpBc,UAA4B9M,EAAzCE,kCAcEI,gBAAY,EAEZ0C,UACE1C,KAAKyM,UAAY5J,SAAS6J,sBAAsB,QAE5C1M,KAAK2M,sBAAwB3M,KAAK4M,oBAChC5M,KAAKyM,WAAazM,KAAK6M,kBACzB7M,KAAK8M,eAAe/B,SACX/K,KAAK+M,eACd/M,KAAKgN,WAAWjC,UAKtBkC,OAAOtL,GACDA,GACFA,EAAMyK,iBAEPpM,KAAKkN,aAAwDD,SAGhEE,KAAKxL,GACCA,GACFA,EAAMyK,iBAEPpM,KAAKkN,aAAwDD,SAC1DjN,KAAKyM,WACP5J,SAASuK,YAAY,kBCvCXC,EAAoBpM,GAClC,MAA2B,KAApBA,EAAQqM,kBAGDC,EAAkBtM,GAChC,MAA2B,QAApBA,EAAQqM,kBAGDE,EAAmBvM,GACjC,MAA2B,SAApBA,EAAQqM,kBAGDG,EAAoBxM,GAClC,MAA2B,UAApBA,EAAQqM,kBAGDI,EAAoBzM,GAClC,MAA2B,UAApBA,EAAQqM,kBAODK,EAAmB1M,GACjC,OAAOuM,EAAmBvM,KAA8B,UAAjBA,EAAQ6E,MAAqC,aAAjB7E,EAAQ6E,MDzBpE0G,UAAU,CAAC,SAAU,OAAQ,YAC7BA,SAAS,CAACoB,aAAcC,eEFpBC,UAA0BpO,EASrCqO,cACE,YAAYC,gBAAkBhO,KAAKiO,aAAe,gBAGpD1L,aACEvC,KAAKkO,QAAUlO,KAAKkO,QAAQzL,KAAKzC,MAGnC0C,UACEmH,sBAAsB,KACpB,IAAI5I,EAAUjB,KAAKgB,GACnB,GAAIuM,EAAkBtM,GACpBA,EAAQ2B,iBAAiB,SAAU5C,KAAKkO,kBAC/Bb,EAAoBpM,GAG7B,UAAUkN,MAAM,iDAFhBlN,EAAQ2B,iBAAiB,QAAS5C,KAAKkO,YAO7CA,QAAQvM,GACAgB,OAAOuL,QAAQlO,KAAK+N,WACxBpM,EAAMyK,iBACNpM,KAAKkB,SAASlB,KAAKgB,GAAI,uBA/BpB8M,SAAS,CACdC,QAAShJ,cCJAqJ,UAAoC1O,EAO/C2O,eACE,YAAYL,gBAAkBhO,KAAKsO,cAAgB,oEAGrD/L,aACEvC,KAAKuO,eAAiBvO,KAAKuO,eAAe9L,KAAKzC,MAC/CA,KAAKwO,sBAAwBxO,KAAKwO,sBAAsB/L,KAAKzC,MAG/D0C,UACEC,OAAO8L,eAAiB,IAAMzO,KAAKqO,SACnC1L,OAAOC,iBAAiB,WAAY5C,KAAKuO,gBACzC5L,OAAOC,iBAAiB,SAAU,KAChCD,OAAOI,oBAAoB,WAAY/C,KAAKuO,gBAC5C5L,OAAO8L,eAAiB,OAE1B9L,OAAOC,iBAAiB,0BAA2B5C,KAAKwO,uBACxD7L,OAAOC,iBAAiB,qBAAsB5C,KAAKwO,uBAGrDD,eAAeG,GACb,SAGFF,sBAAsB7M,GACfuM,QAAQlO,KAAKqO,WAChB1M,EAAMyK,kBA/BHgC,SAAS,CAACC,SAAUtJ,cCFhB4J,UAAwBjP,EAKnCgD,UACER,QAAQpB,IAAI,mBAAoBd,KAAMA,KAAK4O,cAJtCD,UAAU,CAAC,cCDPE,UAA8BnP,EAEzCoP,qBACE,MAAO,0BAGTvM,aACEvC,KAAK+O,YAAc/O,KAAK+O,YAAYtM,KAAKzC,MAG3C0C,UACE,IAAIzB,EAAUjB,KAAKgB,GAEnBhB,KAAKgP,mBACLhP,KAAK+O,cACL9N,EAAQ2B,iBAAiB,QAAS5C,KAAK+O,aACvC9N,EAAQ2B,iBAAiB,SAAU5C,KAAK+O,aAG1CjM,aACE,IAAI7B,EAAUjB,KAAKgB,GACnBC,EAAQ8B,oBAAoB,QAAS/C,KAAK+O,aAC1C9N,EAAQ8B,oBAAoB,SAAU/C,KAAK+O,aAG7CE,QAAQtN,SACNA,GAAAA,EAAOyK,iBACPpM,KAAKkP,+BAGCC,mBACN,IAAIlO,EAAUjB,KAAKgB,GACnB,OAAO2M,EAAmB1M,GAAWA,EAAQ0K,QAAU1K,EAAQuJ,MAGzD4E,uBACN,IAAInO,EAAUjB,KAAKgB,GACfwJ,EAAQvJ,EAAQoO,aAAarP,KAAK8O,gBACtC,OAAInB,EAAmB1M,GACL,MAATuJ,EAAgBvJ,EAAQqO,eAA0B,QAAT9E,GAC7B,OAAVA,GAIPkD,EAAoBzM,IACRsO,MAAMC,KAAKvO,EAAQG,SACzBgE,QAASqK,IACf,GAAIA,EAAOC,gBAET,OADAzO,EAAQuJ,MAAQiF,EAAOjF,MAChBiF,EAAOjF,QARXA,GAgBHmF,6BAEN,OADc3P,KAAKgB,GACJ4O,aAAa5P,KAAK8O,gBAG3BC,cACN,IAAI9N,EAAUjB,KAAKgB,GACfhB,KAAK6P,kBACP5O,EAAQ6O,aAAa,aAAc,QAEnC7O,EAAQ8O,gBAAgB,cAIpBF,kBACN,YAAYV,qBAAuBnP,KAAKoP,uBAGlCF,+BACN,IAAIjO,EAAUjB,KAAKgB,GACfgP,EAAa/O,EAAQoO,aAAarP,KAAK8O,gBAEvCnB,EAAmB1M,IACrBA,EAAQ6O,aAAa9P,KAAK8O,eAAgB7N,EAAQ0K,QAAQlL,YAC1DQ,EAAQ0K,QAAwB,MAAdqE,EAAqB/O,EAAQqO,eAA+B,QAAdU,GACvDtC,EAAoBzM,GACX,MAAd+O,EACYT,MAAMC,KAAKvO,EAAQG,SACzBgE,QAASqK,IACXA,EAAOC,kBACTzO,EAAQuJ,MAAQiF,EAAOjF,SAK3BvJ,EAAQuJ,MAAQwF,EAIlB/O,EAAQuJ,MAAsB,MAAdwF,EAAqB/O,EAAQgP,aAAeD,EAIxDhB,mBACN,IAAI/N,EAAUjB,KAAKgB,IACdhB,KAAK2P,8BAAgChC,EAAmB1M,GAC3DA,EAAQ6O,aAAa9P,KAAK8O,eAAgB7N,EAAQ0K,QAAQlL,YAE1DQ,EAAQ6O,aAAa9P,KAAK8O,eAAgB7N,EAAQuJ,MAAM/J,mBCzGjDyP,UAAkCxQ,EAE7CyQ,oBACE,OAAOZ,MAAMC,KAAKxP,KAAKgB,GAAGuD,iBAAiB,4BAG7CuK,qBACE,MAAO,0BAGTvM,aACEvC,KAAK+O,YAAc/O,KAAK+O,YAAYtM,KAAKzC,MAG3C0C,UACE,IAAIzB,EAAUjB,KAAKgB,GAEnBhB,KAAKgP,mBACLhP,KAAK+O,cACL9N,EAAQ2B,iBAAiB,QAAS5C,KAAK+O,aACvC9N,EAAQ2B,iBAAiB,SAAU5C,KAAK+O,aAG1CjM,aACE,IAAI7B,EAAUjB,KAAKgB,GACnBC,EAAQ8B,oBAAoB,QAAS/C,KAAK+O,aAC1C9N,EAAQ8B,oBAAoB,SAAU/C,KAAK+O,aAG7CE,QAAQtN,SACNA,GAAAA,EAAOyK,iBACPpM,KAAKmQ,cAAc/K,QAAQnE,GAAWjB,KAAKkP,6BAA6BjO,IAGlEkO,iBAAiBlO,GACvB,OAAO0M,EAAmB1M,GAAWA,EAAQ0K,QAAU1K,EAAQuJ,MAGzD4E,qBAAqBnO,GAC3B,IAAIuJ,EAAQvJ,EAAQoO,aAAarP,KAAK8O,gBACtC,OAAInB,EAAmB1M,GACL,MAATuJ,EAAgBvJ,EAAQqO,eAA0B,QAAT9E,GAC7B,OAAVA,GAIPkD,EAAoBzM,IACRsO,MAAMC,KAAKvO,EAAQG,SACzBgE,QAASqK,IACf,GAAIA,EAAOC,gBAET,OADAzO,EAAQuJ,MAAQiF,EAAOjF,MAChBiF,EAAOjF,QARXA,GAgBHmF,2BAA2B1O,GACjC,OAAOA,EAAQ2O,aAAa5P,KAAK8O,gBAG3BsB,mBAAmBnP,GACrBjB,KAAK6P,gBAAgB5O,GACvBA,EAAQ6O,aAAa,aAAc,QAEnC7O,EAAQ8O,gBAAgB,cAIpBF,gBAAgB5O,GACtB,YAAYkO,iBAAiBlO,KAAajB,KAAKoP,qBAAqBnO,GAG9DoP,uBAAuBpP,IACxBjB,KAAK2P,2BAA2B1O,IAAY0M,EAAmB1M,GAClEA,EAAQ6O,aAAa9P,KAAK8O,eAAgB7N,EAAQ0K,QAAQlL,YAE1DQ,EAAQ6O,aAAa9P,KAAK8O,eAAgB7N,EAAQuJ,MAAM/J,YAIpDyO,6BAA6BjO,GACnC,IAAI+O,EAAa/O,EAAQoO,aAAarP,KAAK8O,gBAEvCnB,EAAmB1M,IACrBA,EAAQ6O,aAAa9P,KAAK8O,eAAgB7N,EAAQ0K,QAAQlL,YAC1DQ,EAAQ0K,QAAwB,MAAdqE,EAAqB/O,EAAQqO,eAA+B,QAAdU,GACvDtC,EAAoBzM,GACX,MAAd+O,EACYT,MAAMC,KAAKvO,EAAQG,SACzBgE,QAASqK,IACXA,EAAOC,kBACTzO,EAAQuJ,MAAQiF,EAAOjF,SAK3BvJ,EAAQuJ,MAAQwF,EAIlB/O,EAAQuJ,MAAsB,MAAdwF,EAAqB/O,EAAQgP,aAAeD,EAIxDhB,mBACNhP,KAAKmQ,cAAc/K,QAAQpE,GAAMhB,KAAKqQ,uBAAuBrP,IAGvD+N,cACN/O,KAAKmQ,cAAc/K,QAAQpE,GAAMhB,KAAKoQ,mBAAmBpP,IACrDhB,KAAKmQ,cAAcG,KAAKtP,GAAcA,EAS7B4O,aAAa,eARxB5P,KAAKgB,GAAG8O,aAAa,aAAc,QAEnC9P,KAAKgB,GAAG+O,gBAAgB,qBCrHjBQ,UAAgC7Q,EAc3CgD,UACE1C,KAAKgM,SAGPA,SACMhM,KAAKwQ,mBAAqBxQ,KAAKyQ,eAAe9E,QAChD3L,KAAK0Q,gBAEL1Q,KAAK2Q,eAITD,gBACE,IAAIE,EAAc5Q,KAAK6Q,eAAiB7Q,KAAK8Q,WAC7C9Q,KAAK+Q,eAAe3L,QAAQ,CAACpE,EAAIgQ,KAC3BJ,IACF5P,EAAGwJ,MAAQ,IAEbxJ,EAAGiQ,UAAW,IAIlBN,eACE3Q,KAAK+Q,eAAe3L,QAAQ,CAACpE,EAAIgQ,KAC/BhQ,EAAGiQ,UAAW,KApCXV,UAAU,CAAC,WAAY,WAEvBA,SAAS,CACdW,MAAOrD,eCJEsD,UAA8BzR,EAezC2O,eACE,YAAYL,gBAAkBhO,KAAKiO,aAAe,gBAGpDmD,eACE,YAAYC,gBAAkBrR,KAAKsR,aAAe,IAGpD/O,aACEvC,KAAKuR,OAASvR,KAAKuR,OAAO9O,KAAKzC,MAC/BA,KAAKwR,QAAUxR,KAAKwR,QAAQ/O,KAAKzC,MAGnC0C,UACEmH,sBAAsB,KACpB7J,KAAKgB,GAAG4B,iBAAiB,QAAS5C,KAAKwR,WAI3C1O,aACM9C,KAAKyR,gBACPnI,aAAatJ,KAAKyR,gBAItBD,QAAQ7P,GACN,IAAIV,EAAUjB,KAAKgB,GAEfhB,KAAK0R,YAAYzQ,UACnBU,GAAAA,EAAOyK,uBACPzK,GAAAA,EAAOgQ,6BAEP3R,KAAK4R,WAAa5R,KAAK6R,WAAW5Q,GAClCjB,KAAK8R,WAAW7Q,EAASjB,KAAKqO,UAC9BrO,KAAK+R,SAAS9Q,GACdsI,WAAWvJ,KAAKuR,OAAQvR,KAAKoR,WAIjCG,OAAO5P,SACLA,GAAAA,EAAOyK,iBACP,IAAInL,EAAUjB,KAAKgB,GACfhB,KAAK0R,YAAYzQ,KACnBjB,KAAK8R,WAAW7Q,EAASjB,KAAK4R,YAC9B5R,KAAKgS,QAAQ/Q,IAIjByQ,YAAY1Q,GACV,OAAKwM,EAAmBxM,IAAkB,UAAXA,EAAG8E,MAAqB2H,EAAoBzM,GAClEA,EAAGiQ,SAEoB,QAAvBjQ,EAAG4G,QAAQqJ,SAItBY,WAAW7Q,GACT,OAAIwM,EAAmBxM,IAAkB,UAAXA,EAAG8E,KACxB9E,EAAGwJ,MAEHxJ,EAAG2J,UAIdmH,WAAW9Q,EAAiBiR,GACtBzE,EAAmBxM,IAAkB,UAAXA,EAAG8E,KAC/B9E,EAAGwJ,MAAQyH,GACFxE,EAAoBzM,IAAOqM,EAAoBrM,MACxDA,EAAG2J,UAAYsH,GAInBF,SAAS/Q,GACFwM,EAAmBxM,IAAkB,UAAXA,EAAG8E,MAAqB2H,EAAoBzM,GACzEA,EAAGiQ,UAAW,EAEdjQ,EAAG4G,QAAQqJ,SAAW,OAI1Be,QAAQhR,GACFwM,EAAmBxM,IAAkB,UAAXA,EAAG8E,MAAoB2H,EAAoBzM,GACvEA,EAAGiQ,UAAW,EAEdjQ,EAAG4G,QAAQqJ,cAAWiB,GAjGnBf,SAAS,CACdpD,QAAShJ,OACToN,QAAS1G,cCLA2G,UAA8B1S,EAEzC2S,UACErS,KAAKgB,GAAG+J,gBCDCuH,UAA8B5S,EAmBzC6S,UACE,GAAIvS,KAAKwS,WACP,YAAYC,QAEd,IAAIC,EAAY1S,KAAKgB,GAAG2G,GAExB,GAAkB,KAAd+K,EACF,OAAOA,EAEP,UAAUvE,mFAAmFnO,KAAKoC,gEAItGuQ,wBAEE,SADYC,SAASC,QACJ7S,KAAKuS,MAGxBO,qBACE,YAAYC,uBAAwB/S,KAAKgT,mBAG3CC,eACE,YAAYC,iBAAmBlT,KAAKmT,cAAgBnT,KAAKgB,GAG3D0B,UACEmH,sBAAsB,KAChB7J,KAAK8S,gBACP9S,KAAKiP,YAKXiC,MAAMvP,GACAA,GACFA,EAAMyK,iBAERgH,aAAaC,WAAWrT,KAAK2S,mBAC7B3S,KAAKkB,SAASlB,KAAKiT,iCAGrBK,KAAK3R,GACCA,GACFA,EAAMyK,iBAER,IAAInL,EAAUjB,KAAKiT,SACfM,EAAavT,KAAKwT,gBAAgBC,MAAM,KACxCC,EAA+B,GACnCH,EAAWnO,QAASuO,GAAiBD,EAAKC,GAAQC,EAAK3S,EAAS0S,IAChEP,aAAaS,QAAQ7T,KAAK2S,kBAAmBmB,KAAKC,UAAUL,IAC5D1T,KAAKkB,SAASD,+BAGhBgO,QAAQtN,GACFA,GACFA,EAAMyK,iBAER,IAAInL,EAAUjB,KAAKiT,SACnB,GAAIG,aAAaY,QAAQhU,KAAK2S,mBAAoB,CAChD,MAAMsB,EAAYH,KAAKI,MAAMd,aAAaY,QAAQhU,KAAK2S,oBACvDrR,OAAO6S,KAAKF,GAAW7O,QAASuO,IAC9BS,EAAKnT,EAAwB0S,EAAMM,EAAUN,MAE/C3T,KAAKkB,SAASD,uCAEdjB,KAAKkB,SAASD,iCAnFXqR,UAAU,CACf,WAEKA,SAAS,CACd3K,GAAI5C,OACJwO,WAAYxO,OACZsP,cAAexG,eCTNyG,UAA2B5U,EAatC6U,mBACE,YAAYC,WAAWf,MAAM,KAG/BgB,sBACE,YAAYC,cAAcjB,MAAM,KAGlC/O,eACE,IAAIzD,EAAUjB,KAAKgB,GACnB,OACSuO,MAAMC,KADXxP,KAAK2U,sBACW1T,EAAQsD,iBAAiBvE,KAAK4U,oBAE9B3T,EAAQyD,UAI9BhC,UjBGyB,EAAC6C,EAAYnE,EAAU,MAC7B,IAAIgH,EiBHTpI,KjBGiCoB,IiBH7CyT,CAAY7U,EAAM,CAACiB,QAASjB,KAAKgB,GAAI8T,WAAW,IAChD9U,KAAK+U,aAGPC,OAAOzO,GACLvG,KAAK+U,aAGPA,aACE,IAAI9T,EAAUjB,KAAKgB,GACf0D,EAAW1E,KAAK0E,SACI,IAApBA,EAAS+F,QACXzK,KAAKiV,yBACLjV,KAAKkV,mBACLlV,KAAKkB,SAASD,EAAwB,eAEtCjB,KAAKmV,sBACLnV,KAAKoV,sBACLpV,KAAKkB,SAASD,EAAwB,gBAAiB,CAACS,OAAQ,CAACwJ,MAAOxG,EAAS+F,WAI7E2K,sBACFpV,KAAKqV,eACPrV,KAAKgB,GAAG8J,UAAUC,UAAU/K,KAAKuU,cAI7BY,sBACFnV,KAAKsV,kBACPtV,KAAKgB,GAAG8J,UAAUG,OAAOjL,KAAKyU,iBAI1BS,mBACFlV,KAAKqV,eACPrV,KAAKgB,GAAG8J,UAAUG,OAAOjL,KAAKuU,cAI1BU,yBACFjV,KAAKsV,kBACPtV,KAAKgB,GAAG8J,UAAUC,UAAU/K,KAAKyU,kBAvE9BH,UAAU,CAAC,QAAS,YACpBA,SAAS,CAACiB,cAAexQ,cCJrByQ,UAA+B9V,EAc1CgD,UACE1C,KAAKgM,SAGPA,SACMhM,KAAKyV,kBAAoBzV,KAAK0V,cAAc/J,QAC9C3L,KAAK2Q,eAEL3Q,KAAK0Q,gBAITA,gBACE,IAAIE,EAAc5Q,KAAK6Q,eAAiB7Q,KAAK8Q,WAC7C9Q,KAAK2V,cAAcvQ,QAAQ,CAACpE,EAAIgQ,KAC1BJ,IACF5P,EAAGwJ,MAAQ,IAEbxJ,EAAGiQ,UAAW,IAIlBN,eACE3Q,KAAK2V,cAAcvQ,QAAQ,CAACpE,EAAIgQ,KAC9BhQ,EAAGiQ,UAAW,KApCXuE,UAAU,CAAC,UAAW,UAEtBA,SAAS,CACdtE,MAAOrD,eCLE+H,UAAgClW,EAO3CgD,UACE,IAAIzB,EAAUjB,KAAKgB,GAEnBC,EAAQ4U,QAAU,KACZ7V,KAAK8V,oBACP7U,EAAQ8U,IAAM/V,KAAKgW,iBAEnB/U,EAAQyI,MAAMuM,QAAU,SAZvBL,SAAS,CAACM,YAAanR,cCFnBoR,UAAyBzW,EAMpC0W,OAAOzU,SACLA,GAAAA,EAAOyK,iBACPpM,KAAKkB,SAASlB,KAAKqW,WAAY,UAC/BrW,KAAKqW,WAAWD,SAGlBE,MAAM3U,SACJA,GAAAA,EAAOyK,iBACPpM,KAAKkB,SAASlB,KAAKqW,WAAY,SAC/BrW,KAAKqW,WAAWC,SAbXH,UAAU,CAAC,cCKPI,UAA2B7W,EAetC8W,aACE,GAAIxW,KAAKwS,WACP,YAAYC,QAEd,IAAIC,EAAa1S,KAAKgB,GAAuB2G,GAE7C,GAAkB,KAAd+K,EACF,OAAOA,EAEP,UAAUvE,gFAAgFnO,KAAKoC,6DAInGqU,qBAEE,SADY7D,SAASC,QACJ7S,KAAKwW,SAGxBE,mBACE,YAAa1V,GAAuB2V,SAGtCC,eACE,IAAIlD,EAAwB,CAACxM,CAAClH,KAAKyW,gBAAiB,IACpD,IAAK,MAAMxV,UAAgByV,aAAc,CACvC,IAAI1V,EAAKC,EACLD,EAAG0E,KAAK+E,OAAS,IACf+C,EAAmBxM,IAAkB,YAAXA,EAAG8E,KAC/B4N,EAAK1T,KAAKyW,gBAAgBzV,EAAG0E,MAAQ1E,EAAG2K,QAC/B6B,EAAmBxM,IAAkB,SAAXA,EAAG8E,KAClC9E,EAAG2K,UACL+H,EAAK1T,KAAKyW,gBAAgBzV,EAAG0E,MAAQ1E,EAAGwJ,OAG1CkJ,EAAK1T,KAAKyW,gBAAgBzV,EAAG0E,MAAQ1E,EAAGwJ,OAI9C,OAAOkJ,EAGTW,oBACE,YAAYtB,uBAAwB/S,KAAKgT,mBAG3C6D,oBACE,YAAYC,uBAAwB9W,KAAK+W,mBAG3CxU,aACEvC,KAAKgX,OAAShX,KAAKgX,OAAOvU,KAAKzC,MAGjC0C,UACEmH,sBAAsB,KAEpB,IAAK0D,EADSvN,KAAKgB,IAEjB,UAAUmN,MAAM,wDAGdnO,KAAKqU,eACPrU,KAAKiP,UAEHjP,KAAK6W,eACP7W,KAAKgB,GAAG4B,iBAAiB,SAAU5C,KAAKgX,UAK9ClU,aACM9C,KAAK6W,eACP7W,KAAKgB,GAAG+B,oBAAoB,SAAU/C,KAAKgX,QAI/CA,SACE5D,aAAaC,WAAWrT,KAAKyW,gBAC7BzW,KAAKkB,SAASlB,KAAKgB,wBAGrBkQ,MAAMvP,SACJA,GAAAA,EAAOyK,iBACPpM,KAAKgX,SAGP1D,KAAK3R,GACHA,EAAMyK,iBAENgH,aAAaS,QAAQ7T,KAAKyW,eAAgB3C,KAAKC,UADpC/T,KAAK4W,SAC8C5W,KAAKyW,kBACnEzW,KAAKkB,SAASlB,KAAKgB,6BAGrBiO,QAAQtN,GAEN,SADAA,GAAAA,EAAOyK,iBACHgH,aAAaY,QAAQhU,KAAKyW,gBAAiB,CAC7C,MAAMxC,EAAYH,KAAKI,MAAMd,aAAaY,QAAQhU,KAAKyW,iBACvD,IAAK,MAAMxV,UAAgByV,aAAc,CACvC,IAAI1V,EAAKC,EACLD,EAAG0E,QAAQuO,IACTzG,EAAmBxM,IAAkB,YAAXA,EAAG8E,KAC/B9E,EAAG2K,QAAUsI,EAAUjT,EAAG0E,MACjB8H,EAAmBxM,IAAkB,SAAXA,EAAG8E,KAClC9E,EAAGwJ,OAASyJ,EAAUjT,EAAG0E,QAC3B1E,EAAG2K,SAAU,GAGf3K,EAAGwJ,MAAQyJ,EAAUjT,EAAG0E,OAI9B1F,KAAKkB,SAASlB,KAAKgB,qCAEnBhB,KAAKkB,SAASlB,KAAKgB,+BA7HhBuV,SAAS,CACd5O,GAAI5C,OACJsP,cAAexG,QACfgJ,cAAehJ,eCXNoJ,UAA+BvX,EAQ1CwX,gBACE,OAAIlX,KAAKmX,uBACKC,eAAe3D,MAAM,KAAK4D,IAAIC,GAAO7L,OAAO8L,WAAWD,EAAIE,SAAS3L,OAAOyL,GAAOA,GAAO,GAAKA,GAAO,GAE1G,CAAC,EAAG,GAIf5U,UACEwD,EAAgBlG,KAAM,CACpBkX,UAAWlX,KAAKkX,UAChBjW,QAASjB,KAAKgB,KAIlBgC,OAAOwD,GACLxG,KAAKkB,SACHlB,KAAKgB,GACL,sBACA,CACEU,OAAQ,CACNT,QAASjB,KAAKgB,MAMtByW,UAAUjR,GACRxG,KAAKkB,SACHlB,KAAKgB,GACL,yBACA,CACEU,OAAQ,CACNT,QAASjB,KAAKgB,OAvCfiW,SAAS,CAACC,UAAWnS,cCFjB2S,UAA4BrU,EAOvCX,UACE,IAAIzB,EAAUjB,KAAKgB,GAEf,yBAA0B2B,QAC3B3C,KAAKgH,QAAShH,KAAKiH,WAAaf,EAAgBlG,KAAM,CAACiB,QAAAA,EAASiW,UAAW,KAG5ElX,KAAKyD,cAITT,OAAOwD,GACDA,EAAM7F,SAAWX,KAAKgB,IAAMwF,EAAMC,iBACpCzG,KAAKyD,cACDzD,KAAKiH,WACPjH,KAAKiH,cCzBb,MAAM0Q,EAAkB,mBAAoB9U,SAAS+U,gBAAgBlO,MACrE,IAAImO,iBAEkBC,EAAgB7W,GAAkB8W,SAACA,EAAW,SAAZC,MAAsBA,EAAQ,QAA9BC,OAAuCA,EAAS,WAAoC,IAC1H,UAAZF,GAAyBJ,SAM/BO,iBACE,MAAMC,SAACA,gBAAyE,yBAC5EN,IAGJA,GAAmB,EACnBM,KAXQC,GAERnX,EAAQoX,eAAe,CAACN,SAAAA,EAAUC,MAAAA,EAAOC,OAAAA,aAY3BK,EAAgBC,GAC9B,IAAKA,EACH,YAEF,MAAMC,EAAYC,iBAAiBF,GAAMC,UAGzC,MAFmC,YAAdA,GAAyC,WAAdA,GAE5BD,EAAKpO,cAAgBoO,EAAKrO,aACrCqO,EAGFD,EAAgBC,EAAKG,gBAAkB7V,SAAS8V,WC1B5CC,UAAgClZ,EAA7CE,kCAmBEI,aAAoC,KAEpC+V,UACE,YAAY8C,YAAc7Y,KAAK8Y,SAAY9Y,KAAKgB,GAAwB+U,IAG1EgD,aACE,YAAYC,eAAiBhZ,KAAKiZ,YAAejZ,KAAKgB,GAAwBkY,OAGhFC,YACE,YAAYC,cAAgBpZ,KAAKqZ,WAAcrZ,KAAKgB,GAAwBmY,MAG9EG,qBACE,YAAYC,cAAgBvZ,KAAKwZ,WAAa,wBAGhDC,qBACE,YAAYC,cAAgB1Z,KAAK2Z,WAAa,uBAGhDpX,aACEvC,KAAK4Z,KAAO5Z,KAAK4Z,KAAKnX,KAAKzC,MAC3BA,KAAK6Z,MAAQ7Z,KAAK6Z,MAAMpX,KAAKzC,MAG/B0C,WAGAkX,OACE,IAAI3Y,EAAUjB,KAAKgB,GACnB,GAAIhB,KAAK8Z,QACP,OAEF9Z,KAAK8Z,QAAUjX,SAASsB,cAAc,UAEtC,IAAI4V,EAAQlX,SAASsB,cAAc,OACnC4V,EAAMC,UAAYha,KAAKyZ,eACvBM,EAAMhE,IAAM/V,KAAK+V,IACjBgE,EAAMb,OAASlZ,KAAK+Y,OACpBgB,EAAMZ,MAAQnZ,KAAKmZ,MACnBnZ,KAAK8Z,QAAQG,YAAYF,GAEzB9Y,EAAQiZ,sBAAsB,WAAYla,KAAK8Z,SAC/CK,EAAeC,eAAepa,KAAK8Z,SACnC9Z,KAAK8Z,QAAQE,UAAYha,KAAKsZ,eAC9BtZ,KAAK8Z,QAAQO,YACbvC,EAAgB9X,KAAK8Z,QAAS,CAAC/B,SAAU,SAAUC,MAAO,QAAQrT,MAAM,IAAM3E,KAAK8Z,QAASzB,gBAAe,IAC3GrY,KAAK8Z,QAAQlX,iBAAiB,QAAS5C,KAAK6Z,OAC5C7Z,KAAK8Z,QAAQlX,iBAAiB,SAAU5C,KAAK6Z,OAC7C7Z,KAAK8Z,QAAQlX,iBAAiB,QAAS5C,KAAK6Z,OAG9CA,QACM7Z,KAAK8Z,UACP9Z,KAAK8Z,QAAQD,QACb7Z,KAAK8Z,QAAQ/O,SACb/K,KAAK8Z,QAAU,KACfhC,EAAgB9X,KAAKgB,GAAI,CAAC+W,SAAU,SAAUC,MAAO,QAAQrT,MAAM,IAAM3E,KAAKgB,GAAGqX,gBAAe,MA5E7FO,SAAS,CACd7C,IAAKhR,OACLgU,OAAQhU,OACRoU,MAAOpU,QAEF6T,UAAU,CAAC,QAAS,eCThB0B,UAA6C5a,EAWxD6C,aACEvC,KAAKua,aAAeva,KAAKua,aAAa9X,KAAKzC,MAG7C0C,UACE1C,KAAKwa,aAAapV,QAASpE,GAAOA,EAAG4B,iBAAiB,SAAU5C,KAAKua,eAGvEzX,aACE9C,KAAKwa,aAAapV,QAASpE,GAAOA,EAAG+B,oBAAoB,SAAU/C,KAAKua,eAG1EA,aAAa5Y,GACX,IAAI8Y,EAAeza,KAAKwa,aAAaE,OAAO,CAACC,EAAe3Z,IAAOA,EAAG2K,QAAUgP,EAAgB,EAAIA,EAAe,GAC/Gha,EAASgB,EAAMhB,OACf8Z,EAAeza,KAAKwL,UACtB7J,EAAMyK,iBACNzL,EAAOgL,SAAU,EACjB3L,KAAKkB,SAASP,EAAQ,UACtBX,KAAKkB,SAASP,EAAQ,8BAClBX,KAAK4a,iBACP5a,KAAK6a,YAAYzW,UAAYpE,KAAKiO,gBAGpCjO,KAAKkB,SAASP,EAAQ,+BAClBX,KAAK4a,iBACP5a,KAAK6a,YAAYzW,UAAY,MAnC5BkW,UAAU,CAAC,QAAS,SACpBA,SAAS,CAAClP,IAAKK,OAAQsC,QAAShJ,cCH5B+V,WAA6Bpb,EAexCqb,mBACE,YAAYC,wBAA0Bhb,KAAKib,kBAAoB,gBAGjEC,iBACE,YAAYC,mBAAqBnb,KAAKob,gBAAkB,YAG1D1Y,UACE1C,KAAKqb,iBAGPpQ,IAAItJ,SACFA,GAAAA,EAAOyK,iBAEP,MAAMkP,EAAUtb,KAAKub,eAAenX,UAAUoX,QAAQ,cAAexb,KAAKyb,cAC1Ezb,KAAK0b,aAAaC,mBAAmB3b,KAAKkb,WAAYI,GAGxDvQ,OAAOpJ,GACLA,EAAMyK,iBACN,MAAMwP,EAA+Bja,EAAMhB,OAAuBkb,YAAY7b,KAAK+a,gBACnF,GAAe,MAAXa,EACF,UAAUzN,oGAAoGnO,KAAK+a,gBAGrH,GAAkC,SAA9Ba,EAAQhU,QAAQkU,UAClBF,EAAQ7Q,aACH,CACL6Q,EAAQlS,MAAMuM,QAAU,OACxB,IAAI8F,EAAeH,EAAQI,cAAc,2BACzC,GAAoB,MAAhBD,EACF,UAAU5N,8HAGZ4N,EAAavR,MAAQ,KAIzBiR,aACE,WAAWQ,MAAOC,UAAUzb,WAAa0b,KAAKC,SAAS3b,WAAW4b,MAAM,GAGlEhB,iBAGN,GAFerb,KAAKub,eAAenX,UAEtBkY,QAAQ,cACnB,UAAUnO,MAAM,qIA7Db2M,WAAU,CAAC,SAAU,YACrBA,UAAS,CACdI,WAAYnW,OACZgW,aAAchW,cCJLwX,WAAkC7c,EAU7C6C,aACEvC,KAAKwc,oBAAsBxc,KAAKwc,oBAAoB/Z,KAAKzC,MAG3D0C,UACE1C,KAAKyc,gBAAgBrX,QAASpE,GAAOA,EAAG4B,iBAAiB,SAAU5C,KAAKwc,sBAG1E1Z,aACE9C,KAAKyc,gBAAgBrX,QAASpE,GAAOA,EAAG+B,oBAAoB,SAAU/C,KAAKwc,sBAGrEE,oBACN,IAAIC,EAAS,IAAIC,IAAI5c,KAAKyc,gBAAgBpF,IAAIrW,GAAMA,EAAGwJ,QACvD,OAAOmS,EAAOE,IAAI,KAAsB,GAAfF,EAAOG,KAG1BN,sBACN,IAAIvb,EAAUjB,KAAKgB,GACfhB,KAAK0c,qBACP1c,KAAKkB,SAASD,EAAS,0BACnBjB,KAAK4K,eACP5K,KAAKyc,gBAAgBrX,QAAQpE,GAAMA,EAAG8J,UAAUC,OAAO/K,KAAKgL,eAG9DhL,KAAKkB,SAASD,EAAS,6BACnBjB,KAAK4K,eACP5K,KAAKyc,gBAAgBrX,QAAQpE,GAAMA,EAAG8J,UAAUG,IAAIjL,KAAKgL,eAnCxDuR,WAAU,CAAC,YACXA,WAAU,CAAC,eCHPQ,WAA+Brd,EAM1Csd,KAAKrb,SACHA,GAAAA,EAAOyK,iBACPpM,KAAKid,eAAenX,KAAO,OAG7BoX,KAAKvb,SACHA,GAAAA,EAAOyK,iBACPpM,KAAKid,eAAenX,KAAO,WAG7BkG,OAAOrK,SACLA,GAAAA,EAAOyK,iBAC0B,aAA7BpM,KAAKid,eAAenX,KACtB9F,KAAKgd,OAELhd,KAAKkd,QAnBFH,WAAU,CAAC,kBCFPI,WAA6Bzd,EAQxCuF,eACE,YAAYZ,iBAAmBrE,KAAKwE,oCAAsCxE,KAAKoC,eAGjFoZ,QAAQ7Z,GACN,MAAO+R,EAAM0J,EAAQC,GAAO1b,EAAMD,OAClC,GAAIgS,aAAgB4J,KAAM,CACxB,IAAIC,EAAc7J,EAAKsI,cAAchc,KAAKiF,UAE1C,GAAmB,MAAfsY,EACF,UAAUpP,sDAAsDnO,KAAKoC,kDAGvE,IAAIob,EAAaxd,KAAKgB,GAAGwc,WACzB,GAAkB,MAAdA,EACF,UAAUrP,MAAM,sEAElBqP,EAAWC,aAAaF,EAAavd,KAAKgB,SAE1CkB,QAAQpB,IAAI,UAAW4S,IA1BpByJ,WAAU,GAEVA,UAAS,CAAClY,SAAUF,cCIhB2Y,WAA0Che,EAErD6C,aACEvC,KAAK2d,gBAAkB3d,KAAK2d,gBAAgBlb,KAAKzC,MAGnD0C,UACEC,OAAOC,iBAAiB,UAAW5C,KAAK2d,iBAG1C7a,aACEH,OAAOI,oBAAoB,UAAW/C,KAAK2d,iBAG7CA,gBAAgB5P,GACd,IAAI2F,EAAO3F,EAAQ2F,KACfA,EAAKkK,eAAe,SAAyB,gBAAdlK,EAAKhO,MAA0BgO,EAAKkK,eAAe,WACpF5d,KAAK2J,OAAO+J,EAAK5K,QAIrBa,OAAOb,GACJ9I,KAAKgB,GAAyB0I,MAAMZ,UAAYA,aAKxC+U,WAAuCne,EAOlDgD,U7B1ByB,IAAC6C,EAAYnE,EAChCkG,E6B2BA3E,OAAOrC,OAASqC,OAAOmb,MACzBrV,EAAgBzI,M7B7BkBoB,E6B8BhB,G7B3Ba,QAAhCkG,GAHuB/B,E6B8BVvF,M7B5BiBJ,YACbme,iBAA8B,IAAPzW,GAAyBA,EAAGlC,QAAS4Y,IAI1E,GAHoB,iBAATA,IACPzY,EAAWyY,GAAQ/U,EAAS1D,EAAWyY,GAAO5c,MAAAA,OAAyC,EAASA,EAAQ+H,OAExF,iBAAT6U,EAAmB,CAC1B,MAAMtY,KAAEA,EAAIyD,KAAEA,GAAS6U,EACvB,IAAKtY,EACD,OACJH,EAAWG,GAAQuD,EAAS1D,EAAWG,GAAOyD,IAAS/H,MAAAA,OAAyC,EAASA,EAAQ+H,U6BoBvHnJ,KAAKie,cAMTnU,aAAajB,GACX7I,KAAKie,aAGPA,aACE,IAAIpV,EAAmC,CAACnD,KAAM,cAAeoD,OAAQ9I,KAAKke,aAC1Evb,OAAOwb,OAAOC,YACZvV,EACA,KAIJqV,YACE,MAAMvF,EAAO9V,SAAS8V,KAChB1U,EAAOpB,SAAS+U,gBAGtB,OAAOuE,KAAK/Q,IAAIuN,EAAKxO,aAAcwO,EAAK1O,aAAchG,EAAKiG,aAAcjG,EAAKkG,aAAclG,EAAKgG,eAjC5F4T,aAAY,CAAC,oBCnCTQ,WAA4B3e,EAEvC4e,eACEte,KAAKue,QAAQve,KAAKgB,IAGpBud,QAAQtd,aACNA,EAAQ2G,QAAQrC,qBAAatE,EAAQ2G,QAAQrC,qBAAYiZ,WAAW,IAAIC,eAAgBze,KAAKoC,kBAAoB,KAAM,MAAO,GAC5F,IAA9BnB,EAAQ2G,QAAQrC,mBAEXtE,EAAQ2G,QAAQrC,WAGzB,IAAImZ,EAAgC,IAAID,eAAgBze,KAAKoC,wBAA0B,KACvFnB,EAAQ2G,QAAQjH,iBAASM,EAAQ2G,QAAQjH,iBAAQ6d,WAAWE,EAA+B,MAAO,UAC3Fzd,EAAQ2G,QAAQ+W,KAAa3e,KAAKoC,sBACX,IAA1BnB,EAAQ2G,QAAQjH,eAEXM,EAAQ2G,QAAQjH,OAGzBM,EAAQ2G,QAAQgX,iBAAS3d,EAAQ2G,QAAQjH,iBAAQ6d,WAAWE,EAA+B,MAAO,UAC3Fzd,EAAQ2G,QAAQ+W,KAAa3e,KAAKoC,sBACX,IAA1BnB,EAAQ2G,QAAQgX,eAEX3d,EAAQ2G,QAAQgX,OAIzB,IAAIjC,EAAS3c,KAAKJ,YAAY+c,OAC1BA,GACFrb,OAAO6S,KAAKwI,GAAQvX,QAAQkS,UAAcrW,EAAQ2G,QAAQ+W,KAAa3e,KAAKoC,cAAckV,aAI5F,IAAIuH,EAAU7e,KAAKJ,YAAYif,QAC3BA,GACFvd,OAAO6S,KAAK0K,GAASzZ,QAAQkS,UAAcrW,EAAQ2G,QAAQ+W,KAAa3e,KAAKoC,cAAckV,oBCrCpFwH,WAAkCT,GAe7C3b,UACEmH,sBAAsB,KAEpBiO,EACE9X,KAAKgB,GACL,CACE+W,SAAU/X,KAAK+e,iBAAmB/e,KAAKgf,cAAgB,SACvDhH,MAAOhY,KAAKif,cAAgBjf,KAAKkf,WAAa,SAC9CjH,OAAQjY,KAAKmf,eAAiBnf,KAAKof,YAAc,WAEnDza,MAAM,IAAM3E,KAAKgB,GAAGqX,kBACtBrY,KAAKse,kBAxBFQ,UAAS,CACd/G,SAAUhT,OACViT,MAAOjT,OACPkT,OAAQlT,cCLCsa,WAAiC3f,EAS5C4f,OAAO3d,GAEL,IACIhB,QAFJgB,GAAAA,EAAOyK,iBAILzL,EADU,aAFDX,KAAKuf,aAAevf,KAAKwf,UAAY,YAGrC3c,SAAS8V,KAETL,EAAgBtY,KAAKgB,IAElB,MAAVL,GAGJmX,EAAgBnX,EAAS,CAACoX,SAAU,SAAUC,MAAO,QAAQrT,MAAM,IAAMhE,EAAQ0X,gBAAe,KAnB3FgH,UAAS,CACdI,KAAM1a,cCHG2a,WAA2BhgB,EAiBtC4f,SACE,IAAI3e,EAASkC,SAASmZ,cAAchc,KAAKwE,eACpC7D,EAKLmX,EACEnX,EACA,CACEoX,SAAU/X,KAAK+e,iBAAmB/e,KAAKgf,cAAgB,SACvDhH,MAAOhY,KAAKif,cAAgBjf,KAAKkf,WAAa,SAC9CjH,OAAQjY,KAAKmf,eAAiBnf,KAAKof,YAAc,WAEnDza,MAAM,IAAMhE,EAAQ0X,kBAXpBnW,QAAQyd,mCAAmC3f,KAAKwE,mBAlB7Ckb,UAAS,CACdza,SAAUF,OACVgT,SAAUhT,OACViT,MAAOjT,OACPkT,OAAQlT,cCNC6a,WAA8BlgB,EASzC4f,OAAO3d,GAEL,IACIhB,QAFJgB,GAAAA,EAAOyK,iBAILzL,EADU,aAFDX,KAAKuf,aAAevf,KAAKwf,UAAY,YAGrC3c,SAAS8V,KAETL,EAAgBtY,KAAKgB,IAElB,MAAVL,GAGJmX,EAAgBnX,EAAS,CAACoX,SAAU,SAAUC,MAAO,UAAUrT,MAAM,IAAMhE,EAAQ0X,gBAAe,KAnB7FuH,UAAS,CACdH,KAAM1a,cCJG8a,WAA+BngB,EAA5CE,kCAKEI,aAAuD,KAEvD0C,UACEmH,sBAAsB,KAEpB7J,KAAKmS,QAAU5I,WAAW,IAAMvJ,KAAKgB,GAAG+J,SAA8B,IAApB/K,KAAK8f,gBAI3Dhd,aACM9C,KAAKmS,SACP7I,aAAatJ,KAAKmS,UAdf0N,UAAS,CAACE,QAAStU,cCFfuU,WAAyBtgB,EAAtCE,kCAYEI,mBAAuC,KAEvCigB,YACE,YAAYV,aAAevf,KAAKwf,UAAY,MAG9CU,qBAGE,GAA2B,OAAvBlgB,KAAKmgB,cAKT,OADAngB,KAAKmgB,cAAgBtd,SAASsB,cAAc,OACpCnE,KAAKigB,OACX,IAAK,MACHjgB,KAAKgB,GAAGkZ,sBAAsB,cAAela,KAAKmgB,eAClD,MACF,IAAK,SACHngB,KAAKgB,GAAGkZ,sBAAsB,WAAYla,KAAKmgB,gBAKrDzd,UACE,IAAIzB,EAAUjB,KAAKgB,GACnBhB,KAAKkgB,qBAEY,IAAI5Z,qBAAqBC,IACxCA,EAAQnB,QAAQoB,IACVA,EAAM7F,SAAWX,KAAKmgB,gBAGM,IAA5B3Z,EAAM4Z,kBACRnf,EAAQ6J,UAAUG,IAAIjL,KAAKqgB,cAAgBrgB,KAAKsgB,WAAa,SACxB,IAA5B9Z,EAAM4Z,mBACfnf,EAAQ6J,UAAUC,OAAO/K,KAAKqgB,cAAgBrgB,KAAKsgB,WAAa,aAInE,CACDpJ,UAAW,CAAC,EAAG,KAERlQ,QAAQhH,KAAKmgB,gBArDjBH,WAAU,CAAC,SACXA,UAAS,CACdP,KAAM1a,cCJGwb,WAA2BlC,GAUtC3b,UACE,IAAK1C,KAAKwgB,eACR,UAAUrS,MAAM,oCAGlBtE,sBAAsB,KAChB7J,KAAKygB,mBAAqBzgB,KAAK0gB,gBACjC1gB,KAAK2gB,YAKXA,QAAQhf,SACNA,GAAAA,EAAOyK,iBACP,IAAInL,EAAUjB,KAAKgB,GACf4f,EAAc/d,SAASmZ,cAAchc,KAAK6gB,aAE9C,GAAmB,MAAfD,EAEF,YADA5gB,KAAKkB,SAASD,EAAS,kBAIzB,IAAIkM,EAAOlM,EAAQ6f,WAAU,GAG7B,OAFA9gB,KAAKue,QAAQpR,GAELnN,KAAK+gB,aACX,IAAK,cACL,IAAK,YACL,IAAK,WACL,IAAK,aACHH,EAAYjF,mBAAmB3b,KAAK+gB,YAAa5T,EAAK6T,WACtD,MACF,IAAK,eACHJ,EAAYI,UAAY7T,EAAK6T,UAC7B,MACF,IAAK,eACHJ,EAAYxc,UAAY+I,EAAK6T,UAC7B,MACF,IAAK,UACHJ,EAAYjF,mBAAmB,aAAcxO,EAAK6T,WAClD,MACF,IAAK,SACHJ,EAAYjF,mBAAmB,YAAaxO,EAAK6T,WACjD,MACF,QACE,UAAU7S,MAAM,oCAGpBlN,EAAQ8J,UAxDHwV,UAAS,CAAC5f,OAAQoE,OAAQkc,OAAQlc,OAAQmc,UAAWrT,eCCjDsT,WAA8BzhB,EA4BzCgD,UACE,IAAK1C,KAAKohB,cACR,UAAUjT,MAAM,oDAGdnO,KAAKqhB,oBAAsBrhB,KAAKshB,qBzCHhB,EAAC/b,EAAYnE,EAAU,MAC1B,IAAI2G,EyCGV/H,KzCH+BoB,IyCGxCmgB,GAGEvhB,KAAKwhB,mBAAqBxhB,KAAKyhB,gB3CnCR,EAAClc,EAAYnE,EAAU,MAClD,MAAMgG,YAAEA,EAAWvF,cAAEA,EAAasF,OAAEA,EAAMxB,YAAEA,GAAgBrE,OAAOC,OAAO,GAAI0E,EAAgB7E,GACxFsgB,EAAW/f,IACb,MAAMwE,GAAiB/E,MAAAA,OAAyC,EAASA,EAAQH,UAAYsE,EAAWtE,QACxG,KAAIkF,EAAcwb,SAAShgB,EAAMhB,UFqBlC,SAA6BK,GAChC,MAAM4gB,EAAO5gB,EAAG6gB,wBACVC,EAAgBnf,OAAOiG,aAAe/F,SAAS+U,gBAAgB1N,aAC/D6X,EAAepf,OAAOgG,YAAc9F,SAAS+U,gBAAgBoK,YAGnE,OAFoBJ,EAAK9D,KAAOgE,GAAmBF,EAAK9D,IAAM8D,EAAK9Y,QAAW,GAC3D8Y,EAAKK,MAAQF,GAAkBH,EAAKK,KAAOL,EAAK5Y,OAAU,EE1B3BkZ,CAAoB/b,IAAkBiB,KAIhF7B,EAAW4c,cACX5c,EAAW4c,aAAaxgB,GAGxBE,GAAe,CACf,MAAMV,EAAYsE,EAAiB,gBAAiBF,EAAYI,GAC1Dyc,EAAoBvc,EAAc1E,EAAWQ,EAAO,CAAE4D,WAAAA,IAC5DY,EAActE,cAAcugB,KAe9Bhc,EAAuBb,EAAWzC,WAAWL,KAAK8C,GACxDjE,OAAOC,OAAOgE,EAAY,CACtB2B,aARAC,MAAAA,GAAgDA,EAAO/B,QAAQzD,IAC3DgB,OAAOI,oBAAoBpB,EAAO+f,GAAS,KAS3Ctb,OAfJe,MAAAA,GAAgDA,EAAO/B,QAAQzD,IAC3DgB,OAAOC,iBAAiBjB,EAAO+f,GAAS,M2CgB9CW,CAAgBriB,MAGlB6J,sBAAsB,KAChB7J,KAAKsiB,iBAELtiB,KAAKuiB,cAAcnd,QADK,OAAtBpF,KAAKwiB,aACqB7hB,GAAWX,KAAKyiB,UAAU9hB,GAE1BA,GAAWX,KAAK0iB,WAAW/hB,MAM/DwhB,eACEniB,KAAKuiB,cAAcnd,QAASzE,IACtBX,KAAK2iB,kBAAkBhiB,KACzBX,KAAK4iB,oBAAoBjiB,GACzBX,KAAK6iB,cAAcliB,MAKzBmiB,aACE,GAAI9iB,KAAKqhB,mBACP,OAAQrhB,KAAK+iB,iBACX,IAAK,KACH/iB,KAAKgjB,KACL,MACF,IAAK,MACHhjB,KAAKijB,MACL,MACF,IAAK,SACHjjB,KAAKgM,SAIX,MAAO,GAGTkX,aACE,GAAIljB,KAAKshB,mBACP,OAAQthB,KAAKmjB,iBACX,IAAK,KACHnjB,KAAKgjB,KACL,MACF,IAAK,MACHhjB,KAAKijB,MACL,MACF,IAAK,SACHjjB,KAAKgM,SAIX,MAAO,GAGTgX,GAAGrhB,GACD3B,KAAKuiB,cAAcnd,QAASzE,IAC1BX,KAAK4iB,oBAAoBjiB,GACzBX,KAAKyiB,UAAU9hB,KAInBsiB,IAAIthB,GACF3B,KAAKuiB,cAAcnd,QAASzE,IAC1BX,KAAK4iB,oBAAoBjiB,GACzBX,KAAK0iB,WAAW/hB,KAIpBqL,OAAOrK,GACL3B,KAAKuiB,cAAcnd,QAASzE,IAC1BX,KAAK4iB,oBAAoBjiB,GACzBX,KAAK6iB,cAAcliB,KAIfgiB,kBAAkB3hB,GACxB,MAA6B,QAAtBA,EAAG4G,QAAQwb,QAGZR,oBAAoB5hB,GACtBhB,KAAK2iB,kBAAkB3hB,UAClBA,EAAG4G,QAAQwb,QAElBpiB,EAAG4G,QAAQwb,QAAU,OAIjBP,cAAc7hB,GACNhB,KAAKqjB,WAAW5P,MAAM,KAC5BrO,QAASke,GAAUtiB,EAAG8J,UAAUkB,OAAOsX,IAGzCb,UAAUzhB,GACFhB,KAAKqjB,WAAW5P,MAAM,KAC5BrO,QAASke,GAAUtiB,EAAG8J,UAAUkB,OAAOsX,GAAO,IAGhDZ,WAAW1hB,GACHhB,KAAKqjB,WAAW5P,MAAM,KAC5BrO,QAASke,GAAUtiB,EAAG8J,UAAUkB,OAAOsX,GAAO,cCjJ1CC,GAAatiB,GAC3B,MAA2B,eAApBA,EAAQqM,SDMR6T,WAAU,CAAC,UACXA,UAAS,CACdqC,MAAOze,OACP+d,WAAY/d,OACZme,WAAYne,OACZ0e,UAAW5V,QACX6V,QAAS3e,cETA4e,WAA+BjkB,EAc1CsM,OAAOrK,SACLA,GAAAA,EAAOyK,iBACP,IACIwX,EADQ5jB,KAAK6jB,YACI9N,IACL,MAAZ6N,GAAoBA,IAAa5jB,KAAK8jB,UACxC9jB,KAAK+jB,UAEL/jB,KAAKgX,SAITgN,OAAOriB,SACLA,GAAAA,EAAOyK,iBACPpM,KAAK+jB,UAGP7S,MAAMvP,SACJA,GAAAA,EAAOyK,iBACPpM,KAAKgX,SAGC+M,UACN,IAAIE,EAAQjkB,KAAK6jB,YACb7jB,KAAKkkB,yBACPD,EAAM7f,UAAYpE,KAAKmkB,qBAEzBF,EAAMlO,IAAM/V,KAAK8jB,UAGX9M,SACN,IAAIiN,EAAQjkB,KAAK6jB,YACjBI,EAAMlO,IAAM,GACZkO,EAAM7f,UAAY,GAGZyf,YACN,IAAII,EAAQphB,SAASuhB,kBAAkBpkB,KAAKqkB,gBAC5C,GAAa,MAATJ,EACF,UAAU9V,uCAAuCnO,KAAKqkB,iBAExD,GAAKd,GAAaU,GAGhB,OAAOA,EAFP,UAAU9V,iCAAiCnO,KAAKqkB,iBAM5CP,UACN,IAAI7iB,EAAUjB,KAAKgB,GACnB,GAAIhB,KAAK6Y,YACP,YAAYC,YACHzL,EAAoBpM,GAC7B,OAAOA,EAAQ4R,KAEf,UAAU1E,MAAM,oCAlEbwV,UAAS,CACdW,QAASvf,OACTgR,IAAKhR,OACLwf,eAAgBxf,cCLPyf,WAAoC9kB,EAAjDE,kCAUEI,oBAA8D,KAE9DykB,WACE,aAAYC,cAAe1kB,KAAK2kB,UAGlCpiB,aACEvC,KAAKiM,QAAUjM,KAAKiM,QAAQxJ,KAAKzC,MAGnC0C,UACE,IAAIzB,EAAUjB,KAAKgB,GACnB,IAAIuiB,GAAatiB,GAKf,UAAUkN,MAAM,iEAJhB,GAAMlN,EAAQ8U,IACZ,UAAU5H,MAAM,8DAKhBnO,KAAKykB,MACP5a,sBAAsB,IAAM7J,KAAKyR,eAAiBlI,WAAW,IAAMvJ,KAAKiM,UAAWjM,KAAK4kB,gBAI5F9hB,aACM9C,KAAKyR,gBACPnI,aAAatJ,KAAKyR,gBAItBxF,QAAQtK,SACNA,GAAAA,EAAOyK,iBACP,IAAInL,EAAUjB,KAAKgB,GACnBC,EAAQ8U,IAAM9U,EAAQ8U,KAzCjByO,UAAS,CACdK,SAAUpZ,OACVgZ,KAAM5W,eCNGiX,WAA4BplB,EAevC6C,aACEvC,KAAK+kB,gBAAkB/kB,KAAK+kB,gBAAgBtiB,KAAKzC,MAGnD0C,UACE1C,KAAK+kB,kBACL/kB,KAAKsK,YAAY1H,iBAAiB,QAAS5C,KAAK+kB,iBAGlDjiB,aACE9C,KAAKsK,YAAYvH,oBAAoB,QAAS/C,KAAK+kB,iBAGrDA,kBACE,IAAIC,EAAY,EAEZC,EADgBjlB,KAAKsK,YAAYE,MACT0a,MAAM,QAClCF,EAAaC,GAAWA,EAAQxa,QAAW,EAC3CzK,KAAK0K,aAAaC,UAAYqa,EAAUvkB,WACpCT,KAAK4K,gBACH5K,KAAKmlB,aAAaH,GACpBhlB,KAAK0K,aAAaI,UAAUC,OAAO/K,KAAKgL,YAExChL,KAAK0K,aAAaI,UAAUG,IAAIjL,KAAKgL,aAK3Cma,aAAaja,GACX,IAAIC,EAAM,EACNC,EAAM,MAUV,OARIpL,KAAKqL,cACPF,EAAMnL,KAAKsL,UAGTtL,KAAKuL,cACPH,EAAMpL,KAAKwL,UAGNN,GAASC,GAAOD,GAASE,GArD3B0Z,WAAU,CAAC,QAAS,UACpBA,UAAS,CAAC3Z,IAAKM,OAAQL,IAAKK,QAC5BqZ,WAAU,CAAC"}