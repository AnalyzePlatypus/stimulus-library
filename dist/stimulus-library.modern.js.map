{"version":3,"file":"stimulus-library.modern.js","sources":["../src/base_controller.ts","../src/async_block_controller.ts","../src/auto_submit_form_controller.ts","../node_modules/stimulus-use/dist/support/index.js","../node_modules/stimulus-use/dist/use-intersection/use-intersection.js","../node_modules/stimulus-use/dist/use-click-outside/use-click-outside.js","../node_modules/stimulus-use/dist/stimulus_use.js","../node_modules/stimulus-use/dist/use-hover/use-hover.js","../node_modules/stimulus-use/dist/use-mutation/use-mutation.js","../node_modules/stimulus-use/dist/use-window-resize/use-window-resize.js","../node_modules/stimulus-use/dist/use-debounce/use-debounce.js","../src/autosize_controller.ts","../src/char_count_controller.ts","../src/checkbox_select_all_controller.ts","../src/clipboard_controller.ts","../src/confirm_navigation_controller.ts","../src/debug_controller.ts","../src/detect_dirty_controller.ts","../src/disable_inputs_controller.ts","../src/dismissable_controller.ts","../src/empty_dom_controller.ts","../src/enable_inputs_controller.ts","../src/fallback_image_controller.ts","../src/utilities/elements.ts","../src/form_save_controller.ts","../src/lazy_block_controller.ts","../src/limited_selection_checkboxes_controller.ts","../src/nested_form_controller.ts","../src/password_confirm_controller.ts","../src/password_peek_controller.ts","../src/responsive_iframe_controller.ts","../src/utilities/ephemeral_controller.ts","../src/utilities/scroll.ts","../src/scroll_into_focus_controller.ts","../src/scroll_to_bottom_controller.ts","../src/scroll_to_controller.ts","../src/scroll_to_top_controller.ts","../src/self_destruct_controller.ts","../src/teleport_controller.ts","../src/toggle_class_controller.ts","../src/turbo_frame_rc_controller.ts","../src/utilities/turbo.ts","../src/word_count_controller.ts"],"sourcesContent":["import {Context, Controller} from \"stimulus\";\r\n\r\nexport class BaseController extends Controller {\r\n\r\n  constructor(context: Context) {\r\n    super(context);\r\n    return new Proxy(this, {\r\n      get: (obj, prop) => {\r\n        let returnVal = Reflect.get(obj, prop);\r\n        let self = this;\r\n        if (logProperty(prop.toString())) {\r\n          if (typeof returnVal == \"function\") {\r\n            return new Proxy(returnVal, {\r\n              apply(target: any, thisArg: any, argArray?: any): any {\r\n                self.log(prop.toString(), {\r\n                  args: argArray,\r\n                });\r\n                return Reflect.apply(target, thisArg, argArray);\r\n              },\r\n            });\r\n          } else {\r\n            this.log(prop.toString());\r\n          }\r\n        }\r\n        return returnVal;\r\n      },\r\n    });\r\n  }\r\n\r\n  dispatch(element: HTMLElement, eventName: string, options: CustomEventInit = {bubbles: true, cancelable: true, detail: {target: element}}) {\r\n    let event = new CustomEvent(eventName, options);\r\n    element.dispatchEvent(event);\r\n  }\r\n\r\n  log(functionName: string, args: {} = {}): void {\r\n    // @ts-ignore\r\n    if (!this.application.debug) {\r\n      return;\r\n    }\r\n    let logger = console;\r\n    logger.groupCollapsed(`%c${this.identifier} %c#${functionName}`, \"color: #3B82F6\", \"color: unset\");\r\n    logger.log({\r\n      element: this.element,\r\n      ...args,\r\n    });\r\n    logger.groupEnd();\r\n  }\r\n\r\n}\r\n\r\nfunction logProperty(prop: string): boolean {\r\n  switch (prop) {\r\n    case \"application\":\r\n    case \"element\":\r\n    case \"constructor\":\r\n    case \"initialize\":\r\n    case \"log\":\r\n    case \"data\":\r\n    case \"valueDescriptorMap\":\r\n    case \"identifier\":\r\n      return false;\r\n  }\r\n\r\n  if (/^_.*?$/.test(prop)) {\r\n    return false;\r\n  }\r\n  if (/^.*?Target(s)?$/.test(prop)) {\r\n    return false;\r\n  }\r\n  if (/^.*?Value$/.test(prop)) {\r\n    return false;\r\n  }\r\n  if (/^.*?ValueChanged$/.test(prop)) {\r\n    return false;\r\n  }\r\n  if (/^.*?Class$/.test(prop)) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n","import {BaseController} from \"./base_controller\";\n\nexport class AsyncBlockController extends BaseController {\n  static targets = [\"replace\"];\n  static values = {endpoint: String};\n\n  declare readonly replaceTarget: HTMLElement;\n  declare readonly hasReplaceTarget: boolean;\n  declare readonly endpointValue: string;\n\n\n  // This is a simple controller to load a block of content when the page loads.\n  // It should be used to give a quick initial response before calling out to an\n  // an AJAX endpoint to do some expensive work.\n  connect() {\n    this.loadContent();\n  }\n\n  loadContent() {\n    let el = (this.hasReplaceTarget ? this.replaceTarget : this.element) as HTMLElement;\n    fetch(this.endpointValue)\n    .then((response) => response.text())\n    .then((html) => {\n      let newEl = document.createElement(\"div\");\n      newEl.innerHTML = html;\n      el.replaceWith(newEl);\n\n      // Trigger event to show block has loaded\n      let event = new CustomEvent(\"ajax:success\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    })\n    .catch(err => {\n      el.replaceWith(\"Sorry, this content failed to load\");\n\n      let event = new CustomEvent(\"ajax:error\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    })\n    .finally(() => {\n      let event = new CustomEvent(\"ajax:complete\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    });\n  }\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class AutoSubmitFormController extends BaseController {\n\n  private boundHandler = this.handler.bind(this);\n\n  connect() {\n    (this.element as HTMLElement).querySelectorAll(\"input, select, textarea\").forEach(el => el.addEventListener(\"change\", this.boundHandler));\n  }\n\n  disconnect() {\n    (this.element as HTMLElement).querySelectorAll(\"input, select, textarea\").forEach(el => el.removeEventListener(\"change\", this.boundHandler));\n  }\n\n  private handler(e: Event) {\n    // this.element.submit()\n    // Moved to this to support remote forms and CSRF properly\n    this.element.dispatchEvent(\n      new CustomEvent(\"submit\", {\n        bubbles: true,\n        cancelable: true,\n      }),\n    );\n  }\n}\n","export const method = (controller, methodName) => {\n    const method = controller[methodName];\n    if (typeof method == 'function') {\n        return method;\n    }\n    else {\n        return (...args) => { };\n    }\n};\nexport const composeEventName = (name, controller, eventPrefix) => {\n    let composedName = name;\n    if (eventPrefix === true) {\n        composedName = `${controller.identifier}:${name}`;\n    }\n    else if (typeof eventPrefix === 'string') {\n        composedName = `${eventPrefix}:${name}`;\n    }\n    return composedName;\n};\nexport const extendedEvent = (type, event, detail) => {\n    const { bubbles, cancelable, composed } = event || { bubbles: true, cancelable: true, composed: true };\n    if (event) {\n        Object.assign(detail, { originalEvent: event });\n    }\n    const customEvent = new CustomEvent(type, {\n        bubbles,\n        cancelable,\n        composed,\n        detail,\n    });\n    return customEvent;\n};\nexport function isElementInViewport(el) {\n    const rect = el.getBoundingClientRect();\n    const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n    const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n    const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n    const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) >= 0);\n    return (vertInView && horInView);\n}\n//# sourceMappingURL=index.js.map","import { method, extendedEvent, composeEventName } from '../support/index';\nconst defaultOptions = {\n    dispatchEvent: true,\n    eventPrefix: true,\n};\nexport const useIntersection = (controller, options = {}) => {\n    const { dispatchEvent, eventPrefix } = Object.assign({}, defaultOptions, options);\n    const targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n    const callback = (entries) => {\n        const [entry] = entries;\n        if (entry.isIntersecting) {\n            dispatchAppear(entry);\n        }\n        else if (controller.isVisible) {\n            dispatchDisappear(entry);\n        }\n    };\n    const dispatchAppear = (entry) => {\n        controller.isVisible = true;\n        method(controller, 'appear').call(controller, entry);\n        // emit a custom \"appear\" event\n        if (dispatchEvent) {\n            const eventName = composeEventName('appear', controller, eventPrefix);\n            const appearEvent = extendedEvent(eventName, null, { controller, entry });\n            targetElement.dispatchEvent(appearEvent);\n        }\n    };\n    const dispatchDisappear = (entry) => {\n        controller.isVisible = false;\n        method(controller, 'disappear').call(controller, entry);\n        // emit a custom \"disappear\" event\n        if (dispatchEvent) {\n            const eventName = composeEventName('disappear', controller, eventPrefix);\n            const disappearEvent = extendedEvent(eventName, null, { controller, entry });\n            targetElement.dispatchEvent(disappearEvent);\n        }\n    };\n    // keep a copy of the current disconnect() function of the controller\n    // to support composing several behaviors\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    const observer = new IntersectionObserver(callback, options);\n    const observe = () => {\n        observer.observe(targetElement);\n    };\n    const unobserve = () => {\n        observer.unobserve(targetElement);\n    };\n    Object.assign(controller, {\n        isVisible: false,\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-intersection.js.map","import { composeEventName, extendedEvent, isElementInViewport } from '../support/index';\nconst defaultOptions = {\n    events: ['click', 'touchend'],\n    onlyVisible: true,\n    dispatchEvent: true,\n    eventPrefix: true,\n};\nexport const useClickOutside = (controller, options = {}) => {\n    const { onlyVisible, dispatchEvent, events, eventPrefix } = Object.assign({}, defaultOptions, options);\n    const onEvent = (event) => {\n        const targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        if (targetElement.contains(event.target) || (!isElementInViewport(targetElement) && onlyVisible)) {\n            return;\n        }\n        // call the clickOutside method of the Stimulus controller\n        if (controller.clickOutside) {\n            controller.clickOutside(event);\n        }\n        // emit a custom event\n        if (dispatchEvent) {\n            const eventName = composeEventName('click:outside', controller, eventPrefix);\n            const clickOutsideEvent = extendedEvent(eventName, event, { controller });\n            targetElement.dispatchEvent(clickOutsideEvent);\n        }\n    };\n    const observe = () => {\n        events === null || events === void 0 ? void 0 : events.forEach(event => {\n            window.addEventListener(event, onEvent, false);\n        });\n    };\n    const unobserve = () => {\n        events === null || events === void 0 ? void 0 : events.forEach(event => {\n            window.removeEventListener(event, onEvent, false);\n        });\n    };\n    // keep a copy of the current disconnect() function of the controller\n    // to support composing several behaviors\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    Object.assign(controller, {\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-click-outside.js.map","const defaultOptions = {\n    debug: false,\n    logger: console\n};\nexport class StimulusUse {\n    constructor(controller, options = {}) {\n        var _a, _b, _c;\n        this.log = (functionName, args) => {\n            if (!this.debug)\n                return;\n            this.logger.groupCollapsed(`%c${this.controller.identifier} %c#${functionName}`, 'color: #3B82F6', 'color: unset');\n            this.logger.log(Object.assign({ controllerId: this.controllerId }, args));\n            this.logger.groupEnd();\n        };\n        this.debug = (_b = (_a = options === null || options === void 0 ? void 0 : options.debug) !== null && _a !== void 0 ? _a : controller.application.stimulusUseDebug) !== null && _b !== void 0 ? _b : defaultOptions.debug;\n        this.logger = (_c = options === null || options === void 0 ? void 0 : options.logger) !== null && _c !== void 0 ? _c : defaultOptions.logger;\n        this.controller = controller;\n        this.controllerId = controller.element.id || controller.element.dataset.id;\n        // make copies of lifecycle functions\n        this.controllerInitialize = controller.initialize.bind(controller);\n        this.controllerConnect = controller.connect.bind(controller);\n        this.controllerDisconnect = controller.disconnect.bind(controller);\n    }\n}\n//# sourceMappingURL=stimulus_use.js.map","import { StimulusUse } from '../stimulus_use';\nimport { method } from '../support/index';\nexport class UseHover extends StimulusUse {\n    constructor(controller, options = {}) {\n        super(controller, options);\n        this.observe = () => {\n            this.targetElement.addEventListener('mouseenter', this.onEnter);\n            this.targetElement.addEventListener('mouseleave', this.onLeave);\n        };\n        this.unobserve = () => {\n            this.targetElement.removeEventListener('mouseenter', this.onEnter);\n            this.targetElement.removeEventListener('mouseleave', this.onLeave);\n        };\n        this.onEnter = () => {\n            method(this.controller, 'mouseEnter').call(this.controller);\n            this.log('mouseEnter', { hover: true });\n        };\n        this.onLeave = () => {\n            method(this.controller, 'mouseLeave').call(this.controller);\n            this.log('mouseLeave', { hover: false });\n        };\n        this.targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        this.controller = controller;\n        this.enhanceController();\n        this.observe();\n    }\n    enhanceController() {\n        const controllerDisconnect = this.controller.disconnect.bind(this.controller);\n        const disconnect = () => {\n            this.unobserve();\n            controllerDisconnect();\n        };\n        Object.assign(this.controller, { disconnect });\n    }\n}\nexport const useHover = (controller, options = {}) => {\n    const observer = new UseHover(controller, options);\n    return [observer.observe, observer.unobserve];\n};\n//# sourceMappingURL=use-hover.js.map","import { StimulusUse } from '../stimulus_use';\nimport { method } from '../support/index';\nexport class UseMutation extends StimulusUse {\n    constructor(controller, options = {}) {\n        super(controller, options);\n        this.observe = () => {\n            try {\n                this.observer.observe(this.targetElement, this.options);\n            }\n            catch (error) {\n                this.controller.application.handleError(error, \"At a minimum, one of childList, attributes, and/or characterData must be true\", {});\n            }\n        };\n        this.unobserve = () => {\n            this.observer.disconnect();\n        };\n        this.mutation = (entries) => {\n            method(this.controller, 'mutate').call(this.controller, entries);\n            this.log('mutate', { entries });\n        };\n        this.targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        this.controller = controller;\n        this.options = options;\n        this.observer = new MutationObserver(this.mutation);\n        this.enhanceController();\n        this.observe();\n    }\n    enhanceController() {\n        const controllerDisconnect = this.controller.disconnect.bind(this.controller);\n        const disconnect = () => {\n            this.unobserve();\n            controllerDisconnect();\n        };\n        Object.assign(this.controller, { disconnect });\n    }\n}\nexport const useMutation = (controller, options = {}) => {\n    const observer = new UseMutation(controller, options);\n    return [observer.observe, observer.unobserve];\n};\n//# sourceMappingURL=use-mutation.js.map","import { method } from '../support/index';\nexport const useWindowResize = (controller) => {\n    const callback = (event) => {\n        const { innerWidth, innerHeight } = window;\n        const payload = {\n            height: innerHeight || Infinity,\n            width: innerWidth || Infinity,\n            event\n        };\n        method(controller, 'windowResize').call(controller, payload);\n    };\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    const observe = () => {\n        window.addEventListener('resize', callback);\n        callback();\n    };\n    const unobserve = () => {\n        window.removeEventListener('resize', callback);\n    };\n    Object.assign(controller, {\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-window-resize.js.map","import { Controller } from 'stimulus';\nclass DebounceController extends Controller {\n}\nDebounceController.debounces = [];\nconst defaultWait = 200;\nconst debounce = (fn, wait = defaultWait) => {\n    let timeoutId = null;\n    return function () {\n        const args = arguments;\n        const context = this;\n        const callback = () => fn.apply(context, args);\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(callback, wait);\n    };\n};\nexport const useDebounce = (controller, options) => {\n    var _a;\n    const constructor = controller.constructor;\n    (_a = constructor.debounces) === null || _a === void 0 ? void 0 : _a.forEach((func) => {\n        if (typeof func === \"string\") {\n            controller[func] = debounce(controller[func], options === null || options === void 0 ? void 0 : options.wait);\n        }\n        if (typeof func === \"object\") {\n            const { name, wait } = func;\n            if (!name)\n                return;\n            controller[name] = debounce(controller[name], wait || (options === null || options === void 0 ? void 0 : options.wait));\n        }\n    });\n};\n//# sourceMappingURL=use-debounce.js.map","import {useWindowResize} from \"stimulus-use\";\nimport {BaseController} from \"./base_controller\";\n\nexport class AutosizeController extends BaseController {\n\n  private boundHandler = this.handler.bind(this);\n\n  connect() {\n    let target = this.element as HTMLTextAreaElement;\n    target.style.resize = \"none\";\n    target.style.boxSizing = \"border-box\";\n    target.addEventListener(\"input\", this.boundHandler);\n    target.addEventListener(\"focus\", this.boundHandler);\n    useWindowResize(this);\n    requestAnimationFrame(this.boundHandler);\n  }\n\n  windowResize() {\n    this.handler();\n  }\n\n  private handler() {\n    this.autosize(this.element as HTMLTextAreaElement);\n  };\n\n  private autosize(element: HTMLTextAreaElement) {\n    let offset = element.offsetHeight - element.clientHeight;\n    element.style.height = \"auto\";\n    element.style.height = element.scrollHeight + offset + \"px\";\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class CharCountController extends BaseController {\r\n\r\n  static targets = [\"input\", \"output\"];\r\n  static values = {min: Number, max: Number};\r\n  static classes = [\"error\"];\r\n\r\n  declare readonly inputTarget: HTMLInputElement | HTMLTextAreaElement;\r\n  declare readonly outputTarget: HTMLElement;\r\n  declare minValue: number;\r\n  declare hasMinValue: boolean;\r\n  declare maxValue: number;\r\n  declare hasMaxValue: boolean;\r\n  declare errorClass: string;\r\n  declare hasErrorClass: boolean;\r\n\r\n  boundHandler = this.updateCharCount.bind(this);\r\n\r\n  connect() {\r\n    this.updateCharCount();\r\n    this.inputTarget.addEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  disconnect() {\r\n    this.inputTarget.removeEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  updateCharCount() {\r\n    let charCount = this.inputTarget.value.length;\r\n    this.outputTarget.innerText = charCount.toString();\r\n    if (this.hasErrorClass) {\r\n      if (this.isValidCount(charCount)) {\r\n        this.outputTarget.classList.remove(this.errorClass);\r\n      } else {\r\n        this.outputTarget.classList.add(this.errorClass);\r\n      }\r\n    }\r\n  }\r\n\r\n  isValidCount(count: number) {\r\n    let min = 0;\r\n    let max = 99999;\r\n\r\n    if (this.hasMinValue) {\r\n      min = this.minValue;\r\n    }\r\n\r\n    if (this.hasMaxValue) {\r\n      max = this.maxValue;\r\n    }\r\n\r\n    return count >= min && count <= max;\r\n  }\r\n\r\n}\r\n","import {BaseController} from './base_controller';\r\n\r\nexport class CheckboxSelectAllController extends BaseController {\r\n  static targets = ['selectAll', 'checkbox'];\r\n\r\n  declare readonly hasCheckboxAllTarget: boolean;\r\n  declare readonly selectAllTarget: HTMLInputElement;\r\n  declare readonly checkboxTargets: HTMLInputElement[];\r\n\r\n  private get checked() {\r\n    return this.checkboxTargets.filter(checkbox => checkbox.checked);\r\n  }\r\n\r\n  private get unchecked() {\r\n    return this.checkboxTargets.filter(checkbox => !checkbox.checked);\r\n  }\r\n\r\n  initialize() {\r\n    this.toggle = this.toggle.bind(this);\r\n    this.refresh = this.refresh.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      if (!this.hasCheckboxAllTarget) {\r\n        return;\r\n      }\r\n\r\n      this.selectAllTarget.addEventListener('change', this.toggle);\r\n      this.checkboxTargets.forEach(checkbox => checkbox.addEventListener('change', this.refresh));\r\n      this.refresh();\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    if (!this.hasCheckboxAllTarget) {\r\n      return;\r\n    }\r\n\r\n    this.selectAllTarget.removeEventListener('change', this.toggle);\r\n    this.checkboxTargets.forEach((checkbox) => checkbox.removeEventListener('change', this.refresh));\r\n  }\r\n\r\n  private toggle(event: Event) {\r\n    event.preventDefault();\r\n    let target = event.target as HTMLInputElement;\r\n    this.checkboxTargets.forEach((checkbox) => checkbox.checked = target.checked);\r\n  }\r\n\r\n  private refresh() {\r\n    const checkboxesCount = this.checkboxTargets.length;\r\n    const checkboxesCheckedCount = this.checked.length;\r\n\r\n    this.selectAllTarget.checked = checkboxesCheckedCount > 0;\r\n    this.selectAllTarget.indeterminate = checkboxesCheckedCount > 0 && checkboxesCheckedCount < checkboxesCount;\r\n  }\r\n}","import {BaseController} from \"./base_controller\";\r\n\r\nexport class ClipboardController extends BaseController {\r\n\r\n  static targets = [\"button\", \"copy\", \"fallback\"];\r\n  static values = {removeUnused: Boolean};\r\n\r\n  declare readonly sourceTarget: HTMLElement;\r\n  declare readonly copyTarget: HTMLElement;\r\n  declare readonly hasCopyTarget: boolean;\r\n  declare readonly fallbackTarget: HTMLElement;\r\n  declare readonly hasFallbackTarget: boolean;\r\n\r\n  declare readonly hasRemoveUnusedValue: boolean;\r\n  declare readonly removeUnusedValue: boolean;\r\n\r\n  supported = false;\r\n\r\n  connect() {\r\n    this.supported = document.queryCommandSupported(\"copy\");\r\n\r\n    if (this.hasRemoveUnusedValue && this.removeUnusedValue) {\r\n      if (this.supported && this.hasFallbackTarget) {\r\n        this.fallbackTarget.remove();\r\n      } else if (this.hasCopyTarget) {\r\n        this.copyTarget.remove();\r\n      }\r\n    }\r\n  }\r\n\r\n  select(event: MouseEvent) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    (this.sourceTarget as HTMLInputElement | HTMLTextAreaElement).select();\r\n  }\r\n\r\n  copy(event: ClipboardEvent) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    (this.sourceTarget as HTMLInputElement | HTMLTextAreaElement).select();\r\n    if (this.supported) {\r\n      document.execCommand(\"copy\");\r\n    }\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\n\nexport class ConfirmNavigationController extends BaseController {\n\n  static values = {message: String};\n\n  declare readonly messageValue: string;\n\n  connect() {\n    let confirmMessage = this.messageValue;\n    window.onbeforeunload = () => (confirmMessage == null ? true : confirmMessage);\n    window.addEventListener(\"popstate\", this.handlePopstate);\n    window.addEventListener(\"submit\", () => {\n      window.removeEventListener(\"popstate\", this.handlePopstate);\n      window.onbeforeunload = null;\n    });\n    // TODO: Turbo navigation events\n  }\n\n  handlePopstate(event: PopStateEvent) {\n    return false;\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class DebugController extends BaseController {\n\n  static targets = [\"test\"];\n  declare testTargets: HTMLElement[];\n\n  connect() {\n    console.log(\"Debug Controller\", this, this.testTargets);\n  }\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class DetectDirtyController extends BaseController {\r\n\r\n  initialValue: string | boolean | null = null;\r\n\r\n  boundHandler = this.handler.bind(this);\r\n\r\n  connect() {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    if (this.isInputElement(element) && this.isCheckable(element)) {\r\n      this.initialValue = element.checked;\r\n    } else {\r\n      this.initialValue = element.value;\r\n    }\r\n    element.addEventListener(\"input\", this.boundHandler);\r\n    element.addEventListener(\"change\", this.boundHandler);\r\n  }\r\n\r\n  disconnect() {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    element.removeEventListener(\"input\", this.boundHandler);\r\n    element.removeEventListener(\"change\", this.boundHandler);\r\n  }\r\n\r\n  restore() {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    if (this.isInputElement(element) && this.isCheckable(element)) {\r\n      element.checked = this.initialValue as boolean;\r\n    } else {\r\n      element.value = this.initialValue as string;\r\n    }\r\n  }\r\n\r\n  private handler(event?: Event) {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n\r\n    if (this.initialValue !== element.value) {\r\n      element.setAttribute(\"data-dirty\", \"true\");\r\n    } else {\r\n      element.removeAttribute(\"data-dirty\");\r\n    }\r\n  }\r\n\r\n  private isCheckable(element: HTMLInputElement): boolean {\r\n    return (element.type === \"radio\" || element.type === \"checkbox\");\r\n  }\r\n\r\n  private isInputElement(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement): element is HTMLInputElement {\r\n    return element.tagName === \"INPUT\";\r\n  }\r\n\r\n}\r\n\r\nexport function isDirty(element: HTMLElement) {\r\n  return element.hasAttribute(\"data-dirty\");\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class DisableInputsController extends BaseController {\r\n\r\n  static targets = [\"disabler\", \"disable\"];\r\n\r\n  static values = {\r\n    clear: Boolean,\r\n  };\r\n\r\n  declare readonly hasDisablerTarget: boolean;\r\n  declare readonly disablerTarget: HTMLInputElement;\r\n  declare readonly disableTargets: Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\r\n  declare readonly clearValue: boolean;\r\n  declare readonly hasClearValue: boolean;\r\n\r\n  connect() {\r\n    this.toggle();\r\n  }\r\n\r\n  toggle() {\r\n    if (this.hasDisablerTarget && this.disablerTarget.checked) {\r\n      this.disableInputs();\r\n    } else {\r\n      this.enableInputs();\r\n    }\r\n  }\r\n\r\n  disableInputs() {\r\n    let shouldClear = this.hasClearValue && this.clearValue;\r\n    this.disableTargets.forEach((el, _) => {\r\n      if (shouldClear) {\r\n        el.value = \"\";\r\n      }\r\n      el.disabled = true;\r\n    });\r\n  }\r\n\r\n  enableInputs() {\r\n    this.disableTargets.forEach((el, _) => {\r\n      el.disabled = false;\r\n    });\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class DismissableController extends BaseController {\r\n\r\n\r\n  dismiss() {\r\n    this.element.remove();\r\n  }\r\n\r\n}\r\n","import {useMutation} from \"stimulus-use\";\r\nimport {BaseController} from \"./base_controller\";\r\n\r\nexport class EmptyDomController extends BaseController {\r\n\r\n  static classes = [\"empty\", \"notEmpty\"];\r\n  static values = {scopeSelector: String};\r\n\r\n  declare hasEmptyClass: boolean;\r\n  declare emptyClass: string;\r\n  declare hasNotEmptyClass: boolean;\r\n  declare notEmptyClass: string;\r\n\r\n  declare hasScopeSelectorValue: boolean;\r\n  declare scopeSelectorValue: string;\r\n\r\n  connect() {\r\n    useMutation(this, {element: this.element, childList: true});\r\n    this.checkEmpty();\r\n  }\r\n\r\n  mutate(entries: MutationRecord[]) {\r\n    this.checkEmpty();\r\n  }\r\n\r\n  checkEmpty() {\r\n    let children;\r\n    if (this.hasScopeSelectorValue) {\r\n      children = this.element.querySelectorAll(this.scopeSelectorValue);\r\n    } else {\r\n      children = this.element.children;\r\n    }\r\n\r\n    if (children.length === 0) {\r\n      if (this.hasNotEmptyClass) {\r\n        let classes = this.notEmptyClass.split(\" \");\r\n        classes.forEach(klass => this.element.classList.remove(klass));\r\n      }\r\n      if (this.hasEmptyClass) {\r\n        let classes = this.emptyClass.split(\" \");\r\n        classes.forEach(klass => this.element.classList.add(klass));\r\n      }\r\n      this.element.dispatchEvent(\r\n        new CustomEvent(\"dom:empty\", {\r\n          bubbles: true,\r\n          cancelable: true,\r\n        }),\r\n      );\r\n    } else {\r\n      if (this.hasNotEmptyClass) {\r\n        let classes = this.notEmptyClass.split(\" \");\r\n        classes.forEach(klass => this.element.classList.add(klass));\r\n      }\r\n      if (this.hasEmptyClass) {\r\n        let classes = this.emptyClass.split(\" \");\r\n        classes.forEach(klass => this.element.classList.remove(klass));\r\n      }\r\n      this.element.dispatchEvent(\r\n        new CustomEvent(\"dom:not-empty\", {\r\n          bubbles: true,\r\n          cancelable: true,\r\n          detail: {\r\n            count: children.length,\r\n          },\r\n        }),\r\n      );\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class EnableInputsController extends BaseController {\r\n\r\n  static targets = [\"enabler\", \"enable\"];\r\n\r\n  static values = {\r\n    clear: Boolean,\r\n  };\r\n\r\n  declare readonly hasEnablerTarget: boolean;\r\n  declare readonly enablerTarget: HTMLInputElement;\r\n  declare readonly enableTargets: Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\r\n  declare readonly clearValue: boolean;\r\n  declare readonly hasClearValue: boolean;\r\n\r\n  connect() {\r\n    this.toggle();\r\n  }\r\n\r\n  toggle() {\r\n    if (this.hasEnablerTarget && this.enablerTarget.checked) {\r\n      this.enableInputs();\r\n    } else {\r\n      this.disableInputs();\r\n    }\r\n  }\r\n\r\n  disableInputs() {\r\n    let shouldClear = this.hasClearValue && this.clearValue;\r\n    this.enableTargets.forEach((el, _) => {\r\n      if (shouldClear) {\r\n        el.value = \"\";\r\n      }\r\n      el.disabled = true;\r\n    });\r\n  }\r\n\r\n  enableInputs() {\r\n    this.enableTargets.forEach((el, _) => {\r\n      el.disabled = false;\r\n    });\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class FallbackImageController extends BaseController {\r\n\r\n  static values = {placeholder: String};\r\n\r\n  declare readonly placeholderValue: string;\r\n  declare readonly hasPlaceholderValue: boolean;\r\n\r\n  connect() {\r\n    let element = this.element as HTMLImageElement;\r\n\r\n    element.onerror = () => {\r\n      if (this.hasPlaceholderValue) {\r\n        element.src = this.placeholderValue;\r\n      } else {\r\n        element.style.display = \"none\";\r\n      }\r\n    };\r\n  }\r\n\r\n}\r\n","export function isHTMLLinkElement(element: Element): element is HTMLLinkElement {\n  return element.nodeName == \"A\";\n}\n\nexport function isHTMLFormElement(element: Element): element is HTMLFormElement {\n  return element.nodeName == \"FORM\";\n}\n\nexport function isHTMLInputElement(element: Element): element is HTMLInputElement {\n  return element.nodeName == \"INPUT\";\n}\n\n","import {BaseController} from './base_controller';\r\nimport {isHTMLFormElement, isHTMLInputElement} from \"./utilities/elements\";\r\n\r\ninterface FormSavePayload {\r\n  [idx: string]: {\r\n    [idx: string]: string | boolean\r\n  }\r\n}\r\n\r\nexport class FormSaveController extends BaseController {\r\n\r\n  static values = {\r\n    id: String,\r\n    restoreOnLoad: Boolean,\r\n    clearOnSubmit: Boolean,\r\n  };\r\n\r\n  declare readonly idValue: string;\r\n  declare readonly hasIdValue: boolean;\r\n  declare readonly restoreOnLoadValue: boolean;\r\n  declare readonly hasRestoreOnLoadValue: boolean;\r\n  declare readonly clearOnSubmitValue: boolean;\r\n  declare readonly hasClearOnSubmitValue: boolean;\r\n\r\n  get formID() {\r\n    if (this.hasIdValue) {\r\n      return this.idValue;\r\n    }\r\n    let elementID = (this.element as HTMLFormElement).id;\r\n\r\n    if (elementID !== \"\") {\r\n      return elementID;\r\n    } else {\r\n      throw new Error(`No ID value to uniquely identify this form. Please either specify data-${this.identifier}-id-value or give this form an 'id' attribute. `);\r\n    }\r\n  }\r\n\r\n  get formIdentifier() {\r\n    const url = location.href;\r\n    return `${url} ${this.formID}`;\r\n  }\r\n\r\n  get formElements() {\r\n    return (this.element as HTMLFormElement).elements;\r\n  }\r\n\r\n  get formData(): FormSavePayload {\r\n    let data: FormSavePayload = {[this.formIdentifier]: {}};\r\n    for (const element of this.formElements) {\r\n      let el = element as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\r\n      if (el.name.length > 0) {\r\n        if (isHTMLInputElement(el) && el.type == \"checkbox\") {\r\n          data[this.formIdentifier][el.name] = el.checked;\r\n        } else if (isHTMLInputElement(el) && el.type == \"radio\") {\r\n          if (el.checked) {\r\n            data[this.formIdentifier][el.name] = el.value;\r\n          }\r\n        } else {\r\n          data[this.formIdentifier][el.name] = el.value;\r\n        }\r\n      }\r\n    }\r\n    return data;\r\n  }\r\n\r\n  get restoreOnLoad() {\r\n    return this.hasRestoreOnLoadValue ? this.restoreOnLoadValue : true;\r\n  }\r\n\r\n  get clearOnSubmit() {\r\n    return this.hasClearOnSubmitValue ? this.clearOnSubmitValue : true;\r\n  }\r\n\r\n  initialize() {\r\n    this._clear = this._clear.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      let element = this.element;\r\n      if (!isHTMLFormElement(element)) {\r\n        throw new Error('Expected controller to be mounted on a form element.');\r\n      }\r\n\r\n      if (this.restoreOnLoad) {\r\n        this.restore();\r\n      }\r\n      if (this.clearOnSubmit) {\r\n        this.element.addEventListener('submit', this._clear);\r\n      }\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.clearOnSubmit) {\r\n      this.element.removeEventListener('submit', this._clear);\r\n    }\r\n  }\r\n\r\n  _clear() {\r\n    localStorage.removeItem(this.formIdentifier);\r\n    this.dispatch(this.element as HTMLElement, `form-save:cleared`);\r\n  }\r\n\r\n  clear(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    this._clear();\r\n  }\r\n\r\n  save(event: Event) {\r\n    event.preventDefault();\r\n    let data = this.formData;\r\n    localStorage.setItem(this.formIdentifier, JSON.stringify(data[this.formIdentifier]));\r\n    this.dispatch(this.element as HTMLElement, `form-save:save:success`);\r\n  }\r\n\r\n  restore(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    if (localStorage.getItem(this.formIdentifier)) {\r\n      const savedData = JSON.parse(localStorage.getItem(this.formIdentifier)!); // get and parse the saved data from localStorage\r\n      for (const element of this.formElements) {\r\n        let el = element as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\r\n        if (el.name in savedData) {\r\n          if (isHTMLInputElement(el) && el.type == \"checkbox\") {\r\n            el.checked = savedData[el.name];\r\n          } else if (isHTMLInputElement(el) && el.type == \"radio\") {\r\n            if (el.value == savedData[el.name]) {\r\n              el.checked = true;\r\n            }\r\n          } else {\r\n            el.value = savedData[el.name];\r\n          }\r\n        }\r\n      }\r\n      this.dispatch(this.element as HTMLElement, `form-save:restore:success`);\r\n    } else {\r\n      this.dispatch(this.element as HTMLElement, `form-save:restore:empty`);\r\n    }\r\n  }\r\n\r\n}\r\n","import {useIntersection} from \"stimulus-use\";\nimport {IntersectionOptions} from \"stimulus-use/dist/use-intersection/use-intersection\";\nimport {AsyncBlockController} from \"./async_block_controller\";\n\nexport class LazyBlockController extends AsyncBlockController {\n\n  declare observe: () => void;\n  declare unobserve: () => void;\n  declare options: IntersectionOptions;\n  declare isVisible: boolean;\n  declare disappear: () => void;\n\n  connect() {\n    let element = this.element;\n    this.options = {element, threshold: 0.3};\n\n    if (\"IntersectionObserver\" in window) {\n      [this.observe, this.unobserve] = useIntersection(this, this.options);\n    } else {\n      // Client doesn't support intersection observer, fallback to pre-loading\n      this.loadContent();\n    }\n  }\n\n  appear(entry: IntersectionObserverEntry) {\n    let element = this.element as HTMLImageElement;\n    if (element.src !== \"\") {\n      return;\n    }\n    if (entry.target === element && entry.isIntersecting) {\n      this.loadContent();\n      if (this.unobserve) {\n        this.unobserve();\n      }\n    }\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class LimitedSelectionCheckboxesController extends BaseController {\r\n\r\n  static targets = [\"input\", \"error\"];\r\n  static values = {max: Number, message: String};\r\n\r\n  declare readonly hasErrorTarget: boolean;\r\n  declare readonly errorTarget: HTMLElement;\r\n  declare readonly inputTargets: HTMLInputElement[];\r\n  declare readonly maxValue: number;\r\n  declare readonly messageValue: string;\r\n\r\n  maxSelections = 0;\r\n\r\n  boundHandleInputs = this.handleInputs.bind(this);\r\n\r\n  connect() {\r\n    this.inputTargets.forEach((el) => el.addEventListener(\"change\", this.boundHandleInputs));\r\n  }\r\n\r\n  disconnect() {\r\n    this.inputTargets.forEach((el) => el.removeEventListener(\"change\", this.boundHandleInputs));\r\n  }\r\n\r\n  handleInputs(event: Event) {\r\n    let tickedInputs = this.inputTargets.reduce((previousValue, el) => el.checked ? previousValue + 1 : previousValue, 0);\r\n    let target = event.target as HTMLInputElement;\r\n    if (tickedInputs > this.maxSelections) {\r\n      event.preventDefault();\r\n      target.checked = false;\r\n      target.dispatchEvent(new CustomEvent(\"change\", {bubbles: true, cancelable: true}));\r\n      target.dispatchEvent(new CustomEvent(\"limited-selection:too-many\", {bubbles: true, cancelable: true, detail: {target}}));\r\n      if (this.hasErrorTarget) {\r\n        this.errorTarget.innerHTML = this.messageValue;\r\n      }\r\n    } else {\r\n      target.dispatchEvent(new CustomEvent(\"limited-selection:selection\", {bubbles: true, cancelable: true, detail: {target}}));\r\n      if (this.hasErrorTarget) {\r\n        this.errorTarget.innerHTML = \"\";\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class NestedFormController extends BaseController {\r\n  static targets = ['target', 'template'];\r\n  static values = {\r\n    insertMode: String,\r\n    wrapperClass: String,\r\n  };\r\n\r\n  declare readonly targetTarget: HTMLElement;\r\n  declare readonly templateTarget: HTMLTemplateElement | HTMLScriptElement;\r\n\r\n  declare readonly wrapperClassValue: string;\r\n  declare readonly hasWrapperSelectorValue: boolean;\r\n  declare readonly insertModeValue: InsertPosition;\r\n  declare readonly hasInsertModeValue: boolean;\r\n\r\n  get wrapperClass() {\r\n    return this.hasWrapperSelectorValue ? this.wrapperClassValue : 'nested-fields';\r\n  }\r\n\r\n  get insertMode(): InsertPosition {\r\n    return this.hasInsertModeValue ? this.insertModeValue : 'beforeend';\r\n  }\r\n\r\n  connect() {\r\n    this.checkStructure();\r\n  }\r\n\r\n  add(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    const content = this.templateTarget.innerHTML.replace(/NEW_RECORD/g, this.generateID());\r\n    this.targetTarget.insertAdjacentHTML(this.insertMode, content);\r\n  }\r\n\r\n  remove(event: Event) {\r\n    event.preventDefault();\r\n    const wrapper: HTMLElement | null = (event.target as HTMLElement).closest(this.wrapperClass);\r\n    if (wrapper == null) {\r\n      throw new Error(`#remove was clicked from outside of a child record. Could not find an ancestor with class ${this.wrapperClass}`);\r\n    }\r\n\r\n    if (wrapper.dataset.newRecord === 'true') {\r\n      wrapper.remove();\r\n    } else {\r\n      wrapper.style.display = 'none';\r\n      let destroyInput = wrapper.querySelector(\"input[name*='_destroy']\") as HTMLInputElement | null;\r\n      if (destroyInput == null) {\r\n        throw new Error(`Could not find a hidden input with name '_destroy'. NestedForm cannot remove an already persisted record without it.`);\r\n      }\r\n\r\n      destroyInput.value = \"1\";\r\n    }\r\n  }\r\n\r\n  generateID(): string {\r\n    return new Date().getTime().toString() + Math.random();\r\n  }\r\n\r\n  private checkStructure() {\r\n    let template = this.templateTarget.innerHTML;\r\n\r\n    if (template.indexOf('NEW_RECORD')) {\r\n      throw new Error(\"Could not find 'NEW_RECORD' in the provided template. Please make sure you've passed `child_index: 'NEW_RECORD'` to `fields_for`\")\r\n    }\r\n  }\r\n}","import {BaseController} from \"./base_controller\";\r\n\r\nexport class PasswordConfirmController extends BaseController {\r\n\r\n  static targets = [\"password\"];\r\n  static classes = [\"error\"];\r\n\r\n  declare readonly passwordTargets: HTMLInputElement[];\r\n\r\n  declare readonly errorClass: string;\r\n  declare readonly hasErrorClass: boolean;\r\n\r\n  private boundCheckPasswordsMatch = this.checkPasswordsMatch.bind(this);\r\n\r\n  connect() {\r\n    this.passwordTargets.forEach((el) => el.addEventListener(\"change\", this.boundCheckPasswordsMatch));\r\n  }\r\n\r\n  disconnect() {\r\n    this.passwordTargets.forEach((el) => el.removeEventListener(\"change\", this.boundCheckPasswordsMatch));\r\n  }\r\n\r\n  private allPasswordsMatch() {\r\n    let values = new Set(this.passwordTargets.map(el => el.value));  // Create a unique set of the password values\r\n    return values.has(\"\") || values.size == 1; // If any of the passwords are still blank, or there is only one distinct password value (i.e. they all are the same)\r\n  }\r\n\r\n  private checkPasswordsMatch() {\r\n    if (this.allPasswordsMatch()) {\r\n      this.element.dispatchEvent(new CustomEvent(\"password-confirm:match\"));\r\n      if (this.hasErrorClass) {\r\n        this.passwordTargets.forEach(el => el.classList.remove(this.errorClass));\r\n      }\r\n    } else {\r\n      this.element.dispatchEvent(new CustomEvent(\"password-confirm:no-match\"));\r\n      if (this.hasErrorClass) {\r\n        this.passwordTargets.forEach(el => el.classList.add(this.errorClass));\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class PasswordPeekController extends BaseController {\r\n\r\n  static targets = [\"password\"];\r\n\r\n  declare readonly passwordTarget: HTMLInputElement;\r\n\r\n\r\n  peak(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    this.passwordTarget.type = \"text\";\r\n  }\r\n\r\n  hide(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    this.passwordTarget.type = \"password\";\r\n  }\r\n\r\n  toggle(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    if (this.passwordTarget.type === \"password\") {\r\n      this.peak();\r\n    } else {\r\n      this.hide();\r\n    }\r\n  }\r\n}\r\n","import {useDebounce, useWindowResize} from \"stimulus-use\";\nimport {WindowResizePayload} from \"stimulus-use/dist/use-window-resize/use-window-resize\";\nimport {BaseController} from \"./base_controller\";\n\ninterface ResponsiveIframeMessage {\n  name: string,\n  height: number,\n}\n\nexport class ResponsiveIframeWrapperController extends BaseController {\n\n  boundMessageReceived = this.messageReceived.bind(this);\n\n  connect() {\n    window.addEventListener(\"message\", this.boundMessageReceived);\n  }\n\n  disconnect() {\n    window.removeEventListener(\"message\", this.boundMessageReceived);\n  }\n\n  messageReceived(message: MessageEvent<ResponsiveIframeMessage>) {\n    let data = message.data;\n    if (data.hasOwnProperty(\"name\") && data.name === \"iframe-body\" && data.hasOwnProperty(\"height\")) {\n      this.resize(data.height);\n    }\n  }\n\n  resize(height: number) {\n    (this.element as HTMLIFrameElement).style.height = `${height}px`;\n  }\n\n}\n\nexport class ResponsiveIframeBodyController extends BaseController {\n\n  static debounces = [\"postUpdate\"];\n\n  declare observe: () => void;\n  declare unobserve: () => void;\n\n  connect() {\n    // If this Window is inside a frame\n    if (window.self !== window.top) {\n      useWindowResize(this);\n      useDebounce(this, {});\n      this.postUpdate();\n    } else {\n      // Not an iframe\n    }\n  }\n\n  windowResize(payload: WindowResizePayload) {\n    this.postUpdate();\n  };\n\n  postUpdate() {\n    let payload: ResponsiveIframeMessage = {name: \"iframe-body\", height: this.getHeight()};\n    window.parent.postMessage(\n      payload,\n      \"*\",\n    );\n  }\n\n  getHeight(): number {\n    const body = document.body;\n    const html = document.documentElement;\n\n    // Get the largest height out of body and html's various height measurements\n    return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n  }\n\n}\n","import camelCase from \"lodash/camelCase\";\r\nimport {BaseController} from \"../base_controller\";\r\n\r\nexport class EphemeralController extends BaseController {\r\n\r\n  cleanupSelf() {\r\n    this.cleanup(this.element as HTMLElement);\r\n  }\r\n\r\n  cleanup(element: HTMLElement) {\r\n    element.dataset.controller = element.dataset.controller?.replaceAll(new RegExp(`(\\s|^)${this.identifier}(\\s|$)`, \"g\"), \"\") || \"\";\r\n    if (element.dataset.controller == \"\") {\r\n      // If there are no controllers left, remove the attribute\r\n      delete element.dataset.controller;\r\n    }\r\n\r\n    let substringIdentifierValueRegex = new RegExp(`(\\s|^)${this.identifier}\\\\..+?(\\s|$)`, \"g\");\r\n    element.dataset.target = element.dataset.target?.replaceAll(substringIdentifierValueRegex, \"\") || \"\";\r\n    delete element.dataset[camelCase(`${this.identifier}-target`)];\r\n    if (element.dataset.target == \"\") {\r\n      // If there are no targets left, remove the attribute\r\n      delete element.dataset.target;\r\n    }\r\n\r\n    element.dataset.action = element.dataset.target?.replaceAll(substringIdentifierValueRegex, \"\") || \"\";\r\n    delete element.dataset[camelCase(`${this.identifier}-action`)];\r\n    if (element.dataset.action == \"\") {\r\n      // If there are no actions left, remove the attribute\r\n      delete element.dataset.action;\r\n    }\r\n\r\n    // @ts-ignore\r\n    let values = this.constructor.values;\r\n    if (values) {\r\n      Object.keys(values).forEach(val => delete element.dataset[camelCase(`${this.identifier}-${val}-value`)]);\r\n    }\r\n\r\n    // @ts-ignore\r\n    let classes = this.constructor.classes;\r\n    if (classes) {\r\n      Object.keys(classes).forEach(val => delete element.dataset[camelCase(`${this.identifier}-${val}-class`)]);\r\n    }\r\n  }\r\n\r\n}\r\n","const smoothSupported = \"scrollBehavior\" in document.documentElement.style;\r\nlet smoothPolyfilled: boolean;\r\n\r\nexport async function scrollToElement(element: Element, {behavior = \"smooth\", block = \"start\", inline = \"nearest\"}: ScrollIntoViewOptions = {}) {\r\n  if (behavior == \"smooth\" && !smoothSupported) {\r\n    await polyfillSmooth();\r\n  }\r\n  element.scrollIntoView({behavior, block, inline});\r\n}\r\n\r\nasync function polyfillSmooth() {\r\n  const {polyfill} = await import(/* webpackChunkName: \"smoothscroll-polyfill\" */ \"smoothscroll-polyfill\");\r\n  if (smoothPolyfilled) {\r\n    return;\r\n  }\r\n  smoothPolyfilled = true;\r\n  polyfill();\r\n}\r\n\r\nexport function getScrollParent(node: HTMLElement | null): HTMLElement | null {\r\n  if (!node) {\r\n    return null;\r\n  }\r\n  const overflowY = getComputedStyle(node).overflowY;\r\n  const isScrollable = overflowY !== \"visible\" && overflowY !== \"hidden\";\r\n\r\n  if (isScrollable && node.scrollHeight >= node.clientHeight) {\r\n    return node;\r\n  }\r\n\r\n  return getScrollParent(node.parentElement) || document.body;\r\n}\r\n","import {EphemeralController} from \"./utilities/ephemeral_controller\";\r\nimport {scrollToElement} from \"./utilities/scroll\";\r\n\r\nexport class ScrollIntoFocusController extends EphemeralController {\r\n\r\n  static values = {\r\n    behavior: String,\r\n    block: String,\r\n    inline: String,\r\n  };\r\n\r\n  declare behaviorValue: ScrollBehavior;\r\n  declare hasBehaviorValue: boolean;\r\n  declare blockValue: ScrollLogicalPosition;\r\n  declare hasBlockValue: boolean;\r\n  declare inlineValue: ScrollLogicalPosition;\r\n  declare hasInlineValue: boolean;\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      // Attempt smooth scrolling, with polyfill\r\n      scrollToElement(\r\n        this.element,\r\n        {\r\n          behavior: this.hasBehaviorValue ? this.behaviorValue : \"smooth\",\r\n          block: this.hasBlockValue ? this.blockValue : \"center\",\r\n          inline: this.hasInlineValue ? this.inlineValue : \"center\",\r\n        },\r\n      ).catch(() => this.element.scrollIntoView()); // Fallback to snap-scrolling\r\n      this.cleanupSelf();\r\n    });\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\nimport {getScrollParent, scrollToElement} from \"./utilities/scroll\";\r\n\r\nexport class ScrollToBottomController extends BaseController {\r\n\r\n  static values = {\r\n    mode: String,\r\n  };\r\n\r\n  declare modeValue: \"nearest\" | \"document\";\r\n  declare hasModeValue: boolean;\r\n\r\n\r\n  scroll(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    let mode = this.hasModeValue ? this.modeValue : \"document\";\r\n    let target: null | HTMLElement;\r\n    if (mode == \"document\") {\r\n      target = document.body;\r\n    } else {\r\n      target = getScrollParent(this.element as HTMLElement);\r\n    }\r\n    if (target == null) {\r\n      return;\r\n    }\r\n    scrollToElement(target!, {behavior: \"smooth\", block: \"end\"}).catch(() => target!.scrollIntoView(false));\r\n  }\r\n\r\n}\r\n\r\n","import {BaseController} from \"./base_controller\";\r\nimport {scrollToElement} from \"./utilities/scroll\";\r\n\r\nexport class ScrollToController extends BaseController {\r\n\r\n  static values = {\r\n    selector: String,\r\n    behavior: String,\r\n    block: String,\r\n    inline: String,\r\n  };\r\n\r\n  declare selectorValue: string;\r\n  declare behaviorValue: ScrollBehavior;\r\n  declare hasBehaviorValue: boolean;\r\n  declare blockValue: ScrollLogicalPosition;\r\n  declare hasBlockValue: boolean;\r\n  declare inlineValue: ScrollLogicalPosition;\r\n  declare hasInlineValue: boolean;\r\n\r\n\r\n  scroll() {\r\n    let target = document.querySelector(this.selectorValue);\r\n    if (!target) {\r\n      console.warn(`Could not find target for '${this.selectorValue}'`);\r\n      return;\r\n    }\r\n\r\n    scrollToElement(\r\n      target!,\r\n      {\r\n        behavior: this.hasBehaviorValue ? this.behaviorValue : \"smooth\",\r\n        block: this.hasBlockValue ? this.blockValue : \"center\",\r\n        inline: this.hasInlineValue ? this.inlineValue : \"center\",\r\n      },\r\n    ).catch(() => target!.scrollIntoView()); // Fallback to snap-scrolling\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\nimport {getScrollParent, scrollToElement} from \"./utilities/scroll\";\n\nexport class ScrollToTopController extends BaseController {\n\n  static values = {\n    mode: String,\n  };\n\n  declare modeValue: \"nearest\" | \"document\";\n  declare hasModeValue: boolean;\n\n\n  scroll(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    let mode = this.hasModeValue ? this.modeValue : \"document\";\n    let target: null | HTMLElement;\n    if (mode == \"document\") {\n      target = document.body;\n    } else {\n      target = getScrollParent(this.element as HTMLElement);\n    }\n    if (target == null) {\n      return;\n    }\n    scrollToElement(target!, {behavior: \"smooth\", block: \"start\"}).catch(() => target!.scrollIntoView(false));\n  }\n\n}\n\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class SelfDestructController extends BaseController {\r\n\r\n  static values = {seconds: Number};\r\n\r\n  declare readonly secondsValue: number;\r\n  timeout: null | ReturnType<typeof setTimeout> = null;\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      // Only start countdown on first paint\r\n      this.timeout = setTimeout(() => this.element.remove(), this.secondsValue * 1000);\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.timeout) {\r\n      clearTimeout(this.timeout);\r\n    }\r\n  }\r\n\r\n}\r\n","import {EphemeralController} from \"./utilities/ephemeral_controller\";\r\n\r\nexport class TeleportController extends EphemeralController {\r\n\r\n  static values = {target: String, insert: String, immediate: Boolean};\r\n\r\n  declare readonly immediateValue: boolean;\r\n  declare readonly hasImmediateValue: boolean;\r\n  declare readonly targetValue: string;\r\n  declare readonly hasInsertValue: boolean;\r\n  declare readonly insertValue: InsertPosition | \"replaceOuter\" | \"replaceInner\" | \"prepend\" | \"append\";\r\n\r\n  connect() {\r\n    if (!this.hasInsertValue) {\r\n      throw new Error(\"`insert` value was not specified\");\r\n    }\r\n\r\n    requestAnimationFrame(() => {\r\n      if (this.hasImmediateValue && this.immediateValue) {\r\n        this.execute();\r\n      }\r\n    });\r\n  }\r\n\r\n  execute(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    let destination = document.querySelector(this.targetValue);\r\n\r\n    if (destination == null) {\r\n      this.element.dispatchEvent(new CustomEvent(\"teleport:error\", {bubbles: true, cancelable: true}));\r\n      return;\r\n    }\r\n\r\n    let copy = this.element.cloneNode(true) as HTMLElement;\r\n    this.cleanup(copy);\r\n\r\n    switch (this.insertValue) {\r\n      case \"beforebegin\":\r\n      case \"beforeend\":\r\n      case \"afterend\":\r\n      case \"afterbegin\":\r\n        destination.insertAdjacentHTML(this.insertValue, copy.outerHTML);\r\n        break;\r\n      case \"replaceOuter\":\r\n        destination.outerHTML = copy.outerHTML;\r\n        break;\r\n      case \"replaceInner\":\r\n        destination.innerHTML = copy.outerHTML;\r\n        break;\r\n      case \"prepend\":\r\n        destination.insertAdjacentHTML(\"afterbegin\", copy.outerHTML);\r\n        break;\r\n      case \"append\":\r\n        destination.insertAdjacentHTML(\"beforeend\", copy.outerHTML);\r\n        break;\r\n      default:\r\n        throw new Error(\"`insert` value was not specified\");\r\n\r\n    }\r\n    this.element.remove();\r\n  }\r\n\r\n}\r\n","import {useClickOutside, useHover} from \"stimulus-use\";\nimport {BaseController} from \"./base_controller\";\n\nexport type ToggleClassMode = \"on\" | \"off\" | \"toggle\"\n\nexport class ToggleClassController extends BaseController {\n\n  static targets = [\"toggle\"];\n  static values = {\n    class: String,\n    mouseEnter: String,\n    mouseLeave: String,\n    clickAway: Boolean,\n    initial: String,\n  };\n\n  declare readonly toggleTargets: HTMLElement[];\n\n  declare readonly classValue: string;\n  declare readonly hasClassValue: boolean;\n\n  declare readonly mouseEnterValue: ToggleClassMode;\n  declare readonly hasMouseEnterValue: boolean;\n\n  declare readonly mouseLeaveValue: ToggleClassMode;\n  declare readonly hasMouseLeaveValue: boolean;\n\n  declare readonly clickAwayValue: boolean;\n  declare readonly hasClickAwayValue: boolean;\n\n  declare readonly initialValue: \"on\" | \"off\";\n  declare readonly hasInitialValue: boolean;\n\n  connect() {\n    if (!this.hasClassValue) {\n      throw new Error(\"data-toggle-class-class-value must not be empty\");\n    }\n\n    if (this.hasMouseEnterValue || this.hasMouseLeaveValue) {\n      useHover(this);\n    }\n\n    if (this.hasClickAwayValue && this.clickAwayValue) {\n      useClickOutside(this);\n    }\n\n    requestAnimationFrame(() => {\n      if (this.hasInitialValue) {\n        if (this.initialValue === \"on\") {\n          this.toggleTargets.forEach((target) => this.elementOn(target));\n        } else {\n          this.toggleTargets.forEach((target) => this.elementOff(target));\n        }\n      }\n    });\n  }\n\n  clickOutside() {\n    this.toggleTargets.forEach((target) => {\n      if (this.elementWasToggled(target)) {\n        this.elementToggleStatus(target);\n        this.elementToggle(target);\n      }\n    });\n  }\n\n  mouseEnter() {\n    if (this.hasMouseEnterValue) {\n      switch (this.mouseEnterValue) {\n        case \"on\":\n          this.on();\n          break;\n        case \"off\":\n          this.off();\n          break;\n        case \"toggle\":\n          this.toggle();\n          break;\n      }\n    }\n    return {};\n  }\n\n  mouseLeave() {\n    if (this.hasMouseLeaveValue) {\n      switch (this.mouseLeaveValue) {\n        case \"on\":\n          this.on();\n          break;\n        case \"off\":\n          this.off();\n          break;\n        case \"toggle\":\n          this.toggle();\n          break;\n      }\n    }\n    return {};\n  }\n\n  on(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementOn(target);\n    });\n  }\n\n  off(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementOff(target);\n    });\n  }\n\n  toggle(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementToggle(target);\n    });\n  }\n\n  private elementWasToggled(el: HTMLElement): boolean {\n    return el.dataset.toggled == \"true\";\n  }\n\n  private elementToggleStatus(el: HTMLElement) {\n    if (this.elementWasToggled(el)) {\n      delete el.dataset.toggled;\n    } else {\n      el.dataset.toggled = \"true\";\n    }\n  }\n\n  private elementToggle(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass));\n  }\n\n  private elementOn(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass, true));\n  }\n\n  private elementOff(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass, false));\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\nimport {isHTMLLinkElement} from \"./utilities/elements\";\nimport {isTurboFrame} from \"./utilities/turbo\";\n\nexport class TurboFrameRCController extends BaseController {\n\n  static values = {\n    frameId: String,\n    src: String,\n    loadingMessage: String,\n  };\n\n  declare readonly frameIdValue: string;\n  declare readonly srcValue: string;\n  declare readonly hasSrcValue: boolean;\n  declare readonly loadingMessageValue: string;\n  declare readonly hasLoadingMessageValue: boolean;\n\n  toggle(event?: Event | null) {\n    if (event) {\n      event.preventDefault();\n    }\n    let frame = this.getFrame();\n    let frameSrc = frame.src;\n    if (frameSrc == null || frameSrc !== this.getSrc()) {\n      this.setSrc();\n    } else {\n      this.clear();\n    }\n  }\n\n  setSrc(event?: Event | null) {\n    if (event) {\n      event.preventDefault();\n    }\n    let frame = this.getFrame();\n    if (this.hasLoadingMessageValue) {\n      frame.innerHTML = this.loadingMessageValue;\n    }\n\n    frame.src = this.getSrc();\n  }\n\n  clear(event?: Event | null) {\n    if (event) {\n      event.preventDefault();\n    }\n    let frame = this.getFrame();\n    frame.src = \"\";\n    frame.innerHTML = \"\";\n  }\n\n  private getFrame(): TurboFrame {\n    let frame = document.getElementById(`${this.frameIdValue}`);\n    if (frame == null) {\n      throw new Error(`Could not find frame with ID '${this.frameIdValue}'`);\n    }\n    if (!isTurboFrame(frame)) {\n      throw new Error(`Element targeted by ID '${this.frameIdValue}'`);\n    } else {\n      return frame;\n    }\n  }\n\n  private getSrc(): string {\n    let element = this.element as HTMLElement;\n    if (this.hasSrcValue) {\n      return this.srcValue;\n    } else if (isHTMLLinkElement(element)) {\n      return element.href;\n    } else {\n      throw new Error(\"No link given to drive frame to\");\n    }\n  }\n\n}\n","export function isTurboFrame(element: HTMLElement): element is TurboFrame {\r\n  return element.nodeName == \"TURBO-FRAME\";\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class WordCountController extends BaseController {\r\n\r\n  static targets = [\"input\", \"output\"];\r\n  static values = {min: Number, max: Number};\r\n  static classes = [\"error\"];\r\n\r\n  declare readonly inputTarget: HTMLInputElement | HTMLTextAreaElement;\r\n  declare readonly outputTarget: HTMLElement;\r\n  declare minValue: number;\r\n  declare hasMinValue: boolean;\r\n  declare maxValue: number;\r\n  declare hasMaxValue: boolean;\r\n  declare errorClass: string;\r\n  declare hasErrorClass: boolean;\r\n\r\n  boundHandler = this.updateWordCount.bind(this);\r\n\r\n  connect() {\r\n    this.updateWordCount();\r\n    this.inputTarget.addEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  disconnect() {\r\n    this.inputTarget.removeEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  updateWordCount() {\r\n    let wordCount = 0;\r\n    let textAreaValue = this.inputTarget.value;\r\n    let matches = textAreaValue.match(/\\S+/g);\r\n    wordCount = (matches && matches.length) || 0;\r\n    this.outputTarget.innerText = wordCount.toString();\r\n    if (this.hasErrorClass) {\r\n      if (this.isValidCount(wordCount)) {\r\n        this.outputTarget.classList.remove(this.errorClass);\r\n      } else {\r\n        this.outputTarget.classList.add(this.errorClass);\r\n      }\r\n    }\r\n  }\r\n\r\n  isValidCount(count: number) {\r\n    let min = 0;\r\n    let max = 99999;\r\n\r\n    if (this.hasMinValue) {\r\n      min = this.minValue;\r\n    }\r\n\r\n    if (this.hasMaxValue) {\r\n      max = this.maxValue;\r\n    }\r\n\r\n    return count >= min && count <= max;\r\n  }\r\n\r\n}\r\n"],"names":["BaseController","Controller","constructor","context","super","Proxy","this","get","obj","prop","returnVal","Reflect","self","test","logProperty","toString","apply","target","thisArg","argArray","log","args","dispatch","element","eventName","options","bubbles","cancelable","detail","event","CustomEvent","dispatchEvent","functionName","application","debug","logger","console","groupCollapsed","identifier","groupEnd","AsyncBlockController","connect","loadContent","el","hasReplaceTarget","replaceTarget","fetch","endpointValue","then","response","text","html","newEl","document","createElement","innerHTML","replaceWith","catch","err","finally","endpoint","String","AutoSubmitFormController","handler","bind","querySelectorAll","forEach","addEventListener","boundHandler","disconnect","removeEventListener","e","method","controller","methodName","composeEventName","name","eventPrefix","composedName","extendedEvent","type","composed","Object","assign","originalEvent","defaultOptions","events","onlyVisible","StimulusUse","[object Object]","_a","_b","_c","controllerId","stimulusUseDebug","id","dataset","controllerInitialize","initialize","controllerConnect","controllerDisconnect","UseHover","observe","targetElement","onEnter","onLeave","unobserve","call","hover","enhanceController","UseMutation","observer","error","handleError","mutation","entries","MutationObserver","useWindowResize","callback","innerWidth","innerHeight","window","payload","height","Infinity","width","debounce","fn","wait","timeoutId","arguments","clearTimeout","setTimeout","AutosizeController","style","resize","boxSizing","requestAnimationFrame","windowResize","autosize","offset","offsetHeight","clientHeight","scrollHeight","CharCountController","updateCharCount","inputTarget","charCount","value","length","outputTarget","innerText","hasErrorClass","isValidCount","classList","remove","errorClass","add","count","min","max","hasMinValue","minValue","hasMaxValue","maxValue","Number","CheckboxSelectAllController","checked","checkboxTargets","filter","checkbox","unchecked","toggle","refresh","hasCheckboxAllTarget","selectAllTarget","preventDefault","checkboxesCount","checkboxesCheckedCount","indeterminate","ClipboardController","supported","queryCommandSupported","hasRemoveUnusedValue","removeUnusedValue","hasFallbackTarget","fallbackTarget","hasCopyTarget","copyTarget","select","sourceTarget","copy","execCommand","removeUnused","Boolean","ConfirmNavigationController","confirmMessage","messageValue","onbeforeunload","handlePopstate","message","DebugController","testTargets","DetectDirtyController","initialValue","isInputElement","isCheckable","restore","setAttribute","removeAttribute","tagName","DisableInputsController","hasDisablerTarget","disablerTarget","disableInputs","enableInputs","shouldClear","hasClearValue","clearValue","disableTargets","_","disabled","clear","DismissableController","dismiss","EmptyDomController","useMutation","childList","checkEmpty","mutate","children","hasScopeSelectorValue","scopeSelectorValue","hasNotEmptyClass","notEmptyClass","split","klass","hasEmptyClass","emptyClass","scopeSelector","EnableInputsController","hasEnablerTarget","enablerTarget","enableTargets","FallbackImageController","onerror","hasPlaceholderValue","src","placeholderValue","display","isHTMLInputElement","nodeName","placeholder","FormSaveController","formID","hasIdValue","idValue","elementID","Error","formIdentifier","location","href","formElements","elements","formData","data","restoreOnLoad","hasRestoreOnLoadValue","restoreOnLoadValue","clearOnSubmit","hasClearOnSubmitValue","clearOnSubmitValue","_clear","localStorage","removeItem","save","setItem","JSON","stringify","getItem","savedData","parse","LazyBlockController","threshold","IntersectionObserver","entry","isIntersecting","isVisible","appearEvent","dispatchAppear","disappearEvent","dispatchDisappear","useIntersection","appear","LimitedSelectionCheckboxesController","handleInputs","inputTargets","boundHandleInputs","tickedInputs","reduce","previousValue","maxSelections","hasErrorTarget","errorTarget","NestedFormController","wrapperClass","hasWrapperSelectorValue","wrapperClassValue","insertMode","hasInsertModeValue","insertModeValue","checkStructure","content","templateTarget","replace","generateID","targetTarget","insertAdjacentHTML","wrapper","closest","newRecord","destroyInput","querySelector","Date","getTime","Math","random","indexOf","PasswordConfirmController","checkPasswordsMatch","passwordTargets","boundCheckPasswordsMatch","allPasswordsMatch","values","Set","map","has","size","PasswordPeekController","peak","passwordTarget","hide","ResponsiveIframeWrapperController","messageReceived","boundMessageReceived","hasOwnProperty","ResponsiveIframeBodyController","top","debounces","func","postUpdate","getHeight","parent","postMessage","body","documentElement","EphemeralController","cleanupSelf","cleanup","replaceAll","RegExp","substringIdentifierValueRegex","camelCase","action","keys","val","classes","smoothSupported","smoothPolyfilled","scrollToElement","behavior","block","inline","async","polyfill","polyfillSmooth","scrollIntoView","getScrollParent","node","overflowY","getComputedStyle","parentElement","ScrollIntoFocusController","hasBehaviorValue","behaviorValue","hasBlockValue","blockValue","hasInlineValue","inlineValue","ScrollToBottomController","scroll","hasModeValue","modeValue","mode","ScrollToController","selectorValue","warn","selector","ScrollToTopController","SelfDestructController","timeout","secondsValue","seconds","TeleportController","hasInsertValue","hasImmediateValue","immediateValue","execute","destination","targetValue","cloneNode","insertValue","outerHTML","insert","immediate","ToggleClassController","hasClassValue","hasMouseEnterValue","hasMouseLeaveValue","useHover","hasClickAwayValue","clickAwayValue","onEvent","contains","rect","getBoundingClientRect","windowHeight","windowWidth","clientWidth","left","isElementInViewport","clickOutside","clickOutsideEvent","useClickOutside","hasInitialValue","toggleTargets","elementOn","elementOff","elementWasToggled","elementToggleStatus","elementToggle","mouseEnter","mouseEnterValue","on","off","mouseLeave","mouseLeaveValue","toggled","classValue","class","clickAway","initial","TurboFrameRCController","frameSrc","getFrame","getSrc","setSrc","frame","hasLoadingMessageValue","loadingMessageValue","getElementById","frameIdValue","hasSrcValue","srcValue","isHTMLLinkElement","frameId","loadingMessage","WordCountController","updateWordCount","wordCount","matches","match"],"mappings":"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"}