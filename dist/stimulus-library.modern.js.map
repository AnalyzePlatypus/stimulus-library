{"version":3,"file":"stimulus-library.modern.js","sources":["../src/base_controller.ts","../src/async_block_controller.ts","../src/auto_submit_form_controller.ts","../node_modules/stimulus-use/dist/support/index.js","../node_modules/stimulus-use/dist/use-intersection/use-intersection.js","../node_modules/stimulus-use/dist/use-click-outside/use-click-outside.js","../node_modules/stimulus-use/dist/stimulus_use.js","../node_modules/stimulus-use/dist/use-hover/use-hover.js","../node_modules/stimulus-use/dist/use-mutation/use-mutation.js","../node_modules/stimulus-use/dist/use-window-resize/use-window-resize.js","../node_modules/stimulus-use/dist/use-debounce/use-debounce.js","../src/autosize_controller.ts","../src/char_count_controller.ts","../src/checkbox_select_all_controller.ts","../src/clipboard_controller.ts","../src/utilities/elements.ts","../src/confirm_controller.ts","../src/confirm_navigation_controller.ts","../src/debug_controller.ts","../src/detect_dirty_controller.ts","../src/disable_inputs_controller.ts","../src/dismissable_controller.ts","../src/empty_dom_controller.ts","../src/enable_inputs_controller.ts","../src/fallback_image_controller.ts","../src/form_save_controller.ts","../src/intersection_controller.ts","../src/lazy_block_controller.ts","../src/utilities/scroll.ts","../src/lightbox_image_controller.ts","../src/limited_selection_checkboxes_controller.ts","../src/nested_form_controller.ts","../src/password_confirm_controller.ts","../src/password_peek_controller.ts","../src/responsive_iframe_controller.ts","../src/utilities/ephemeral_controller.ts","../src/scroll_into_focus_controller.ts","../src/scroll_to_bottom_controller.ts","../src/scroll_to_controller.ts","../src/scroll_to_top_controller.ts","../src/self_destruct_controller.ts","../src/sticky_controller.ts","../src/teleport_controller.ts","../src/toggle_class_controller.ts","../src/turbo_frame_rc_controller.ts","../src/utilities/turbo.ts","../src/word_count_controller.ts"],"sourcesContent":["import {Context, Controller} from \"stimulus\";\r\n\r\nexport class BaseController extends Controller {\r\n\r\n  constructor(context: Context) {\r\n    super(context);\r\n    return new Proxy(this, {\r\n      get: (obj, prop) => {\r\n        let returnVal = Reflect.get(obj, prop);\r\n        let self = this;\r\n        if (logProperty(prop.toString())) {\r\n          if (typeof returnVal == \"function\") {\r\n            return new Proxy(returnVal, {\r\n              apply(target: any, thisArg: any, argArray?: any): any {\r\n                self.log(prop.toString(), {\r\n                  args: argArray,\r\n                });\r\n                return Reflect.apply(target, thisArg, argArray);\r\n              },\r\n            });\r\n          } else {\r\n            this.log(prop.toString());\r\n          }\r\n        }\r\n        return returnVal;\r\n      },\r\n    });\r\n  }\r\n\r\n  dispatch(element: HTMLElement, eventName: string, options: CustomEventInit = {bubbles: true, cancelable: true, detail: {target: element}}) {\r\n    let event = new CustomEvent(eventName, options);\r\n    element.dispatchEvent(event);\r\n  }\r\n\r\n  log(functionName: string, args: {} = {}): void {\r\n    // @ts-ignore\r\n    if (!this.application.debug) {\r\n      return;\r\n    }\r\n    let logger = console;\r\n    logger.groupCollapsed(`%c${this.identifier} %c#${functionName}`, \"color: #3B82F6\", \"color: unset\");\r\n    logger.log({\r\n      element: this.element,\r\n      ...args,\r\n    });\r\n    logger.groupEnd();\r\n  }\r\n\r\n}\r\n\r\nfunction logProperty(prop: string): boolean {\r\n  switch (prop) {\r\n    case \"application\":\r\n    case \"element\":\r\n    case \"constructor\":\r\n    case \"initialize\":\r\n    case \"log\":\r\n    case \"data\":\r\n    case \"valueDescriptorMap\":\r\n    case \"identifier\":\r\n      return false;\r\n  }\r\n\r\n  if (/^_.*?$/.test(prop)) {\r\n    return false;\r\n  }\r\n  if (/^.*?Target(s)?$/.test(prop)) {\r\n    return false;\r\n  }\r\n  if (/^.*?Value$/.test(prop)) {\r\n    return false;\r\n  }\r\n  if (/^.*?ValueChanged$/.test(prop)) {\r\n    return false;\r\n  }\r\n  if (/^.*?Class$/.test(prop)) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n","import {BaseController} from \"./base_controller\";\n\nexport class AsyncBlockController extends BaseController {\n  static targets = [\"replace\"];\n  static values = {endpoint: String};\n\n  declare readonly replaceTarget: HTMLElement;\n  declare readonly hasReplaceTarget: boolean;\n  declare readonly endpointValue: string;\n\n\n  // This is a simple controller to load a block of content when the page loads.\n  // It should be used to give a quick initial response before calling out to an\n  // an AJAX endpoint to do some expensive work.\n  connect() {\n    this.loadContent();\n  }\n\n  loadContent() {\n    let el = (this.hasReplaceTarget ? this.replaceTarget : this.element) as HTMLElement;\n    fetch(this.endpointValue)\n    .then((response) => response.text())\n    .then((html) => {\n      let newEl = document.createElement(\"div\");\n      newEl.innerHTML = html;\n      el.replaceWith(newEl);\n\n      // Trigger event to show block has loaded\n      let event = new CustomEvent(\"ajax:success\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    })\n    .catch(err => {\n      el.replaceWith(\"Sorry, this content failed to load\");\n\n      let event = new CustomEvent(\"ajax:error\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    })\n    .finally(() => {\n      let event = new CustomEvent(\"ajax:complete\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    });\n  }\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class AutoSubmitFormController extends BaseController {\n\n  private boundHandler = this.handler.bind(this);\n\n  connect() {\n    (this.element as HTMLElement).querySelectorAll(\"input, select, textarea\").forEach(el => el.addEventListener(\"change\", this.boundHandler));\n  }\n\n  disconnect() {\n    (this.element as HTMLElement).querySelectorAll(\"input, select, textarea\").forEach(el => el.removeEventListener(\"change\", this.boundHandler));\n  }\n\n  private handler(e: Event) {\n    // this.element.submit()\n    // Moved to this to support remote forms and CSRF properly\n    this.element.dispatchEvent(\n      new CustomEvent(\"submit\", {\n        bubbles: true,\n        cancelable: true,\n      }),\n    );\n  }\n}\n","export const method = (controller, methodName) => {\n    const method = controller[methodName];\n    if (typeof method == 'function') {\n        return method;\n    }\n    else {\n        return (...args) => { };\n    }\n};\nexport const composeEventName = (name, controller, eventPrefix) => {\n    let composedName = name;\n    if (eventPrefix === true) {\n        composedName = `${controller.identifier}:${name}`;\n    }\n    else if (typeof eventPrefix === 'string') {\n        composedName = `${eventPrefix}:${name}`;\n    }\n    return composedName;\n};\nexport const extendedEvent = (type, event, detail) => {\n    const { bubbles, cancelable, composed } = event || { bubbles: true, cancelable: true, composed: true };\n    if (event) {\n        Object.assign(detail, { originalEvent: event });\n    }\n    const customEvent = new CustomEvent(type, {\n        bubbles,\n        cancelable,\n        composed,\n        detail,\n    });\n    return customEvent;\n};\nexport function isElementInViewport(el) {\n    const rect = el.getBoundingClientRect();\n    const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n    const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n    const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n    const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) >= 0);\n    return (vertInView && horInView);\n}\n//# sourceMappingURL=index.js.map","import { method, extendedEvent, composeEventName } from '../support/index';\nconst defaultOptions = {\n    dispatchEvent: true,\n    eventPrefix: true,\n};\nexport const useIntersection = (controller, options = {}) => {\n    const { dispatchEvent, eventPrefix } = Object.assign({}, defaultOptions, options);\n    const targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n    const callback = (entries) => {\n        const [entry] = entries;\n        if (entry.isIntersecting) {\n            dispatchAppear(entry);\n        }\n        else if (controller.isVisible) {\n            dispatchDisappear(entry);\n        }\n    };\n    const dispatchAppear = (entry) => {\n        controller.isVisible = true;\n        method(controller, 'appear').call(controller, entry);\n        // emit a custom \"appear\" event\n        if (dispatchEvent) {\n            const eventName = composeEventName('appear', controller, eventPrefix);\n            const appearEvent = extendedEvent(eventName, null, { controller, entry });\n            targetElement.dispatchEvent(appearEvent);\n        }\n    };\n    const dispatchDisappear = (entry) => {\n        controller.isVisible = false;\n        method(controller, 'disappear').call(controller, entry);\n        // emit a custom \"disappear\" event\n        if (dispatchEvent) {\n            const eventName = composeEventName('disappear', controller, eventPrefix);\n            const disappearEvent = extendedEvent(eventName, null, { controller, entry });\n            targetElement.dispatchEvent(disappearEvent);\n        }\n    };\n    // keep a copy of the current disconnect() function of the controller\n    // to support composing several behaviors\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    const observer = new IntersectionObserver(callback, options);\n    const observe = () => {\n        observer.observe(targetElement);\n    };\n    const unobserve = () => {\n        observer.unobserve(targetElement);\n    };\n    Object.assign(controller, {\n        isVisible: false,\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-intersection.js.map","import { composeEventName, extendedEvent, isElementInViewport } from '../support/index';\nconst defaultOptions = {\n    events: ['click', 'touchend'],\n    onlyVisible: true,\n    dispatchEvent: true,\n    eventPrefix: true,\n};\nexport const useClickOutside = (controller, options = {}) => {\n    const { onlyVisible, dispatchEvent, events, eventPrefix } = Object.assign({}, defaultOptions, options);\n    const onEvent = (event) => {\n        const targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        if (targetElement.contains(event.target) || (!isElementInViewport(targetElement) && onlyVisible)) {\n            return;\n        }\n        // call the clickOutside method of the Stimulus controller\n        if (controller.clickOutside) {\n            controller.clickOutside(event);\n        }\n        // emit a custom event\n        if (dispatchEvent) {\n            const eventName = composeEventName('click:outside', controller, eventPrefix);\n            const clickOutsideEvent = extendedEvent(eventName, event, { controller });\n            targetElement.dispatchEvent(clickOutsideEvent);\n        }\n    };\n    const observe = () => {\n        events === null || events === void 0 ? void 0 : events.forEach(event => {\n            window.addEventListener(event, onEvent, false);\n        });\n    };\n    const unobserve = () => {\n        events === null || events === void 0 ? void 0 : events.forEach(event => {\n            window.removeEventListener(event, onEvent, false);\n        });\n    };\n    // keep a copy of the current disconnect() function of the controller\n    // to support composing several behaviors\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    Object.assign(controller, {\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-click-outside.js.map","const defaultOptions = {\n    debug: false,\n    logger: console\n};\nexport class StimulusUse {\n    constructor(controller, options = {}) {\n        var _a, _b, _c;\n        this.log = (functionName, args) => {\n            if (!this.debug)\n                return;\n            this.logger.groupCollapsed(`%c${this.controller.identifier} %c#${functionName}`, 'color: #3B82F6', 'color: unset');\n            this.logger.log(Object.assign({ controllerId: this.controllerId }, args));\n            this.logger.groupEnd();\n        };\n        this.debug = (_b = (_a = options === null || options === void 0 ? void 0 : options.debug) !== null && _a !== void 0 ? _a : controller.application.stimulusUseDebug) !== null && _b !== void 0 ? _b : defaultOptions.debug;\n        this.logger = (_c = options === null || options === void 0 ? void 0 : options.logger) !== null && _c !== void 0 ? _c : defaultOptions.logger;\n        this.controller = controller;\n        this.controllerId = controller.element.id || controller.element.dataset.id;\n        // make copies of lifecycle functions\n        this.controllerInitialize = controller.initialize.bind(controller);\n        this.controllerConnect = controller.connect.bind(controller);\n        this.controllerDisconnect = controller.disconnect.bind(controller);\n    }\n}\n//# sourceMappingURL=stimulus_use.js.map","import { StimulusUse } from '../stimulus_use';\nimport { method } from '../support/index';\nexport class UseHover extends StimulusUse {\n    constructor(controller, options = {}) {\n        super(controller, options);\n        this.observe = () => {\n            this.targetElement.addEventListener('mouseenter', this.onEnter);\n            this.targetElement.addEventListener('mouseleave', this.onLeave);\n        };\n        this.unobserve = () => {\n            this.targetElement.removeEventListener('mouseenter', this.onEnter);\n            this.targetElement.removeEventListener('mouseleave', this.onLeave);\n        };\n        this.onEnter = () => {\n            method(this.controller, 'mouseEnter').call(this.controller);\n            this.log('mouseEnter', { hover: true });\n        };\n        this.onLeave = () => {\n            method(this.controller, 'mouseLeave').call(this.controller);\n            this.log('mouseLeave', { hover: false });\n        };\n        this.targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        this.controller = controller;\n        this.enhanceController();\n        this.observe();\n    }\n    enhanceController() {\n        const controllerDisconnect = this.controller.disconnect.bind(this.controller);\n        const disconnect = () => {\n            this.unobserve();\n            controllerDisconnect();\n        };\n        Object.assign(this.controller, { disconnect });\n    }\n}\nexport const useHover = (controller, options = {}) => {\n    const observer = new UseHover(controller, options);\n    return [observer.observe, observer.unobserve];\n};\n//# sourceMappingURL=use-hover.js.map","import { StimulusUse } from '../stimulus_use';\nimport { method } from '../support/index';\nexport class UseMutation extends StimulusUse {\n    constructor(controller, options = {}) {\n        super(controller, options);\n        this.observe = () => {\n            try {\n                this.observer.observe(this.targetElement, this.options);\n            }\n            catch (error) {\n                this.controller.application.handleError(error, \"At a minimum, one of childList, attributes, and/or characterData must be true\", {});\n            }\n        };\n        this.unobserve = () => {\n            this.observer.disconnect();\n        };\n        this.mutation = (entries) => {\n            method(this.controller, 'mutate').call(this.controller, entries);\n            this.log('mutate', { entries });\n        };\n        this.targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        this.controller = controller;\n        this.options = options;\n        this.observer = new MutationObserver(this.mutation);\n        this.enhanceController();\n        this.observe();\n    }\n    enhanceController() {\n        const controllerDisconnect = this.controller.disconnect.bind(this.controller);\n        const disconnect = () => {\n            this.unobserve();\n            controllerDisconnect();\n        };\n        Object.assign(this.controller, { disconnect });\n    }\n}\nexport const useMutation = (controller, options = {}) => {\n    const observer = new UseMutation(controller, options);\n    return [observer.observe, observer.unobserve];\n};\n//# sourceMappingURL=use-mutation.js.map","import { method } from '../support/index';\nexport const useWindowResize = (controller) => {\n    const callback = (event) => {\n        const { innerWidth, innerHeight } = window;\n        const payload = {\n            height: innerHeight || Infinity,\n            width: innerWidth || Infinity,\n            event\n        };\n        method(controller, 'windowResize').call(controller, payload);\n    };\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    const observe = () => {\n        window.addEventListener('resize', callback);\n        callback();\n    };\n    const unobserve = () => {\n        window.removeEventListener('resize', callback);\n    };\n    Object.assign(controller, {\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-window-resize.js.map","import { Controller } from 'stimulus';\nclass DebounceController extends Controller {\n}\nDebounceController.debounces = [];\nconst defaultWait = 200;\nconst debounce = (fn, wait = defaultWait) => {\n    let timeoutId = null;\n    return function () {\n        const args = arguments;\n        const context = this;\n        const callback = () => fn.apply(context, args);\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(callback, wait);\n    };\n};\nexport const useDebounce = (controller, options) => {\n    var _a;\n    const constructor = controller.constructor;\n    (_a = constructor.debounces) === null || _a === void 0 ? void 0 : _a.forEach((func) => {\n        if (typeof func === \"string\") {\n            controller[func] = debounce(controller[func], options === null || options === void 0 ? void 0 : options.wait);\n        }\n        if (typeof func === \"object\") {\n            const { name, wait } = func;\n            if (!name)\n                return;\n            controller[name] = debounce(controller[name], wait || (options === null || options === void 0 ? void 0 : options.wait));\n        }\n    });\n};\n//# sourceMappingURL=use-debounce.js.map","import {useWindowResize} from \"stimulus-use\";\nimport {BaseController} from \"./base_controller\";\n\nexport class AutosizeController extends BaseController {\n\n  private boundHandler = this.handler.bind(this);\n\n  connect() {\n    let target = this.element as HTMLTextAreaElement;\n    target.style.resize = \"none\";\n    target.style.boxSizing = \"border-box\";\n    target.addEventListener(\"input\", this.boundHandler);\n    target.addEventListener(\"focus\", this.boundHandler);\n    useWindowResize(this);\n    requestAnimationFrame(this.boundHandler);\n  }\n\n  windowResize() {\n    this.handler();\n  }\n\n  private handler() {\n    this.autosize(this.element as HTMLTextAreaElement);\n  };\n\n  private autosize(element: HTMLTextAreaElement) {\n    let offset = element.offsetHeight - element.clientHeight;\n    element.style.height = \"auto\";\n    element.style.height = element.scrollHeight + offset + \"px\";\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class CharCountController extends BaseController {\r\n\r\n  static targets = [\"input\", \"output\"];\r\n  static values = {min: Number, max: Number};\r\n  static classes = [\"error\"];\r\n\r\n  declare readonly inputTarget: HTMLInputElement | HTMLTextAreaElement;\r\n  declare readonly outputTarget: HTMLElement;\r\n  declare minValue: number;\r\n  declare hasMinValue: boolean;\r\n  declare maxValue: number;\r\n  declare hasMaxValue: boolean;\r\n  declare errorClass: string;\r\n  declare hasErrorClass: boolean;\r\n\r\n  boundHandler = this.updateCharCount.bind(this);\r\n\r\n  connect() {\r\n    this.updateCharCount();\r\n    this.inputTarget.addEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  disconnect() {\r\n    this.inputTarget.removeEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  updateCharCount() {\r\n    let charCount = this.inputTarget.value.length;\r\n    this.outputTarget.innerText = charCount.toString();\r\n    if (this.hasErrorClass) {\r\n      if (this.isValidCount(charCount)) {\r\n        this.outputTarget.classList.remove(this.errorClass);\r\n      } else {\r\n        this.outputTarget.classList.add(this.errorClass);\r\n      }\r\n    }\r\n  }\r\n\r\n  isValidCount(count: number) {\r\n    let min = 0;\r\n    let max = 99999;\r\n\r\n    if (this.hasMinValue) {\r\n      min = this.minValue;\r\n    }\r\n\r\n    if (this.hasMaxValue) {\r\n      max = this.maxValue;\r\n    }\r\n\r\n    return count >= min && count <= max;\r\n  }\r\n\r\n}\r\n","import {BaseController} from './base_controller';\n\nexport class CheckboxSelectAllController extends BaseController {\n  static targets = ['selectAll', 'checkbox'];\n\n  declare readonly hasSelectAllTarget: boolean;\n  declare readonly selectAllTarget: HTMLInputElement;\n  declare readonly checkboxTargets: HTMLInputElement[];\n\n  private get checked() {\n    return this.checkboxTargets.filter(checkbox => checkbox.checked);\n  }\n\n  private get unchecked() {\n    return this.checkboxTargets.filter(checkbox => !checkbox.checked);\n  }\n\n  initialize() {\n    this.toggle = this.toggle.bind(this);\n    this.refresh = this.refresh.bind(this);\n  }\n\n  connect() {\n    requestAnimationFrame(() => {\n      if (!this.hasSelectAllTarget) {\n        return;\n      }\n\n      this.selectAllTarget.addEventListener('change', this.toggle);\n      this.checkboxTargets.forEach(checkbox => checkbox.addEventListener('change', this.refresh));\n      this.refresh();\n    });\n  }\n\n  disconnect() {\n    if (!this.hasSelectAllTarget) {\n      return;\n    }\n\n    this.selectAllTarget.removeEventListener('change', this.toggle);\n    this.checkboxTargets.forEach((checkbox) => checkbox.removeEventListener('change', this.refresh));\n  }\n\n  private toggle(event: Event) {\n    event.preventDefault();\n    let target = event.target as HTMLInputElement;\n    this.checkboxTargets.forEach((checkbox) => checkbox.checked = target.checked);\n  }\n\n  private refresh() {\n    const checkboxesCount = this.checkboxTargets.length;\n    const checkboxesCheckedCount = this.checked.length;\n\n    this.selectAllTarget.checked = checkboxesCheckedCount > 0;\n    this.selectAllTarget.indeterminate = checkboxesCheckedCount > 0 && checkboxesCheckedCount < checkboxesCount;\n  }\n}","import {BaseController} from \"./base_controller\";\r\n\r\nexport class ClipboardController extends BaseController {\r\n\r\n  static targets = [\"button\", \"copy\", \"fallback\"];\r\n  static values = {removeUnused: Boolean};\r\n\r\n  declare readonly sourceTarget: HTMLElement;\r\n  declare readonly copyTarget: HTMLElement;\r\n  declare readonly hasCopyTarget: boolean;\r\n  declare readonly fallbackTarget: HTMLElement;\r\n  declare readonly hasFallbackTarget: boolean;\r\n\r\n  declare readonly hasRemoveUnusedValue: boolean;\r\n  declare readonly removeUnusedValue: boolean;\r\n\r\n  supported = false;\r\n\r\n  connect() {\r\n    this.supported = document.queryCommandSupported(\"copy\");\r\n\r\n    if (this.hasRemoveUnusedValue && this.removeUnusedValue) {\r\n      if (this.supported && this.hasFallbackTarget) {\r\n        this.fallbackTarget.remove();\r\n      } else if (this.hasCopyTarget) {\r\n        this.copyTarget.remove();\r\n      }\r\n    }\r\n  }\r\n\r\n  select(event: MouseEvent) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    (this.sourceTarget as HTMLInputElement | HTMLTextAreaElement).select();\r\n  }\r\n\r\n  copy(event: ClipboardEvent) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    (this.sourceTarget as HTMLInputElement | HTMLTextAreaElement).select();\r\n    if (this.supported) {\r\n      document.execCommand(\"copy\");\r\n    }\r\n  }\r\n}\r\n","export function isHTMLLinkElement(element: Element): element is HTMLLinkElement {\n  return element.nodeName == \"A\";\n}\n\nexport function isHTMLFormElement(element: Element): element is HTMLFormElement {\n  return element.nodeName == \"FORM\";\n}\n\nexport function isHTMLInputElement(element: Element): element is HTMLInputElement {\n  return element.nodeName == \"INPUT\";\n}\n\nexport function isHTMLImageElement(element: Element): element is HTMLImageElement {\n  return element.nodeName == \"IMG\";\n}\n\n","import {BaseController} from './base_controller';\r\nimport {isHTMLFormElement, isHTMLLinkElement} from \"./utilities/elements\";\r\n\r\nexport class ConfirmController extends BaseController {\r\n\r\n  static values = {\r\n    message: String,\r\n  };\r\n\r\n  declare readonly messageValue: string;\r\n  declare readonly hasMessageValue: boolean;\r\n\r\n  get message(): string {\r\n    return this.hasMessageValue ? this.messageValue : 'Are you sure?';\r\n  }\r\n\r\n  initialize() {\r\n    this.confirm = this.confirm.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      let element = this.element as HTMLElement;\r\n      if (isHTMLFormElement(element)) {\r\n        element.addEventListener(\"submit\", this.confirm);\r\n      } else if (isHTMLLinkElement(element)) {\r\n        element.addEventListener(\"click\", this.confirm);\r\n      } else {\r\n        throw new Error(\"Can't handle confirmation on attached element\");\r\n      }\r\n    });\r\n  }\r\n\r\n  confirm(event: Event) {\r\n    if (!(window.confirm(this.message))) {\r\n      event.preventDefault();\r\n      this.dispatch(this.element as HTMLElement, \"confirm:cancelled\");\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\n\nexport class ConfirmNavigationController extends BaseController {\n\n  static values = {message: String};\n\n  declare readonly messageValue: string;\n\n  connect() {\n    let confirmMessage = this.messageValue;\n    window.onbeforeunload = () => (confirmMessage == null ? true : confirmMessage);\n    window.addEventListener(\"popstate\", this.handlePopstate);\n    window.addEventListener(\"submit\", () => {\n      window.removeEventListener(\"popstate\", this.handlePopstate);\n      window.onbeforeunload = null;\n    });\n    // TODO: Turbo navigation events\n  }\n\n  handlePopstate(event: PopStateEvent) {\n    return false;\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class DebugController extends BaseController {\n\n  static targets = [\"test\"];\n  declare testTargets: HTMLElement[];\n\n  connect() {\n    console.log(\"Debug Controller\", this, this.testTargets);\n  }\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class DetectDirtyController extends BaseController {\r\n\r\n  initialValue: string | boolean | null = null;\r\n\r\n  boundHandler = this.handler.bind(this);\r\n\r\n  connect() {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    if (this.isInputElement(element) && this.isCheckable(element)) {\r\n      this.initialValue = element.checked;\r\n    } else {\r\n      this.initialValue = element.value;\r\n    }\r\n    element.addEventListener(\"input\", this.boundHandler);\r\n    element.addEventListener(\"change\", this.boundHandler);\r\n  }\r\n\r\n  disconnect() {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    element.removeEventListener(\"input\", this.boundHandler);\r\n    element.removeEventListener(\"change\", this.boundHandler);\r\n  }\r\n\r\n  restore() {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    if (this.isInputElement(element) && this.isCheckable(element)) {\r\n      element.checked = this.initialValue as boolean;\r\n    } else {\r\n      element.value = this.initialValue as string;\r\n    }\r\n  }\r\n\r\n  private handler(event?: Event) {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n\r\n    if (this.initialValue !== element.value) {\r\n      element.setAttribute(\"data-dirty\", \"true\");\r\n    } else {\r\n      element.removeAttribute(\"data-dirty\");\r\n    }\r\n  }\r\n\r\n  private isCheckable(element: HTMLInputElement): boolean {\r\n    return (element.type === \"radio\" || element.type === \"checkbox\");\r\n  }\r\n\r\n  private isInputElement(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement): element is HTMLInputElement {\r\n    return element.tagName === \"INPUT\";\r\n  }\r\n\r\n}\r\n\r\nexport function isDirty(element: HTMLElement) {\r\n  return element.hasAttribute(\"data-dirty\");\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class DisableInputsController extends BaseController {\r\n\r\n  static targets = [\"disabler\", \"disable\"];\r\n\r\n  static values = {\r\n    clear: Boolean,\r\n  };\r\n\r\n  declare readonly hasDisablerTarget: boolean;\r\n  declare readonly disablerTarget: HTMLInputElement;\r\n  declare readonly disableTargets: Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\r\n  declare readonly clearValue: boolean;\r\n  declare readonly hasClearValue: boolean;\r\n\r\n  connect() {\r\n    this.toggle();\r\n  }\r\n\r\n  toggle() {\r\n    if (this.hasDisablerTarget && this.disablerTarget.checked) {\r\n      this.disableInputs();\r\n    } else {\r\n      this.enableInputs();\r\n    }\r\n  }\r\n\r\n  disableInputs() {\r\n    let shouldClear = this.hasClearValue && this.clearValue;\r\n    this.disableTargets.forEach((el, _) => {\r\n      if (shouldClear) {\r\n        el.value = \"\";\r\n      }\r\n      el.disabled = true;\r\n    });\r\n  }\r\n\r\n  enableInputs() {\r\n    this.disableTargets.forEach((el, _) => {\r\n      el.disabled = false;\r\n    });\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class DismissableController extends BaseController {\r\n\r\n\r\n  dismiss() {\r\n    this.element.remove();\r\n  }\r\n\r\n}\r\n","import {useMutation} from \"stimulus-use\";\r\nimport {BaseController} from \"./base_controller\";\r\n\r\nexport class EmptyDomController extends BaseController {\r\n\r\n  static classes = [\"empty\", \"notEmpty\"];\r\n  static values = {scopeSelector: String};\r\n\r\n  declare hasEmptyClass: boolean;\r\n  declare emptyClass: string;\r\n  declare hasNotEmptyClass: boolean;\r\n  declare notEmptyClass: string;\r\n\r\n  declare hasScopeSelectorValue: boolean;\r\n  declare scopeSelectorValue: string;\r\n\r\n  connect() {\r\n    useMutation(this, {element: this.element, childList: true});\r\n    this.checkEmpty();\r\n  }\r\n\r\n  mutate(entries: MutationRecord[]) {\r\n    this.checkEmpty();\r\n  }\r\n\r\n  checkEmpty() {\r\n    let children;\r\n    if (this.hasScopeSelectorValue) {\r\n      children = this.element.querySelectorAll(this.scopeSelectorValue);\r\n    } else {\r\n      children = this.element.children;\r\n    }\r\n\r\n    if (children.length === 0) {\r\n      if (this.hasNotEmptyClass) {\r\n        let classes = this.notEmptyClass.split(\" \");\r\n        classes.forEach(klass => this.element.classList.remove(klass));\r\n      }\r\n      if (this.hasEmptyClass) {\r\n        let classes = this.emptyClass.split(\" \");\r\n        classes.forEach(klass => this.element.classList.add(klass));\r\n      }\r\n      this.element.dispatchEvent(\r\n        new CustomEvent(\"dom:empty\", {\r\n          bubbles: true,\r\n          cancelable: true,\r\n        }),\r\n      );\r\n    } else {\r\n      if (this.hasNotEmptyClass) {\r\n        let classes = this.notEmptyClass.split(\" \");\r\n        classes.forEach(klass => this.element.classList.add(klass));\r\n      }\r\n      if (this.hasEmptyClass) {\r\n        let classes = this.emptyClass.split(\" \");\r\n        classes.forEach(klass => this.element.classList.remove(klass));\r\n      }\r\n      this.element.dispatchEvent(\r\n        new CustomEvent(\"dom:not-empty\", {\r\n          bubbles: true,\r\n          cancelable: true,\r\n          detail: {\r\n            count: children.length,\r\n          },\r\n        }),\r\n      );\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class EnableInputsController extends BaseController {\r\n\r\n  static targets = [\"enabler\", \"enable\"];\r\n\r\n  static values = {\r\n    clear: Boolean,\r\n  };\r\n\r\n  declare readonly hasEnablerTarget: boolean;\r\n  declare readonly enablerTarget: HTMLInputElement;\r\n  declare readonly enableTargets: Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\r\n  declare readonly clearValue: boolean;\r\n  declare readonly hasClearValue: boolean;\r\n\r\n  connect() {\r\n    this.toggle();\r\n  }\r\n\r\n  toggle() {\r\n    if (this.hasEnablerTarget && this.enablerTarget.checked) {\r\n      this.enableInputs();\r\n    } else {\r\n      this.disableInputs();\r\n    }\r\n  }\r\n\r\n  disableInputs() {\r\n    let shouldClear = this.hasClearValue && this.clearValue;\r\n    this.enableTargets.forEach((el, _) => {\r\n      if (shouldClear) {\r\n        el.value = \"\";\r\n      }\r\n      el.disabled = true;\r\n    });\r\n  }\r\n\r\n  enableInputs() {\r\n    this.enableTargets.forEach((el, _) => {\r\n      el.disabled = false;\r\n    });\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class FallbackImageController extends BaseController {\r\n\r\n  static values = {placeholder: String};\r\n\r\n  declare readonly placeholderValue: string;\r\n  declare readonly hasPlaceholderValue: boolean;\r\n\r\n  connect() {\r\n    let element = this.element as HTMLImageElement;\r\n\r\n    element.onerror = () => {\r\n      if (this.hasPlaceholderValue) {\r\n        element.src = this.placeholderValue;\r\n      } else {\r\n        element.style.display = \"none\";\r\n      }\r\n    };\r\n  }\r\n\r\n}\r\n","import {BaseController} from './base_controller';\r\nimport {isHTMLFormElement, isHTMLInputElement} from \"./utilities/elements\";\r\n\r\ninterface FormSavePayload {\r\n  [idx: string]: {\r\n    [idx: string]: string | boolean\r\n  }\r\n}\r\n\r\nexport class FormSaveController extends BaseController {\r\n\r\n  static values = {\r\n    id: String,\r\n    restoreOnLoad: Boolean,\r\n    clearOnSubmit: Boolean,\r\n  };\r\n\r\n  declare readonly idValue: string;\r\n  declare readonly hasIdValue: boolean;\r\n  declare readonly restoreOnLoadValue: boolean;\r\n  declare readonly hasRestoreOnLoadValue: boolean;\r\n  declare readonly clearOnSubmitValue: boolean;\r\n  declare readonly hasClearOnSubmitValue: boolean;\r\n\r\n  get formID() {\r\n    if (this.hasIdValue) {\r\n      return this.idValue;\r\n    }\r\n    let elementID = (this.element as HTMLFormElement).id;\r\n\r\n    if (elementID !== \"\") {\r\n      return elementID;\r\n    } else {\r\n      throw new Error(`No ID value to uniquely identify this form. Please either specify data-${this.identifier}-id-value or give this form an 'id' attribute. `);\r\n    }\r\n  }\r\n\r\n  get formIdentifier() {\r\n    const url = location.href;\r\n    return `${url} ${this.formID}`;\r\n  }\r\n\r\n  get formElements() {\r\n    return (this.element as HTMLFormElement).elements;\r\n  }\r\n\r\n  get formData(): FormSavePayload {\r\n    let data: FormSavePayload = {[this.formIdentifier]: {}};\r\n    for (const element of this.formElements) {\r\n      let el = element as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\r\n      if (el.name.length > 0) {\r\n        if (isHTMLInputElement(el) && el.type == \"checkbox\") {\r\n          data[this.formIdentifier][el.name] = el.checked;\r\n        } else if (isHTMLInputElement(el) && el.type == \"radio\") {\r\n          if (el.checked) {\r\n            data[this.formIdentifier][el.name] = el.value;\r\n          }\r\n        } else {\r\n          data[this.formIdentifier][el.name] = el.value;\r\n        }\r\n      }\r\n    }\r\n    return data;\r\n  }\r\n\r\n  get restoreOnLoad() {\r\n    return this.hasRestoreOnLoadValue ? this.restoreOnLoadValue : true;\r\n  }\r\n\r\n  get clearOnSubmit() {\r\n    return this.hasClearOnSubmitValue ? this.clearOnSubmitValue : true;\r\n  }\r\n\r\n  initialize() {\r\n    this._clear = this._clear.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      let element = this.element;\r\n      if (!isHTMLFormElement(element)) {\r\n        throw new Error('Expected controller to be mounted on a form element.');\r\n      }\r\n\r\n      if (this.restoreOnLoad) {\r\n        this.restore();\r\n      }\r\n      if (this.clearOnSubmit) {\r\n        this.element.addEventListener('submit', this._clear);\r\n      }\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.clearOnSubmit) {\r\n      this.element.removeEventListener('submit', this._clear);\r\n    }\r\n  }\r\n\r\n  _clear() {\r\n    localStorage.removeItem(this.formIdentifier);\r\n    this.dispatch(this.element as HTMLElement, `form-save:cleared`);\r\n  }\r\n\r\n  clear(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    this._clear();\r\n  }\r\n\r\n  save(event: Event) {\r\n    event.preventDefault();\r\n    let data = this.formData;\r\n    localStorage.setItem(this.formIdentifier, JSON.stringify(data[this.formIdentifier]));\r\n    this.dispatch(this.element as HTMLElement, `form-save:save:success`);\r\n  }\r\n\r\n  restore(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    if (localStorage.getItem(this.formIdentifier)) {\r\n      const savedData = JSON.parse(localStorage.getItem(this.formIdentifier)!); // get and parse the saved data from localStorage\r\n      for (const element of this.formElements) {\r\n        let el = element as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\r\n        if (el.name in savedData) {\r\n          if (isHTMLInputElement(el) && el.type == \"checkbox\") {\r\n            el.checked = savedData[el.name];\r\n          } else if (isHTMLInputElement(el) && el.type == \"radio\") {\r\n            if (el.value == savedData[el.name]) {\r\n              el.checked = true;\r\n            }\r\n          } else {\r\n            el.value = savedData[el.name];\r\n          }\r\n        }\r\n      }\r\n      this.dispatch(this.element as HTMLElement, `form-save:restore:success`);\r\n    } else {\r\n      this.dispatch(this.element as HTMLElement, `form-save:restore:empty`);\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\nimport {useIntersection} from \"stimulus-use\";\r\n\r\nexport class IntersectionController extends BaseController {\r\n\r\n  static values = {threshold: String};\r\n\r\n  declare readonly isVisible: boolean;\r\n  declare readonly thresholdValue: string;\r\n  declare readonly hasThresholdValue: boolean;\r\n\r\n  get threshold(): number[] {\r\n    if (this.hasThresholdValue) {\r\n      return this.thresholdValue.split(',').map(val => Number.parseFloat(val.trim())).filter(val => val >= 0 && val <= 1);\r\n    } else {\r\n      return [0, 1];\r\n    }\r\n  }\r\n\r\n  connect() {\r\n    useIntersection(this, {\r\n      threshold: this.threshold,\r\n      element: this.element,\r\n    });\r\n  }\r\n\r\n  appear(entry: IntersectionObserverEntry) {\r\n    this.dispatch(\r\n      this.element as HTMLElement,\r\n      \"intersection:appear\",\r\n      {\r\n        cancelable: true,\r\n        bubbles: true,\r\n        detail: {\r\n          element: this.element,\r\n        },\r\n      },\r\n    );\r\n  };\r\n\r\n  disappear(entry: IntersectionObserverEntry) {\r\n    this.dispatch(\r\n      this.element as HTMLElement,\r\n      \"intersection:disappear\",\r\n      {\r\n        cancelable: true,\r\n        bubbles: true,\r\n        detail: {\r\n          element: this.element,\r\n        },\r\n      },\r\n    );\r\n  };\r\n\r\n}\r\n","import {useIntersection} from \"stimulus-use\";\nimport {IntersectionOptions} from \"stimulus-use/dist/use-intersection/use-intersection\";\nimport {AsyncBlockController} from \"./async_block_controller\";\n\nexport class LazyBlockController extends AsyncBlockController {\n\n  declare observe: () => void;\n  declare unobserve: () => void;\n  declare options: IntersectionOptions;\n  declare isVisible: boolean;\n  declare disappear: () => void;\n\n  connect() {\n    let element = this.element;\n    this.options = {element, threshold: 0.3};\n\n    if (\"IntersectionObserver\" in window) {\n      [this.observe, this.unobserve] = useIntersection(this, this.options);\n    } else {\n      // Client doesn't support intersection observer, fallback to pre-loading\n      this.loadContent();\n    }\n  }\n\n  appear(entry: IntersectionObserverEntry) {\n    let element = this.element as HTMLImageElement;\n    if (element.src !== \"\") {\n      return;\n    }\n    if (entry.target === element && entry.isIntersecting) {\n      this.loadContent();\n      if (this.unobserve) {\n        this.unobserve();\n      }\n    }\n  }\n\n}\n","const smoothSupported = \"scrollBehavior\" in document.documentElement.style;\r\nlet smoothPolyfilled: boolean;\r\n\r\nexport async function scrollToElement(element: Element, {behavior = \"smooth\", block = \"start\", inline = \"nearest\"}: ScrollIntoViewOptions = {}) {\r\n  if (behavior == \"smooth\" && !smoothSupported) {\r\n    await polyfillSmooth();\r\n  }\r\n  element.scrollIntoView({behavior, block, inline});\r\n}\r\n\r\nasync function polyfillSmooth() {\r\n  const {polyfill} = await import(/* webpackChunkName: \"smoothscroll-polyfill\" */ \"smoothscroll-polyfill\");\r\n  if (smoothPolyfilled) {\r\n    return;\r\n  }\r\n  smoothPolyfilled = true;\r\n  polyfill();\r\n}\r\n\r\nexport function getScrollParent(node: HTMLElement | null): HTMLElement | null {\r\n  if (!node) {\r\n    return null;\r\n  }\r\n  const overflowY = getComputedStyle(node).overflowY;\r\n  const isScrollable = overflowY !== \"visible\" && overflowY !== \"hidden\";\r\n\r\n  if (isScrollable && node.scrollHeight >= node.clientHeight) {\r\n    return node;\r\n  }\r\n\r\n  return getScrollParent(node.parentElement) || document.body;\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\nimport {scrollToElement} from \"./utilities/scroll\";\r\nimport dialogPolyfill from \"dialog-polyfill\";\r\n\r\nexport class LightboxImageController extends BaseController {\r\n\r\n  static values = {\r\n    src: String,\r\n    srcSet: String,\r\n    sizes: String,\r\n  };\r\n  static classes = [\"modal\", \"image\"];\r\n\r\n  declare readonly hasModalClass: boolean;\r\n  declare readonly modalClass: string;\r\n  declare readonly hasImageClass: boolean;\r\n  declare readonly imageClass: string;\r\n  declare readonly hasSrcValue: boolean;\r\n  declare readonly srcValue: string;\r\n  declare readonly hasSrcSetValue: boolean;\r\n  declare readonly srcSetValue: string;\r\n  declare readonly hasSizesValue: boolean;\r\n  declare readonly sizesValue: string;\r\n  _dialog: HTMLDialogElement | null = null;\r\n\r\n  get src(): string {\r\n    return this.hasSrcValue ? this.srcValue : (this.element as HTMLImageElement).src;\r\n  }\r\n\r\n  get srcSet(): string {\r\n    return this.hasSrcSetValue ? this.srcSetValue : (this.element as HTMLImageElement).srcset;\r\n  }\r\n\r\n  get sizes(): string {\r\n    return this.hasSizesValue ? this.sizesValue : (this.element as HTMLImageElement).sizes;\r\n  }\r\n\r\n  get modalClassName() {\r\n    return this.hasModalClass ? this.modalClass : \"image-lightbox-dialog\";\r\n  }\r\n\r\n  get imageClassName() {\r\n    return this.hasImageClass ? this.imageClass : \"image-lightbox-image\";\r\n  }\r\n\r\n  initialize() {\r\n    this.open = this.open.bind(this);\r\n    this.close = this.close.bind(this);\r\n  }\r\n\r\n  connect() {\r\n  }\r\n\r\n  open() {\r\n    let element = this.element as HTMLImageElement;\r\n    if (this._dialog) {\r\n      return;\r\n    }\r\n    this._dialog = document.createElement(\"dialog\");\r\n\r\n    let image = document.createElement(\"img\") as HTMLImageElement;\r\n    image.className = this.imageClassName;\r\n    image.src = this.src;\r\n    image.srcset = this.srcSet;\r\n    image.sizes = this.sizes;\r\n    this._dialog.appendChild(image);\r\n\r\n    element.insertAdjacentElement(\"afterend\", this._dialog);\r\n    dialogPolyfill.registerDialog(this._dialog);\r\n    this._dialog.className = this.modalClassName;\r\n    this._dialog.showModal();\r\n    scrollToElement(this._dialog, {behavior: \"smooth\", block: \"end\"}).catch(() => this._dialog!.scrollIntoView(false));\r\n    this._dialog.addEventListener(\"click\", this.close);\r\n    this._dialog.addEventListener(\"cancel\", this.close);\r\n    this._dialog.addEventListener(\"close\", this.close);\r\n  }\r\n\r\n  close() {\r\n    if (this._dialog) {\r\n      this._dialog.close();\r\n      this._dialog.remove();\r\n      this._dialog = null;\r\n      scrollToElement(this.element, {behavior: \"smooth\", block: \"end\"}).catch(() => this.element.scrollIntoView(false));\r\n    }\r\n  }\r\n\r\n} ","import {BaseController} from \"./base_controller\";\r\n\r\nexport class LimitedSelectionCheckboxesController extends BaseController {\r\n\r\n  static targets = [\"input\", \"error\"];\r\n  static values = {max: Number, message: String};\r\n\r\n  declare readonly hasErrorTarget: boolean;\r\n  declare readonly errorTarget: HTMLElement;\r\n  declare readonly inputTargets: HTMLInputElement[];\r\n  declare readonly maxValue: number;\r\n  declare readonly messageValue: string;\r\n\r\n  maxSelections = 0;\r\n\r\n  boundHandleInputs = this.handleInputs.bind(this);\r\n\r\n  connect() {\r\n    this.inputTargets.forEach((el) => el.addEventListener(\"change\", this.boundHandleInputs));\r\n  }\r\n\r\n  disconnect() {\r\n    this.inputTargets.forEach((el) => el.removeEventListener(\"change\", this.boundHandleInputs));\r\n  }\r\n\r\n  handleInputs(event: Event) {\r\n    let tickedInputs = this.inputTargets.reduce((previousValue, el) => el.checked ? previousValue + 1 : previousValue, 0);\r\n    let target = event.target as HTMLInputElement;\r\n    if (tickedInputs > this.maxSelections) {\r\n      event.preventDefault();\r\n      target.checked = false;\r\n      target.dispatchEvent(new CustomEvent(\"change\", {bubbles: true, cancelable: true}));\r\n      target.dispatchEvent(new CustomEvent(\"limited-selection:too-many\", {bubbles: true, cancelable: true, detail: {target}}));\r\n      if (this.hasErrorTarget) {\r\n        this.errorTarget.innerHTML = this.messageValue;\r\n      }\r\n    } else {\r\n      target.dispatchEvent(new CustomEvent(\"limited-selection:selection\", {bubbles: true, cancelable: true, detail: {target}}));\r\n      if (this.hasErrorTarget) {\r\n        this.errorTarget.innerHTML = \"\";\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class NestedFormController extends BaseController {\r\n  static targets = ['target', 'template'];\r\n  static values = {\r\n    insertMode: String,\r\n    wrapperClass: String,\r\n  };\r\n\r\n  declare readonly targetTarget: HTMLElement;\r\n  declare readonly templateTarget: HTMLTemplateElement | HTMLScriptElement;\r\n\r\n  declare readonly wrapperClassValue: string;\r\n  declare readonly hasWrapperSelectorValue: boolean;\r\n  declare readonly insertModeValue: InsertPosition;\r\n  declare readonly hasInsertModeValue: boolean;\r\n\r\n  get wrapperClass() {\r\n    return this.hasWrapperSelectorValue ? this.wrapperClassValue : 'nested-fields';\r\n  }\r\n\r\n  get insertMode(): InsertPosition {\r\n    return this.hasInsertModeValue ? this.insertModeValue : 'beforeend';\r\n  }\r\n\r\n  connect() {\r\n    this.checkStructure();\r\n  }\r\n\r\n  add(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    const content = this.templateTarget.innerHTML.replace(/NEW_RECORD/g, this.generateID());\r\n    this.targetTarget.insertAdjacentHTML(this.insertMode, content);\r\n  }\r\n\r\n  remove(event: Event) {\r\n    event.preventDefault();\r\n    const wrapper: HTMLElement | null = (event.target as HTMLElement).closest(this.wrapperClass);\r\n    if (wrapper == null) {\r\n      throw new Error(`#remove was clicked from outside of a child record. Could not find an ancestor with class ${this.wrapperClass}`);\r\n    }\r\n\r\n    if (wrapper.dataset.newRecord === 'true') {\r\n      wrapper.remove();\r\n    } else {\r\n      wrapper.style.display = 'none';\r\n      let destroyInput = wrapper.querySelector(\"input[name*='_destroy']\") as HTMLInputElement | null;\r\n      if (destroyInput == null) {\r\n        throw new Error(`Could not find a hidden input with name '_destroy'. NestedForm cannot remove an already persisted record without it.`);\r\n      }\r\n\r\n      destroyInput.value = \"1\";\r\n    }\r\n  }\r\n\r\n  generateID(): string {\r\n    return new Date().getTime().toString() + Math.random();\r\n  }\r\n\r\n  private checkStructure() {\r\n    let template = this.templateTarget.innerHTML;\r\n\r\n    if (template.indexOf('NEW_RECORD')) {\r\n      throw new Error(\"Could not find 'NEW_RECORD' in the provided template. Please make sure you've passed `child_index: 'NEW_RECORD'` to `fields_for`\")\r\n    }\r\n  }\r\n}","import {BaseController} from \"./base_controller\";\r\n\r\nexport class PasswordConfirmController extends BaseController {\r\n\r\n  static targets = [\"password\"];\r\n  static classes = [\"error\"];\r\n\r\n  declare readonly passwordTargets: HTMLInputElement[];\r\n\r\n  declare readonly errorClass: string;\r\n  declare readonly hasErrorClass: boolean;\r\n\r\n  private boundCheckPasswordsMatch = this.checkPasswordsMatch.bind(this);\r\n\r\n  connect() {\r\n    this.passwordTargets.forEach((el) => el.addEventListener(\"change\", this.boundCheckPasswordsMatch));\r\n  }\r\n\r\n  disconnect() {\r\n    this.passwordTargets.forEach((el) => el.removeEventListener(\"change\", this.boundCheckPasswordsMatch));\r\n  }\r\n\r\n  private allPasswordsMatch() {\r\n    let values = new Set(this.passwordTargets.map(el => el.value));  // Create a unique set of the password values\r\n    return values.has(\"\") || values.size == 1; // If any of the passwords are still blank, or there is only one distinct password value (i.e. they all are the same)\r\n  }\r\n\r\n  private checkPasswordsMatch() {\r\n    if (this.allPasswordsMatch()) {\r\n      this.element.dispatchEvent(new CustomEvent(\"password-confirm:match\"));\r\n      if (this.hasErrorClass) {\r\n        this.passwordTargets.forEach(el => el.classList.remove(this.errorClass));\r\n      }\r\n    } else {\r\n      this.element.dispatchEvent(new CustomEvent(\"password-confirm:no-match\"));\r\n      if (this.hasErrorClass) {\r\n        this.passwordTargets.forEach(el => el.classList.add(this.errorClass));\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class PasswordPeekController extends BaseController {\r\n\r\n  static targets = [\"password\"];\r\n\r\n  declare readonly passwordTarget: HTMLInputElement;\r\n\r\n\r\n  peak(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    this.passwordTarget.type = \"text\";\r\n  }\r\n\r\n  hide(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    this.passwordTarget.type = \"password\";\r\n  }\r\n\r\n  toggle(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    if (this.passwordTarget.type === \"password\") {\r\n      this.peak();\r\n    } else {\r\n      this.hide();\r\n    }\r\n  }\r\n}\r\n","import {useDebounce, useWindowResize} from \"stimulus-use\";\nimport {WindowResizePayload} from \"stimulus-use/dist/use-window-resize/use-window-resize\";\nimport {BaseController} from \"./base_controller\";\n\ninterface ResponsiveIframeMessage {\n  name: string,\n  height: number,\n}\n\nexport class ResponsiveIframeWrapperController extends BaseController {\n\n  boundMessageReceived = this.messageReceived.bind(this);\n\n  connect() {\n    window.addEventListener(\"message\", this.boundMessageReceived);\n  }\n\n  disconnect() {\n    window.removeEventListener(\"message\", this.boundMessageReceived);\n  }\n\n  messageReceived(message: MessageEvent<ResponsiveIframeMessage>) {\n    let data = message.data;\n    if (data.hasOwnProperty(\"name\") && data.name === \"iframe-body\" && data.hasOwnProperty(\"height\")) {\n      this.resize(data.height);\n    }\n  }\n\n  resize(height: number) {\n    (this.element as HTMLIFrameElement).style.height = `${height}px`;\n  }\n\n}\n\nexport class ResponsiveIframeBodyController extends BaseController {\n\n  static debounces = [\"postUpdate\"];\n\n  declare observe: () => void;\n  declare unobserve: () => void;\n\n  connect() {\n    // If this Window is inside a frame\n    if (window.self !== window.top) {\n      useWindowResize(this);\n      useDebounce(this, {});\n      this.postUpdate();\n    } else {\n      // Not an iframe\n    }\n  }\n\n  windowResize(payload: WindowResizePayload) {\n    this.postUpdate();\n  };\n\n  postUpdate() {\n    let payload: ResponsiveIframeMessage = {name: \"iframe-body\", height: this.getHeight()};\n    window.parent.postMessage(\n      payload,\n      \"*\",\n    );\n  }\n\n  getHeight(): number {\n    const body = document.body;\n    const html = document.documentElement;\n\n    // Get the largest height out of body and html's various height measurements\n    return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n  }\n\n}\n","import camelCase from \"lodash/camelCase\";\r\nimport {BaseController} from \"../base_controller\";\r\n\r\nexport class EphemeralController extends BaseController {\r\n\r\n  cleanupSelf() {\r\n    this.cleanup(this.element as HTMLElement);\r\n  }\r\n\r\n  cleanup(element: HTMLElement) {\r\n    element.dataset.controller = element.dataset.controller?.replaceAll(new RegExp(`(\\s|^)${this.identifier}(\\s|$)`, \"g\"), \"\") || \"\";\r\n    if (element.dataset.controller == \"\") {\r\n      // If there are no controllers left, remove the attribute\r\n      delete element.dataset.controller;\r\n    }\r\n\r\n    let substringIdentifierValueRegex = new RegExp(`(\\s|^)${this.identifier}\\\\..+?(\\s|$)`, \"g\");\r\n    element.dataset.target = element.dataset.target?.replaceAll(substringIdentifierValueRegex, \"\") || \"\";\r\n    delete element.dataset[camelCase(`${this.identifier}-target`)];\r\n    if (element.dataset.target == \"\") {\r\n      // If there are no targets left, remove the attribute\r\n      delete element.dataset.target;\r\n    }\r\n\r\n    element.dataset.action = element.dataset.target?.replaceAll(substringIdentifierValueRegex, \"\") || \"\";\r\n    delete element.dataset[camelCase(`${this.identifier}-action`)];\r\n    if (element.dataset.action == \"\") {\r\n      // If there are no actions left, remove the attribute\r\n      delete element.dataset.action;\r\n    }\r\n\r\n    // @ts-ignore\r\n    let values = this.constructor.values;\r\n    if (values) {\r\n      Object.keys(values).forEach(val => delete element.dataset[camelCase(`${this.identifier}-${val}-value`)]);\r\n    }\r\n\r\n    // @ts-ignore\r\n    let classes = this.constructor.classes;\r\n    if (classes) {\r\n      Object.keys(classes).forEach(val => delete element.dataset[camelCase(`${this.identifier}-${val}-class`)]);\r\n    }\r\n  }\r\n\r\n}\r\n","import {EphemeralController} from \"./utilities/ephemeral_controller\";\r\nimport {scrollToElement} from \"./utilities/scroll\";\r\n\r\nexport class ScrollIntoFocusController extends EphemeralController {\r\n\r\n  static values = {\r\n    behavior: String,\r\n    block: String,\r\n    inline: String,\r\n  };\r\n\r\n  declare behaviorValue: ScrollBehavior;\r\n  declare hasBehaviorValue: boolean;\r\n  declare blockValue: ScrollLogicalPosition;\r\n  declare hasBlockValue: boolean;\r\n  declare inlineValue: ScrollLogicalPosition;\r\n  declare hasInlineValue: boolean;\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      // Attempt smooth scrolling, with polyfill\r\n      scrollToElement(\r\n        this.element,\r\n        {\r\n          behavior: this.hasBehaviorValue ? this.behaviorValue : \"smooth\",\r\n          block: this.hasBlockValue ? this.blockValue : \"center\",\r\n          inline: this.hasInlineValue ? this.inlineValue : \"center\",\r\n        },\r\n      ).catch(() => this.element.scrollIntoView()); // Fallback to snap-scrolling\r\n      this.cleanupSelf();\r\n    });\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\nimport {getScrollParent, scrollToElement} from \"./utilities/scroll\";\r\n\r\nexport class ScrollToBottomController extends BaseController {\r\n\r\n  static values = {\r\n    mode: String,\r\n  };\r\n\r\n  declare modeValue: \"nearest\" | \"document\";\r\n  declare hasModeValue: boolean;\r\n\r\n\r\n  scroll(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    let mode = this.hasModeValue ? this.modeValue : \"document\";\r\n    let target: null | HTMLElement;\r\n    if (mode == \"document\") {\r\n      target = document.body;\r\n    } else {\r\n      target = getScrollParent(this.element as HTMLElement);\r\n    }\r\n    if (target == null) {\r\n      return;\r\n    }\r\n    scrollToElement(target!, {behavior: \"smooth\", block: \"end\"}).catch(() => target!.scrollIntoView(false));\r\n  }\r\n\r\n}\r\n\r\n","import {BaseController} from \"./base_controller\";\r\nimport {scrollToElement} from \"./utilities/scroll\";\r\n\r\nexport class ScrollToController extends BaseController {\r\n\r\n  static values = {\r\n    selector: String,\r\n    behavior: String,\r\n    block: String,\r\n    inline: String,\r\n  };\r\n\r\n  declare selectorValue: string;\r\n  declare behaviorValue: ScrollBehavior;\r\n  declare hasBehaviorValue: boolean;\r\n  declare blockValue: ScrollLogicalPosition;\r\n  declare hasBlockValue: boolean;\r\n  declare inlineValue: ScrollLogicalPosition;\r\n  declare hasInlineValue: boolean;\r\n\r\n\r\n  scroll() {\r\n    let target = document.querySelector(this.selectorValue);\r\n    if (!target) {\r\n      console.warn(`Could not find target for '${this.selectorValue}'`);\r\n      return;\r\n    }\r\n\r\n    scrollToElement(\r\n      target!,\r\n      {\r\n        behavior: this.hasBehaviorValue ? this.behaviorValue : \"smooth\",\r\n        block: this.hasBlockValue ? this.blockValue : \"center\",\r\n        inline: this.hasInlineValue ? this.inlineValue : \"center\",\r\n      },\r\n    ).catch(() => target!.scrollIntoView()); // Fallback to snap-scrolling\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\nimport {getScrollParent, scrollToElement} from \"./utilities/scroll\";\n\nexport class ScrollToTopController extends BaseController {\n\n  static values = {\n    mode: String,\n  };\n\n  declare modeValue: \"nearest\" | \"document\";\n  declare hasModeValue: boolean;\n\n\n  scroll(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    let mode = this.hasModeValue ? this.modeValue : \"document\";\n    let target: null | HTMLElement;\n    if (mode == \"document\") {\n      target = document.body;\n    } else {\n      target = getScrollParent(this.element as HTMLElement);\n    }\n    if (target == null) {\n      return;\n    }\n    scrollToElement(target!, {behavior: \"smooth\", block: \"start\"}).catch(() => target!.scrollIntoView(false));\n  }\n\n}\n\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class SelfDestructController extends BaseController {\r\n\r\n  static values = {seconds: Number};\r\n\r\n  declare readonly secondsValue: number;\r\n  timeout: null | ReturnType<typeof setTimeout> = null;\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      // Only start countdown on first paint\r\n      this.timeout = setTimeout(() => this.element.remove(), this.secondsValue * 1000);\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.timeout) {\r\n      clearTimeout(this.timeout);\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class StickyController extends BaseController {\r\n\r\n  static classes = [\"stuck\"];\r\n  static values = {\r\n    mode: String,\r\n  };\r\n\r\n  declare readonly hasStuckClass: boolean;\r\n  declare readonly stuckClass: string;\r\n  declare readonly hasModeValue: \"top\" | \"bottom\";\r\n  declare readonly modeValue: \"top\" | \"bottom\";\r\n\r\n  _magicElement: HTMLDivElement | null = null;\r\n\r\n  get _mode(): \"top\" | \"bottom\" {\r\n    return this.hasModeValue ? this.modeValue : \"top\";\r\n  }\r\n\r\n  createMagicElement() {\r\n    // Magic element placed next to the sticky el that acts as an external border.\r\n    // When the magic element is off the page, we know that the sticky el is \"stuck\"\r\n    if (this._magicElement !== null) {\r\n      return;\r\n    }\r\n\r\n    this._magicElement = document.createElement(\"div\");\r\n    switch (this._mode) {\r\n      case \"top\":\r\n        this.element.insertAdjacentElement(\"beforebegin\", this._magicElement);\r\n        break;\r\n      case \"bottom\":\r\n        this.element.insertAdjacentElement(\"afterend\", this._magicElement);\r\n        break;\r\n    }\r\n  }\r\n\r\n  connect() {\r\n    let element = this.element as HTMLElement;\r\n    this.createMagicElement();\r\n\r\n    const observer = new IntersectionObserver(entries => {\r\n      entries.forEach(entry => {\r\n        if (entry.target !== this._magicElement) {\r\n          return;\r\n        }\r\n        if (entry.intersectionRatio === 0) {\r\n          element.classList.add(this.hasStuckClass ? this.stuckClass : \"stuck\");\r\n        } else if (entry.intersectionRatio === 1) {\r\n          element.classList.remove(this.hasStuckClass ? this.stuckClass : \"stuck\");\r\n        }\r\n      });\r\n\r\n    }, {\r\n      threshold: [0, 1],\r\n    });\r\n    observer.observe(this._magicElement!);\r\n  }\r\n\r\n}\r\n","import {EphemeralController} from \"./utilities/ephemeral_controller\";\r\n\r\nexport class TeleportController extends EphemeralController {\r\n\r\n  static values = {target: String, insert: String, immediate: Boolean};\r\n\r\n  declare readonly immediateValue: boolean;\r\n  declare readonly hasImmediateValue: boolean;\r\n  declare readonly targetValue: string;\r\n  declare readonly hasInsertValue: boolean;\r\n  declare readonly insertValue: InsertPosition | \"replaceOuter\" | \"replaceInner\" | \"prepend\" | \"append\";\r\n\r\n  connect() {\r\n    if (!this.hasInsertValue) {\r\n      throw new Error(\"`insert` value was not specified\");\r\n    }\r\n\r\n    requestAnimationFrame(() => {\r\n      if (this.hasImmediateValue && this.immediateValue) {\r\n        this.execute();\r\n      }\r\n    });\r\n  }\r\n\r\n  execute(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    let destination = document.querySelector(this.targetValue);\r\n\r\n    if (destination == null) {\r\n      this.element.dispatchEvent(new CustomEvent(\"teleport:error\", {bubbles: true, cancelable: true}));\r\n      return;\r\n    }\r\n\r\n    let copy = this.element.cloneNode(true) as HTMLElement;\r\n    this.cleanup(copy);\r\n\r\n    switch (this.insertValue) {\r\n      case \"beforebegin\":\r\n      case \"beforeend\":\r\n      case \"afterend\":\r\n      case \"afterbegin\":\r\n        destination.insertAdjacentHTML(this.insertValue, copy.outerHTML);\r\n        break;\r\n      case \"replaceOuter\":\r\n        destination.outerHTML = copy.outerHTML;\r\n        break;\r\n      case \"replaceInner\":\r\n        destination.innerHTML = copy.outerHTML;\r\n        break;\r\n      case \"prepend\":\r\n        destination.insertAdjacentHTML(\"afterbegin\", copy.outerHTML);\r\n        break;\r\n      case \"append\":\r\n        destination.insertAdjacentHTML(\"beforeend\", copy.outerHTML);\r\n        break;\r\n      default:\r\n        throw new Error(\"`insert` value was not specified\");\r\n\r\n    }\r\n    this.element.remove();\r\n  }\r\n\r\n}\r\n","import {useClickOutside, useHover} from \"stimulus-use\";\nimport {BaseController} from \"./base_controller\";\n\nexport type ToggleClassMode = \"on\" | \"off\" | \"toggle\"\n\nexport class ToggleClassController extends BaseController {\n\n  static targets = [\"toggle\"];\n  static values = {\n    class: String,\n    mouseEnter: String,\n    mouseLeave: String,\n    clickAway: Boolean,\n    initial: String,\n  };\n\n  declare readonly toggleTargets: HTMLElement[];\n\n  declare readonly classValue: string;\n  declare readonly hasClassValue: boolean;\n\n  declare readonly mouseEnterValue: ToggleClassMode;\n  declare readonly hasMouseEnterValue: boolean;\n\n  declare readonly mouseLeaveValue: ToggleClassMode;\n  declare readonly hasMouseLeaveValue: boolean;\n\n  declare readonly clickAwayValue: boolean;\n  declare readonly hasClickAwayValue: boolean;\n\n  declare readonly initialValue: \"on\" | \"off\";\n  declare readonly hasInitialValue: boolean;\n\n  connect() {\n    if (!this.hasClassValue) {\n      throw new Error(\"data-toggle-class-class-value must not be empty\");\n    }\n\n    if (this.hasMouseEnterValue || this.hasMouseLeaveValue) {\n      useHover(this);\n    }\n\n    if (this.hasClickAwayValue && this.clickAwayValue) {\n      useClickOutside(this);\n    }\n\n    requestAnimationFrame(() => {\n      if (this.hasInitialValue) {\n        if (this.initialValue === \"on\") {\n          this.toggleTargets.forEach((target) => this.elementOn(target));\n        } else {\n          this.toggleTargets.forEach((target) => this.elementOff(target));\n        }\n      }\n    });\n  }\n\n  clickOutside() {\n    this.toggleTargets.forEach((target) => {\n      if (this.elementWasToggled(target)) {\n        this.elementToggleStatus(target);\n        this.elementToggle(target);\n      }\n    });\n  }\n\n  mouseEnter() {\n    if (this.hasMouseEnterValue) {\n      switch (this.mouseEnterValue) {\n        case \"on\":\n          this.on();\n          break;\n        case \"off\":\n          this.off();\n          break;\n        case \"toggle\":\n          this.toggle();\n          break;\n      }\n    }\n    return {};\n  }\n\n  mouseLeave() {\n    if (this.hasMouseLeaveValue) {\n      switch (this.mouseLeaveValue) {\n        case \"on\":\n          this.on();\n          break;\n        case \"off\":\n          this.off();\n          break;\n        case \"toggle\":\n          this.toggle();\n          break;\n      }\n    }\n    return {};\n  }\n\n  on(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementOn(target);\n    });\n  }\n\n  off(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementOff(target);\n    });\n  }\n\n  toggle(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementToggle(target);\n    });\n  }\n\n  private elementWasToggled(el: HTMLElement): boolean {\n    return el.dataset.toggled == \"true\";\n  }\n\n  private elementToggleStatus(el: HTMLElement) {\n    if (this.elementWasToggled(el)) {\n      delete el.dataset.toggled;\n    } else {\n      el.dataset.toggled = \"true\";\n    }\n  }\n\n  private elementToggle(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass));\n  }\n\n  private elementOn(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass, true));\n  }\n\n  private elementOff(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass, false));\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\nimport {isHTMLLinkElement} from \"./utilities/elements\";\nimport {isTurboFrame} from \"./utilities/turbo\";\n\nexport class TurboFrameRCController extends BaseController {\n\n  static values = {\n    frameId: String,\n    src: String,\n    loadingMessage: String,\n  };\n\n  declare readonly frameIdValue: string;\n  declare readonly srcValue: string;\n  declare readonly hasSrcValue: boolean;\n  declare readonly loadingMessageValue: string;\n  declare readonly hasLoadingMessageValue: boolean;\n\n  toggle(event?: Event | null) {\n    if (event) {\n      event.preventDefault();\n    }\n    let frame = this.getFrame();\n    let frameSrc = frame.src;\n    if (frameSrc == null || frameSrc !== this.getSrc()) {\n      this.setSrc();\n    } else {\n      this.clear();\n    }\n  }\n\n  setSrc(event?: Event | null) {\n    if (event) {\n      event.preventDefault();\n    }\n    let frame = this.getFrame();\n    if (this.hasLoadingMessageValue) {\n      frame.innerHTML = this.loadingMessageValue;\n    }\n\n    frame.src = this.getSrc();\n  }\n\n  clear(event?: Event | null) {\n    if (event) {\n      event.preventDefault();\n    }\n    let frame = this.getFrame();\n    frame.src = \"\";\n    frame.innerHTML = \"\";\n  }\n\n  private getFrame(): TurboFrame {\n    let frame = document.getElementById(`${this.frameIdValue}`);\n    if (frame == null) {\n      throw new Error(`Could not find frame with ID '${this.frameIdValue}'`);\n    }\n    if (!isTurboFrame(frame)) {\n      throw new Error(`Element targeted by ID '${this.frameIdValue}'`);\n    } else {\n      return frame;\n    }\n  }\n\n  private getSrc(): string {\n    let element = this.element as HTMLElement;\n    if (this.hasSrcValue) {\n      return this.srcValue;\n    } else if (isHTMLLinkElement(element)) {\n      return element.href;\n    } else {\n      throw new Error(\"No link given to drive frame to\");\n    }\n  }\n\n}\n","export function isTurboFrame(element: HTMLElement): element is TurboFrame {\r\n  return element.nodeName == \"TURBO-FRAME\";\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class WordCountController extends BaseController {\r\n\r\n  static targets = [\"input\", \"output\"];\r\n  static values = {min: Number, max: Number};\r\n  static classes = [\"error\"];\r\n\r\n  declare readonly inputTarget: HTMLInputElement | HTMLTextAreaElement;\r\n  declare readonly outputTarget: HTMLElement;\r\n  declare minValue: number;\r\n  declare hasMinValue: boolean;\r\n  declare maxValue: number;\r\n  declare hasMaxValue: boolean;\r\n  declare errorClass: string;\r\n  declare hasErrorClass: boolean;\r\n\r\n  boundHandler = this.updateWordCount.bind(this);\r\n\r\n  connect() {\r\n    this.updateWordCount();\r\n    this.inputTarget.addEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  disconnect() {\r\n    this.inputTarget.removeEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  updateWordCount() {\r\n    let wordCount = 0;\r\n    let textAreaValue = this.inputTarget.value;\r\n    let matches = textAreaValue.match(/\\S+/g);\r\n    wordCount = (matches && matches.length) || 0;\r\n    this.outputTarget.innerText = wordCount.toString();\r\n    if (this.hasErrorClass) {\r\n      if (this.isValidCount(wordCount)) {\r\n        this.outputTarget.classList.remove(this.errorClass);\r\n      } else {\r\n        this.outputTarget.classList.add(this.errorClass);\r\n      }\r\n    }\r\n  }\r\n\r\n  isValidCount(count: number) {\r\n    let min = 0;\r\n    let max = 99999;\r\n\r\n    if (this.hasMinValue) {\r\n      min = this.minValue;\r\n    }\r\n\r\n    if (this.hasMaxValue) {\r\n      max = this.maxValue;\r\n    }\r\n\r\n    return count >= min && count <= max;\r\n  }\r\n\r\n}\r\n"],"names":["BaseController","Controller","constructor","context","super","Proxy","this","get","obj","prop","returnVal","Reflect","self","test","logProperty","toString","apply","target","thisArg","argArray","log","args","dispatch","element","eventName","options","bubbles","cancelable","detail","event","CustomEvent","dispatchEvent","functionName","application","debug","logger","console","groupCollapsed","identifier","groupEnd","AsyncBlockController","connect","loadContent","el","hasReplaceTarget","replaceTarget","fetch","endpointValue","then","response","text","html","newEl","document","createElement","innerHTML","replaceWith","catch","err","finally","endpoint","String","AutoSubmitFormController","handler","bind","querySelectorAll","forEach","addEventListener","boundHandler","disconnect","removeEventListener","e","method","controller","methodName","composeEventName","name","eventPrefix","composedName","extendedEvent","type","composed","Object","assign","originalEvent","defaultOptions","useIntersection","targetElement","controllerDisconnect","observer","IntersectionObserver","entries","entry","isIntersecting","isVisible","call","appearEvent","dispatchAppear","disappearEvent","dispatchDisappear","observe","unobserve","[object Object]","events","onlyVisible","StimulusUse","_a","_b","_c","controllerId","stimulusUseDebug","id","dataset","controllerInitialize","initialize","controllerConnect","UseHover","onEnter","onLeave","hover","enhanceController","UseMutation","error","handleError","mutation","MutationObserver","useWindowResize","callback","innerWidth","innerHeight","window","payload","height","Infinity","width","debounce","fn","wait","timeoutId","arguments","clearTimeout","setTimeout","AutosizeController","style","resize","boxSizing","requestAnimationFrame","windowResize","autosize","offset","offsetHeight","clientHeight","scrollHeight","CharCountController","updateCharCount","inputTarget","charCount","value","length","outputTarget","innerText","hasErrorClass","isValidCount","classList","remove","errorClass","add","count","min","max","hasMinValue","minValue","hasMaxValue","maxValue","Number","CheckboxSelectAllController","checked","checkboxTargets","filter","checkbox","unchecked","toggle","refresh","hasSelectAllTarget","selectAllTarget","preventDefault","checkboxesCount","checkboxesCheckedCount","indeterminate","ClipboardController","supported","queryCommandSupported","hasRemoveUnusedValue","removeUnusedValue","hasFallbackTarget","fallbackTarget","hasCopyTarget","copyTarget","select","sourceTarget","copy","execCommand","isHTMLLinkElement","nodeName","isHTMLFormElement","isHTMLInputElement","removeUnused","Boolean","ConfirmController","message","hasMessageValue","messageValue","confirm","Error","ConfirmNavigationController","confirmMessage","onbeforeunload","handlePopstate","DebugController","testTargets","DetectDirtyController","initialValue","isInputElement","isCheckable","restore","setAttribute","removeAttribute","tagName","DisableInputsController","hasDisablerTarget","disablerTarget","disableInputs","enableInputs","shouldClear","hasClearValue","clearValue","disableTargets","_","disabled","clear","DismissableController","dismiss","EmptyDomController","useMutation","childList","checkEmpty","mutate","children","hasScopeSelectorValue","scopeSelectorValue","hasNotEmptyClass","notEmptyClass","split","klass","hasEmptyClass","emptyClass","scopeSelector","EnableInputsController","hasEnablerTarget","enablerTarget","enableTargets","FallbackImageController","onerror","hasPlaceholderValue","src","placeholderValue","display","placeholder","FormSaveController","formID","hasIdValue","idValue","elementID","formIdentifier","location","href","formElements","elements","formData","data","restoreOnLoad","hasRestoreOnLoadValue","restoreOnLoadValue","clearOnSubmit","hasClearOnSubmitValue","clearOnSubmitValue","_clear","localStorage","removeItem","save","setItem","JSON","stringify","getItem","savedData","parse","IntersectionController","threshold","hasThresholdValue","thresholdValue","map","val","parseFloat","trim","appear","disappear","LazyBlockController","smoothSupported","documentElement","smoothPolyfilled","scrollToElement","behavior","block","inline","async","polyfill","polyfillSmooth","scrollIntoView","getScrollParent","node","overflowY","getComputedStyle","parentElement","body","LightboxImageController","hasSrcValue","srcValue","srcSet","hasSrcSetValue","srcSetValue","srcset","sizes","hasSizesValue","sizesValue","modalClassName","hasModalClass","modalClass","imageClassName","hasImageClass","imageClass","open","close","_dialog","image","className","appendChild","insertAdjacentElement","dialogPolyfill","registerDialog","showModal","LimitedSelectionCheckboxesController","handleInputs","inputTargets","boundHandleInputs","tickedInputs","reduce","previousValue","maxSelections","hasErrorTarget","errorTarget","NestedFormController","wrapperClass","hasWrapperSelectorValue","wrapperClassValue","insertMode","hasInsertModeValue","insertModeValue","checkStructure","content","templateTarget","replace","generateID","targetTarget","insertAdjacentHTML","wrapper","closest","newRecord","destroyInput","querySelector","Date","getTime","Math","random","indexOf","PasswordConfirmController","checkPasswordsMatch","passwordTargets","boundCheckPasswordsMatch","allPasswordsMatch","values","Set","has","size","PasswordPeekController","peak","passwordTarget","hide","ResponsiveIframeWrapperController","messageReceived","boundMessageReceived","hasOwnProperty","ResponsiveIframeBodyController","top","debounces","func","postUpdate","getHeight","parent","postMessage","EphemeralController","cleanupSelf","cleanup","replaceAll","RegExp","substringIdentifierValueRegex","camelCase","action","keys","classes","ScrollIntoFocusController","hasBehaviorValue","behaviorValue","hasBlockValue","blockValue","hasInlineValue","inlineValue","ScrollToBottomController","scroll","hasModeValue","modeValue","mode","ScrollToController","selectorValue","warn","selector","ScrollToTopController","SelfDestructController","timeout","secondsValue","seconds","StickyController","_mode","createMagicElement","_magicElement","intersectionRatio","hasStuckClass","stuckClass","TeleportController","hasInsertValue","hasImmediateValue","immediateValue","execute","destination","targetValue","cloneNode","insertValue","outerHTML","insert","immediate","ToggleClassController","hasClassValue","hasMouseEnterValue","hasMouseLeaveValue","useHover","hasClickAwayValue","clickAwayValue","onEvent","contains","rect","getBoundingClientRect","windowHeight","windowWidth","clientWidth","left","isElementInViewport","clickOutside","clickOutsideEvent","useClickOutside","hasInitialValue","toggleTargets","elementOn","elementOff","elementWasToggled","elementToggleStatus","elementToggle","mouseEnter","mouseEnterValue","on","off","mouseLeave","mouseLeaveValue","toggled","classValue","class","clickAway","initial","TurboFrameRCController","frameSrc","getFrame","getSrc","setSrc","frame","hasLoadingMessageValue","loadingMessageValue","getElementById","frameIdValue","frameId","loadingMessage","WordCountController","updateWordCount","wordCount","matches","match"],"mappings":"0TAEaA,UAAuBC,EAElCC,YAAYC,GAEV,OADAC,MAAMD,OACKE,MAAMC,KAAM,CACrBC,IAAK,CAACC,EAAKC,KACT,IAAIC,EAAYC,QAAQJ,IAAIC,EAAKC,GAC7BG,EAAON,KACX,GAwCR,SAAqBG,GACnB,OAAQA,GACN,IAAK,cACL,IAAK,UACL,IAAK,cACL,IAAK,aACL,IAAK,MACL,IAAK,OACL,IAAK,qBACL,IAAK,aACH,SAGJ,QAAI,SAASI,KAAKJ,IAGd,kBAAkBI,KAAKJ,IAGvB,aAAaI,KAAKJ,IAGlB,oBAAoBI,KAAKJ,IAGzB,aAAaI,KAAKJ,IAjEZK,CAAYL,EAAKM,YAAa,CAChC,GAAwB,mBAAbL,EACT,WAAWL,MAAMK,EAAW,CAC1BM,MAAK,CAACC,EAAaC,EAAcC,KAC/BP,EAAKQ,IAAIX,EAAKM,WAAY,CACxBM,KAAMF,IAEDR,QAAQK,MAAMC,EAAQC,EAASC,MAI1Cb,KAAKc,IAAIX,EAAKM,YAGlB,OAAOL,KAKbY,SAASC,EAAsBC,EAAmBC,EAA2B,CAACC,SAAS,EAAMC,YAAY,EAAMC,OAAQ,CAACX,OAAQM,KAC9H,IAAIM,EAAQ,IAAIC,YAAYN,EAAWC,GACvCF,EAAQQ,cAAcF,GAGxBT,IAAIY,EAAsBX,EAAW,IAEnC,IAAKf,KAAK2B,YAAYC,MACpB,OAEF,IAAIC,EAASC,QACbD,EAAOE,oBAAoB/B,KAAKgC,iBAAiBN,IAAgB,iBAAkB,gBACnFG,EAAOf,OACLG,QAASjB,KAAKiB,SACXF,IAELc,EAAOI,kBC3CEC,UAA6BxC,EAYxCyC,UACEnC,KAAKoC,cAGPA,cACE,IAAIC,EAAMrC,KAAKsC,iBAAmBtC,KAAKuC,cAAgBvC,KAAKiB,QAC5DuB,MAAMxC,KAAKyC,eACVC,KAAMC,GAAaA,EAASC,QAC5BF,KAAMG,IACL,IAAIC,EAAQC,SAASC,cAAc,OACnCF,EAAMG,UAAYJ,EAClBR,EAAGa,YAAYJ,GAGf,IAAIvB,EAAQ,IAAIC,YAAY,eAAgB,CAACF,OAAU,KACvDe,EAAGZ,cAAcF,KAElB4B,MAAMC,IACLf,EAAGa,YAAY,sCAEf,IAAI3B,EAAQ,IAAIC,YAAY,aAAc,CAACF,OAAU,KACrDe,EAAGZ,cAAcF,KAElB8B,QAAQ,KACP,IAAI9B,EAAQ,IAAIC,YAAY,gBAAiB,CAACF,OAAU,KACxDe,EAAGZ,cAAcF,MApCdW,UAAU,CAAC,WACXA,SAAS,CAACoB,SAAUC,cCFhBC,UAAiC9D,EAA9CE,kCAEUI,kBAAeA,KAAKyD,QAAQC,KAAK1D,MAEzCmC,UACGnC,KAAKiB,QAAwB0C,iBAAiB,2BAA2BC,QAAQvB,GAAMA,EAAGwB,iBAAiB,SAAU7D,KAAK8D,eAG7HC,aACG/D,KAAKiB,QAAwB0C,iBAAiB,2BAA2BC,QAAQvB,GAAMA,EAAG2B,oBAAoB,SAAUhE,KAAK8D,eAGxHL,QAAQQ,GAGdjE,KAAKiB,QAAQQ,cACX,IAAID,YAAY,SAAU,CACxBJ,SAAS,EACTC,YAAY,MCpBb,MAAM6C,EAAS,CAACC,EAAYC,KAC/B,MAAMF,EAASC,EAAWC,GAC1B,MAAqB,mBAAVF,EACAA,EAGA,IAAInD,QAGNsD,EAAmB,CAACC,EAAMH,EAAYI,KAC/C,IAAIC,EAAeF,EAOnB,OANoB,IAAhBC,EACAC,EAAe,GAAGL,EAAWnC,cAAcsC,IAEf,iBAAhBC,IACZC,EAAe,GAAGD,KAAeD,KAE9BE,GAEEC,EAAgB,CAACC,EAAMnD,EAAOD,KACvC,MAAMF,QAAEA,EAAOC,WAAEA,EAAUsD,SAAEA,GAAapD,GAAS,CAAEH,SAAS,EAAMC,YAAY,EAAMsD,UAAU,GAUhG,OATIpD,GACAqD,OAAOC,OAAOvD,EAAQ,CAAEwD,cAAevD,IAEvB,IAAIC,YAAYkD,EAAM,CACtCtD,QAAAA,EACAC,WAAAA,EACAsD,SAAAA,EACArD,OAAAA,KC3BFyD,EAAiB,CACnBtD,eAAe,EACf8C,aAAa,GAEJS,EAAkB,CAACb,EAAYhD,EAAU,MAClD,MAAMM,cAAEA,EAAa8C,YAAEA,GAAgBK,OAAOC,OAAO,GAAIE,EAAgB5D,GACnE8D,GAAiB9D,MAAAA,OAAyC,EAASA,EAAQF,UAAYkD,EAAWlD,QAgClGiE,EAAuBf,EAAWJ,WAAWL,KAAKS,GAClDgB,EAAW,IAAIC,qBAhCHC,IACd,MAAOC,GAASD,EACZC,EAAMC,eAOS,CAACD,IAIpB,GAHAnB,EAAWqB,WAAY,EACvBtB,EAAOC,EAAY,UAAUsB,KAAKtB,EAAYmB,GAE1C7D,EAAe,CACf,MAAMP,EAAYmD,EAAiB,SAAUF,EAAYI,GACnDmB,EAAcjB,EAAcvD,EAAW,KAAM,CAAEiD,WAAAA,EAAYmB,MAAAA,IACjEL,EAAcxD,cAAciE,KAb5BC,CAAeL,GAEVnB,EAAWqB,WAcE,CAACF,IAIvB,GAHAnB,EAAWqB,WAAY,EACvBtB,EAAOC,EAAY,aAAasB,KAAKtB,EAAYmB,GAE7C7D,EAAe,CACf,MAAMP,EAAYmD,EAAiB,YAAaF,EAAYI,GACtDqB,EAAiBnB,EAAcvD,EAAW,KAAM,CAAEiD,WAAAA,EAAYmB,MAAAA,IACpEL,EAAcxD,cAAcmE,KApB5BC,CAAkBP,IA0B0BnE,GAC9C2E,EAAU,KACZX,EAASW,QAAQb,IAEfc,EAAY,KACdZ,EAASY,UAAUd,IAUvB,OARAL,OAAOC,OAAOV,EAAY,CACtBqB,WAAW,EACXQ,aACID,IACAb,OAGRY,IACO,CAACA,EAASC,ICtDfhB,EAAiB,CACnBkB,OAAQ,CAAC,QAAS,YAClBC,aAAa,EACbzE,eAAe,EACf8C,aAAa,GCLXQ,EAAiB,CACnBnD,OAAO,EACPC,OAAQC,SAEL,MAAMqE,EACTH,YAAY7B,EAAYhD,EAAU,IAC9B,IAAIiF,EAAIC,EAAIC,EACZtG,KAAKc,IAAM,CAACY,EAAcX,KACjBf,KAAK4B,QAEV5B,KAAK6B,OAAOE,eAAe,KAAK/B,KAAKmE,WAAWnC,iBAAiBN,IAAgB,iBAAkB,gBACnG1B,KAAK6B,OAAOf,IAAI8D,OAAOC,OAAO,CAAE0B,aAAcvG,KAAKuG,cAAgBxF,IACnEf,KAAK6B,OAAOI,aAEhBjC,KAAK4B,MAAmK,QAA1JyE,EAAgF,QAA1ED,EAAKjF,MAAAA,OAAyC,EAASA,EAAQS,aAA0B,IAAPwE,EAAgBA,EAAKjC,EAAWxC,YAAY6E,wBAAqC,IAAPH,EAAgBA,EAAKtB,EAAenD,MACpN5B,KAAK6B,OAAqF,QAA3EyE,EAAKnF,MAAAA,OAAyC,EAASA,EAAQU,cAA2B,IAAPyE,EAAgBA,EAAKvB,EAAelD,OACtI7B,KAAKmE,WAAaA,EAClBnE,KAAKuG,aAAepC,EAAWlD,QAAQwF,IAAMtC,EAAWlD,QAAQyF,QAAQD,GAExEzG,KAAK2G,qBAAuBxC,EAAWyC,WAAWlD,KAAKS,GACvDnE,KAAK6G,kBAAoB1C,EAAWhC,QAAQuB,KAAKS,GACjDnE,KAAKkF,qBAAuBf,EAAWJ,WAAWL,KAAKS,ICnBxD,MAAM2C,UAAiBX,EAC1BH,YAAY7B,EAAYhD,EAAU,IAC9BrB,MAAMqE,EAAYhD,GAClBnB,KAAK8F,QAAU,KACX9F,KAAKiF,cAAcpB,iBAAiB,aAAc7D,KAAK+G,SACvD/G,KAAKiF,cAAcpB,iBAAiB,aAAc7D,KAAKgH,UAE3DhH,KAAK+F,UAAY,KACb/F,KAAKiF,cAAcjB,oBAAoB,aAAchE,KAAK+G,SAC1D/G,KAAKiF,cAAcjB,oBAAoB,aAAchE,KAAKgH,UAE9DhH,KAAK+G,QAAU,KACX7C,EAAOlE,KAAKmE,WAAY,cAAcsB,KAAKzF,KAAKmE,YAChDnE,KAAKc,IAAI,aAAc,CAAEmG,OAAO,KAEpCjH,KAAKgH,QAAU,KACX9C,EAAOlE,KAAKmE,WAAY,cAAcsB,KAAKzF,KAAKmE,YAChDnE,KAAKc,IAAI,aAAc,CAAEmG,OAAO,KAEpCjH,KAAKiF,eAAiB9D,MAAAA,OAAyC,EAASA,EAAQF,UAAYkD,EAAWlD,QACvGjB,KAAKmE,WAAaA,EAClBnE,KAAKkH,oBACLlH,KAAK8F,UAETE,oBACI,MAAMd,EAAuBlF,KAAKmE,WAAWJ,WAAWL,KAAK1D,KAAKmE,YAKlES,OAAOC,OAAO7E,KAAKmE,WAAY,CAAEJ,WAJd,KACf/D,KAAK+F,YACLb,QC5BL,MAAMiC,UAAoBhB,EAC7BH,YAAY7B,EAAYhD,EAAU,IAC9BrB,MAAMqE,EAAYhD,GAClBnB,KAAK8F,QAAU,KACX,IACI9F,KAAKmF,SAASW,QAAQ9F,KAAKiF,cAAejF,KAAKmB,SAEnD,MAAOiG,GACHpH,KAAKmE,WAAWxC,YAAY0F,YAAYD,EAAO,gFAAiF,MAGxIpH,KAAK+F,UAAY,KACb/F,KAAKmF,SAASpB,cAElB/D,KAAKsH,SAAYjC,IACbnB,EAAOlE,KAAKmE,WAAY,UAAUsB,KAAKzF,KAAKmE,WAAYkB,GACxDrF,KAAKc,IAAI,SAAU,CAAEuE,QAAAA,KAEzBrF,KAAKiF,eAAiB9D,MAAAA,OAAyC,EAASA,EAAQF,UAAYkD,EAAWlD,QACvGjB,KAAKmE,WAAaA,EAClBnE,KAAKmB,QAAUA,EACfnB,KAAKmF,SAAW,IAAIoC,iBAAiBvH,KAAKsH,UAC1CtH,KAAKkH,oBACLlH,KAAK8F,UAETE,oBACI,MAAMd,EAAuBlF,KAAKmE,WAAWJ,WAAWL,KAAK1D,KAAKmE,YAKlES,OAAOC,OAAO7E,KAAKmE,WAAY,CAAEJ,WAJd,KACf/D,KAAK+F,YACLb,QAKL,MCnCMsC,EAAmBrD,IAC5B,MAAMsD,EAAYlG,IACd,MAAMmG,WAAEA,EAAUC,YAAEA,GAAgBC,OAC9BC,EAAU,CACZC,OAAQH,GAAeI,SACvBC,MAAON,GAAcK,SACrBxG,MAAAA,GAEJ2C,EAAOC,EAAY,gBAAgBsB,KAAKtB,EAAY0D,IAElD3C,EAAuBf,EAAWJ,WAAWL,KAAKS,GAClD2B,EAAU,KACZ8B,OAAO/D,iBAAiB,SAAU4D,GAClCA,KAEE1B,EAAY,KACd6B,OAAO5D,oBAAoB,SAAUyD,IASzC,OAPA7C,OAAOC,OAAOV,EAAY,CACtB6B,aACID,IACAb,OAGRY,IACO,CAACA,EAASC,ICrBfkC,EAAW,CAACC,EAAIC,EADF,OAEhB,IAAIC,EAAY,KAChB,OAAO,WACH,MAAMrH,EAAOsH,UACPxI,EAAUG,KACVyH,EAAW,IAAMS,EAAGxH,MAAMb,EAASkB,GACrCqH,GACAE,aAAaF,GAEjBA,EAAYG,WAAWd,EAAUU,WCX5BK,UAA2B9I,EAAxCE,kCAEUI,kBAAeA,KAAKyD,QAAQC,KAAK1D,MAEzCmC,UACE,IAAIxB,EAASX,KAAKiB,QAClBN,EAAO8H,MAAMC,OAAS,OACtB/H,EAAO8H,MAAME,UAAY,aACzBhI,EAAOkD,iBAAiB,QAAS7D,KAAK8D,cACtCnD,EAAOkD,iBAAiB,QAAS7D,KAAK8D,cACtC0D,EAAgBxH,MAChB4I,sBAAsB5I,KAAK8D,cAG7B+E,eACE7I,KAAKyD,UAGCA,UACNzD,KAAK8I,SAAS9I,KAAKiB,SAGb6H,SAAS7H,GACf,IAAI8H,EAAS9H,EAAQ+H,aAAe/H,EAAQgI,aAC5ChI,EAAQwH,MAAMX,OAAS,OACvB7G,EAAQwH,MAAMX,OAAS7G,EAAQiI,aAAeH,EAAS,YC1B9CI,UAA4BzJ,EAAzCE,kCAeEI,kBAAeA,KAAKoJ,gBAAgB1F,KAAK1D,MAEzCmC,UACEnC,KAAKoJ,kBACLpJ,KAAKqJ,YAAYxF,iBAAiB,QAAS7D,KAAK8D,cAGlDC,aACE/D,KAAKqJ,YAAYrF,oBAAoB,QAAShE,KAAK8D,cAGrDsF,kBACE,IAAIE,EAAYtJ,KAAKqJ,YAAYE,MAAMC,OACvCxJ,KAAKyJ,aAAaC,UAAYJ,EAAU7I,WACpCT,KAAK2J,gBACH3J,KAAK4J,aAAaN,GACpBtJ,KAAKyJ,aAAaI,UAAUC,OAAO9J,KAAK+J,YAExC/J,KAAKyJ,aAAaI,UAAUG,IAAIhK,KAAK+J,aAK3CH,aAAaK,GACX,IAAIC,EAAM,EACNC,EAAM,MAUV,OARInK,KAAKoK,cACPF,EAAMlK,KAAKqK,UAGTrK,KAAKsK,cACPH,EAAMnK,KAAKuK,UAGNN,GAASC,GAAOD,GAASE,GAhD3BhB,UAAU,CAAC,QAAS,UACpBA,SAAS,CAACe,IAAKM,OAAQL,IAAKK,QAC5BrB,UAAU,CAAC,eCJPsB,UAAoC/K,EAO/CgL,cACE,YAAYC,gBAAgBC,OAAOC,GAAYA,EAASH,SAG1DI,gBACE,YAAYH,gBAAgBC,OAAOC,IAAaA,EAASH,SAG3D9D,aACE5G,KAAK+K,OAAS/K,KAAK+K,OAAOrH,KAAK1D,MAC/BA,KAAKgL,QAAUhL,KAAKgL,QAAQtH,KAAK1D,MAGnCmC,UACEyG,sBAAsB,KACf5I,KAAKiL,qBAIVjL,KAAKkL,gBAAgBrH,iBAAiB,SAAU7D,KAAK+K,QACrD/K,KAAK2K,gBAAgB/G,QAAQiH,GAAYA,EAAShH,iBAAiB,SAAU7D,KAAKgL,UAClFhL,KAAKgL,aAITjH,aACO/D,KAAKiL,qBAIVjL,KAAKkL,gBAAgBlH,oBAAoB,SAAUhE,KAAK+K,QACxD/K,KAAK2K,gBAAgB/G,QAASiH,GAAaA,EAAS7G,oBAAoB,SAAUhE,KAAKgL,WAGjFD,OAAOxJ,GACbA,EAAM4J,iBACN,IAAIxK,EAASY,EAAMZ,OACnBX,KAAK2K,gBAAgB/G,QAASiH,GAAaA,EAASH,QAAU/J,EAAO+J,SAG/DM,UACN,MAAMI,EAAkBpL,KAAK2K,gBAAgBnB,OACvC6B,EAAyBrL,KAAK0K,QAAQlB,OAE5CxJ,KAAKkL,gBAAgBR,QAAUW,EAAyB,EACxDrL,KAAKkL,gBAAgBI,cAAgBD,EAAyB,GAAKA,EAAyBD,GAnDvFX,UAAU,CAAC,YAAa,kBCDpBc,UAA4B7L,EAAzCE,kCAcEI,gBAAY,EAEZmC,UACEnC,KAAKwL,UAAYzI,SAAS0I,sBAAsB,QAE5CzL,KAAK0L,sBAAwB1L,KAAK2L,oBAChC3L,KAAKwL,WAAaxL,KAAK4L,kBACzB5L,KAAK6L,eAAe/B,SACX9J,KAAK8L,eACd9L,KAAK+L,WAAWjC,UAKtBkC,OAAOzK,GACDA,GACFA,EAAM4J,iBAEPnL,KAAKiM,aAAwDD,SAGhEE,KAAK3K,GACCA,GACFA,EAAM4J,iBAEPnL,KAAKiM,aAAwDD,SAC1DhM,KAAKwL,WACPzI,SAASoJ,YAAY,kBC3CXC,EAAkBnL,GAChC,MAA2B,KAApBA,EAAQoL,kBAGDC,EAAkBrL,GAChC,MAA2B,QAApBA,EAAQoL,kBAGDE,EAAmBtL,GACjC,MAA2B,SAApBA,EAAQoL,SDLRd,UAAU,CAAC,SAAU,OAAQ,YAC7BA,SAAS,CAACiB,aAAcC,eEFpBC,UAA0BhN,EASrCiN,cACE,YAAYC,gBAAkB5M,KAAK6M,aAAe,gBAGpDjG,aACE5G,KAAK8M,QAAU9M,KAAK8M,QAAQpJ,KAAK1D,MAGnCmC,UACEyG,sBAAsB,KACpB,IAAI3H,EAAUjB,KAAKiB,QACnB,GAAIqL,EAAkBrL,GACpBA,EAAQ4C,iBAAiB,SAAU7D,KAAK8M,kBAC/BV,EAAkBnL,GAG3B,UAAU8L,MAAM,iDAFhB9L,EAAQ4C,iBAAiB,QAAS7D,KAAK8M,YAO7CA,QAAQvL,GACAqG,OAAOkF,QAAQ9M,KAAK2M,WACxBpL,EAAM4J,iBACNnL,KAAKgB,SAAShB,KAAKiB,QAAwB,uBA/BxCyL,SAAS,CACdC,QAASpJ,cCJAyJ,UAAoCtN,EAM/CyC,UACE,IAAI8K,EAAiBjN,KAAK6M,aAC1BjF,OAAOsF,eAAiB,IAAyB,MAAlBD,GAAgCA,EAC/DrF,OAAO/D,iBAAiB,WAAY7D,KAAKmN,gBACzCvF,OAAO/D,iBAAiB,SAAU,KAChC+D,OAAO5D,oBAAoB,WAAYhE,KAAKmN,gBAC5CvF,OAAOsF,eAAiB,OAK5BC,eAAe5L,GACb,UAhBKyL,SAAS,CAACL,QAASpJ,cCFf6J,UAAwB1N,EAKnCyC,UACEL,QAAQhB,IAAI,mBAAoBd,KAAMA,KAAKqN,cAJtCD,UAAU,CAAC,cCFPE,UAA8B5N,EAA3CE,kCAEEI,kBAAwC,KAExCA,kBAAeA,KAAKyD,QAAQC,KAAK1D,MAEjCmC,UACE,IAAIlB,EAAUjB,KAAKiB,QAEjBjB,KAAKuN,aADHvN,KAAKwN,eAAevM,IAAYjB,KAAKyN,YAAYxM,GAC/BA,EAAQyJ,QAERzJ,EAAQsI,MAE9BtI,EAAQ4C,iBAAiB,QAAS7D,KAAK8D,cACvC7C,EAAQ4C,iBAAiB,SAAU7D,KAAK8D,cAG1CC,aACE,IAAI9C,EAAUjB,KAAKiB,QACnBA,EAAQ+C,oBAAoB,QAAShE,KAAK8D,cAC1C7C,EAAQ+C,oBAAoB,SAAUhE,KAAK8D,cAG7C4J,UACE,IAAIzM,EAAUjB,KAAKiB,QACfjB,KAAKwN,eAAevM,IAAYjB,KAAKyN,YAAYxM,GACnDA,EAAQyJ,QAAU1K,KAAKuN,aAEvBtM,EAAQsI,MAAQvJ,KAAKuN,aAIjB9J,QAAQlC,GACd,IAAIN,EAAUjB,KAAKiB,QAEfjB,KAAKuN,eAAiBtM,EAAQsI,MAChCtI,EAAQ0M,aAAa,aAAc,QAEnC1M,EAAQ2M,gBAAgB,cAIpBH,YAAYxM,GAClB,MAAyB,UAAjBA,EAAQyD,MAAqC,aAAjBzD,EAAQyD,KAGtC8I,eAAevM,GACrB,MAA2B,UAApBA,EAAQ4M,eC/CNC,UAAgCpO,EAc3CyC,UACEnC,KAAK+K,SAGPA,SACM/K,KAAK+N,mBAAqB/N,KAAKgO,eAAetD,QAChD1K,KAAKiO,gBAELjO,KAAKkO,eAITD,gBACE,IAAIE,EAAcnO,KAAKoO,eAAiBpO,KAAKqO,WAC7CrO,KAAKsO,eAAe1K,QAAQ,CAACvB,EAAIkM,KAC3BJ,IACF9L,EAAGkH,MAAQ,IAEblH,EAAGmM,UAAW,IAIlBN,eACElO,KAAKsO,eAAe1K,QAAQ,CAACvB,EAAIkM,KAC/BlM,EAAGmM,UAAW,KApCXV,UAAU,CAAC,WAAY,WAEvBA,SAAS,CACdW,MAAOhC,eCLEiC,UAA8BhP,EAGzCiP,UACE3O,KAAKiB,QAAQ6I,gBCHJ8E,UAA2BlP,EAatCyC,UdoByB,EAACgC,EAAYhD,EAAU,MAC7B,IAAIgG,EcpBTnH,KdoBiCmB,IcpB7C0N,CAAY7O,EAAM,CAACiB,QAASjB,KAAKiB,QAAS6N,WAAW,IACrD9O,KAAK+O,aAGPC,OAAO3J,GACLrF,KAAK+O,aAGPA,aACE,IAAIE,EAEFA,EADEjP,KAAKkP,sBACIlP,KAAKiB,QAAQ0C,iBAAiB3D,KAAKmP,oBAEnCnP,KAAKiB,QAAQgO,SAGF,IAApBA,EAASzF,QACPxJ,KAAKoP,kBACOpP,KAAKqP,cAAcC,MAAM,KAC/B1L,QAAQ2L,GAASvP,KAAKiB,QAAQ4I,UAAUC,OAAOyF,IAErDvP,KAAKwP,eACOxP,KAAKyP,WAAWH,MAAM,KAC5B1L,QAAQ2L,GAASvP,KAAKiB,QAAQ4I,UAAUG,IAAIuF,IAEtDvP,KAAKiB,QAAQQ,cACX,IAAID,YAAY,YAAa,CAC3BJ,SAAS,EACTC,YAAY,OAIZrB,KAAKoP,kBACOpP,KAAKqP,cAAcC,MAAM,KAC/B1L,QAAQ2L,GAASvP,KAAKiB,QAAQ4I,UAAUG,IAAIuF,IAElDvP,KAAKwP,eACOxP,KAAKyP,WAAWH,MAAM,KAC5B1L,QAAQ2L,GAASvP,KAAKiB,QAAQ4I,UAAUC,OAAOyF,IAEzDvP,KAAKiB,QAAQQ,cACX,IAAID,YAAY,gBAAiB,CAC/BJ,SAAS,EACTC,YAAY,EACZC,OAAQ,CACN2I,MAAOgF,EAASzF,aAzDnBoF,UAAU,CAAC,QAAS,YACpBA,SAAS,CAACc,cAAenM,cCJrBoM,UAA+BjQ,EAc1CyC,UACEnC,KAAK+K,SAGPA,SACM/K,KAAK4P,kBAAoB5P,KAAK6P,cAAcnF,QAC9C1K,KAAKkO,eAELlO,KAAKiO,gBAITA,gBACE,IAAIE,EAAcnO,KAAKoO,eAAiBpO,KAAKqO,WAC7CrO,KAAK8P,cAAclM,QAAQ,CAACvB,EAAIkM,KAC1BJ,IACF9L,EAAGkH,MAAQ,IAEblH,EAAGmM,UAAW,IAIlBN,eACElO,KAAK8P,cAAclM,QAAQ,CAACvB,EAAIkM,KAC9BlM,EAAGmM,UAAW,KApCXmB,UAAU,CAAC,UAAW,UAEtBA,SAAS,CACdlB,MAAOhC,eCLEsD,UAAgCrQ,EAO3CyC,UACE,IAAIlB,EAAUjB,KAAKiB,QAEnBA,EAAQ+O,QAAU,KACZhQ,KAAKiQ,oBACPhP,EAAQiP,IAAMlQ,KAAKmQ,iBAEnBlP,EAAQwH,MAAM2H,QAAU,SAZvBL,SAAS,CAACM,YAAa9M,cCKnB+M,UAA2B5Q,EAetC6Q,aACE,GAAIvQ,KAAKwQ,WACP,YAAYC,QAEd,IAAIC,EAAa1Q,KAAKiB,QAA4BwF,GAElD,GAAkB,KAAdiK,EACF,OAAOA,EAEP,UAAU3D,gFAAgF/M,KAAKgC,6DAInG2O,qBAEE,SADYC,SAASC,QACJ7Q,KAAKuQ,SAGxBO,mBACE,YAAa7P,QAA4B8P,SAG3CC,eACE,IAAIC,EAAwB,CAACjL,CAAChG,KAAK2Q,gBAAiB,IACpD,IAAK,MAAM1P,UAAgB6P,aAAc,CACvC,IAAIzO,EAAKpB,EACLoB,EAAGiC,KAAKkF,OAAS,IACf+C,EAAmBlK,IAAkB,YAAXA,EAAGqC,KAC/BuM,EAAKjR,KAAK2Q,gBAAgBtO,EAAGiC,MAAQjC,EAAGqI,QAC/B6B,EAAmBlK,IAAkB,SAAXA,EAAGqC,KAClCrC,EAAGqI,UACLuG,EAAKjR,KAAK2Q,gBAAgBtO,EAAGiC,MAAQjC,EAAGkH,OAG1C0H,EAAKjR,KAAK2Q,gBAAgBtO,EAAGiC,MAAQjC,EAAGkH,OAI9C,OAAO0H,EAGTC,oBACE,YAAYC,uBAAwBnR,KAAKoR,mBAG3CC,oBACE,YAAYC,uBAAwBtR,KAAKuR,mBAG3C3K,aACE5G,KAAKwR,OAASxR,KAAKwR,OAAO9N,KAAK1D,MAGjCmC,UACEyG,sBAAsB,KAEpB,IAAK0D,EADStM,KAAKiB,SAEjB,UAAU8L,MAAM,wDAGd/M,KAAKkR,eACPlR,KAAK0N,UAEH1N,KAAKqR,eACPrR,KAAKiB,QAAQ4C,iBAAiB,SAAU7D,KAAKwR,UAKnDzN,aACM/D,KAAKqR,eACPrR,KAAKiB,QAAQ+C,oBAAoB,SAAUhE,KAAKwR,QAIpDA,SACEC,aAAaC,WAAW1R,KAAK2Q,gBAC7B3Q,KAAKgB,SAAShB,KAAKiB,6BAGrBwN,MAAMlN,GACAA,GACFA,EAAM4J,iBAERnL,KAAKwR,SAGPG,KAAKpQ,GACHA,EAAM4J,iBAENsG,aAAaG,QAAQ5R,KAAK2Q,eAAgBkB,KAAKC,UADpC9R,KAAKgR,SAC8ChR,KAAK2Q,kBACnE3Q,KAAKgB,SAAShB,KAAKiB,kCAGrByM,QAAQnM,GAIN,GAHIA,GACFA,EAAM4J,iBAEJsG,aAAaM,QAAQ/R,KAAK2Q,gBAAiB,CAC7C,MAAMqB,EAAYH,KAAKI,MAAMR,aAAaM,QAAQ/R,KAAK2Q,iBACvD,IAAK,MAAM1P,UAAgB6P,aAAc,CACvC,IAAIzO,EAAKpB,EACLoB,EAAGiC,QAAQ0N,IACTzF,EAAmBlK,IAAkB,YAAXA,EAAGqC,KAC/BrC,EAAGqI,QAAUsH,EAAU3P,EAAGiC,MACjBiI,EAAmBlK,IAAkB,SAAXA,EAAGqC,KAClCrC,EAAGkH,OAASyI,EAAU3P,EAAGiC,QAC3BjC,EAAGqI,SAAU,GAGfrI,EAAGkH,MAAQyI,EAAU3P,EAAGiC,OAI9BtE,KAAKgB,SAAShB,KAAKiB,0CAEnBjB,KAAKgB,SAAShB,KAAKiB,oCAjIhBqP,SAAS,CACd7J,GAAIlD,OACJ2N,cAAezE,QACf4E,cAAe5E,eCXNyF,UAA+BxS,EAQ1CyS,gBACE,OAAInS,KAAKoS,uBACKC,eAAe/C,MAAM,KAAKgD,IAAIC,GAAO/H,OAAOgI,WAAWD,EAAIE,SAAS7H,OAAO2H,GAAOA,GAAO,GAAKA,GAAO,GAE1G,CAAC,EAAG,GAIfpQ,UACE6C,EAAgBhF,KAAM,CACpBmS,UAAWnS,KAAKmS,UAChBlR,QAASjB,KAAKiB,UAIlByR,OAAOpN,GACLtF,KAAKgB,SACHhB,KAAKiB,QACL,sBACA,CACEI,YAAY,EACZD,SAAS,EACTE,OAAQ,CACNL,QAASjB,KAAKiB,WAMtB0R,UAAUrN,GACRtF,KAAKgB,SACHhB,KAAKiB,QACL,yBACA,CACEI,YAAY,EACZD,SAAS,EACTE,OAAQ,CACNL,QAASjB,KAAKiB,YA3CfiR,SAAS,CAACC,UAAW5O,cCDjBqP,UAA4B1Q,EAQvCC,UAEEnC,KAAKmB,QAAU,CAACF,QADFjB,KAAKiB,QACMkR,UAAW,IAEhC,yBAA0BvK,QAC3B5H,KAAK8F,QAAS9F,KAAK+F,WAAaf,EAAgBhF,KAAMA,KAAKmB,SAG5DnB,KAAKoC,cAITsQ,OAAOpN,GACL,IAAIrE,EAAUjB,KAAKiB,QACC,KAAhBA,EAAQiP,KAGR5K,EAAM3E,SAAWM,GAAWqE,EAAMC,iBACpCvF,KAAKoC,cACDpC,KAAK+F,WACP/F,KAAK+F,cChCb,MAAM8M,EAAkB,mBAAoB9P,SAAS+P,gBAAgBrK,MACrE,IAAIsK,iBAEkBC,EAAgB/R,GAAkBgS,SAACA,EAAW,SAAZC,MAAsBA,EAAQ,QAA9BC,OAAuCA,EAAS,WAAoC,IAC1H,UAAZF,GAAyBJ,SAM/BO,iBACE,MAAMC,SAACA,gBAAyE,yBAC5EN,IAGJA,GAAmB,EACnBM,KAXQC,GAERrS,EAAQsS,eAAe,CAACN,SAAAA,EAAUC,MAAAA,EAAOC,OAAAA,aAY3BK,EAAgBC,GAC9B,IAAKA,EACH,YAEF,MAAMC,EAAYC,iBAAiBF,GAAMC,UAGzC,MAFmC,YAAdA,GAAyC,WAAdA,GAE5BD,EAAKvK,cAAgBuK,EAAKxK,aACrCwK,EAGFD,EAAgBC,EAAKG,gBAAkB7Q,SAAS8Q,WC1B5CC,UAAgCpU,EAA7CE,kCAmBEI,aAAoC,KAEpCkQ,UACE,YAAY6D,YAAc/T,KAAKgU,SAAYhU,KAAKiB,QAA6BiP,IAG/E+D,aACE,YAAYC,eAAiBlU,KAAKmU,YAAenU,KAAKiB,QAA6BmT,OAGrFC,YACE,YAAYC,cAAgBtU,KAAKuU,WAAcvU,KAAKiB,QAA6BoT,MAGnFG,qBACE,YAAYC,cAAgBzU,KAAK0U,WAAa,wBAGhDC,qBACE,YAAYC,cAAgB5U,KAAK6U,WAAa,uBAGhDjO,aACE5G,KAAK8U,KAAO9U,KAAK8U,KAAKpR,KAAK1D,MAC3BA,KAAK+U,MAAQ/U,KAAK+U,MAAMrR,KAAK1D,MAG/BmC,WAGA2S,OACE,IAAI7T,EAAUjB,KAAKiB,QACnB,GAAIjB,KAAKgV,QACP,OAEFhV,KAAKgV,QAAUjS,SAASC,cAAc,UAEtC,IAAIiS,EAAQlS,SAASC,cAAc,OACnCiS,EAAMC,UAAYlV,KAAK2U,eACvBM,EAAM/E,IAAMlQ,KAAKkQ,IACjB+E,EAAMb,OAASpU,KAAKiU,OACpBgB,EAAMZ,MAAQrU,KAAKqU,MACnBrU,KAAKgV,QAAQG,YAAYF,GAEzBhU,EAAQmU,sBAAsB,WAAYpV,KAAKgV,SAC/CK,EAAeC,eAAetV,KAAKgV,SACnChV,KAAKgV,QAAQE,UAAYlV,KAAKwU,eAC9BxU,KAAKgV,QAAQO,YACbvC,EAAgBhT,KAAKgV,QAAS,CAAC/B,SAAU,SAAUC,MAAO,QAAQ/P,MAAM,IAAMnD,KAAKgV,QAASzB,gBAAe,IAC3GvT,KAAKgV,QAAQnR,iBAAiB,QAAS7D,KAAK+U,OAC5C/U,KAAKgV,QAAQnR,iBAAiB,SAAU7D,KAAK+U,OAC7C/U,KAAKgV,QAAQnR,iBAAiB,QAAS7D,KAAK+U,OAG9CA,QACM/U,KAAKgV,UACPhV,KAAKgV,QAAQD,QACb/U,KAAKgV,QAAQlL,SACb9J,KAAKgV,QAAU,KACfhC,EAAgBhT,KAAKiB,QAAS,CAACgS,SAAU,SAAUC,MAAO,QAAQ/P,MAAM,IAAMnD,KAAKiB,QAAQsS,gBAAe,MA5EvGO,SAAS,CACd5D,IAAK3M,OACL0Q,OAAQ1Q,OACR8Q,MAAO9Q,QAEFuQ,UAAU,CAAC,QAAS,eCThB0B,UAA6C9V,EAA1DE,kCAWEI,mBAAgB,EAEhBA,uBAAoBA,KAAKyV,aAAa/R,KAAK1D,MAE3CmC,UACEnC,KAAK0V,aAAa9R,QAASvB,GAAOA,EAAGwB,iBAAiB,SAAU7D,KAAK2V,oBAGvE5R,aACE/D,KAAK0V,aAAa9R,QAASvB,GAAOA,EAAG2B,oBAAoB,SAAUhE,KAAK2V,oBAG1EF,aAAalU,GACX,IAAIqU,EAAe5V,KAAK0V,aAAaG,OAAO,CAACC,EAAezT,IAAOA,EAAGqI,QAAUoL,EAAgB,EAAIA,EAAe,GAC/GnV,EAASY,EAAMZ,OACfiV,EAAe5V,KAAK+V,eACtBxU,EAAM4J,iBACNxK,EAAO+J,SAAU,EACjB/J,EAAOc,cAAc,IAAID,YAAY,SAAU,CAACJ,SAAS,EAAMC,YAAY,KAC3EV,EAAOc,cAAc,IAAID,YAAY,6BAA8B,CAACJ,SAAS,EAAMC,YAAY,EAAMC,OAAQ,CAACX,OAAAA,MAC1GX,KAAKgW,iBACPhW,KAAKiW,YAAYhT,UAAYjD,KAAK6M,gBAGpClM,EAAOc,cAAc,IAAID,YAAY,8BAA+B,CAACJ,SAAS,EAAMC,YAAY,EAAMC,OAAQ,CAACX,OAAAA,MAC3GX,KAAKgW,iBACPhW,KAAKiW,YAAYhT,UAAY,MAnC5BuS,UAAU,CAAC,QAAS,SACpBA,SAAS,CAACrL,IAAKK,OAAQmC,QAASpJ,cCH5B2S,UAA6BxW,EAexCyW,mBACE,YAAYC,wBAA0BpW,KAAKqW,kBAAoB,gBAGjEC,iBACE,YAAYC,mBAAqBvW,KAAKwW,gBAAkB,YAG1DrU,UACEnC,KAAKyW,iBAGPzM,IAAIzI,GACEA,GACFA,EAAM4J,iBAGR,MAAMuL,EAAU1W,KAAK2W,eAAe1T,UAAU2T,QAAQ,cAAe5W,KAAK6W,cAC1E7W,KAAK8W,aAAaC,mBAAmB/W,KAAKsW,WAAYI,GAGxD5M,OAAOvI,GACLA,EAAM4J,iBACN,MAAM6L,EAA+BzV,EAAMZ,OAAuBsW,QAAQjX,KAAKmW,cAC/E,GAAe,MAAXa,EACF,UAAUjK,mGAAmG/M,KAAKmW,gBAGpH,GAAkC,SAA9Ba,EAAQtQ,QAAQwQ,UAClBF,EAAQlN,aACH,CACLkN,EAAQvO,MAAM2H,QAAU,OACxB,IAAI+G,EAAeH,EAAQI,cAAc,2BACzC,GAAoB,MAAhBD,EACF,UAAUpK,8HAGZoK,EAAa5N,MAAQ,KAIzBsN,aACE,WAAWQ,MAAOC,UAAU7W,WAAa8W,KAAKC,SAGxCf,iBAGN,GAFezW,KAAK2W,eAAe1T,UAEtBwU,QAAQ,cACnB,UAAU1K,MAAM,qIA/DbmJ,UAAU,CAAC,SAAU,YACrBA,SAAS,CACdI,WAAY/S,OACZ4S,aAAc5S,cCJLmU,UAAkChY,EAA/CE,kCAUUI,8BAA2BA,KAAK2X,oBAAoBjU,KAAK1D,MAEjEmC,UACEnC,KAAK4X,gBAAgBhU,QAASvB,GAAOA,EAAGwB,iBAAiB,SAAU7D,KAAK6X,2BAG1E9T,aACE/D,KAAK4X,gBAAgBhU,QAASvB,GAAOA,EAAG2B,oBAAoB,SAAUhE,KAAK6X,2BAGrEC,oBACN,IAAIC,EAAS,IAAIC,IAAIhY,KAAK4X,gBAAgBtF,IAAIjQ,GAAMA,EAAGkH,QACvD,OAAOwO,EAAOE,IAAI,KAAsB,GAAfF,EAAOG,KAG1BP,sBACF3X,KAAK8X,qBACP9X,KAAKiB,QAAQQ,cAAc,IAAID,YAAY,2BACvCxB,KAAK2J,eACP3J,KAAK4X,gBAAgBhU,QAAQvB,GAAMA,EAAGwH,UAAUC,OAAO9J,KAAK+J,eAG9D/J,KAAKiB,QAAQQ,cAAc,IAAID,YAAY,8BACvCxB,KAAK2J,eACP3J,KAAK4X,gBAAgBhU,QAAQvB,GAAMA,EAAGwH,UAAUG,IAAIhK,KAAK+J,eAhCxD2N,UAAU,CAAC,YACXA,UAAU,CAAC,eCHPS,UAA+BzY,EAO1C0Y,KAAK7W,GACCA,GACFA,EAAM4J,iBAERnL,KAAKqY,eAAe3T,KAAO,OAG7B4T,KAAK/W,GACCA,GACFA,EAAM4J,iBAERnL,KAAKqY,eAAe3T,KAAO,WAG7BqG,OAAOxJ,GACDA,GACFA,EAAM4J,iBAEyB,aAA7BnL,KAAKqY,eAAe3T,KACtB1E,KAAKoY,OAELpY,KAAKsY,QA1BFH,UAAU,CAAC,kBCKPI,UAA0C7Y,EAAvDE,kCAEEI,0BAAuBA,KAAKwY,gBAAgB9U,KAAK1D,MAEjDmC,UACEyF,OAAO/D,iBAAiB,UAAW7D,KAAKyY,sBAG1C1U,aACE6D,OAAO5D,oBAAoB,UAAWhE,KAAKyY,sBAG7CD,gBAAgB7L,GACd,IAAIsE,EAAOtE,EAAQsE,KACfA,EAAKyH,eAAe,SAAyB,gBAAdzH,EAAK3M,MAA0B2M,EAAKyH,eAAe,WACpF1Y,KAAK0I,OAAOuI,EAAKnJ,QAIrBY,OAAOZ,GACJ9H,KAAKiB,QAA8BwH,MAAMX,UAAYA,aAK7C6Q,UAAuCjZ,EAOlDyC,UxBxByB,IAACgC,EAAYhD,EAChCiF,EwByBAwB,OAAOtH,OAASsH,OAAOgR,MACzBpR,EAAgBxH,MxB3BkBmB,EwB4BhB,GxBzBa,QAAhCiF,GAHuBjC,EwB4BVnE,MxB1BiBJ,YACbiZ,iBAA8B,IAAPzS,GAAyBA,EAAGxC,QAASkV,IAI1E,GAHoB,iBAATA,IACP3U,EAAW2U,GAAQ7Q,EAAS9D,EAAW2U,GAAO3X,MAAAA,OAAyC,EAASA,EAAQgH,OAExF,iBAAT2Q,EAAmB,CAC1B,MAAMxU,KAAEA,EAAI6D,KAAEA,GAAS2Q,EACvB,IAAKxU,EACD,OACJH,EAAWG,GAAQ2D,EAAS9D,EAAWG,GAAO6D,IAAShH,MAAAA,OAAyC,EAASA,EAAQgH,UwBkBvHnI,KAAK+Y,cAMTlQ,aAAahB,GACX7H,KAAK+Y,aAGPA,aACE,IAAIlR,EAAmC,CAACvD,KAAM,cAAewD,OAAQ9H,KAAKgZ,aAC1EpR,OAAOqR,OAAOC,YACZrR,EACA,KAIJmR,YACE,MAAMnF,EAAO9Q,SAAS8Q,KAChBhR,EAAOE,SAAS+P,gBAGtB,OAAOyE,KAAKpN,IAAI0J,EAAK3K,aAAc2K,EAAK7K,aAAcnG,EAAKoG,aAAcpG,EAAKqG,aAAcrG,EAAKmG,eAjC5F2P,YAAY,CAAC,oBCjCTQ,UAA4BzZ,EAEvC0Z,cACEpZ,KAAKqZ,QAAQrZ,KAAKiB,SAGpBoY,QAAQpY,aACNA,EAAQyF,QAAQvC,qBAAalD,EAAQyF,QAAQvC,qBAAYmV,WAAW,IAAIC,eAAgBvZ,KAAKgC,kBAAoB,KAAM,MAAO,GAC5F,IAA9Bf,EAAQyF,QAAQvC,mBAEXlD,EAAQyF,QAAQvC,WAGzB,IAAIqV,EAAgC,IAAID,eAAgBvZ,KAAKgC,wBAA0B,KACvFf,EAAQyF,QAAQ/F,iBAASM,EAAQyF,QAAQ/F,iBAAQ2Y,WAAWE,EAA+B,MAAO,UAC3FvY,EAAQyF,QAAQ+S,KAAazZ,KAAKgC,sBACX,IAA1Bf,EAAQyF,QAAQ/F,eAEXM,EAAQyF,QAAQ/F,OAGzBM,EAAQyF,QAAQgT,iBAASzY,EAAQyF,QAAQ/F,iBAAQ2Y,WAAWE,EAA+B,MAAO,UAC3FvY,EAAQyF,QAAQ+S,KAAazZ,KAAKgC,sBACX,IAA1Bf,EAAQyF,QAAQgT,eAEXzY,EAAQyF,QAAQgT,OAIzB,IAAI3B,EAAS/X,KAAKJ,YAAYmY,OAC1BA,GACFnT,OAAO+U,KAAK5B,GAAQnU,QAAQ2O,UAActR,EAAQyF,QAAQ+S,KAAazZ,KAAKgC,cAAcuQ,aAI5F,IAAIqH,EAAU5Z,KAAKJ,YAAYga,QAC3BA,GACFhV,OAAO+U,KAAKC,GAAShW,QAAQ2O,UAActR,EAAQyF,QAAQ+S,KAAazZ,KAAKgC,cAAcuQ,oBCrCpFsH,UAAkCV,EAe7ChX,UACEyG,sBAAsB,KAEpBoK,EACEhT,KAAKiB,QACL,CACEgS,SAAUjT,KAAK8Z,iBAAmB9Z,KAAK+Z,cAAgB,SACvD7G,MAAOlT,KAAKga,cAAgBha,KAAKia,WAAa,SAC9C9G,OAAQnT,KAAKka,eAAiBla,KAAKma,YAAc,WAEnDhX,MAAM,IAAMnD,KAAKiB,QAAQsS,kBAC3BvT,KAAKoZ,iBAxBFS,SAAS,CACd5G,SAAU1P,OACV2P,MAAO3P,OACP4P,OAAQ5P,cCLC6W,UAAiC1a,EAU5C2a,OAAO9Y,GAIL,IACIZ,EAJAY,GACFA,EAAM4J,iBAKNxK,EADU,aAFDX,KAAKsa,aAAeta,KAAKua,UAAY,YAGrCxX,SAAS8Q,KAETL,EAAgBxT,KAAKiB,SAElB,MAAVN,GAGJqS,EAAgBrS,EAAS,CAACsS,SAAU,SAAUC,MAAO,QAAQ/P,MAAM,IAAMxC,EAAQ4S,gBAAe,KAtB3F6G,SAAS,CACdI,KAAMjX,cCHGkX,UAA2B/a,EAkBtC2a,SACE,IAAI1Z,EAASoC,SAASqU,cAAcpX,KAAK0a,eACpC/Z,EAKLqS,EACErS,EACA,CACEsS,SAAUjT,KAAK8Z,iBAAmB9Z,KAAK+Z,cAAgB,SACvD7G,MAAOlT,KAAKga,cAAgBha,KAAKia,WAAa,SAC9C9G,OAAQnT,KAAKka,eAAiBla,KAAKma,YAAc,WAEnDhX,MAAM,IAAMxC,EAAQ4S,kBAXpBzR,QAAQ6Y,mCAAmC3a,KAAK0a,mBAnB7CD,SAAS,CACdG,SAAUrX,OACV0P,SAAU1P,OACV2P,MAAO3P,OACP4P,OAAQ5P,cCNCsX,UAA8Bnb,EAUzC2a,OAAO9Y,GAIL,IACIZ,EAJAY,GACFA,EAAM4J,iBAKNxK,EADU,aAFDX,KAAKsa,aAAeta,KAAKua,UAAY,YAGrCxX,SAAS8Q,KAETL,EAAgBxT,KAAKiB,SAElB,MAAVN,GAGJqS,EAAgBrS,EAAS,CAACsS,SAAU,SAAUC,MAAO,UAAU/P,MAAM,IAAMxC,EAAQ4S,gBAAe,KAtB7FsH,SAAS,CACdL,KAAMjX,cCJGuX,WAA+Bpb,EAA5CE,kCAKEI,aAAgD,KAEhDmC,UACEyG,sBAAsB,KAEpB5I,KAAK+a,QAAUxS,WAAW,IAAMvI,KAAKiB,QAAQ6I,SAA8B,IAApB9J,KAAKgb,gBAIhEjX,aACM/D,KAAK+a,SACPzS,aAAatI,KAAK+a,UAdfD,UAAS,CAACG,QAASzQ,cCFf0Q,WAAyBxb,EAAtCE,kCAYEI,mBAAuC,KAEvCmb,YACE,YAAYb,aAAeta,KAAKua,UAAY,MAG9Ca,qBAGE,GAA2B,OAAvBpb,KAAKqb,cAKT,OADArb,KAAKqb,cAAgBtY,SAASC,cAAc,OACpChD,KAAKmb,OACX,IAAK,MACHnb,KAAKiB,QAAQmU,sBAAsB,cAAepV,KAAKqb,eACvD,MACF,IAAK,SACHrb,KAAKiB,QAAQmU,sBAAsB,WAAYpV,KAAKqb,gBAK1DlZ,UACE,IAAIlB,EAAUjB,KAAKiB,QACnBjB,KAAKob,qBAEY,IAAIhW,qBAAqBC,IACxCA,EAAQzB,QAAQ0B,IACVA,EAAM3E,SAAWX,KAAKqb,gBAGM,IAA5B/V,EAAMgW,kBACRra,EAAQ4I,UAAUG,IAAIhK,KAAKub,cAAgBvb,KAAKwb,WAAa,SACxB,IAA5BlW,EAAMgW,mBACfra,EAAQ4I,UAAUC,OAAO9J,KAAKub,cAAgBvb,KAAKwb,WAAa,aAInE,CACDrJ,UAAW,CAAC,EAAG,KAERrM,QAAQ9F,KAAKqb,gBArDjBH,WAAU,CAAC,SACXA,UAAS,CACdV,KAAMjX,cCJGkY,WAA2BtC,EAUtChX,UACE,IAAKnC,KAAK0b,eACR,UAAU3O,MAAM,oCAGlBnE,sBAAsB,KAChB5I,KAAK2b,mBAAqB3b,KAAK4b,gBACjC5b,KAAK6b,YAKXA,QAAQta,GACFA,GACFA,EAAM4J,iBAER,IAAI2Q,EAAc/Y,SAASqU,cAAcpX,KAAK+b,aAE9C,GAAmB,MAAfD,EAEF,YADA9b,KAAKiB,QAAQQ,cAAc,IAAID,YAAY,iBAAkB,CAACJ,SAAS,EAAMC,YAAY,KAI3F,IAAI6K,EAAOlM,KAAKiB,QAAQ+a,WAAU,GAGlC,OAFAhc,KAAKqZ,QAAQnN,GAELlM,KAAKic,aACX,IAAK,cACL,IAAK,YACL,IAAK,WACL,IAAK,aACHH,EAAY/E,mBAAmB/W,KAAKic,YAAa/P,EAAKgQ,WACtD,MACF,IAAK,eACHJ,EAAYI,UAAYhQ,EAAKgQ,UAC7B,MACF,IAAK,eACHJ,EAAY7Y,UAAYiJ,EAAKgQ,UAC7B,MACF,IAAK,UACHJ,EAAY/E,mBAAmB,aAAc7K,EAAKgQ,WAClD,MACF,IAAK,SACHJ,EAAY/E,mBAAmB,YAAa7K,EAAKgQ,WACjD,MACF,QACE,UAAUnP,MAAM,oCAGpB/M,KAAKiB,QAAQ6I,UAzDR2R,UAAS,CAAC9a,OAAQ4C,OAAQ4Y,OAAQ5Y,OAAQ6Y,UAAW3P,eCCjD4P,WAA8B3c,EA4BzCyC,UACE,IAAKnC,KAAKsc,cACR,UAAUvP,MAAM,oDAGd/M,KAAKuc,oBAAsBvc,KAAKwc,qBpCHhB,EAACrY,EAAYhD,EAAU,MAC1B,IAAI2F,EoCGV9G,KpCH+BmB,IoCGxCsb,GAGEzc,KAAK0c,mBAAqB1c,KAAK2c,gBtCnCR,EAACxY,EAAYhD,EAAU,MAClD,MAAM+E,YAAEA,EAAWzE,cAAEA,EAAawE,OAAEA,EAAM1B,YAAEA,GAAgBK,OAAOC,OAAO,GAAIE,EAAgB5D,GACxFyb,EAAWrb,IACb,MAAM0D,GAAiB9D,MAAAA,OAAyC,EAASA,EAAQF,UAAYkD,EAAWlD,QACxG,KAAIgE,EAAc4X,SAAStb,EAAMZ,UFqBlC,SAA6B0B,GAChC,MAAMya,EAAOza,EAAG0a,wBACVC,EAAgBpV,OAAOD,aAAe5E,SAAS+P,gBAAgB7J,aAC/DgU,EAAerV,OAAOF,YAAc3E,SAAS+P,gBAAgBoK,YAGnE,OAFoBJ,EAAKlE,KAAOoE,GAAmBF,EAAKlE,IAAMkE,EAAKhV,QAAW,GAC3DgV,EAAKK,MAAQF,GAAkBH,EAAKK,KAAOL,EAAK9U,OAAU,EE1B3BoV,CAAoBnY,IAAkBiB,KAIhF/B,EAAWkZ,cACXlZ,EAAWkZ,aAAa9b,GAGxBE,GAAe,CACf,MAAMP,EAAYmD,EAAiB,gBAAiBF,EAAYI,GAC1D+Y,EAAoB7Y,EAAcvD,EAAWK,EAAO,CAAE4C,WAAAA,IAC5Dc,EAAcxD,cAAc6b,KAe9BpY,EAAuBf,EAAWJ,WAAWL,KAAKS,GACxDS,OAAOC,OAAOV,EAAY,CACtB6B,aARAC,MAAAA,GAAgDA,EAAOrC,QAAQrC,IAC3DqG,OAAO5D,oBAAoBzC,EAAOqb,GAAS,KAS3C1X,OAfJe,MAAAA,GAAgDA,EAAOrC,QAAQrC,IAC3DqG,OAAO/D,iBAAiBtC,EAAOqb,GAAS,MsCgB9CW,CAAgBvd,MAGlB4I,sBAAsB,KAChB5I,KAAKwd,iBAELxd,KAAKyd,cAAc7Z,QADK,OAAtB5D,KAAKuN,aACqB5M,GAAWX,KAAK0d,UAAU/c,GAE1BA,GAAWX,KAAK2d,WAAWhd,MAM/D0c,eACErd,KAAKyd,cAAc7Z,QAASjD,IACtBX,KAAK4d,kBAAkBjd,KACzBX,KAAK6d,oBAAoBld,GACzBX,KAAK8d,cAAcnd,MAKzBod,aACE,GAAI/d,KAAKuc,mBACP,OAAQvc,KAAKge,iBACX,IAAK,KACHhe,KAAKie,KACL,MACF,IAAK,MACHje,KAAKke,MACL,MACF,IAAK,SACHle,KAAK+K,SAIX,MAAO,GAGToT,aACE,GAAIne,KAAKwc,mBACP,OAAQxc,KAAKoe,iBACX,IAAK,KACHpe,KAAKie,KACL,MACF,IAAK,MACHje,KAAKke,MACL,MACF,IAAK,SACHle,KAAK+K,SAIX,MAAO,GAGTkT,GAAG1c,GACDvB,KAAKyd,cAAc7Z,QAASjD,IAC1BX,KAAK6d,oBAAoBld,GACzBX,KAAK0d,UAAU/c,KAInBud,IAAI3c,GACFvB,KAAKyd,cAAc7Z,QAASjD,IAC1BX,KAAK6d,oBAAoBld,GACzBX,KAAK2d,WAAWhd,KAIpBoK,OAAOxJ,GACLvB,KAAKyd,cAAc7Z,QAASjD,IAC1BX,KAAK6d,oBAAoBld,GACzBX,KAAK8d,cAAcnd,KAIfid,kBAAkBvb,GACxB,MAA6B,QAAtBA,EAAGqE,QAAQ2X,QAGZR,oBAAoBxb,GACtBrC,KAAK4d,kBAAkBvb,UAClBA,EAAGqE,QAAQ2X,QAElBhc,EAAGqE,QAAQ2X,QAAU,OAIjBP,cAAczb,GACNrC,KAAKse,WAAWhP,MAAM,KAC5B1L,QAAS2L,GAAUlN,EAAGwH,UAAUkB,OAAOwE,IAGzCmO,UAAUrb,GACFrC,KAAKse,WAAWhP,MAAM,KAC5B1L,QAAS2L,GAAUlN,EAAGwH,UAAUkB,OAAOwE,GAAO,IAGhDoO,WAAWtb,GACHrC,KAAKse,WAAWhP,MAAM,KAC5B1L,QAAS2L,GAAUlN,EAAGwH,UAAUkB,OAAOwE,GAAO,KA1IjD8M,WAAU,CAAC,UACXA,UAAS,CACdkC,MAAOhb,OACPwa,WAAYxa,OACZ4a,WAAY5a,OACZib,UAAW/R,QACXgS,QAASlb,cCTAmb,WAA+Bhf,EAc1CqL,OAAOxJ,GACDA,GACFA,EAAM4J,iBAER,IACIwT,EADQ3e,KAAK4e,WACI1O,IACL,MAAZyO,GAAoBA,IAAa3e,KAAK6e,SACxC7e,KAAK8e,SAEL9e,KAAKyO,QAITqQ,OAAOvd,GACDA,GACFA,EAAM4J,iBAER,IAAI4T,EAAQ/e,KAAK4e,WACb5e,KAAKgf,yBACPD,EAAM9b,UAAYjD,KAAKif,qBAGzBF,EAAM7O,IAAMlQ,KAAK6e,SAGnBpQ,MAAMlN,GACAA,GACFA,EAAM4J,iBAER,IAAI4T,EAAQ/e,KAAK4e,WACjBG,EAAM7O,IAAM,GACZ6O,EAAM9b,UAAY,GAGZ2b,WACN,IAAIG,EAAQhc,SAASmc,kBAAkBlf,KAAKmf,gBAC5C,GAAa,MAATJ,EACF,UAAUhS,uCAAuC/M,KAAKmf,iBAExD,GCxDyB,eDwDPJ,ECxDL1S,SDyDX,UAAUU,iCAAiC/M,KAAKmf,iBAEhD,OAAOJ,EAIHF,SACN,IAAI5d,EAAUjB,KAAKiB,QACnB,GAAIjB,KAAK+T,YACP,YAAYC,YACH5H,EAAkBnL,GAC3B,OAAOA,EAAQ4P,KAEf,UAAU9D,MAAM,oCAjEb2R,UAAS,CACdU,QAAS7b,OACT2M,IAAK3M,OACL8b,eAAgB9b,cEPP+b,WAA4B5f,EAAzCE,kCAeEI,kBAAeA,KAAKuf,gBAAgB7b,KAAK1D,MAEzCmC,UACEnC,KAAKuf,kBACLvf,KAAKqJ,YAAYxF,iBAAiB,QAAS7D,KAAK8D,cAGlDC,aACE/D,KAAKqJ,YAAYrF,oBAAoB,QAAShE,KAAK8D,cAGrDyb,kBACE,IAAIC,EAAY,EAEZC,EADgBzf,KAAKqJ,YAAYE,MACTmW,MAAM,QAClCF,EAAaC,GAAWA,EAAQjW,QAAW,EAC3CxJ,KAAKyJ,aAAaC,UAAY8V,EAAU/e,WACpCT,KAAK2J,gBACH3J,KAAK4J,aAAa4V,GACpBxf,KAAKyJ,aAAaI,UAAUC,OAAO9J,KAAK+J,YAExC/J,KAAKyJ,aAAaI,UAAUG,IAAIhK,KAAK+J,aAK3CH,aAAaK,GACX,IAAIC,EAAM,EACNC,EAAM,MAUV,OARInK,KAAKoK,cACPF,EAAMlK,KAAKqK,UAGTrK,KAAKsK,cACPH,EAAMnK,KAAKuK,UAGNN,GAASC,GAAOD,GAASE,GAnD3BmV,WAAU,CAAC,QAAS,UACpBA,UAAS,CAACpV,IAAKM,OAAQL,IAAKK,QAC5B8U,WAAU,CAAC"}