{"version":3,"file":"stimulus-library.module.js","sources":["../src/async_block_controller.ts","../src/auto_submit_form_controller.ts","../src/autosize_controller.ts","../src/char_count_controller.ts","../src/clipboard_controller.ts","../src/confirm_navigation_controller.ts","../src/debug_controller.ts","../src/detect_dirty_controller.ts","../src/disable_inputs_controller.ts","../src/dismissable_controller.ts","../src/empty_dom_controller.ts","../src/enable_inputs_controller.ts","../src/fallback_image_controller.ts","../src/lazy_block_controller.ts","../src/limited_selection_checkboxes_controller.ts","../src/password_confirm_controller.ts","../src/password_peek_controller.ts","../src/responsive_iframe_controller.ts","../src/self_destruct_controller.ts","../src/teleport_controller.ts","../src/toggle_class_controller.ts","../src/word_count_controller.ts"],"sourcesContent":["import {Controller} from \"stimulus\";\n\nexport class AsyncBlockController extends Controller {\n  static targets = [\"replace\"];\n  static values = {endpoint: String};\n\n  declare readonly replaceTarget: HTMLElement;\n  declare readonly hasReplaceTarget: boolean;\n  declare readonly endpointValue: string;\n\n\n  // This is a simple controller to load a block of content when the page loads.\n  // It should be used to give a quick initial response before calling out to an\n  // an AJAX endpoint to do some expensive work.\n  connect() {\n    this.loadContent();\n  }\n\n  loadContent() {\n    let el = (this.hasReplaceTarget ? this.replaceTarget : this.element) as HTMLElement;\n    fetch(this.endpointValue)\n    .then((response) => response.text())\n    .then((html) => {\n      let newEl = document.createElement(\"div\");\n      newEl.innerHTML = html;\n      el.replaceWith(newEl);\n\n      // Trigger event to show block has loaded\n      let event = new CustomEvent(\"ajax:success\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    })\n    .catch(err => {\n      el.replaceWith(\"Sorry, this content failed to load\");\n\n      let event = new CustomEvent(\"ajax:error\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    })\n    .finally(() => {\n      let event = new CustomEvent(\"ajax:complete\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    });\n  }\n}\n","import {Controller} from \"stimulus\";\n\nexport class AutoSubmitFormController extends Controller {\n\n  private boundHandler = this.handler.bind(this);\n\n  connect() {\n    (this.element as HTMLElement).querySelectorAll(\"input, select, textarea\").forEach(el => el.addEventListener(\"change\", this.boundHandler));\n  }\n\n  disconnect() {\n    (this.element as HTMLElement).querySelectorAll(\"input, select, textarea\").forEach(el => el.removeEventListener(\"change\", this.boundHandler));\n  }\n\n  private handler(e: Event) {\n    // this.element.submit()\n    // Moved to this to support remote forms and CSRF properly\n    this.element.dispatchEvent(\n      new CustomEvent(\"submit\", {\n        bubbles: true,\n        cancelable: true,\n      }),\n    );\n  }\n}\n","import {Controller} from \"stimulus\";\nimport {useWindowResize} from \"stimulus-use\";\n\nexport class AutosizeController extends Controller {\n\n  private boundHandler = this.handler.bind(this);\n  declare observe: () => void;\n  declare unobserve: () => void;\n\n  connect() {\n    let target = this.element as HTMLTextAreaElement;\n    target.style.resize = \"none\";\n    target.style.boxSizing = \"border-box\";\n\n    useWindowResize(this);\n\n    setTimeout(this.boundHandler, 1000);\n    target.addEventListener(\"input\", this.boundHandler);\n    target.addEventListener(\"focus\", this.boundHandler);\n  }\n\n  windowResize() {\n    this.handler();\n  }\n\n  private handler() {\n    this.autosize(this.element as HTMLTextAreaElement);\n  };\n\n  private autosize(element: HTMLTextAreaElement) {\n    let offset = element.offsetHeight - element.clientHeight;\n    element.style.height = \"auto\";\n    element.style.height = element.scrollHeight + offset + \"px\";\n  }\n\n}\n","import {Controller} from \"stimulus\";\r\n\r\nexport class CharCountController extends Controller {\r\n\r\n  static targets = [\"input\", \"output\"];\r\n  static values = {min: Number, max: Number};\r\n  static classes = [\"error\"];\r\n\r\n  declare readonly inputTarget: HTMLInputElement | HTMLTextAreaElement;\r\n  declare readonly outputTarget: HTMLElement;\r\n  declare minValue: number;\r\n  declare hasMinValue: boolean;\r\n  declare maxValue: number;\r\n  declare hasMaxValue: boolean;\r\n  declare errorClass: string;\r\n  declare hasErrorClass: boolean;\r\n\r\n  boundHandler = this.updateCharCount.bind(this);\r\n\r\n  connect() {\r\n    this.updateCharCount();\r\n    this.inputTarget.addEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  disconnect() {\r\n    this.inputTarget.removeEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  updateCharCount() {\r\n    let charCount = this.inputTarget.value.length;\r\n    this.outputTarget.innerText = charCount.toString();\r\n    if (this.hasErrorClass) {\r\n      if (this.isValidCount(charCount)) {\r\n        this.outputTarget.classList.remove(this.errorClass);\r\n      } else {\r\n        this.outputTarget.classList.add(this.errorClass);\r\n      }\r\n    }\r\n  }\r\n\r\n  isValidCount(count: number) {\r\n    let min = 0;\r\n    let max = 99999;\r\n\r\n    if (this.hasMinValue) {\r\n      min = this.minValue;\r\n    }\r\n\r\n    if (this.hasMaxValue) {\r\n      max = this.maxValue;\r\n    }\r\n\r\n    return count >= min && count <= max;\r\n  }\r\n\r\n}\r\n","import {Controller} from \"stimulus\";\r\n\r\nexport class ClipboardController extends Controller {\r\n\r\n  static targets = [\"button\", \"copy\", \"fallback\"];\r\n  static values = {removeUnused: Boolean};\r\n\r\n  declare readonly sourceTarget: HTMLElement;\r\n  declare readonly copyTarget: HTMLElement;\r\n  declare readonly hasCopyTarget: boolean;\r\n  declare readonly fallbackTarget: HTMLElement;\r\n  declare readonly hasFallbackTarget: boolean;\r\n\r\n  declare readonly hasRemoveUnusedValue: boolean;\r\n  declare readonly removeUnusedValue: boolean;\r\n\r\n  supported = false;\r\n\r\n  connect() {\r\n    this.supported = document.queryCommandSupported(\"copy\");\r\n\r\n    if (this.hasRemoveUnusedValue && this.removeUnusedValue) {\r\n      if (this.supported && this.hasFallbackTarget) {\r\n        this.fallbackTarget.remove();\r\n      } else if (this.hasCopyTarget) {\r\n        this.copyTarget.remove();\r\n      }\r\n    }\r\n  }\r\n\r\n  select(event: MouseEvent) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    (this.sourceTarget as HTMLInputElement | HTMLTextAreaElement).select();\r\n  }\r\n\r\n  copy(event: ClipboardEvent) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    (this.sourceTarget as HTMLInputElement | HTMLTextAreaElement).select();\r\n    if (this.supported) {\r\n      document.execCommand(\"copy\");\r\n    }\r\n  }\r\n}\r\n","import {Controller} from \"stimulus\";\r\n\r\nexport class ConfirmNavigationController extends Controller {\r\n\r\n  static values = {message: String}\r\n\r\n  declare readonly messageValue: string;\r\n\r\n  connect() {\r\n    let confirmMessage = this.messageValue;\r\n    window.onbeforeunload = () => (confirmMessage == null ? true : confirmMessage);\r\n    window.addEventListener(\"popstate\", this.handlePopstate);\r\n    window.addEventListener(\"submit\", () => {\r\n      window.removeEventListener(\"popstate\", this.handlePopstate);\r\n      window.onbeforeunload = null;\r\n    });\r\n    // TODO: Turbo navigation events\r\n  }\r\n\r\n  handlePopstate(event: PopStateEvent) {\r\n    return false;\r\n  }\r\n\r\n}\r\n","import {Controller} from \"stimulus\";\r\n\r\nexport class DebugController extends Controller {\r\n\r\n  static targets = [\"test\"];\r\n  declare testTargets: HTMLElement[];\r\n\r\n  connect() {\r\n    console.log('Debug Controller', this.testTargets);\r\n  }\r\n\r\n}\r\n","import {Controller} from \"stimulus\";\r\n\r\nexport class DetectDirtyController extends Controller {\r\n\r\n  initialValue: string | boolean | null = null;\r\n\r\n  boundHandler = this.handler.bind(this);\r\n\r\n  connect() {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    if (this.isInputElement(element) && this.isCheckable(element)) {\r\n      this.initialValue = element.checked;\r\n    } else {\r\n      this.initialValue = element.value;\r\n    }\r\n    element.addEventListener(\"input\", this.boundHandler);\r\n    element.addEventListener(\"change\", this.boundHandler);\r\n  }\r\n\r\n  disconnect() {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    element.removeEventListener(\"input\", this.boundHandler);\r\n    element.removeEventListener(\"change\", this.boundHandler);\r\n  }\r\n\r\n  restore() {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    if (this.isInputElement(element) && this.isCheckable(element)) {\r\n      element.checked = this.initialValue as boolean;\r\n    } else {\r\n      element.value = this.initialValue as string;\r\n    }\r\n  }\r\n\r\n  private handler(event?: Event) {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n\r\n    if (this.initialValue !== element.value) {\r\n      element.setAttribute(\"data-dirty\", \"true\");\r\n    } else {\r\n      element.removeAttribute(\"data-dirty\");\r\n    }\r\n  }\r\n\r\n  private isCheckable(element: HTMLInputElement): boolean {\r\n    return (element.type === \"radio\" || element.type === \"checkbox\");\r\n  }\r\n\r\n  private isInputElement(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement): element is HTMLInputElement {\r\n    return element.tagName === \"INPUT\";\r\n  }\r\n\r\n}\r\n\r\nexport function isDirty(element: HTMLElement) {\r\n  return element.hasAttribute(\"data-dirty\");\r\n}\r\n","import {Controller} from \"stimulus\";\r\n\r\nexport class DisableInputsController extends Controller {\r\n\r\n  static targets = [\"disabler\", \"disable\"];\r\n\r\n  declare readonly hasDisablerTarget: boolean;\r\n  declare readonly disablerTarget: HTMLInputElement;\r\n  declare readonly disableTargets: Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\r\n\r\n  connect() {\r\n    this.toggle();\r\n  }\r\n\r\n  toggle() {\r\n    if (this.hasDisablerTarget && this.disablerTarget.checked) {\r\n      this.disableInputs();\r\n    } else {\r\n      this.enableInputs();\r\n    }\r\n  }\r\n\r\n  disableInputs() {\r\n    this.disableTargets.forEach((el, _) => {\r\n      el.disabled = true;\r\n    });\r\n  }\r\n\r\n  enableInputs() {\r\n    this.disableTargets.forEach((el, _) => {\r\n      el.disabled = false;\r\n    });\r\n  }\r\n}\r\n","import {Controller} from \"stimulus\";\r\n\r\nexport class DismissableController extends Controller {\r\n\r\n  dismiss() {\r\n    this.element.remove();\r\n  }\r\n\r\n}\r\n","import {Controller} from \"stimulus\";\r\nimport {useMutation} from \"stimulus-use\";\r\n\r\nexport class EmptyDomController extends Controller {\r\n\r\n  static classes = [\"empty\", \"notEmpty\"];\r\n  static values = {scopeSelector: String};\r\n\r\n  declare hasEmptyClass: boolean;\r\n  declare emptyClass: string;\r\n  declare hasNotEmptyClass: boolean;\r\n  declare notEmptyClass: string;\r\n\r\n  declare hasScopeSelectorValue: boolean;\r\n  declare scopeSelectorValue: string;\r\n\r\n  connect() {\r\n    useMutation(this, {element: this.element, childList: true});\r\n  }\r\n\r\n  mutate(entries: MutationRecord[]) {\r\n    let children;\r\n    if (this.hasScopeSelectorValue) {\r\n      children = this.element.querySelectorAll(this.scopeSelectorValue);\r\n    } else {\r\n      children = this.element.children;\r\n    }\r\n\r\n    if (children.length === 0) {\r\n      if (this.hasNotEmptyClass) {\r\n        let classes = this.notEmptyClass.split(\" \");\r\n        classes.forEach(klass => this.element.classList.remove(klass));\r\n      }\r\n      if (this.hasEmptyClass) {\r\n        let classes = this.emptyClass.split(\" \");\r\n        classes.forEach(klass => this.element.classList.add(klass));\r\n      }\r\n      this.element.dispatchEvent(new CustomEvent(\"dom:empty\", {bubbles: true, cancelable: true}));\r\n    } else {\r\n      if (this.hasNotEmptyClass) {\r\n        let classes = this.notEmptyClass.split(\" \");\r\n        classes.forEach(klass => this.element.classList.add(klass));\r\n      }\r\n      if (this.hasEmptyClass) {\r\n        let classes = this.emptyClass.split(\" \");\r\n        classes.forEach(klass => this.element.classList.remove(klass));\r\n      }\r\n      this.element.dispatchEvent(new CustomEvent(\"dom:not-empty\", {bubbles: true, cancelable: true}));\r\n    }\r\n  }\r\n\r\n}\r\n","import {Controller} from \"stimulus\";\r\n\r\nexport class EnableInputsController extends Controller {\r\n\r\n  static targets = [\"enabler\", \"enable\"];\r\n\r\n  declare readonly hasEnablerTarget: boolean;\r\n  declare readonly enablerTarget: HTMLInputElement;\r\n  declare readonly enableTargets: Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\r\n\r\n  connect() {\r\n    this.toggle();\r\n  }\r\n\r\n  toggle() {\r\n    if (this.hasEnablerTarget && this.enablerTarget.checked) {\r\n      this.enableInputs();\r\n    } else {\r\n      this.disableInputs();\r\n    }\r\n  }\r\n\r\n  disableInputs() {\r\n    this.enableTargets.forEach((el, _) => {\r\n      el.disabled = true;\r\n    });\r\n  }\r\n\r\n  enableInputs() {\r\n    this.enableTargets.forEach((el, _) => {\r\n      el.disabled = false;\r\n    });\r\n  }\r\n}\r\n","import {Controller} from \"stimulus\";\r\n\r\nexport class FallbackImageController extends Controller {\r\n\r\n  static values = {placeholder: String};\r\n\r\n  declare readonly placeholderValue: string;\r\n  declare readonly hasPlaceholderValue: boolean;\r\n\r\n  connect() {\r\n    let element = this.element as HTMLImageElement;\r\n\r\n    element.onerror = () => {\r\n      if (this.hasPlaceholderValue) {\r\n        element.src = this.placeholderValue;\r\n      } else {\r\n        element.style.display = \"none\";\r\n      }\r\n    };\r\n  }\r\n\r\n}\r\n","import {useIntersection} from \"stimulus-use\";\nimport {IntersectionOptions} from \"stimulus-use/dist/use-intersection/use-intersection\";\nimport {AsyncBlockController} from \"./async_block_controller\";\n\nexport class LazyBlockController extends AsyncBlockController {\n\n  declare observe: () => void;\n  declare unobserve: () => void;\n  declare options: IntersectionOptions;\n  declare isVisible: boolean;\n  declare disappear : () => void;\n\n  connect() {\n    let element = this.element;\n    this.options = {element, threshold: 0.3};\n\n    if (\"IntersectionObserver\" in window) {\n      [this.observe, this.unobserve] = useIntersection(this, this.options);\n    } else {\n      // Client doesn't support intersection observer, fallback to pre-loading\n      this.loadContent();\n    }\n  }\n\n  appear(entry: IntersectionObserverEntry) {\n    let element = this.element as HTMLImageElement;\n    if (element.src !== \"\") {\n      return;\n    }\n    if (entry.target === element && entry.isIntersecting) {\n      this.loadContent();\n      if (this.unobserve) {\n        this.unobserve();\n      }\n    }\n  }\n\n}\n","import {Controller} from \"stimulus\";\r\n\r\nexport class LimitedSelectionCheckboxesController extends Controller {\r\n\r\n  static targets = [\"input\", \"error\"];\r\n  static values = {max: Number, message: String};\r\n\r\n  declare readonly hasErrorTarget: boolean;\r\n  declare readonly errorTarget: HTMLElement;\r\n  declare readonly inputTargets: HTMLInputElement[];\r\n  declare readonly maxValue: number;\r\n  declare readonly messageValue: string;\r\n\r\n  maxSelections = 0;\r\n\r\n  boundHandleInputs = this.handleInputs.bind(this);\r\n\r\n  connect() {\r\n    this.inputTargets.forEach((el) => el.addEventListener(\"change\", this.boundHandleInputs));\r\n  }\r\n\r\n  disconnect() {\r\n    this.inputTargets.forEach((el) => el.removeEventListener(\"change\", this.boundHandleInputs));\r\n  }\r\n\r\n  handleInputs(event: Event) {\r\n    let tickedInputs = this.inputTargets.reduce((previousValue, el) => el.checked ? previousValue + 1 : previousValue, 0);\r\n    let target = event.target as HTMLInputElement;\r\n    if (tickedInputs > this.maxSelections) {\r\n      event.preventDefault();\r\n      target.checked = false;\r\n      target.dispatchEvent(new CustomEvent(\"change\", {bubbles: true, cancelable: true}));\r\n      target.dispatchEvent(new CustomEvent(\"limited-selection:too-many\", {bubbles: true, cancelable: true, detail: {target}}));\r\n      if (this.hasErrorTarget) {\r\n        this.errorTarget.innerHTML = this.messageValue;\r\n      }\r\n    } else {\r\n      target.dispatchEvent(new CustomEvent(\"limited-selection:selection\", {bubbles: true, cancelable: true, detail: {target}}));\r\n      if (this.hasErrorTarget) {\r\n        this.errorTarget.innerHTML = \"\";\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {Controller} from \"stimulus\";\r\n\r\nexport class PasswordConfirmController extends Controller {\r\n\r\n  static targets = [\"password\"];\r\n  static classes = [\"error\"];\r\n\r\n  declare readonly passwordTargets: HTMLInputElement[];\r\n\r\n  declare readonly errorClass: string;\r\n  declare readonly hasErrorClass: boolean;\r\n\r\n  private boundCheckPasswordsMatch = this.checkPasswordsMatch.bind(this);\r\n\r\n  connect() {\r\n    this.passwordTargets.forEach((el) => el.addEventListener(\"change\", this.boundCheckPasswordsMatch));\r\n  }\r\n\r\n  disconnect() {\r\n    this.passwordTargets.forEach((el) => el.removeEventListener(\"change\", this.boundCheckPasswordsMatch));\r\n  }\r\n\r\n  private allPasswordsMatch() {\r\n    let values = new Set(this.passwordTargets.map(el => el.value));  // Create a unique set of the password values\r\n    return values.has(\"\") || values.size == 1; // If any of the passwords are still blank, or there is only one distinct password value (i.e. they all are the same)\r\n  }\r\n\r\n  private checkPasswordsMatch() {\r\n    if (this.allPasswordsMatch()) {\r\n      this.element.dispatchEvent(new CustomEvent(\"password-confirm:match\"));\r\n      if (this.hasErrorClass) {\r\n        this.passwordTargets.forEach(el => el.classList.remove(this.errorClass));\r\n      }\r\n    } else {\r\n      this.element.dispatchEvent(new CustomEvent(\"password-confirm:no-match\"));\r\n      if (this.hasErrorClass) {\r\n        this.passwordTargets.forEach(el => el.classList.add(this.errorClass));\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {Controller} from \"stimulus\";\r\n\r\nexport class PasswordPeekController extends Controller {\r\n\r\n  static targets = [\"password\"];\r\n\r\n  declare readonly passwordTarget: HTMLInputElement;\r\n\r\n  connect() {\r\n  }\r\n\r\n  peak(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    this.passwordTarget.type = \"text\";\r\n  }\r\n\r\n  hide(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    this.passwordTarget.type = \"password\";\r\n  }\r\n\r\n  toggle(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    if (this.passwordTarget.type === \"password\") {\r\n      this.peak();\r\n    } else {\r\n      this.hide();\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","import {Controller} from \"stimulus\";\nimport {useDebounce, useWindowResize} from \"stimulus-use\";\nimport {WindowResizePayload} from \"stimulus-use/dist/use-window-resize/use-window-resize\";\n\ninterface ResponsiveIframeMessage {\n  name: string,\n  height: number,\n}\n\nexport class ResponsiveIframeWrapperController extends Controller {\n\n  boundMessageReceived = this.messageReceived.bind(this);\n\n  connect() {\n    window.addEventListener(\"message\", this.boundMessageReceived);\n  }\n\n  disconnect() {\n    window.removeEventListener(\"message\", this.boundMessageReceived);\n  }\n\n  messageReceived(message: MessageEvent<ResponsiveIframeMessage>) {\n    let data = message.data;\n    if (data.hasOwnProperty(\"name\") && data.name === \"iframe-body\" && data.hasOwnProperty(\"height\")) {\n      this.resize(data.height);\n    }\n  }\n\n  resize(height: number) {\n    (this.element as HTMLIFrameElement).style.height = `${height}px`;\n  }\n\n}\n\nexport class ResponsiveIframeBodyController extends Controller {\n\n  static debounces = [\"postUpdate\"];\n\n  declare observe: () => void;\n  declare unobserve: () => void;\n\n  connect() {\n    // If this Window is inside a frame\n    if (window.self !== window.top) {\n      useWindowResize(this);\n      useDebounce(this, {});\n      this.postUpdate();\n    } else {\n      // Not an iframe\n    }\n  }\n\n  windowResize(payload: WindowResizePayload) {\n    this.postUpdate();\n  };\n\n  postUpdate() {\n    let payload: ResponsiveIframeMessage = {name: \"iframe-body\", height: this.getHeight()};\n    window.parent.postMessage(\n      payload,\n      \"*\",\n    );\n  }\n\n  getHeight(): number {\n    const body = document.body;\n    const html = document.documentElement;\n\n    // Get the largest height out of body and html's various height measurements\n    return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n  }\n\n}\n","import {Controller} from \"stimulus\";\r\n\r\nexport class SelfDestructController extends Controller {\r\n\r\n  static values = { seconds: Number }\r\n\r\n  declare readonly secondsValue: number;\r\n  timeout: null | ReturnType<typeof setTimeout> = null;\r\n\r\n  connect() {\r\n    this.timeout = setTimeout(() => this.element.remove(), this.secondsValue * 1000);\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.timeout) {\r\n      clearTimeout(this.timeout);\r\n    }\r\n  }\r\n\r\n}\r\n","// IDEA: A controller that copies the DOM element, inserts it elsewhere, then removes itself, stripping out the controller from the copied element.\r\nimport {Controller} from \"stimulus\";\r\n\r\nexport class TeleportController extends Controller {\r\n\r\n  static values = {target: String, insert: String};\r\n  declare readonly targetValue: string;\r\n  declare readonly insertValue: InsertPosition | \"replaceOuter\" | \"replaceInner\" | \"prepend\" | \"append\";\r\n\r\n  connect() {\r\n    let destination = document.querySelector(this.targetValue);\r\n\r\n    if (destination == null) {\r\n      this.element.dispatchEvent(new CustomEvent(\"teleport:error\", {bubbles: true, cancelable: true}));\r\n      return;\r\n    }\r\n\r\n    let copy = this.element.cloneNode(true) as HTMLElement;\r\n    copy.removeAttribute(`${this.identifier}-insert-adjacent-html-value`);\r\n    copy.setAttribute(\r\n      \"data-controller\",\r\n      copy.getAttribute(\"data-controller\")?.replace(new RegExp(`(^|\\s)${this.identifier}($|\\s)`), \"\") || \"\",\r\n    );\r\n    copy.removeAttribute(`data-controller${this.identifier}-insert-adjacent-html-value`);\r\n\r\n    switch (this.insertValue) {\r\n      case \"beforebegin\":\r\n      case \"beforeend\":\r\n      case \"afterend\":\r\n      case \"afterbegin\":\r\n        destination.insertAdjacentHTML(this.insertValue, copy.outerHTML);\r\n        break;\r\n      case \"replaceOuter\":\r\n        destination.outerHTML = copy.outerHTML;\r\n        break;\r\n      case \"replaceInner\":\r\n        destination.innerHTML = copy.outerHTML;\r\n        break;\r\n      case \"prepend\":\r\n        destination.insertAdjacentHTML(\"afterbegin\", copy.outerHTML);\r\n        break;\r\n      case \"append\":\r\n        destination.insertAdjacentHTML(\"beforeend\", copy.outerHTML);\r\n        break;\r\n    }\r\n  }\r\n\r\n}\r\n","import {Controller} from \"stimulus\";\nimport {useClickOutside, useHover} from \"stimulus-use\";\n\nexport type ToggleClassMode = \"on\" | \"off\" | \"toggle\"\n\nexport class ToggleClassController extends Controller {\n\n  static targets = [\"toggle\"];\n  static values = {\n    class: String,\n    mouseEnter: String,\n    mouseLeave: String,\n    clickAway: Boolean,\n    initial: String,\n  };\n\n  declare readonly toggleTargets: HTMLElement[];\n\n  declare readonly classValue: string;\n  declare readonly hasClassValue: boolean;\n\n  declare readonly mouseEnterValue: ToggleClassMode;\n  declare readonly hasMouseEnterValue: boolean;\n\n  declare readonly mouseLeaveValue: ToggleClassMode;\n  declare readonly hasMouseLeaveValue: boolean;\n\n  declare readonly clickAwayValue: boolean;\n  declare readonly hasClickAwayValue: boolean;\n\n  declare readonly initialValue: \"on\" | \"off\";\n\n  connect() {\n    if (this.initialValue === \"on\") {\n      this.toggleTargets.forEach((target) => this.elementOn(target));\n    } else {\n      this.toggleTargets.forEach((target) => this.elementOff(target));\n    }\n\n    if (this.hasMouseEnterValue || this.hasMouseLeaveValue) {\n      useHover(this);\n    }\n\n    if (this.hasClickAwayValue && this.clickAwayValue) {\n      useClickOutside(this);\n    }\n\n    if (!this.hasClassValue) {\n      throw new Error(\"data-toggle-class-class-value must not be empty\");\n    }\n  }\n\n  clickOutside() {\n    this.toggleTargets.forEach((target) => {\n      if (this.elementWasToggled(target)) {\n        this.elementToggleStatus(target);\n        this.elementToggle(target);\n      }\n    });\n  }\n\n  mouseEnter() {\n    if (this.hasMouseEnterValue) {\n      switch (this.mouseEnterValue) {\n        case \"on\":\n          this.on();\n          break;\n        case \"off\":\n          this.off();\n          break;\n        case \"toggle\":\n          this.toggle();\n          break;\n      }\n    }\n    return {};\n  }\n\n  mouseLeave() {\n    if (this.hasMouseLeaveValue) {\n      switch (this.mouseLeaveValue) {\n        case \"on\":\n          this.on();\n          break;\n        case \"off\":\n          this.off();\n          break;\n        case \"toggle\":\n          this.toggle();\n          break;\n      }\n    }\n    return {};\n  }\n\n  on(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementOn(target);\n    });\n  }\n\n  off(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementOff(target);\n    });\n  }\n\n  toggle(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementToggle(target);\n    });\n  }\n\n  private elementWasToggled(el: HTMLElement): boolean {\n    return el.dataset.toggled == \"true\";\n  }\n\n  private elementToggleStatus(el: HTMLElement) {\n    if (this.elementWasToggled(el)) {\n      delete el.dataset.toggled;\n    } else {\n      el.dataset.toggled = \"true\";\n    }\n  }\n\n  private elementToggle(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass));\n  }\n\n  private elementOn(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass, true));\n  }\n\n  private elementOff(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass, false));\n  }\n\n}\n","import {Controller} from \"stimulus\";\r\n\r\nexport class WordCountController extends Controller {\r\n\r\n  static targets = [\"input\", \"output\"];\r\n  static values = {min: Number, max: Number};\r\n  static classes = [\"error\"];\r\n\r\n  declare readonly inputTarget: HTMLInputElement | HTMLTextAreaElement;\r\n  declare readonly outputTarget: HTMLElement;\r\n  declare minValue: number;\r\n  declare hasMinValue: boolean;\r\n  declare maxValue: number;\r\n  declare hasMaxValue: boolean;\r\n  declare errorClass: string;\r\n  declare hasErrorClass: boolean;\r\n\r\n  boundHandler = this.updateWordCount.bind(this);\r\n\r\n  connect() {\r\n    this.updateWordCount();\r\n    this.inputTarget.addEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  disconnect() {\r\n    this.inputTarget.removeEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  updateWordCount() {\r\n    let wordCount = 0;\r\n    let textAreaValue = this.inputTarget.value;\r\n    let matches = textAreaValue.match(/\\S+/g);\r\n    wordCount = (matches && matches.length) || 0;\r\n    this.outputTarget.innerText = wordCount.toString();\r\n    if (this.hasErrorClass) {\r\n      if (this.isValidCount(wordCount)) {\r\n        this.outputTarget.classList.remove(this.errorClass);\r\n      } else {\r\n        this.outputTarget.classList.add(this.errorClass);\r\n      }\r\n    }\r\n  }\r\n\r\n  isValidCount(count: number) {\r\n    let min = 0;\r\n    let max = 99999;\r\n\r\n    if (this.hasMinValue) {\r\n      min = this.minValue;\r\n    }\r\n\r\n    if (this.hasMaxValue) {\r\n      max = this.maxValue;\r\n    }\r\n\r\n    return count >= min && count <= max;\r\n  }\r\n\r\n}\r\n"],"names":["AsyncBlockController","connect","this","loadContent","el","hasReplaceTarget","replaceTarget","element","fetch","endpointValue","then","response","text","html","newEl","document","createElement","innerHTML","replaceWith","event","CustomEvent","detail","dispatchEvent","err","Controller","endpoint","String","AutoSubmitFormController","_this","handler","bind","querySelectorAll","forEach","addEventListener","_this2","boundHandler","disconnect","removeEventListener","_this3","e","bubbles","cancelable","AutosizeController","target","style","resize","boxSizing","useWindowResize","setTimeout","windowResize","autosize","offset","offsetHeight","clientHeight","height","scrollHeight","CharCountController","updateCharCount","inputTarget","charCount","value","length","outputTarget","innerText","toString","hasErrorClass","isValidCount","classList","remove","errorClass","add","count","min","max","hasMinValue","minValue","hasMaxValue","maxValue","Number","ClipboardController","supported","queryCommandSupported","hasRemoveUnusedValue","removeUnusedValue","hasFallbackTarget","fallbackTarget","hasCopyTarget","copyTarget","select","preventDefault","sourceTarget","copy","execCommand","removeUnused","Boolean","ConfirmNavigationController","confirmMessage","messageValue","window","onbeforeunload","handlePopstate","message","DebugController","console","log","testTargets","DetectDirtyController","initialValue","isInputElement","isCheckable","checked","restore","setAttribute","removeAttribute","type","tagName","DisableInputsController","toggle","hasDisablerTarget","disablerTarget","disableInputs","enableInputs","disableTargets","_","disabled","DismissableController","dismiss","EmptyDomController","useMutation","childList","mutate","entries","hasScopeSelectorValue","scopeSelectorValue","children","hasNotEmptyClass","notEmptyClass","split","klass","hasEmptyClass","emptyClass","scopeSelector","EnableInputsController","hasEnablerTarget","enablerTarget","enableTargets","FallbackImageController","onerror","hasPlaceholderValue","src","placeholderValue","display","placeholder","LazyBlockController","options","threshold","useIntersection","observe","unobserve","appear","entry","isIntersecting","LimitedSelectionCheckboxesController","handleInputs","inputTargets","boundHandleInputs","tickedInputs","reduce","previousValue","maxSelections","hasErrorTarget","errorTarget","PasswordConfirmController","checkPasswordsMatch","passwordTargets","boundCheckPasswordsMatch","allPasswordsMatch","values","Set","map","has","size","_this4","PasswordPeekController","peak","passwordTarget","hide","ResponsiveIframeWrapperController","messageReceived","boundMessageReceived","data","hasOwnProperty","name","ResponsiveIframeBodyController","self","top","useDebounce","postUpdate","payload","getHeight","parent","postMessage","body","documentElement","Math","SelfDestructController","timeout","secondsValue","clearTimeout","seconds","TeleportController","destination","querySelector","targetValue","cloneNode","identifier","getAttribute","replace","RegExp","insertValue","insertAdjacentHTML","outerHTML","insert","ToggleClassController","toggleTargets","elementOn","elementOff","hasMouseEnterValue","hasMouseLeaveValue","useHover","hasClickAwayValue","clickAwayValue","useClickOutside","hasClassValue","Error","clickOutside","elementWasToggled","elementToggleStatus","elementToggle","mouseEnter","mouseEnterValue","on","off","mouseLeave","mouseLeaveValue","_this5","dataset","toggled","classValue","class","clickAway","initial","WordCountController","updateWordCount","wordCount","matches","match"],"mappings":"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"}