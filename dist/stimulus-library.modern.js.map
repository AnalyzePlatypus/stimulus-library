{"version":3,"file":"stimulus-library.modern.js","sources":["../src/base_controller.ts","../src/async_block_controller.ts","../src/auto_submit_form_controller.ts","../node_modules/stimulus-use/dist/support/index.js","../node_modules/stimulus-use/dist/use-intersection/use-intersection.js","../node_modules/stimulus-use/dist/use-click-outside/use-click-outside.js","../node_modules/stimulus-use/dist/stimulus_use.js","../node_modules/stimulus-use/dist/use-hover/use-hover.js","../node_modules/stimulus-use/dist/use-mutation/use-mutation.js","../node_modules/stimulus-use/dist/use-window-resize/use-window-resize.js","../node_modules/stimulus-use/dist/use-debounce/use-debounce.js","../src/autosize_controller.ts","../src/char_count_controller.ts","../src/checkbox_select_all_controller.ts","../src/clipboard_controller.ts","../src/confirm_navigation_controller.ts","../src/debug_controller.ts","../src/detect_dirty_controller.ts","../src/disable_inputs_controller.ts","../src/dismissable_controller.ts","../src/empty_dom_controller.ts","../src/enable_inputs_controller.ts","../src/fallback_image_controller.ts","../src/lazy_block_controller.ts","../src/limited_selection_checkboxes_controller.ts","../src/nested_form_controller.ts","../src/password_confirm_controller.ts","../src/password_peek_controller.ts","../src/responsive_iframe_controller.ts","../src/utilities/ephemeral_controller.ts","../src/utilities/scroll.ts","../src/scroll_into_focus_controller.ts","../src/scroll_to_bottom_controller.ts","../src/scroll_to_controller.ts","../src/scroll_to_top_controller.ts","../src/self_destruct_controller.ts","../src/teleport_controller.ts","../src/toggle_class_controller.ts","../src/turbo_frame_rc_controller.ts","../src/utilities/turbo.ts","../src/utilities/elements.ts","../src/word_count_controller.ts"],"sourcesContent":["import {Context, Controller} from \"stimulus\";\r\n\r\nexport class BaseController extends Controller {\r\n\r\n  constructor(context: Context) {\r\n    super(context);\r\n    return new Proxy(this, {\r\n      get: (obj, prop) => {\r\n        let returnVal = Reflect.get(obj, prop);\r\n        let self = this;\r\n        if (logProperty(prop.toString())) {\r\n          if (typeof returnVal == \"function\") {\r\n            return new Proxy(returnVal, {\r\n              apply(target: any, thisArg: any, argArray?: any): any {\r\n                self.log(prop.toString(), {\r\n                  args: argArray,\r\n                });\r\n                return Reflect.apply(target, thisArg, argArray);\r\n              },\r\n            });\r\n          } else {\r\n            this.log(prop.toString());\r\n          }\r\n        }\r\n        return returnVal;\r\n      },\r\n    });\r\n  }\r\n\r\n  log(functionName: string, args: {} = {}): void {\r\n    // @ts-ignore\r\n    if (!this.application.debug) {\r\n      return;\r\n    }\r\n    let logger = console;\r\n    logger.groupCollapsed(`%c${this.identifier} %c#${functionName}`, \"color: #3B82F6\", \"color: unset\");\r\n    logger.log({\r\n      element: this.element,\r\n      ...args,\r\n    });\r\n    logger.groupEnd();\r\n  }\r\n\r\n}\r\n\r\nfunction logProperty(prop: string): boolean {\r\n  switch (prop) {\r\n    case \"application\":\r\n    case \"element\":\r\n    case \"constructor\":\r\n    case \"initialize\":\r\n    case \"log\":\r\n    case \"data\":\r\n    case \"valueDescriptorMap\":\r\n    case \"identifier\":\r\n      return false;\r\n  }\r\n\r\n  if (/^.*?Target(s)?$/.test(prop)) {\r\n    return false;\r\n  }\r\n  if (/^.*?Value$/.test(prop)) {\r\n    return false;\r\n  }\r\n  if (/^.*?ValueChanged$/.test(prop)) {\r\n    return false;\r\n  }\r\n  if (/^.*?Class$/.test(prop)) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n","import {BaseController} from \"./base_controller\";\n\nexport class AsyncBlockController extends BaseController {\n  static targets = [\"replace\"];\n  static values = {endpoint: String};\n\n  declare readonly replaceTarget: HTMLElement;\n  declare readonly hasReplaceTarget: boolean;\n  declare readonly endpointValue: string;\n\n\n  // This is a simple controller to load a block of content when the page loads.\n  // It should be used to give a quick initial response before calling out to an\n  // an AJAX endpoint to do some expensive work.\n  connect() {\n    this.loadContent();\n  }\n\n  loadContent() {\n    let el = (this.hasReplaceTarget ? this.replaceTarget : this.element) as HTMLElement;\n    fetch(this.endpointValue)\n    .then((response) => response.text())\n    .then((html) => {\n      let newEl = document.createElement(\"div\");\n      newEl.innerHTML = html;\n      el.replaceWith(newEl);\n\n      // Trigger event to show block has loaded\n      let event = new CustomEvent(\"ajax:success\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    })\n    .catch(err => {\n      el.replaceWith(\"Sorry, this content failed to load\");\n\n      let event = new CustomEvent(\"ajax:error\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    })\n    .finally(() => {\n      let event = new CustomEvent(\"ajax:complete\", {\"detail\": \"\"});\n      el.dispatchEvent(event);\n    });\n  }\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class AutoSubmitFormController extends BaseController {\n\n  private boundHandler = this.handler.bind(this);\n\n  connect() {\n    (this.element as HTMLElement).querySelectorAll(\"input, select, textarea\").forEach(el => el.addEventListener(\"change\", this.boundHandler));\n  }\n\n  disconnect() {\n    (this.element as HTMLElement).querySelectorAll(\"input, select, textarea\").forEach(el => el.removeEventListener(\"change\", this.boundHandler));\n  }\n\n  private handler(e: Event) {\n    // this.element.submit()\n    // Moved to this to support remote forms and CSRF properly\n    this.element.dispatchEvent(\n      new CustomEvent(\"submit\", {\n        bubbles: true,\n        cancelable: true,\n      }),\n    );\n  }\n}\n","export const method = (controller, methodName) => {\n    const method = controller[methodName];\n    if (typeof method == 'function') {\n        return method;\n    }\n    else {\n        return (...args) => { };\n    }\n};\nexport const composeEventName = (name, controller, eventPrefix) => {\n    let composedName = name;\n    if (eventPrefix === true) {\n        composedName = `${controller.identifier}:${name}`;\n    }\n    else if (typeof eventPrefix === 'string') {\n        composedName = `${eventPrefix}:${name}`;\n    }\n    return composedName;\n};\nexport const extendedEvent = (type, event, detail) => {\n    const { bubbles, cancelable, composed } = event || { bubbles: true, cancelable: true, composed: true };\n    if (event) {\n        Object.assign(detail, { originalEvent: event });\n    }\n    const customEvent = new CustomEvent(type, {\n        bubbles,\n        cancelable,\n        composed,\n        detail,\n    });\n    return customEvent;\n};\nexport function isElementInViewport(el) {\n    const rect = el.getBoundingClientRect();\n    const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n    const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n    const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n    const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) >= 0);\n    return (vertInView && horInView);\n}\n//# sourceMappingURL=index.js.map","import { method, extendedEvent, composeEventName } from '../support/index';\nconst defaultOptions = {\n    dispatchEvent: true,\n    eventPrefix: true,\n};\nexport const useIntersection = (controller, options = {}) => {\n    const { dispatchEvent, eventPrefix } = Object.assign({}, defaultOptions, options);\n    const targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n    const callback = (entries) => {\n        const [entry] = entries;\n        if (entry.isIntersecting) {\n            dispatchAppear(entry);\n        }\n        else if (controller.isVisible) {\n            dispatchDisappear(entry);\n        }\n    };\n    const dispatchAppear = (entry) => {\n        controller.isVisible = true;\n        method(controller, 'appear').call(controller, entry);\n        // emit a custom \"appear\" event\n        if (dispatchEvent) {\n            const eventName = composeEventName('appear', controller, eventPrefix);\n            const appearEvent = extendedEvent(eventName, null, { controller, entry });\n            targetElement.dispatchEvent(appearEvent);\n        }\n    };\n    const dispatchDisappear = (entry) => {\n        controller.isVisible = false;\n        method(controller, 'disappear').call(controller, entry);\n        // emit a custom \"disappear\" event\n        if (dispatchEvent) {\n            const eventName = composeEventName('disappear', controller, eventPrefix);\n            const disappearEvent = extendedEvent(eventName, null, { controller, entry });\n            targetElement.dispatchEvent(disappearEvent);\n        }\n    };\n    // keep a copy of the current disconnect() function of the controller\n    // to support composing several behaviors\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    const observer = new IntersectionObserver(callback, options);\n    const observe = () => {\n        observer.observe(targetElement);\n    };\n    const unobserve = () => {\n        observer.unobserve(targetElement);\n    };\n    Object.assign(controller, {\n        isVisible: false,\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-intersection.js.map","import { composeEventName, extendedEvent, isElementInViewport } from '../support/index';\nconst defaultOptions = {\n    events: ['click', 'touchend'],\n    onlyVisible: true,\n    dispatchEvent: true,\n    eventPrefix: true,\n};\nexport const useClickOutside = (controller, options = {}) => {\n    const { onlyVisible, dispatchEvent, events, eventPrefix } = Object.assign({}, defaultOptions, options);\n    const onEvent = (event) => {\n        const targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        if (targetElement.contains(event.target) || (!isElementInViewport(targetElement) && onlyVisible)) {\n            return;\n        }\n        // call the clickOutside method of the Stimulus controller\n        if (controller.clickOutside) {\n            controller.clickOutside(event);\n        }\n        // emit a custom event\n        if (dispatchEvent) {\n            const eventName = composeEventName('click:outside', controller, eventPrefix);\n            const clickOutsideEvent = extendedEvent(eventName, event, { controller });\n            targetElement.dispatchEvent(clickOutsideEvent);\n        }\n    };\n    const observe = () => {\n        events === null || events === void 0 ? void 0 : events.forEach(event => {\n            window.addEventListener(event, onEvent, false);\n        });\n    };\n    const unobserve = () => {\n        events === null || events === void 0 ? void 0 : events.forEach(event => {\n            window.removeEventListener(event, onEvent, false);\n        });\n    };\n    // keep a copy of the current disconnect() function of the controller\n    // to support composing several behaviors\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    Object.assign(controller, {\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-click-outside.js.map","const defaultOptions = {\n    debug: false,\n    logger: console\n};\nexport class StimulusUse {\n    constructor(controller, options = {}) {\n        var _a, _b, _c;\n        this.log = (functionName, args) => {\n            if (!this.debug)\n                return;\n            this.logger.groupCollapsed(`%c${this.controller.identifier} %c#${functionName}`, 'color: #3B82F6', 'color: unset');\n            this.logger.log(Object.assign({ controllerId: this.controllerId }, args));\n            this.logger.groupEnd();\n        };\n        this.debug = (_b = (_a = options === null || options === void 0 ? void 0 : options.debug) !== null && _a !== void 0 ? _a : controller.application.stimulusUseDebug) !== null && _b !== void 0 ? _b : defaultOptions.debug;\n        this.logger = (_c = options === null || options === void 0 ? void 0 : options.logger) !== null && _c !== void 0 ? _c : defaultOptions.logger;\n        this.controller = controller;\n        this.controllerId = controller.element.id || controller.element.dataset.id;\n        // make copies of lifecycle functions\n        this.controllerInitialize = controller.initialize.bind(controller);\n        this.controllerConnect = controller.connect.bind(controller);\n        this.controllerDisconnect = controller.disconnect.bind(controller);\n    }\n}\n//# sourceMappingURL=stimulus_use.js.map","import { StimulusUse } from '../stimulus_use';\nimport { method } from '../support/index';\nexport class UseHover extends StimulusUse {\n    constructor(controller, options = {}) {\n        super(controller, options);\n        this.observe = () => {\n            this.targetElement.addEventListener('mouseenter', this.onEnter);\n            this.targetElement.addEventListener('mouseleave', this.onLeave);\n        };\n        this.unobserve = () => {\n            this.targetElement.removeEventListener('mouseenter', this.onEnter);\n            this.targetElement.removeEventListener('mouseleave', this.onLeave);\n        };\n        this.onEnter = () => {\n            method(this.controller, 'mouseEnter').call(this.controller);\n            this.log('mouseEnter', { hover: true });\n        };\n        this.onLeave = () => {\n            method(this.controller, 'mouseLeave').call(this.controller);\n            this.log('mouseLeave', { hover: false });\n        };\n        this.targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        this.controller = controller;\n        this.enhanceController();\n        this.observe();\n    }\n    enhanceController() {\n        const controllerDisconnect = this.controller.disconnect.bind(this.controller);\n        const disconnect = () => {\n            this.unobserve();\n            controllerDisconnect();\n        };\n        Object.assign(this.controller, { disconnect });\n    }\n}\nexport const useHover = (controller, options = {}) => {\n    const observer = new UseHover(controller, options);\n    return [observer.observe, observer.unobserve];\n};\n//# sourceMappingURL=use-hover.js.map","import { StimulusUse } from '../stimulus_use';\nimport { method } from '../support/index';\nexport class UseMutation extends StimulusUse {\n    constructor(controller, options = {}) {\n        super(controller, options);\n        this.observe = () => {\n            try {\n                this.observer.observe(this.targetElement, this.options);\n            }\n            catch (error) {\n                this.controller.application.handleError(error, \"At a minimum, one of childList, attributes, and/or characterData must be true\", {});\n            }\n        };\n        this.unobserve = () => {\n            this.observer.disconnect();\n        };\n        this.mutation = (entries) => {\n            method(this.controller, 'mutate').call(this.controller, entries);\n            this.log('mutate', { entries });\n        };\n        this.targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;\n        this.controller = controller;\n        this.options = options;\n        this.observer = new MutationObserver(this.mutation);\n        this.enhanceController();\n        this.observe();\n    }\n    enhanceController() {\n        const controllerDisconnect = this.controller.disconnect.bind(this.controller);\n        const disconnect = () => {\n            this.unobserve();\n            controllerDisconnect();\n        };\n        Object.assign(this.controller, { disconnect });\n    }\n}\nexport const useMutation = (controller, options = {}) => {\n    const observer = new UseMutation(controller, options);\n    return [observer.observe, observer.unobserve];\n};\n//# sourceMappingURL=use-mutation.js.map","import { method } from '../support/index';\nexport const useWindowResize = (controller) => {\n    const callback = (event) => {\n        const { innerWidth, innerHeight } = window;\n        const payload = {\n            height: innerHeight || Infinity,\n            width: innerWidth || Infinity,\n            event\n        };\n        method(controller, 'windowResize').call(controller, payload);\n    };\n    const controllerDisconnect = controller.disconnect.bind(controller);\n    const observe = () => {\n        window.addEventListener('resize', callback);\n        callback();\n    };\n    const unobserve = () => {\n        window.removeEventListener('resize', callback);\n    };\n    Object.assign(controller, {\n        disconnect() {\n            unobserve();\n            controllerDisconnect();\n        },\n    });\n    observe();\n    return [observe, unobserve];\n};\n//# sourceMappingURL=use-window-resize.js.map","import { Controller } from 'stimulus';\nclass DebounceController extends Controller {\n}\nDebounceController.debounces = [];\nconst defaultWait = 200;\nconst debounce = (fn, wait = defaultWait) => {\n    let timeoutId = null;\n    return function () {\n        const args = arguments;\n        const context = this;\n        const callback = () => fn.apply(context, args);\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(callback, wait);\n    };\n};\nexport const useDebounce = (controller, options) => {\n    var _a;\n    const constructor = controller.constructor;\n    (_a = constructor.debounces) === null || _a === void 0 ? void 0 : _a.forEach((func) => {\n        if (typeof func === \"string\") {\n            controller[func] = debounce(controller[func], options === null || options === void 0 ? void 0 : options.wait);\n        }\n        if (typeof func === \"object\") {\n            const { name, wait } = func;\n            if (!name)\n                return;\n            controller[name] = debounce(controller[name], wait || (options === null || options === void 0 ? void 0 : options.wait));\n        }\n    });\n};\n//# sourceMappingURL=use-debounce.js.map","import {useWindowResize} from \"stimulus-use\";\nimport {BaseController} from \"./base_controller\";\n\nexport class AutosizeController extends BaseController {\n\n  private boundHandler = this.handler.bind(this);\n\n  connect() {\n    let target = this.element as HTMLTextAreaElement;\n    target.style.resize = \"none\";\n    target.style.boxSizing = \"border-box\";\n    target.addEventListener(\"input\", this.boundHandler);\n    target.addEventListener(\"focus\", this.boundHandler);\n    useWindowResize(this);\n    requestAnimationFrame(this.boundHandler);\n  }\n\n  windowResize() {\n    this.handler();\n  }\n\n  private handler() {\n    this.autosize(this.element as HTMLTextAreaElement);\n  };\n\n  private autosize(element: HTMLTextAreaElement) {\n    let offset = element.offsetHeight - element.clientHeight;\n    element.style.height = \"auto\";\n    element.style.height = element.scrollHeight + offset + \"px\";\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class CharCountController extends BaseController {\r\n\r\n  static targets = [\"input\", \"output\"];\r\n  static values = {min: Number, max: Number};\r\n  static classes = [\"error\"];\r\n\r\n  declare readonly inputTarget: HTMLInputElement | HTMLTextAreaElement;\r\n  declare readonly outputTarget: HTMLElement;\r\n  declare minValue: number;\r\n  declare hasMinValue: boolean;\r\n  declare maxValue: number;\r\n  declare hasMaxValue: boolean;\r\n  declare errorClass: string;\r\n  declare hasErrorClass: boolean;\r\n\r\n  boundHandler = this.updateCharCount.bind(this);\r\n\r\n  connect() {\r\n    this.updateCharCount();\r\n    this.inputTarget.addEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  disconnect() {\r\n    this.inputTarget.removeEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  updateCharCount() {\r\n    let charCount = this.inputTarget.value.length;\r\n    this.outputTarget.innerText = charCount.toString();\r\n    if (this.hasErrorClass) {\r\n      if (this.isValidCount(charCount)) {\r\n        this.outputTarget.classList.remove(this.errorClass);\r\n      } else {\r\n        this.outputTarget.classList.add(this.errorClass);\r\n      }\r\n    }\r\n  }\r\n\r\n  isValidCount(count: number) {\r\n    let min = 0;\r\n    let max = 99999;\r\n\r\n    if (this.hasMinValue) {\r\n      min = this.minValue;\r\n    }\r\n\r\n    if (this.hasMaxValue) {\r\n      max = this.maxValue;\r\n    }\r\n\r\n    return count >= min && count <= max;\r\n  }\r\n\r\n}\r\n","import {BaseController} from './base_controller';\r\n\r\nexport class CheckboxSelectAllController extends BaseController {\r\n  static targets = ['selectAll', 'checkbox'];\r\n\r\n  declare readonly hasCheckboxAllTarget: boolean;\r\n  declare readonly selectAllTarget: HTMLInputElement;\r\n  declare readonly checkboxTargets: HTMLInputElement[];\r\n\r\n  private get checked() {\r\n    return this.checkboxTargets.filter(checkbox => checkbox.checked);\r\n  }\r\n\r\n  private get unchecked() {\r\n    return this.checkboxTargets.filter(checkbox => !checkbox.checked);\r\n  }\r\n\r\n  initialize() {\r\n    this.toggle = this.toggle.bind(this);\r\n    this.refresh = this.refresh.bind(this);\r\n  }\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      if (!this.hasCheckboxAllTarget) {\r\n        return;\r\n      }\r\n\r\n      this.selectAllTarget.addEventListener('change', this.toggle);\r\n      this.checkboxTargets.forEach(checkbox => checkbox.addEventListener('change', this.refresh));\r\n      this.refresh();\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    if (!this.hasCheckboxAllTarget) {\r\n      return;\r\n    }\r\n\r\n    this.selectAllTarget.removeEventListener('change', this.toggle);\r\n    this.checkboxTargets.forEach((checkbox) => checkbox.removeEventListener('change', this.refresh));\r\n  }\r\n\r\n  private toggle(event: Event) {\r\n    event.preventDefault();\r\n    let target = event.target as HTMLInputElement;\r\n    this.checkboxTargets.forEach((checkbox) => checkbox.checked = target.checked);\r\n  }\r\n\r\n  private refresh() {\r\n    const checkboxesCount = this.checkboxTargets.length;\r\n    const checkboxesCheckedCount = this.checked.length;\r\n\r\n    this.selectAllTarget.checked = checkboxesCheckedCount > 0;\r\n    this.selectAllTarget.indeterminate = checkboxesCheckedCount > 0 && checkboxesCheckedCount < checkboxesCount;\r\n  }\r\n}","import {BaseController} from \"./base_controller\";\r\n\r\nexport class ClipboardController extends BaseController {\r\n\r\n  static targets = [\"button\", \"copy\", \"fallback\"];\r\n  static values = {removeUnused: Boolean};\r\n\r\n  declare readonly sourceTarget: HTMLElement;\r\n  declare readonly copyTarget: HTMLElement;\r\n  declare readonly hasCopyTarget: boolean;\r\n  declare readonly fallbackTarget: HTMLElement;\r\n  declare readonly hasFallbackTarget: boolean;\r\n\r\n  declare readonly hasRemoveUnusedValue: boolean;\r\n  declare readonly removeUnusedValue: boolean;\r\n\r\n  supported = false;\r\n\r\n  connect() {\r\n    this.supported = document.queryCommandSupported(\"copy\");\r\n\r\n    if (this.hasRemoveUnusedValue && this.removeUnusedValue) {\r\n      if (this.supported && this.hasFallbackTarget) {\r\n        this.fallbackTarget.remove();\r\n      } else if (this.hasCopyTarget) {\r\n        this.copyTarget.remove();\r\n      }\r\n    }\r\n  }\r\n\r\n  select(event: MouseEvent) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    (this.sourceTarget as HTMLInputElement | HTMLTextAreaElement).select();\r\n  }\r\n\r\n  copy(event: ClipboardEvent) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    (this.sourceTarget as HTMLInputElement | HTMLTextAreaElement).select();\r\n    if (this.supported) {\r\n      document.execCommand(\"copy\");\r\n    }\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\n\nexport class ConfirmNavigationController extends BaseController {\n\n  static values = {message: String};\n\n  declare readonly messageValue: string;\n\n  connect() {\n    let confirmMessage = this.messageValue;\n    window.onbeforeunload = () => (confirmMessage == null ? true : confirmMessage);\n    window.addEventListener(\"popstate\", this.handlePopstate);\n    window.addEventListener(\"submit\", () => {\n      window.removeEventListener(\"popstate\", this.handlePopstate);\n      window.onbeforeunload = null;\n    });\n    // TODO: Turbo navigation events\n  }\n\n  handlePopstate(event: PopStateEvent) {\n    return false;\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\n\nexport class DebugController extends BaseController {\n\n  static targets = [\"test\"];\n  declare testTargets: HTMLElement[];\n\n  connect() {\n    console.log(\"Debug Controller\", this, this.testTargets);\n  }\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class DetectDirtyController extends BaseController {\r\n\r\n  initialValue: string | boolean | null = null;\r\n\r\n  boundHandler = this.handler.bind(this);\r\n\r\n  connect() {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    if (this.isInputElement(element) && this.isCheckable(element)) {\r\n      this.initialValue = element.checked;\r\n    } else {\r\n      this.initialValue = element.value;\r\n    }\r\n    element.addEventListener(\"input\", this.boundHandler);\r\n    element.addEventListener(\"change\", this.boundHandler);\r\n  }\r\n\r\n  disconnect() {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    element.removeEventListener(\"input\", this.boundHandler);\r\n    element.removeEventListener(\"change\", this.boundHandler);\r\n  }\r\n\r\n  restore() {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n    if (this.isInputElement(element) && this.isCheckable(element)) {\r\n      element.checked = this.initialValue as boolean;\r\n    } else {\r\n      element.value = this.initialValue as string;\r\n    }\r\n  }\r\n\r\n  private handler(event?: Event) {\r\n    let element = this.element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\r\n\r\n    if (this.initialValue !== element.value) {\r\n      element.setAttribute(\"data-dirty\", \"true\");\r\n    } else {\r\n      element.removeAttribute(\"data-dirty\");\r\n    }\r\n  }\r\n\r\n  private isCheckable(element: HTMLInputElement): boolean {\r\n    return (element.type === \"radio\" || element.type === \"checkbox\");\r\n  }\r\n\r\n  private isInputElement(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement): element is HTMLInputElement {\r\n    return element.tagName === \"INPUT\";\r\n  }\r\n\r\n}\r\n\r\nexport function isDirty(element: HTMLElement) {\r\n  return element.hasAttribute(\"data-dirty\");\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class DisableInputsController extends BaseController {\r\n\r\n  static targets = [\"disabler\", \"disable\"];\r\n\r\n  static values = {\r\n    clear: Boolean,\r\n  };\r\n\r\n  declare readonly hasDisablerTarget: boolean;\r\n  declare readonly disablerTarget: HTMLInputElement;\r\n  declare readonly disableTargets: Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\r\n  declare readonly clearValue: boolean;\r\n  declare readonly hasClearValue: boolean;\r\n\r\n  connect() {\r\n    this.toggle();\r\n  }\r\n\r\n  toggle() {\r\n    if (this.hasDisablerTarget && this.disablerTarget.checked) {\r\n      this.disableInputs();\r\n    } else {\r\n      this.enableInputs();\r\n    }\r\n  }\r\n\r\n  disableInputs() {\r\n    let shouldClear = this.hasClearValue && this.clearValue;\r\n    this.disableTargets.forEach((el, _) => {\r\n      if (shouldClear) {\r\n        el.value = \"\";\r\n      }\r\n      el.disabled = true;\r\n    });\r\n  }\r\n\r\n  enableInputs() {\r\n    this.disableTargets.forEach((el, _) => {\r\n      el.disabled = false;\r\n    });\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class DismissableController extends BaseController {\r\n\r\n\r\n  dismiss() {\r\n    this.element.remove();\r\n  }\r\n\r\n}\r\n","import {useMutation} from \"stimulus-use\";\r\nimport {BaseController} from \"./base_controller\";\r\n\r\nexport class EmptyDomController extends BaseController {\r\n\r\n  static classes = [\"empty\", \"notEmpty\"];\r\n  static values = {scopeSelector: String};\r\n\r\n  declare hasEmptyClass: boolean;\r\n  declare emptyClass: string;\r\n  declare hasNotEmptyClass: boolean;\r\n  declare notEmptyClass: string;\r\n\r\n  declare hasScopeSelectorValue: boolean;\r\n  declare scopeSelectorValue: string;\r\n\r\n  connect() {\r\n    useMutation(this, {element: this.element, childList: true});\r\n    this.checkEmpty();\r\n  }\r\n\r\n  mutate(entries: MutationRecord[]) {\r\n    this.checkEmpty();\r\n  }\r\n\r\n  checkEmpty() {\r\n    let children;\r\n    if (this.hasScopeSelectorValue) {\r\n      children = this.element.querySelectorAll(this.scopeSelectorValue);\r\n    } else {\r\n      children = this.element.children;\r\n    }\r\n\r\n    if (children.length === 0) {\r\n      if (this.hasNotEmptyClass) {\r\n        let classes = this.notEmptyClass.split(\" \");\r\n        classes.forEach(klass => this.element.classList.remove(klass));\r\n      }\r\n      if (this.hasEmptyClass) {\r\n        let classes = this.emptyClass.split(\" \");\r\n        classes.forEach(klass => this.element.classList.add(klass));\r\n      }\r\n      this.element.dispatchEvent(\r\n        new CustomEvent(\"dom:empty\", {\r\n          bubbles: true,\r\n          cancelable: true,\r\n        }),\r\n      );\r\n    } else {\r\n      if (this.hasNotEmptyClass) {\r\n        let classes = this.notEmptyClass.split(\" \");\r\n        classes.forEach(klass => this.element.classList.add(klass));\r\n      }\r\n      if (this.hasEmptyClass) {\r\n        let classes = this.emptyClass.split(\" \");\r\n        classes.forEach(klass => this.element.classList.remove(klass));\r\n      }\r\n      this.element.dispatchEvent(\r\n        new CustomEvent(\"dom:not-empty\", {\r\n          bubbles: true,\r\n          cancelable: true,\r\n          detail: {\r\n            count: children.length,\r\n          },\r\n        }),\r\n      );\r\n    }\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class EnableInputsController extends BaseController {\r\n\r\n  static targets = [\"enabler\", \"enable\"];\r\n\r\n  static values = {\r\n    clear: Boolean,\r\n  };\r\n\r\n  declare readonly hasEnablerTarget: boolean;\r\n  declare readonly enablerTarget: HTMLInputElement;\r\n  declare readonly enableTargets: Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\r\n  declare readonly clearValue: boolean;\r\n  declare readonly hasClearValue: boolean;\r\n\r\n  connect() {\r\n    this.toggle();\r\n  }\r\n\r\n  toggle() {\r\n    if (this.hasEnablerTarget && this.enablerTarget.checked) {\r\n      this.enableInputs();\r\n    } else {\r\n      this.disableInputs();\r\n    }\r\n  }\r\n\r\n  disableInputs() {\r\n    let shouldClear = this.hasClearValue && this.clearValue;\r\n    this.enableTargets.forEach((el, _) => {\r\n      if (shouldClear) {\r\n        el.value = \"\";\r\n      }\r\n      el.disabled = true;\r\n    });\r\n  }\r\n\r\n  enableInputs() {\r\n    this.enableTargets.forEach((el, _) => {\r\n      el.disabled = false;\r\n    });\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class FallbackImageController extends BaseController {\r\n\r\n  static values = {placeholder: String};\r\n\r\n  declare readonly placeholderValue: string;\r\n  declare readonly hasPlaceholderValue: boolean;\r\n\r\n  connect() {\r\n    let element = this.element as HTMLImageElement;\r\n\r\n    element.onerror = () => {\r\n      if (this.hasPlaceholderValue) {\r\n        element.src = this.placeholderValue;\r\n      } else {\r\n        element.style.display = \"none\";\r\n      }\r\n    };\r\n  }\r\n\r\n}\r\n","import {useIntersection} from \"stimulus-use\";\nimport {IntersectionOptions} from \"stimulus-use/dist/use-intersection/use-intersection\";\nimport {AsyncBlockController} from \"./async_block_controller\";\n\nexport class LazyBlockController extends AsyncBlockController {\n\n  declare observe: () => void;\n  declare unobserve: () => void;\n  declare options: IntersectionOptions;\n  declare isVisible: boolean;\n  declare disappear: () => void;\n\n  connect() {\n    let element = this.element;\n    this.options = {element, threshold: 0.3};\n\n    if (\"IntersectionObserver\" in window) {\n      [this.observe, this.unobserve] = useIntersection(this, this.options);\n    } else {\n      // Client doesn't support intersection observer, fallback to pre-loading\n      this.loadContent();\n    }\n  }\n\n  appear(entry: IntersectionObserverEntry) {\n    let element = this.element as HTMLImageElement;\n    if (element.src !== \"\") {\n      return;\n    }\n    if (entry.target === element && entry.isIntersecting) {\n      this.loadContent();\n      if (this.unobserve) {\n        this.unobserve();\n      }\n    }\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class LimitedSelectionCheckboxesController extends BaseController {\r\n\r\n  static targets = [\"input\", \"error\"];\r\n  static values = {max: Number, message: String};\r\n\r\n  declare readonly hasErrorTarget: boolean;\r\n  declare readonly errorTarget: HTMLElement;\r\n  declare readonly inputTargets: HTMLInputElement[];\r\n  declare readonly maxValue: number;\r\n  declare readonly messageValue: string;\r\n\r\n  maxSelections = 0;\r\n\r\n  boundHandleInputs = this.handleInputs.bind(this);\r\n\r\n  connect() {\r\n    this.inputTargets.forEach((el) => el.addEventListener(\"change\", this.boundHandleInputs));\r\n  }\r\n\r\n  disconnect() {\r\n    this.inputTargets.forEach((el) => el.removeEventListener(\"change\", this.boundHandleInputs));\r\n  }\r\n\r\n  handleInputs(event: Event) {\r\n    let tickedInputs = this.inputTargets.reduce((previousValue, el) => el.checked ? previousValue + 1 : previousValue, 0);\r\n    let target = event.target as HTMLInputElement;\r\n    if (tickedInputs > this.maxSelections) {\r\n      event.preventDefault();\r\n      target.checked = false;\r\n      target.dispatchEvent(new CustomEvent(\"change\", {bubbles: true, cancelable: true}));\r\n      target.dispatchEvent(new CustomEvent(\"limited-selection:too-many\", {bubbles: true, cancelable: true, detail: {target}}));\r\n      if (this.hasErrorTarget) {\r\n        this.errorTarget.innerHTML = this.messageValue;\r\n      }\r\n    } else {\r\n      target.dispatchEvent(new CustomEvent(\"limited-selection:selection\", {bubbles: true, cancelable: true, detail: {target}}));\r\n      if (this.hasErrorTarget) {\r\n        this.errorTarget.innerHTML = \"\";\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class NestedFormController extends BaseController {\r\n  static targets = ['target', 'template'];\r\n  static values = {\r\n    insertMode: String,\r\n    wrapperClass: String,\r\n  };\r\n\r\n  declare readonly targetTarget: HTMLElement;\r\n  declare readonly templateTarget: HTMLTemplateElement | HTMLScriptElement;\r\n\r\n  declare readonly wrapperClassValue: string;\r\n  declare readonly hasWrapperSelectorValue: boolean;\r\n  declare readonly insertModeValue: InsertPosition;\r\n  declare readonly hasInsertModeValue: boolean;\r\n\r\n  get wrapperClass() {\r\n    return this.hasWrapperSelectorValue ? this.wrapperClassValue : 'nested-fields';\r\n  }\r\n\r\n  get insertMode(): InsertPosition {\r\n    return this.hasInsertModeValue ? this.insertModeValue : 'beforeend';\r\n  }\r\n\r\n  connect() {\r\n    this.checkStructure();\r\n  }\r\n\r\n  add(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    const content = this.templateTarget.innerHTML.replace(/NEW_RECORD/g, this.generateID());\r\n    this.targetTarget.insertAdjacentHTML(this.insertMode, content);\r\n  }\r\n\r\n  remove(event: Event) {\r\n    event.preventDefault();\r\n    const wrapper: HTMLElement | null = (event.target as HTMLElement).closest(this.wrapperClass);\r\n    if (wrapper == null) {\r\n      throw new Error(`#remove was clicked from outside of a child record. Could not find an ancestor with class ${this.wrapperClass}`);\r\n    }\r\n\r\n    if (wrapper.dataset.newRecord === 'true') {\r\n      wrapper.remove();\r\n    } else {\r\n      wrapper.style.display = 'none';\r\n      let destroyInput = wrapper.querySelector(\"input[name*='_destroy']\") as HTMLInputElement | null;\r\n      if (destroyInput == null) {\r\n        throw new Error(`Could not find a hidden input with name '_destroy'. NestedForm cannot remove an already persisted record without it.`);\r\n      }\r\n\r\n      destroyInput.value = \"1\";\r\n    }\r\n  }\r\n\r\n  generateID(): string {\r\n    return new Date().getTime().toString() + Math.random();\r\n  }\r\n\r\n  private checkStructure() {\r\n    let template = this.templateTarget.innerHTML;\r\n\r\n    if (template.indexOf('NEW_RECORD')) {\r\n      throw new Error(\"Could not find 'NEW_RECORD' in the provided template. Please make sure you've passed `child_index: 'NEW_RECORD'` to `fields_for`\")\r\n    }\r\n  }\r\n}","import {BaseController} from \"./base_controller\";\r\n\r\nexport class PasswordConfirmController extends BaseController {\r\n\r\n  static targets = [\"password\"];\r\n  static classes = [\"error\"];\r\n\r\n  declare readonly passwordTargets: HTMLInputElement[];\r\n\r\n  declare readonly errorClass: string;\r\n  declare readonly hasErrorClass: boolean;\r\n\r\n  private boundCheckPasswordsMatch = this.checkPasswordsMatch.bind(this);\r\n\r\n  connect() {\r\n    this.passwordTargets.forEach((el) => el.addEventListener(\"change\", this.boundCheckPasswordsMatch));\r\n  }\r\n\r\n  disconnect() {\r\n    this.passwordTargets.forEach((el) => el.removeEventListener(\"change\", this.boundCheckPasswordsMatch));\r\n  }\r\n\r\n  private allPasswordsMatch() {\r\n    let values = new Set(this.passwordTargets.map(el => el.value));  // Create a unique set of the password values\r\n    return values.has(\"\") || values.size == 1; // If any of the passwords are still blank, or there is only one distinct password value (i.e. they all are the same)\r\n  }\r\n\r\n  private checkPasswordsMatch() {\r\n    if (this.allPasswordsMatch()) {\r\n      this.element.dispatchEvent(new CustomEvent(\"password-confirm:match\"));\r\n      if (this.hasErrorClass) {\r\n        this.passwordTargets.forEach(el => el.classList.remove(this.errorClass));\r\n      }\r\n    } else {\r\n      this.element.dispatchEvent(new CustomEvent(\"password-confirm:no-match\"));\r\n      if (this.hasErrorClass) {\r\n        this.passwordTargets.forEach(el => el.classList.add(this.errorClass));\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class PasswordPeekController extends BaseController {\r\n\r\n  static targets = [\"password\"];\r\n\r\n  declare readonly passwordTarget: HTMLInputElement;\r\n\r\n\r\n  peak(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    this.passwordTarget.type = \"text\";\r\n  }\r\n\r\n  hide(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    this.passwordTarget.type = \"password\";\r\n  }\r\n\r\n  toggle(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    if (this.passwordTarget.type === \"password\") {\r\n      this.peak();\r\n    } else {\r\n      this.hide();\r\n    }\r\n  }\r\n}\r\n","import {useDebounce, useWindowResize} from \"stimulus-use\";\nimport {WindowResizePayload} from \"stimulus-use/dist/use-window-resize/use-window-resize\";\nimport {BaseController} from \"./base_controller\";\n\ninterface ResponsiveIframeMessage {\n  name: string,\n  height: number,\n}\n\nexport class ResponsiveIframeWrapperController extends BaseController {\n\n  boundMessageReceived = this.messageReceived.bind(this);\n\n  connect() {\n    window.addEventListener(\"message\", this.boundMessageReceived);\n  }\n\n  disconnect() {\n    window.removeEventListener(\"message\", this.boundMessageReceived);\n  }\n\n  messageReceived(message: MessageEvent<ResponsiveIframeMessage>) {\n    let data = message.data;\n    if (data.hasOwnProperty(\"name\") && data.name === \"iframe-body\" && data.hasOwnProperty(\"height\")) {\n      this.resize(data.height);\n    }\n  }\n\n  resize(height: number) {\n    (this.element as HTMLIFrameElement).style.height = `${height}px`;\n  }\n\n}\n\nexport class ResponsiveIframeBodyController extends BaseController {\n\n  static debounces = [\"postUpdate\"];\n\n  declare observe: () => void;\n  declare unobserve: () => void;\n\n  connect() {\n    // If this Window is inside a frame\n    if (window.self !== window.top) {\n      useWindowResize(this);\n      useDebounce(this, {});\n      this.postUpdate();\n    } else {\n      // Not an iframe\n    }\n  }\n\n  windowResize(payload: WindowResizePayload) {\n    this.postUpdate();\n  };\n\n  postUpdate() {\n    let payload: ResponsiveIframeMessage = {name: \"iframe-body\", height: this.getHeight()};\n    window.parent.postMessage(\n      payload,\n      \"*\",\n    );\n  }\n\n  getHeight(): number {\n    const body = document.body;\n    const html = document.documentElement;\n\n    // Get the largest height out of body and html's various height measurements\n    return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n  }\n\n}\n","import camelCase from \"lodash.camelcase\";\r\nimport {BaseController} from \"../base_controller\";\r\n\r\nexport class EphemeralController extends BaseController {\r\n\r\n  cleanupSelf() {\r\n    this.cleanup(this.element as HTMLElement);\r\n  }\r\n\r\n  cleanup(element: HTMLElement) {\r\n    element.dataset.controller = element.dataset.controller?.replaceAll(new RegExp(`(\\s|^)${this.identifier}(\\s|$)`, \"g\"), \"\") || \"\";\r\n    if (element.dataset.controller == \"\") {\r\n      // If there are no controllers left, remove the attribute\r\n      delete element.dataset.controller;\r\n    }\r\n\r\n    let substringIdentifierValueRegex = new RegExp(`(\\s|^)${this.identifier}\\\\..+?(\\s|$)`, \"g\");\r\n    element.dataset.target = element.dataset.target?.replaceAll(substringIdentifierValueRegex, \"\") || \"\";\r\n    delete element.dataset[camelCase(`${this.identifier}-target`)];\r\n    if (element.dataset.target == \"\") {\r\n      // If there are no targets left, remove the attribute\r\n      delete element.dataset.target;\r\n    }\r\n\r\n    element.dataset.action = element.dataset.target?.replaceAll(substringIdentifierValueRegex, \"\") || \"\";\r\n    delete element.dataset[camelCase(`${this.identifier}-action`)];\r\n    if (element.dataset.action == \"\") {\r\n      // If there are no actions left, remove the attribute\r\n      delete element.dataset.action;\r\n    }\r\n\r\n    // @ts-ignore\r\n    let values = this.constructor.values;\r\n    if (values) {\r\n      Object.keys(values).forEach(val => delete element.dataset[camelCase(`${this.identifier}-${val}-value`)]);\r\n    }\r\n\r\n    // @ts-ignore\r\n    let classes = this.constructor.classes;\r\n    if (classes) {\r\n      Object.keys(classes).forEach(val => delete element.dataset[camelCase(`${this.identifier}-${val}-class`)]);\r\n    }\r\n  }\r\n\r\n}\r\n","const smoothSupported = \"scrollBehavior\" in document.documentElement.style;\r\nlet smoothPolyfilled: boolean;\r\n\r\nexport async function scrollToElement(element: Element, {behavior = \"smooth\", block = \"start\", inline = \"nearest\"}: ScrollIntoViewOptions = {}) {\r\n  if (behavior == \"smooth\" && !smoothSupported) {\r\n    await polyfillSmooth();\r\n  }\r\n  element.scrollIntoView({behavior, block, inline});\r\n}\r\n\r\nasync function polyfillSmooth() {\r\n  const {polyfill} = await import(/* webpackChunkName: \"smoothscroll-polyfill\" */ \"smoothscroll-polyfill\");\r\n  if (smoothPolyfilled) {\r\n    return;\r\n  }\r\n  smoothPolyfilled = true;\r\n  polyfill();\r\n}\r\n\r\nexport function getScrollParent(node: HTMLElement | null): HTMLElement | null {\r\n  if (!node) {\r\n    return null;\r\n  }\r\n  const overflowY = getComputedStyle(node).overflowY;\r\n  const isScrollable = overflowY !== \"visible\" && overflowY !== \"hidden\";\r\n\r\n  if (isScrollable && node.scrollHeight >= node.clientHeight) {\r\n    return node;\r\n  }\r\n\r\n  return getScrollParent(node.parentElement) || document.body;\r\n}\r\n","import {EphemeralController} from \"./utilities/ephemeral_controller\";\r\nimport {scrollToElement} from \"./utilities/scroll\";\r\n\r\nexport class ScrollIntoFocusController extends EphemeralController {\r\n\r\n  static values = {\r\n    behavior: String,\r\n    block: String,\r\n    inline: String,\r\n  };\r\n\r\n  declare behaviorValue: ScrollBehavior;\r\n  declare hasBehaviorValue: boolean;\r\n  declare blockValue: ScrollLogicalPosition;\r\n  declare hasBlockValue: boolean;\r\n  declare inlineValue: ScrollLogicalPosition;\r\n  declare hasInlineValue: boolean;\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      // Attempt smooth scrolling, with polyfill\r\n      scrollToElement(\r\n        this.element,\r\n        {\r\n          behavior: this.hasBehaviorValue ? this.behaviorValue : \"smooth\",\r\n          block: this.hasBlockValue ? this.blockValue : \"center\",\r\n          inline: this.hasInlineValue ? this.inlineValue : \"center\",\r\n        },\r\n      ).catch(() => this.element.scrollIntoView()); // Fallback to snap-scrolling\r\n      this.cleanupSelf();\r\n    });\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\r\nimport {getScrollParent, scrollToElement} from \"./utilities/scroll\";\r\n\r\nexport class ScrollToBottomController extends BaseController {\r\n\r\n  static values = {\r\n    mode: String,\r\n  };\r\n\r\n  declare modeValue: \"nearest\" | \"document\";\r\n  declare hasModeValue: boolean;\r\n\r\n\r\n  scroll(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    let mode = this.hasModeValue ? this.modeValue : \"document\";\r\n    let target: null | HTMLElement;\r\n    if (mode == \"document\") {\r\n      target = document.body;\r\n    } else {\r\n      target = getScrollParent(this.element as HTMLElement);\r\n    }\r\n    if (target == null) {\r\n      return;\r\n    }\r\n    scrollToElement(target!, {behavior: \"smooth\", block: \"end\"}).catch(() => target!.scrollIntoView(false));\r\n  }\r\n\r\n}\r\n\r\n","import {BaseController} from \"./base_controller\";\r\nimport {scrollToElement} from \"./utilities/scroll\";\r\n\r\nexport class ScrollToController extends BaseController {\r\n\r\n  static values = {\r\n    selector: String,\r\n    behavior: String,\r\n    block: String,\r\n    inline: String,\r\n  };\r\n\r\n  declare selectorValue: string;\r\n  declare behaviorValue: ScrollBehavior;\r\n  declare hasBehaviorValue: boolean;\r\n  declare blockValue: ScrollLogicalPosition;\r\n  declare hasBlockValue: boolean;\r\n  declare inlineValue: ScrollLogicalPosition;\r\n  declare hasInlineValue: boolean;\r\n\r\n\r\n  scroll() {\r\n    let target = document.querySelector(this.selectorValue);\r\n    if (!target) {\r\n      console.warn(`Could not find target for '${this.selectorValue}'`);\r\n      return;\r\n    }\r\n\r\n    scrollToElement(\r\n      target!,\r\n      {\r\n        behavior: this.hasBehaviorValue ? this.behaviorValue : \"smooth\",\r\n        block: this.hasBlockValue ? this.blockValue : \"center\",\r\n        inline: this.hasInlineValue ? this.inlineValue : \"center\",\r\n      },\r\n    ).catch(() => target!.scrollIntoView()); // Fallback to snap-scrolling\r\n  }\r\n\r\n}\r\n","import {BaseController} from \"./base_controller\";\nimport {getScrollParent, scrollToElement} from \"./utilities/scroll\";\n\nexport class ScrollToTopController extends BaseController {\n\n  static values = {\n    mode: String,\n  };\n\n  declare modeValue: \"nearest\" | \"document\";\n  declare hasModeValue: boolean;\n\n\n  scroll(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    let mode = this.hasModeValue ? this.modeValue : \"document\";\n    let target: null | HTMLElement;\n    if (mode == \"document\") {\n      target = document.body;\n    } else {\n      target = getScrollParent(this.element as HTMLElement);\n    }\n    if (target == null) {\n      return;\n    }\n    scrollToElement(target!, {behavior: \"smooth\", block: \"start\"}).catch(() => target!.scrollIntoView(false));\n  }\n\n}\n\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class SelfDestructController extends BaseController {\r\n\r\n  static values = {seconds: Number};\r\n\r\n  declare readonly secondsValue: number;\r\n  timeout: null | ReturnType<typeof setTimeout> = null;\r\n\r\n  connect() {\r\n    requestAnimationFrame(() => {\r\n      // Only start countdown on first paint\r\n      this.timeout = setTimeout(() => this.element.remove(), this.secondsValue * 1000);\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.timeout) {\r\n      clearTimeout(this.timeout);\r\n    }\r\n  }\r\n\r\n}\r\n","import {EphemeralController} from \"./utilities/ephemeral_controller\";\r\n\r\nexport class TeleportController extends EphemeralController {\r\n\r\n  static values = {target: String, insert: String, immediate: Boolean};\r\n\r\n  declare readonly immediateValue: boolean;\r\n  declare readonly hasImmediateValue: boolean;\r\n  declare readonly targetValue: string;\r\n  declare readonly hasInsertValue: boolean;\r\n  declare readonly insertValue: InsertPosition | \"replaceOuter\" | \"replaceInner\" | \"prepend\" | \"append\";\r\n\r\n  connect() {\r\n    if (!this.hasInsertValue) {\r\n      throw new Error(\"`insert` value was not specified\");\r\n    }\r\n\r\n    requestAnimationFrame(() => {\r\n      if (this.hasImmediateValue && this.immediateValue) {\r\n        this.execute();\r\n      }\r\n    });\r\n  }\r\n\r\n  execute(event?: Event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    let destination = document.querySelector(this.targetValue);\r\n\r\n    if (destination == null) {\r\n      this.element.dispatchEvent(new CustomEvent(\"teleport:error\", {bubbles: true, cancelable: true}));\r\n      return;\r\n    }\r\n\r\n    let copy = this.element.cloneNode(true) as HTMLElement;\r\n    this.cleanup(copy);\r\n\r\n    switch (this.insertValue) {\r\n      case \"beforebegin\":\r\n      case \"beforeend\":\r\n      case \"afterend\":\r\n      case \"afterbegin\":\r\n        destination.insertAdjacentHTML(this.insertValue, copy.outerHTML);\r\n        break;\r\n      case \"replaceOuter\":\r\n        destination.outerHTML = copy.outerHTML;\r\n        break;\r\n      case \"replaceInner\":\r\n        destination.innerHTML = copy.outerHTML;\r\n        break;\r\n      case \"prepend\":\r\n        destination.insertAdjacentHTML(\"afterbegin\", copy.outerHTML);\r\n        break;\r\n      case \"append\":\r\n        destination.insertAdjacentHTML(\"beforeend\", copy.outerHTML);\r\n        break;\r\n      default:\r\n        throw new Error(\"`insert` value was not specified\");\r\n\r\n    }\r\n    this.element.remove();\r\n  }\r\n\r\n}\r\n","import {useClickOutside, useHover} from \"stimulus-use\";\nimport {BaseController} from \"./base_controller\";\n\nexport type ToggleClassMode = \"on\" | \"off\" | \"toggle\"\n\nexport class ToggleClassController extends BaseController {\n\n  static targets = [\"toggle\"];\n  static values = {\n    class: String,\n    mouseEnter: String,\n    mouseLeave: String,\n    clickAway: Boolean,\n    initial: String,\n  };\n\n  declare readonly toggleTargets: HTMLElement[];\n\n  declare readonly classValue: string;\n  declare readonly hasClassValue: boolean;\n\n  declare readonly mouseEnterValue: ToggleClassMode;\n  declare readonly hasMouseEnterValue: boolean;\n\n  declare readonly mouseLeaveValue: ToggleClassMode;\n  declare readonly hasMouseLeaveValue: boolean;\n\n  declare readonly clickAwayValue: boolean;\n  declare readonly hasClickAwayValue: boolean;\n\n  declare readonly initialValue: \"on\" | \"off\";\n  declare readonly hasInitialValue: boolean;\n\n  connect() {\n    if (!this.hasClassValue) {\n      throw new Error(\"data-toggle-class-class-value must not be empty\");\n    }\n\n    if (this.hasMouseEnterValue || this.hasMouseLeaveValue) {\n      useHover(this);\n    }\n\n    if (this.hasClickAwayValue && this.clickAwayValue) {\n      useClickOutside(this);\n    }\n\n    requestAnimationFrame(() => {\n      if (this.hasInitialValue) {\n        if (this.initialValue === \"on\") {\n          this.toggleTargets.forEach((target) => this.elementOn(target));\n        } else {\n          this.toggleTargets.forEach((target) => this.elementOff(target));\n        }\n      }\n    });\n  }\n\n  clickOutside() {\n    this.toggleTargets.forEach((target) => {\n      if (this.elementWasToggled(target)) {\n        this.elementToggleStatus(target);\n        this.elementToggle(target);\n      }\n    });\n  }\n\n  mouseEnter() {\n    if (this.hasMouseEnterValue) {\n      switch (this.mouseEnterValue) {\n        case \"on\":\n          this.on();\n          break;\n        case \"off\":\n          this.off();\n          break;\n        case \"toggle\":\n          this.toggle();\n          break;\n      }\n    }\n    return {};\n  }\n\n  mouseLeave() {\n    if (this.hasMouseLeaveValue) {\n      switch (this.mouseLeaveValue) {\n        case \"on\":\n          this.on();\n          break;\n        case \"off\":\n          this.off();\n          break;\n        case \"toggle\":\n          this.toggle();\n          break;\n      }\n    }\n    return {};\n  }\n\n  on(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementOn(target);\n    });\n  }\n\n  off(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementOff(target);\n    });\n  }\n\n  toggle(event?: Event) {\n    this.toggleTargets.forEach((target) => {\n      this.elementToggleStatus(target);\n      this.elementToggle(target);\n    });\n  }\n\n  private elementWasToggled(el: HTMLElement): boolean {\n    return el.dataset.toggled == \"true\";\n  }\n\n  private elementToggleStatus(el: HTMLElement) {\n    if (this.elementWasToggled(el)) {\n      delete el.dataset.toggled;\n    } else {\n      el.dataset.toggled = \"true\";\n    }\n  }\n\n  private elementToggle(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass));\n  }\n\n  private elementOn(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass, true));\n  }\n\n  private elementOff(el: HTMLElement) {\n    let classes = this.classValue.split(\" \");\n    classes.forEach((klass) => el.classList.toggle(klass, false));\n  }\n\n}\n","import {BaseController} from \"./base_controller\";\nimport {isHTMLLinkElement} from \"./utilities/elements\";\nimport {isTurboFrame} from \"./utilities/turbo\";\n\nexport class TurboFrameRCController extends BaseController {\n\n  static values = {\n    frameId: String,\n    src: String,\n    loadingMessage: String,\n  };\n\n  declare readonly frameIdValue: string;\n  declare readonly srcValue: string;\n  declare readonly hasSrcValue: boolean;\n  declare readonly loadingMessageValue: string;\n  declare readonly hasLoadingMessageValue: boolean;\n\n  toggle(event?: Event | null) {\n    if (event) {\n      event.preventDefault();\n    }\n    let frame = this.getFrame();\n    let frameSrc = frame.src;\n    if (frameSrc == null || frameSrc !== this.getSrc()) {\n      this.setSrc();\n    } else {\n      this.clear();\n    }\n  }\n\n  setSrc(event?: Event | null) {\n    if (event) {\n      event.preventDefault();\n    }\n    let frame = this.getFrame();\n    if (this.hasLoadingMessageValue) {\n      frame.innerHTML = this.loadingMessageValue;\n    }\n\n    frame.src = this.getSrc();\n  }\n\n  clear(event?: Event | null) {\n    if (event) {\n      event.preventDefault();\n    }\n    let frame = this.getFrame();\n    frame.src = \"\";\n    frame.innerHTML = \"\";\n  }\n\n  private getFrame(): TurboFrame {\n    let frame = document.getElementById(`${this.frameIdValue}`);\n    if (frame == null) {\n      throw new Error(`Could not find frame with ID '${this.frameIdValue}'`);\n    }\n    if (!isTurboFrame(frame)) {\n      throw new Error(`Element targeted by ID '${this.frameIdValue}'`);\n    } else {\n      return frame;\n    }\n  }\n\n  private getSrc(): string {\n    let element = this.element as HTMLElement;\n    if (this.hasSrcValue) {\n      return this.srcValue;\n    } else if (isHTMLLinkElement(element)) {\n      return element.href;\n    } else {\n      throw new Error(\"No link given to drive frame to\");\n    }\n  }\n\n}\n","export function isTurboFrame(element: HTMLElement): element is TurboFrame {\r\n  return element.nodeName == \"TURBO-FRAME\";\r\n}\r\n","export function isHTMLLinkElement(element: Element): element is HTMLLinkElement {\n  return element.nodeName == \"A\";\n}\n","import {BaseController} from \"./base_controller\";\r\n\r\nexport class WordCountController extends BaseController {\r\n\r\n  static targets = [\"input\", \"output\"];\r\n  static values = {min: Number, max: Number};\r\n  static classes = [\"error\"];\r\n\r\n  declare readonly inputTarget: HTMLInputElement | HTMLTextAreaElement;\r\n  declare readonly outputTarget: HTMLElement;\r\n  declare minValue: number;\r\n  declare hasMinValue: boolean;\r\n  declare maxValue: number;\r\n  declare hasMaxValue: boolean;\r\n  declare errorClass: string;\r\n  declare hasErrorClass: boolean;\r\n\r\n  boundHandler = this.updateWordCount.bind(this);\r\n\r\n  connect() {\r\n    this.updateWordCount();\r\n    this.inputTarget.addEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  disconnect() {\r\n    this.inputTarget.removeEventListener(\"input\", this.boundHandler);\r\n  }\r\n\r\n  updateWordCount() {\r\n    let wordCount = 0;\r\n    let textAreaValue = this.inputTarget.value;\r\n    let matches = textAreaValue.match(/\\S+/g);\r\n    wordCount = (matches && matches.length) || 0;\r\n    this.outputTarget.innerText = wordCount.toString();\r\n    if (this.hasErrorClass) {\r\n      if (this.isValidCount(wordCount)) {\r\n        this.outputTarget.classList.remove(this.errorClass);\r\n      } else {\r\n        this.outputTarget.classList.add(this.errorClass);\r\n      }\r\n    }\r\n  }\r\n\r\n  isValidCount(count: number) {\r\n    let min = 0;\r\n    let max = 99999;\r\n\r\n    if (this.hasMinValue) {\r\n      min = this.minValue;\r\n    }\r\n\r\n    if (this.hasMaxValue) {\r\n      max = this.maxValue;\r\n    }\r\n\r\n    return count >= min && count <= max;\r\n  }\r\n\r\n}\r\n"],"names":["BaseController","Controller","constructor","context","super","Proxy","this","get","obj","prop","returnVal","Reflect","self","test","logProperty","toString","apply","target","thisArg","argArray","log","args","functionName","application","debug","logger","console","groupCollapsed","identifier","element","groupEnd","AsyncBlockController","connect","loadContent","el","hasReplaceTarget","replaceTarget","fetch","endpointValue","then","response","text","html","newEl","document","createElement","innerHTML","replaceWith","event","CustomEvent","detail","dispatchEvent","catch","err","finally","endpoint","String","AutoSubmitFormController","handler","bind","querySelectorAll","forEach","addEventListener","boundHandler","disconnect","removeEventListener","e","bubbles","cancelable","method","controller","methodName","composeEventName","name","eventPrefix","composedName","extendedEvent","type","composed","Object","assign","originalEvent","defaultOptions","events","onlyVisible","StimulusUse","[object Object]","options","_a","_b","_c","controllerId","stimulusUseDebug","id","dataset","controllerInitialize","initialize","controllerConnect","controllerDisconnect","UseHover","observe","targetElement","onEnter","onLeave","unobserve","call","hover","enhanceController","UseMutation","observer","error","handleError","mutation","entries","MutationObserver","useWindowResize","callback","innerWidth","innerHeight","window","payload","height","Infinity","width","debounce","fn","wait","timeoutId","arguments","clearTimeout","setTimeout","AutosizeController","style","resize","boxSizing","requestAnimationFrame","windowResize","autosize","offset","offsetHeight","clientHeight","scrollHeight","CharCountController","updateCharCount","inputTarget","charCount","value","length","outputTarget","innerText","hasErrorClass","isValidCount","classList","remove","errorClass","add","count","min","max","hasMinValue","minValue","hasMaxValue","maxValue","Number","CheckboxSelectAllController","checked","checkboxTargets","filter","checkbox","unchecked","toggle","refresh","hasCheckboxAllTarget","selectAllTarget","preventDefault","checkboxesCount","checkboxesCheckedCount","indeterminate","ClipboardController","supported","queryCommandSupported","hasRemoveUnusedValue","removeUnusedValue","hasFallbackTarget","fallbackTarget","hasCopyTarget","copyTarget","select","sourceTarget","copy","execCommand","removeUnused","Boolean","ConfirmNavigationController","confirmMessage","messageValue","onbeforeunload","handlePopstate","message","DebugController","testTargets","DetectDirtyController","initialValue","isInputElement","isCheckable","restore","setAttribute","removeAttribute","tagName","DisableInputsController","hasDisablerTarget","disablerTarget","disableInputs","enableInputs","shouldClear","hasClearValue","clearValue","disableTargets","_","disabled","clear","DismissableController","dismiss","EmptyDomController","useMutation","childList","checkEmpty","mutate","children","hasScopeSelectorValue","scopeSelectorValue","hasNotEmptyClass","notEmptyClass","split","klass","hasEmptyClass","emptyClass","scopeSelector","EnableInputsController","hasEnablerTarget","enablerTarget","enableTargets","FallbackImageController","onerror","hasPlaceholderValue","src","placeholderValue","display","placeholder","LazyBlockController","threshold","IntersectionObserver","entry","isIntersecting","isVisible","eventName","appearEvent","dispatchAppear","disappearEvent","dispatchDisappear","useIntersection","appear","LimitedSelectionCheckboxesController","handleInputs","inputTargets","boundHandleInputs","tickedInputs","reduce","previousValue","maxSelections","hasErrorTarget","errorTarget","NestedFormController","wrapperClass","hasWrapperSelectorValue","wrapperClassValue","insertMode","hasInsertModeValue","insertModeValue","checkStructure","content","templateTarget","replace","generateID","targetTarget","insertAdjacentHTML","wrapper","closest","Error","newRecord","destroyInput","querySelector","Date","getTime","Math","random","indexOf","PasswordConfirmController","checkPasswordsMatch","passwordTargets","boundCheckPasswordsMatch","allPasswordsMatch","values","Set","map","has","size","PasswordPeekController","peak","passwordTarget","hide","ResponsiveIframeWrapperController","messageReceived","boundMessageReceived","data","hasOwnProperty","ResponsiveIframeBodyController","top","debounces","func","postUpdate","getHeight","parent","postMessage","body","documentElement","EphemeralController","cleanupSelf","cleanup","replaceAll","RegExp","substringIdentifierValueRegex","camelCase","action","keys","val","classes","smoothSupported","smoothPolyfilled","scrollToElement","behavior","block","inline","async","polyfill","polyfillSmooth","scrollIntoView","getScrollParent","node","overflowY","getComputedStyle","parentElement","ScrollIntoFocusController","hasBehaviorValue","behaviorValue","hasBlockValue","blockValue","hasInlineValue","inlineValue","ScrollToBottomController","scroll","hasModeValue","modeValue","mode","ScrollToController","selectorValue","warn","selector","ScrollToTopController","SelfDestructController","timeout","secondsValue","seconds","TeleportController","hasInsertValue","hasImmediateValue","immediateValue","execute","destination","targetValue","cloneNode","insertValue","outerHTML","insert","immediate","ToggleClassController","hasClassValue","hasMouseEnterValue","hasMouseLeaveValue","useHover","hasClickAwayValue","clickAwayValue","onEvent","contains","rect","getBoundingClientRect","windowHeight","windowWidth","clientWidth","left","isElementInViewport","clickOutside","clickOutsideEvent","useClickOutside","hasInitialValue","toggleTargets","elementOn","elementOff","elementWasToggled","elementToggleStatus","elementToggle","mouseEnter","mouseEnterValue","on","off","mouseLeave","mouseLeaveValue","toggled","classValue","class","clickAway","initial","TurboFrameRCController","frameSrc","getFrame","getSrc","setSrc","frame","hasLoadingMessageValue","loadingMessageValue","getElementById","frameIdValue","nodeName","hasSrcValue","srcValue","isHTMLLinkElement","href","frameId","loadingMessage","WordCountController","updateWordCount","wordCount","matches","match"],"mappings":"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"}